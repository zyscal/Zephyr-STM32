
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

08000000 <_vector_table>:
 8000000:	200039d8 	.word	0x200039d8
 8000004:	08009ca5 	.word	0x08009ca5
 8000008:	080158c5 	.word	0x080158c5
 800000c:	08009b4d 	.word	0x08009b4d
 8000010:	08009b4d 	.word	0x08009b4d
 8000014:	08009b4d 	.word	0x08009b4d
 8000018:	08009b4d 	.word	0x08009b4d
 800001c:	08009b4d 	.word	0x08009b4d
 8000020:	08009b4d 	.word	0x08009b4d
 8000024:	08009b4d 	.word	0x08009b4d
 8000028:	08009b4d 	.word	0x08009b4d
 800002c:	08009a51 	.word	0x08009a51
 8000030:	08009b4d 	.word	0x08009b4d
 8000034:	08009b4d 	.word	0x08009b4d
 8000038:	08009a09 	.word	0x08009a09
 800003c:	0800980d 	.word	0x0800980d

08000040 <_irq_vector_table>:
 8000040:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 8000050:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 8000060:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 8000070:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 8000080:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 8000090:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 80000a0:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 80000b0:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 80000c0:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 80000d0:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 80000e0:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 80000f0:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 8000100:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 8000110:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 8000120:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 8000130:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 8000140:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 8000150:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 8000160:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 8000170:	08009c7d 08009c7d 08009c7d 08009c7d     }...}...}...}...
 8000180:	08009c7d 08009c7d                       }...}...

Disassembly of section _TEXT_SECTION_NAME_2:

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__ieee754_acos>:
 8000230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000234:	ec55 4b10 	vmov	r4, r5, d0
 8000238:	49b7      	ldr	r1, [pc, #732]	; (8000518 <__ieee754_acos+0x2e8>)
 800023a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800023e:	428b      	cmp	r3, r1
 8000240:	dd1b      	ble.n	800027a <__ieee754_acos+0x4a>
 8000242:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8000246:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800024a:	4323      	orrs	r3, r4
 800024c:	d109      	bne.n	8000262 <__ieee754_acos+0x32>
 800024e:	2d00      	cmp	r5, #0
 8000250:	f300 8211 	bgt.w	8000676 <__ieee754_acos+0x446>
 8000254:	a196      	add	r1, pc, #600	; (adr r1, 80004b0 <__ieee754_acos+0x280>)
 8000256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800025a:	ec41 0b10 	vmov	d0, r0, r1
 800025e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000262:	ee10 2a10 	vmov	r2, s0
 8000266:	462b      	mov	r3, r5
 8000268:	4620      	mov	r0, r4
 800026a:	4629      	mov	r1, r5
 800026c:	f001 f878 	bl	8001360 <__aeabi_dsub>
 8000270:	4602      	mov	r2, r0
 8000272:	460b      	mov	r3, r1
 8000274:	f001 fb56 	bl	8001924 <__aeabi_ddiv>
 8000278:	e7ef      	b.n	800025a <__ieee754_acos+0x2a>
 800027a:	49a8      	ldr	r1, [pc, #672]	; (800051c <__ieee754_acos+0x2ec>)
 800027c:	428b      	cmp	r3, r1
 800027e:	f300 8087 	bgt.w	8000390 <__ieee754_acos+0x160>
 8000282:	4aa7      	ldr	r2, [pc, #668]	; (8000520 <__ieee754_acos+0x2f0>)
 8000284:	4293      	cmp	r3, r2
 8000286:	f340 81f9 	ble.w	800067c <__ieee754_acos+0x44c>
 800028a:	ee10 2a10 	vmov	r2, s0
 800028e:	ee10 0a10 	vmov	r0, s0
 8000292:	462b      	mov	r3, r5
 8000294:	4629      	mov	r1, r5
 8000296:	f001 fa1b 	bl	80016d0 <__aeabi_dmul>
 800029a:	a387      	add	r3, pc, #540	; (adr r3, 80004b8 <__ieee754_acos+0x288>)
 800029c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002a0:	4606      	mov	r6, r0
 80002a2:	460f      	mov	r7, r1
 80002a4:	f001 fa14 	bl	80016d0 <__aeabi_dmul>
 80002a8:	a385      	add	r3, pc, #532	; (adr r3, 80004c0 <__ieee754_acos+0x290>)
 80002aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002ae:	f001 f859 	bl	8001364 <__adddf3>
 80002b2:	4632      	mov	r2, r6
 80002b4:	463b      	mov	r3, r7
 80002b6:	f001 fa0b 	bl	80016d0 <__aeabi_dmul>
 80002ba:	a383      	add	r3, pc, #524	; (adr r3, 80004c8 <__ieee754_acos+0x298>)
 80002bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002c0:	f001 f84e 	bl	8001360 <__aeabi_dsub>
 80002c4:	4632      	mov	r2, r6
 80002c6:	463b      	mov	r3, r7
 80002c8:	f001 fa02 	bl	80016d0 <__aeabi_dmul>
 80002cc:	a380      	add	r3, pc, #512	; (adr r3, 80004d0 <__ieee754_acos+0x2a0>)
 80002ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002d2:	f001 f847 	bl	8001364 <__adddf3>
 80002d6:	4632      	mov	r2, r6
 80002d8:	463b      	mov	r3, r7
 80002da:	f001 f9f9 	bl	80016d0 <__aeabi_dmul>
 80002de:	a37e      	add	r3, pc, #504	; (adr r3, 80004d8 <__ieee754_acos+0x2a8>)
 80002e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002e4:	f001 f83c 	bl	8001360 <__aeabi_dsub>
 80002e8:	4632      	mov	r2, r6
 80002ea:	463b      	mov	r3, r7
 80002ec:	f001 f9f0 	bl	80016d0 <__aeabi_dmul>
 80002f0:	a37b      	add	r3, pc, #492	; (adr r3, 80004e0 <__ieee754_acos+0x2b0>)
 80002f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002f6:	f001 f835 	bl	8001364 <__adddf3>
 80002fa:	4632      	mov	r2, r6
 80002fc:	463b      	mov	r3, r7
 80002fe:	f001 f9e7 	bl	80016d0 <__aeabi_dmul>
 8000302:	a379      	add	r3, pc, #484	; (adr r3, 80004e8 <__ieee754_acos+0x2b8>)
 8000304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000308:	4680      	mov	r8, r0
 800030a:	4689      	mov	r9, r1
 800030c:	4630      	mov	r0, r6
 800030e:	4639      	mov	r1, r7
 8000310:	f001 f9de 	bl	80016d0 <__aeabi_dmul>
 8000314:	a376      	add	r3, pc, #472	; (adr r3, 80004f0 <__ieee754_acos+0x2c0>)
 8000316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800031a:	f001 f821 	bl	8001360 <__aeabi_dsub>
 800031e:	4632      	mov	r2, r6
 8000320:	463b      	mov	r3, r7
 8000322:	f001 f9d5 	bl	80016d0 <__aeabi_dmul>
 8000326:	a374      	add	r3, pc, #464	; (adr r3, 80004f8 <__ieee754_acos+0x2c8>)
 8000328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800032c:	f001 f81a 	bl	8001364 <__adddf3>
 8000330:	4632      	mov	r2, r6
 8000332:	463b      	mov	r3, r7
 8000334:	f001 f9cc 	bl	80016d0 <__aeabi_dmul>
 8000338:	a371      	add	r3, pc, #452	; (adr r3, 8000500 <__ieee754_acos+0x2d0>)
 800033a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800033e:	f001 f80f 	bl	8001360 <__aeabi_dsub>
 8000342:	4632      	mov	r2, r6
 8000344:	463b      	mov	r3, r7
 8000346:	f001 f9c3 	bl	80016d0 <__aeabi_dmul>
 800034a:	2200      	movs	r2, #0
 800034c:	4b75      	ldr	r3, [pc, #468]	; (8000524 <__ieee754_acos+0x2f4>)
 800034e:	f001 f809 	bl	8001364 <__adddf3>
 8000352:	4602      	mov	r2, r0
 8000354:	460b      	mov	r3, r1
 8000356:	4640      	mov	r0, r8
 8000358:	4649      	mov	r1, r9
 800035a:	f001 fae3 	bl	8001924 <__aeabi_ddiv>
 800035e:	4622      	mov	r2, r4
 8000360:	462b      	mov	r3, r5
 8000362:	f001 f9b5 	bl	80016d0 <__aeabi_dmul>
 8000366:	4602      	mov	r2, r0
 8000368:	460b      	mov	r3, r1
 800036a:	a167      	add	r1, pc, #412	; (adr r1, 8000508 <__ieee754_acos+0x2d8>)
 800036c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000370:	f000 fff6 	bl	8001360 <__aeabi_dsub>
 8000374:	4602      	mov	r2, r0
 8000376:	460b      	mov	r3, r1
 8000378:	4620      	mov	r0, r4
 800037a:	4629      	mov	r1, r5
 800037c:	f000 fff0 	bl	8001360 <__aeabi_dsub>
 8000380:	4602      	mov	r2, r0
 8000382:	460b      	mov	r3, r1
 8000384:	a162      	add	r1, pc, #392	; (adr r1, 8000510 <__ieee754_acos+0x2e0>)
 8000386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800038a:	f000 ffe9 	bl	8001360 <__aeabi_dsub>
 800038e:	e764      	b.n	800025a <__ieee754_acos+0x2a>
 8000390:	2d00      	cmp	r5, #0
 8000392:	f280 80cb 	bge.w	800052c <__ieee754_acos+0x2fc>
 8000396:	ee10 0a10 	vmov	r0, s0
 800039a:	2200      	movs	r2, #0
 800039c:	4b61      	ldr	r3, [pc, #388]	; (8000524 <__ieee754_acos+0x2f4>)
 800039e:	4629      	mov	r1, r5
 80003a0:	f000 ffe0 	bl	8001364 <__adddf3>
 80003a4:	2200      	movs	r2, #0
 80003a6:	4b60      	ldr	r3, [pc, #384]	; (8000528 <__ieee754_acos+0x2f8>)
 80003a8:	f001 f992 	bl	80016d0 <__aeabi_dmul>
 80003ac:	a342      	add	r3, pc, #264	; (adr r3, 80004b8 <__ieee754_acos+0x288>)
 80003ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003b2:	4604      	mov	r4, r0
 80003b4:	460d      	mov	r5, r1
 80003b6:	f001 f98b 	bl	80016d0 <__aeabi_dmul>
 80003ba:	a341      	add	r3, pc, #260	; (adr r3, 80004c0 <__ieee754_acos+0x290>)
 80003bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003c0:	f000 ffd0 	bl	8001364 <__adddf3>
 80003c4:	4622      	mov	r2, r4
 80003c6:	462b      	mov	r3, r5
 80003c8:	f001 f982 	bl	80016d0 <__aeabi_dmul>
 80003cc:	a33e      	add	r3, pc, #248	; (adr r3, 80004c8 <__ieee754_acos+0x298>)
 80003ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003d2:	f000 ffc5 	bl	8001360 <__aeabi_dsub>
 80003d6:	4622      	mov	r2, r4
 80003d8:	462b      	mov	r3, r5
 80003da:	f001 f979 	bl	80016d0 <__aeabi_dmul>
 80003de:	a33c      	add	r3, pc, #240	; (adr r3, 80004d0 <__ieee754_acos+0x2a0>)
 80003e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003e4:	f000 ffbe 	bl	8001364 <__adddf3>
 80003e8:	4622      	mov	r2, r4
 80003ea:	462b      	mov	r3, r5
 80003ec:	f001 f970 	bl	80016d0 <__aeabi_dmul>
 80003f0:	a339      	add	r3, pc, #228	; (adr r3, 80004d8 <__ieee754_acos+0x2a8>)
 80003f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003f6:	f000 ffb3 	bl	8001360 <__aeabi_dsub>
 80003fa:	4622      	mov	r2, r4
 80003fc:	462b      	mov	r3, r5
 80003fe:	f001 f967 	bl	80016d0 <__aeabi_dmul>
 8000402:	a337      	add	r3, pc, #220	; (adr r3, 80004e0 <__ieee754_acos+0x2b0>)
 8000404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000408:	f000 ffac 	bl	8001364 <__adddf3>
 800040c:	4622      	mov	r2, r4
 800040e:	462b      	mov	r3, r5
 8000410:	f001 f95e 	bl	80016d0 <__aeabi_dmul>
 8000414:	ec45 4b10 	vmov	d0, r4, r5
 8000418:	4680      	mov	r8, r0
 800041a:	4689      	mov	r9, r1
 800041c:	f001 fcfa 	bl	8001e14 <__ieee754_sqrt>
 8000420:	a331      	add	r3, pc, #196	; (adr r3, 80004e8 <__ieee754_acos+0x2b8>)
 8000422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000426:	4620      	mov	r0, r4
 8000428:	4629      	mov	r1, r5
 800042a:	ec57 6b10 	vmov	r6, r7, d0
 800042e:	f001 f94f 	bl	80016d0 <__aeabi_dmul>
 8000432:	a32f      	add	r3, pc, #188	; (adr r3, 80004f0 <__ieee754_acos+0x2c0>)
 8000434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000438:	f000 ff92 	bl	8001360 <__aeabi_dsub>
 800043c:	4622      	mov	r2, r4
 800043e:	462b      	mov	r3, r5
 8000440:	f001 f946 	bl	80016d0 <__aeabi_dmul>
 8000444:	a32c      	add	r3, pc, #176	; (adr r3, 80004f8 <__ieee754_acos+0x2c8>)
 8000446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800044a:	f000 ff8b 	bl	8001364 <__adddf3>
 800044e:	4622      	mov	r2, r4
 8000450:	462b      	mov	r3, r5
 8000452:	f001 f93d 	bl	80016d0 <__aeabi_dmul>
 8000456:	a32a      	add	r3, pc, #168	; (adr r3, 8000500 <__ieee754_acos+0x2d0>)
 8000458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800045c:	f000 ff80 	bl	8001360 <__aeabi_dsub>
 8000460:	4622      	mov	r2, r4
 8000462:	462b      	mov	r3, r5
 8000464:	f001 f934 	bl	80016d0 <__aeabi_dmul>
 8000468:	2200      	movs	r2, #0
 800046a:	4b2e      	ldr	r3, [pc, #184]	; (8000524 <__ieee754_acos+0x2f4>)
 800046c:	f000 ff7a 	bl	8001364 <__adddf3>
 8000470:	4602      	mov	r2, r0
 8000472:	460b      	mov	r3, r1
 8000474:	4640      	mov	r0, r8
 8000476:	4649      	mov	r1, r9
 8000478:	f001 fa54 	bl	8001924 <__aeabi_ddiv>
 800047c:	4632      	mov	r2, r6
 800047e:	463b      	mov	r3, r7
 8000480:	f001 f926 	bl	80016d0 <__aeabi_dmul>
 8000484:	a320      	add	r3, pc, #128	; (adr r3, 8000508 <__ieee754_acos+0x2d8>)
 8000486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800048a:	f000 ff69 	bl	8001360 <__aeabi_dsub>
 800048e:	4632      	mov	r2, r6
 8000490:	463b      	mov	r3, r7
 8000492:	f000 ff67 	bl	8001364 <__adddf3>
 8000496:	4602      	mov	r2, r0
 8000498:	460b      	mov	r3, r1
 800049a:	f000 ff63 	bl	8001364 <__adddf3>
 800049e:	4602      	mov	r2, r0
 80004a0:	460b      	mov	r3, r1
 80004a2:	a103      	add	r1, pc, #12	; (adr r1, 80004b0 <__ieee754_acos+0x280>)
 80004a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80004a8:	e76f      	b.n	800038a <__ieee754_acos+0x15a>
 80004aa:	bf00      	nop
 80004ac:	f3af 8000 	nop.w
 80004b0:	54442d18 	.word	0x54442d18
 80004b4:	400921fb 	.word	0x400921fb
 80004b8:	0dfdf709 	.word	0x0dfdf709
 80004bc:	3f023de1 	.word	0x3f023de1
 80004c0:	7501b288 	.word	0x7501b288
 80004c4:	3f49efe0 	.word	0x3f49efe0
 80004c8:	b5688f3b 	.word	0xb5688f3b
 80004cc:	3fa48228 	.word	0x3fa48228
 80004d0:	0e884455 	.word	0x0e884455
 80004d4:	3fc9c155 	.word	0x3fc9c155
 80004d8:	03eb6f7d 	.word	0x03eb6f7d
 80004dc:	3fd4d612 	.word	0x3fd4d612
 80004e0:	55555555 	.word	0x55555555
 80004e4:	3fc55555 	.word	0x3fc55555
 80004e8:	b12e9282 	.word	0xb12e9282
 80004ec:	3fb3b8c5 	.word	0x3fb3b8c5
 80004f0:	1b8d0159 	.word	0x1b8d0159
 80004f4:	3fe6066c 	.word	0x3fe6066c
 80004f8:	9c598ac8 	.word	0x9c598ac8
 80004fc:	40002ae5 	.word	0x40002ae5
 8000500:	1c8a2d4b 	.word	0x1c8a2d4b
 8000504:	40033a27 	.word	0x40033a27
 8000508:	33145c07 	.word	0x33145c07
 800050c:	3c91a626 	.word	0x3c91a626
 8000510:	54442d18 	.word	0x54442d18
 8000514:	3ff921fb 	.word	0x3ff921fb
 8000518:	3fefffff 	.word	0x3fefffff
 800051c:	3fdfffff 	.word	0x3fdfffff
 8000520:	3c600000 	.word	0x3c600000
 8000524:	3ff00000 	.word	0x3ff00000
 8000528:	3fe00000 	.word	0x3fe00000
 800052c:	ee10 2a10 	vmov	r2, s0
 8000530:	462b      	mov	r3, r5
 8000532:	2000      	movs	r0, #0
 8000534:	496a      	ldr	r1, [pc, #424]	; (80006e0 <__ieee754_acos+0x4b0>)
 8000536:	f000 ff13 	bl	8001360 <__aeabi_dsub>
 800053a:	2200      	movs	r2, #0
 800053c:	4b69      	ldr	r3, [pc, #420]	; (80006e4 <__ieee754_acos+0x4b4>)
 800053e:	f001 f8c7 	bl	80016d0 <__aeabi_dmul>
 8000542:	4604      	mov	r4, r0
 8000544:	460d      	mov	r5, r1
 8000546:	ec45 4b10 	vmov	d0, r4, r5
 800054a:	f001 fc63 	bl	8001e14 <__ieee754_sqrt>
 800054e:	a34e      	add	r3, pc, #312	; (adr r3, 8000688 <__ieee754_acos+0x458>)
 8000550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000554:	4620      	mov	r0, r4
 8000556:	4629      	mov	r1, r5
 8000558:	ec59 8b10 	vmov	r8, r9, d0
 800055c:	f001 f8b8 	bl	80016d0 <__aeabi_dmul>
 8000560:	a34b      	add	r3, pc, #300	; (adr r3, 8000690 <__ieee754_acos+0x460>)
 8000562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000566:	f000 fefd 	bl	8001364 <__adddf3>
 800056a:	4622      	mov	r2, r4
 800056c:	462b      	mov	r3, r5
 800056e:	f001 f8af 	bl	80016d0 <__aeabi_dmul>
 8000572:	a349      	add	r3, pc, #292	; (adr r3, 8000698 <__ieee754_acos+0x468>)
 8000574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000578:	f000 fef2 	bl	8001360 <__aeabi_dsub>
 800057c:	4622      	mov	r2, r4
 800057e:	462b      	mov	r3, r5
 8000580:	f001 f8a6 	bl	80016d0 <__aeabi_dmul>
 8000584:	a346      	add	r3, pc, #280	; (adr r3, 80006a0 <__ieee754_acos+0x470>)
 8000586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800058a:	f000 feeb 	bl	8001364 <__adddf3>
 800058e:	4622      	mov	r2, r4
 8000590:	462b      	mov	r3, r5
 8000592:	f001 f89d 	bl	80016d0 <__aeabi_dmul>
 8000596:	a344      	add	r3, pc, #272	; (adr r3, 80006a8 <__ieee754_acos+0x478>)
 8000598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800059c:	f000 fee0 	bl	8001360 <__aeabi_dsub>
 80005a0:	4622      	mov	r2, r4
 80005a2:	462b      	mov	r3, r5
 80005a4:	f001 f894 	bl	80016d0 <__aeabi_dmul>
 80005a8:	a341      	add	r3, pc, #260	; (adr r3, 80006b0 <__ieee754_acos+0x480>)
 80005aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ae:	f000 fed9 	bl	8001364 <__adddf3>
 80005b2:	4622      	mov	r2, r4
 80005b4:	462b      	mov	r3, r5
 80005b6:	f001 f88b 	bl	80016d0 <__aeabi_dmul>
 80005ba:	a33f      	add	r3, pc, #252	; (adr r3, 80006b8 <__ieee754_acos+0x488>)
 80005bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005c0:	4682      	mov	sl, r0
 80005c2:	468b      	mov	fp, r1
 80005c4:	4620      	mov	r0, r4
 80005c6:	4629      	mov	r1, r5
 80005c8:	f001 f882 	bl	80016d0 <__aeabi_dmul>
 80005cc:	a33c      	add	r3, pc, #240	; (adr r3, 80006c0 <__ieee754_acos+0x490>)
 80005ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005d2:	f000 fec5 	bl	8001360 <__aeabi_dsub>
 80005d6:	4622      	mov	r2, r4
 80005d8:	462b      	mov	r3, r5
 80005da:	f001 f879 	bl	80016d0 <__aeabi_dmul>
 80005de:	a33a      	add	r3, pc, #232	; (adr r3, 80006c8 <__ieee754_acos+0x498>)
 80005e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005e4:	f000 febe 	bl	8001364 <__adddf3>
 80005e8:	4622      	mov	r2, r4
 80005ea:	462b      	mov	r3, r5
 80005ec:	f001 f870 	bl	80016d0 <__aeabi_dmul>
 80005f0:	a337      	add	r3, pc, #220	; (adr r3, 80006d0 <__ieee754_acos+0x4a0>)
 80005f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005f6:	f000 feb3 	bl	8001360 <__aeabi_dsub>
 80005fa:	4622      	mov	r2, r4
 80005fc:	462b      	mov	r3, r5
 80005fe:	f001 f867 	bl	80016d0 <__aeabi_dmul>
 8000602:	2200      	movs	r2, #0
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <__ieee754_acos+0x4b0>)
 8000606:	f000 fead 	bl	8001364 <__adddf3>
 800060a:	4602      	mov	r2, r0
 800060c:	460b      	mov	r3, r1
 800060e:	4650      	mov	r0, sl
 8000610:	4659      	mov	r1, fp
 8000612:	f001 f987 	bl	8001924 <__aeabi_ddiv>
 8000616:	4642      	mov	r2, r8
 8000618:	464b      	mov	r3, r9
 800061a:	f001 f859 	bl	80016d0 <__aeabi_dmul>
 800061e:	2600      	movs	r6, #0
 8000620:	4682      	mov	sl, r0
 8000622:	468b      	mov	fp, r1
 8000624:	4632      	mov	r2, r6
 8000626:	464b      	mov	r3, r9
 8000628:	4630      	mov	r0, r6
 800062a:	4649      	mov	r1, r9
 800062c:	f001 f850 	bl	80016d0 <__aeabi_dmul>
 8000630:	4602      	mov	r2, r0
 8000632:	460b      	mov	r3, r1
 8000634:	4620      	mov	r0, r4
 8000636:	4629      	mov	r1, r5
 8000638:	f000 fe92 	bl	8001360 <__aeabi_dsub>
 800063c:	4632      	mov	r2, r6
 800063e:	4604      	mov	r4, r0
 8000640:	460d      	mov	r5, r1
 8000642:	464b      	mov	r3, r9
 8000644:	4640      	mov	r0, r8
 8000646:	4649      	mov	r1, r9
 8000648:	f000 fe8c 	bl	8001364 <__adddf3>
 800064c:	4602      	mov	r2, r0
 800064e:	460b      	mov	r3, r1
 8000650:	4620      	mov	r0, r4
 8000652:	4629      	mov	r1, r5
 8000654:	f001 f966 	bl	8001924 <__aeabi_ddiv>
 8000658:	4602      	mov	r2, r0
 800065a:	460b      	mov	r3, r1
 800065c:	4650      	mov	r0, sl
 800065e:	4659      	mov	r1, fp
 8000660:	f000 fe80 	bl	8001364 <__adddf3>
 8000664:	4632      	mov	r2, r6
 8000666:	464b      	mov	r3, r9
 8000668:	f000 fe7c 	bl	8001364 <__adddf3>
 800066c:	4602      	mov	r2, r0
 800066e:	460b      	mov	r3, r1
 8000670:	f000 fe78 	bl	8001364 <__adddf3>
 8000674:	e5f1      	b.n	800025a <__ieee754_acos+0x2a>
 8000676:	2000      	movs	r0, #0
 8000678:	2100      	movs	r1, #0
 800067a:	e5ee      	b.n	800025a <__ieee754_acos+0x2a>
 800067c:	a116      	add	r1, pc, #88	; (adr r1, 80006d8 <__ieee754_acos+0x4a8>)
 800067e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000682:	e5ea      	b.n	800025a <__ieee754_acos+0x2a>
 8000684:	f3af 8000 	nop.w
 8000688:	0dfdf709 	.word	0x0dfdf709
 800068c:	3f023de1 	.word	0x3f023de1
 8000690:	7501b288 	.word	0x7501b288
 8000694:	3f49efe0 	.word	0x3f49efe0
 8000698:	b5688f3b 	.word	0xb5688f3b
 800069c:	3fa48228 	.word	0x3fa48228
 80006a0:	0e884455 	.word	0x0e884455
 80006a4:	3fc9c155 	.word	0x3fc9c155
 80006a8:	03eb6f7d 	.word	0x03eb6f7d
 80006ac:	3fd4d612 	.word	0x3fd4d612
 80006b0:	55555555 	.word	0x55555555
 80006b4:	3fc55555 	.word	0x3fc55555
 80006b8:	b12e9282 	.word	0xb12e9282
 80006bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80006c0:	1b8d0159 	.word	0x1b8d0159
 80006c4:	3fe6066c 	.word	0x3fe6066c
 80006c8:	9c598ac8 	.word	0x9c598ac8
 80006cc:	40002ae5 	.word	0x40002ae5
 80006d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80006d4:	40033a27 	.word	0x40033a27
 80006d8:	54442d18 	.word	0x54442d18
 80006dc:	3ff921fb 	.word	0x3ff921fb
 80006e0:	3ff00000 	.word	0x3ff00000
 80006e4:	3fe00000 	.word	0x3fe00000

080006e8 <nan>:
 80006e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80006f0 <nan+0x8>
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	00000000 	.word	0x00000000
 80006f4:	7ff80000 	.word	0x7ff80000

080006f8 <quorem>:
 80006f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006fc:	6903      	ldr	r3, [r0, #16]
 80006fe:	690c      	ldr	r4, [r1, #16]
 8000700:	42a3      	cmp	r3, r4
 8000702:	4680      	mov	r8, r0
 8000704:	db7f      	blt.n	8000806 <quorem+0x10e>
 8000706:	3c01      	subs	r4, #1
 8000708:	f101 0714 	add.w	r7, r1, #20
 800070c:	00a0      	lsls	r0, r4, #2
 800070e:	f108 0514 	add.w	r5, r8, #20
 8000712:	182b      	adds	r3, r5, r0
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 800071a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800071e:	3301      	adds	r3, #1
 8000720:	429a      	cmp	r2, r3
 8000722:	eb07 0900 	add.w	r9, r7, r0
 8000726:	fbb2 f6f3 	udiv	r6, r2, r3
 800072a:	d331      	bcc.n	8000790 <quorem+0x98>
 800072c:	f04f 0a00 	mov.w	sl, #0
 8000730:	46bc      	mov	ip, r7
 8000732:	46ae      	mov	lr, r5
 8000734:	46d3      	mov	fp, sl
 8000736:	f85c 2b04 	ldr.w	r2, [ip], #4
 800073a:	b293      	uxth	r3, r2
 800073c:	fb06 a303 	mla	r3, r6, r3, sl
 8000740:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8000744:	b29b      	uxth	r3, r3
 8000746:	ebab 0303 	sub.w	r3, fp, r3
 800074a:	0c12      	lsrs	r2, r2, #16
 800074c:	f8de b000 	ldr.w	fp, [lr]
 8000750:	fb06 a202 	mla	r2, r6, r2, sl
 8000754:	fa13 f38b 	uxtah	r3, r3, fp
 8000758:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800075c:	fa1f fb82 	uxth.w	fp, r2
 8000760:	f8de 2000 	ldr.w	r2, [lr]
 8000764:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8000768:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800076c:	b29b      	uxth	r3, r3
 800076e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000772:	45e1      	cmp	r9, ip
 8000774:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8000778:	f84e 3b04 	str.w	r3, [lr], #4
 800077c:	d2db      	bcs.n	8000736 <quorem+0x3e>
 800077e:	582b      	ldr	r3, [r5, r0]
 8000780:	b933      	cbnz	r3, 8000790 <quorem+0x98>
 8000782:	9b01      	ldr	r3, [sp, #4]
 8000784:	3b04      	subs	r3, #4
 8000786:	429d      	cmp	r5, r3
 8000788:	461a      	mov	r2, r3
 800078a:	d330      	bcc.n	80007ee <quorem+0xf6>
 800078c:	f8c8 4010 	str.w	r4, [r8, #16]
 8000790:	4640      	mov	r0, r8
 8000792:	f003 f916 	bl	80039c2 <__mcmp>
 8000796:	2800      	cmp	r0, #0
 8000798:	db25      	blt.n	80007e6 <quorem+0xee>
 800079a:	3601      	adds	r6, #1
 800079c:	4628      	mov	r0, r5
 800079e:	f04f 0c00 	mov.w	ip, #0
 80007a2:	f857 2b04 	ldr.w	r2, [r7], #4
 80007a6:	f8d0 e000 	ldr.w	lr, [r0]
 80007aa:	b293      	uxth	r3, r2
 80007ac:	ebac 0303 	sub.w	r3, ip, r3
 80007b0:	0c12      	lsrs	r2, r2, #16
 80007b2:	fa13 f38e 	uxtah	r3, r3, lr
 80007b6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80007ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80007be:	b29b      	uxth	r3, r3
 80007c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007c4:	45b9      	cmp	r9, r7
 80007c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80007ca:	f840 3b04 	str.w	r3, [r0], #4
 80007ce:	d2e8      	bcs.n	80007a2 <quorem+0xaa>
 80007d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80007d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80007d8:	b92a      	cbnz	r2, 80007e6 <quorem+0xee>
 80007da:	3b04      	subs	r3, #4
 80007dc:	429d      	cmp	r5, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	d30b      	bcc.n	80007fa <quorem+0x102>
 80007e2:	f8c8 4010 	str.w	r4, [r8, #16]
 80007e6:	4630      	mov	r0, r6
 80007e8:	b003      	add	sp, #12
 80007ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007ee:	6812      	ldr	r2, [r2, #0]
 80007f0:	3b04      	subs	r3, #4
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d1ca      	bne.n	800078c <quorem+0x94>
 80007f6:	3c01      	subs	r4, #1
 80007f8:	e7c5      	b.n	8000786 <quorem+0x8e>
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	3b04      	subs	r3, #4
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d1ef      	bne.n	80007e2 <quorem+0xea>
 8000802:	3c01      	subs	r4, #1
 8000804:	e7ea      	b.n	80007dc <quorem+0xe4>
 8000806:	2000      	movs	r0, #0
 8000808:	e7ee      	b.n	80007e8 <quorem+0xf0>

0800080a <_dtoa_r>:
 800080a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800080e:	b099      	sub	sp, #100	; 0x64
 8000810:	ec55 4b10 	vmov	r4, r5, d0
 8000814:	9108      	str	r1, [sp, #32]
 8000816:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000818:	920d      	str	r2, [sp, #52]	; 0x34
 800081a:	4683      	mov	fp, r0
 800081c:	9314      	str	r3, [sp, #80]	; 0x50
 800081e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8000820:	e9cd 4500 	strd	r4, r5, [sp]
 8000824:	b149      	cbz	r1, 800083a <_dtoa_r+0x30>
 8000826:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000828:	604a      	str	r2, [r1, #4]
 800082a:	2301      	movs	r3, #1
 800082c:	4093      	lsls	r3, r2
 800082e:	608b      	str	r3, [r1, #8]
 8000830:	f002 fec9 	bl	80035c6 <_Bfree>
 8000834:	2300      	movs	r3, #0
 8000836:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 800083a:	1e2b      	subs	r3, r5, #0
 800083c:	bfb9      	ittee	lt
 800083e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8000842:	9301      	strlt	r3, [sp, #4]
 8000844:	2300      	movge	r3, #0
 8000846:	6033      	strge	r3, [r6, #0]
 8000848:	9c01      	ldr	r4, [sp, #4]
 800084a:	4bb3      	ldr	r3, [pc, #716]	; (8000b18 <_dtoa_r+0x30e>)
 800084c:	bfbc      	itt	lt
 800084e:	2201      	movlt	r2, #1
 8000850:	6032      	strlt	r2, [r6, #0]
 8000852:	43a3      	bics	r3, r4
 8000854:	d11a      	bne.n	800088c <_dtoa_r+0x82>
 8000856:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000858:	f242 730f 	movw	r3, #9999	; 0x270f
 800085c:	6013      	str	r3, [r2, #0]
 800085e:	9a00      	ldr	r2, [sp, #0]
 8000860:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8000864:	4313      	orrs	r3, r2
 8000866:	f000 854e 	beq.w	8001306 <_dtoa_r+0xafc>
 800086a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800086c:	b90b      	cbnz	r3, 8000872 <_dtoa_r+0x68>
 800086e:	4bab      	ldr	r3, [pc, #684]	; (8000b1c <_dtoa_r+0x312>)
 8000870:	e023      	b.n	80008ba <_dtoa_r+0xb0>
 8000872:	4baa      	ldr	r3, [pc, #680]	; (8000b1c <_dtoa_r+0x312>)
 8000874:	9303      	str	r3, [sp, #12]
 8000876:	3303      	adds	r3, #3
 8000878:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	9803      	ldr	r0, [sp, #12]
 800087e:	b019      	add	sp, #100	; 0x64
 8000880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000884:	4ba6      	ldr	r3, [pc, #664]	; (8000b20 <_dtoa_r+0x316>)
 8000886:	9303      	str	r3, [sp, #12]
 8000888:	3308      	adds	r3, #8
 800088a:	e7f5      	b.n	8000878 <_dtoa_r+0x6e>
 800088c:	ed9d 7b00 	vldr	d7, [sp]
 8000890:	2200      	movs	r2, #0
 8000892:	2300      	movs	r3, #0
 8000894:	ec51 0b17 	vmov	r0, r1, d7
 8000898:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800089c:	f003 fe78 	bl	8004590 <__aeabi_dcmpeq>
 80008a0:	4607      	mov	r7, r0
 80008a2:	b160      	cbz	r0, 80008be <_dtoa_r+0xb4>
 80008a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80008a6:	2301      	movs	r3, #1
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	f000 8527 	beq.w	8001300 <_dtoa_r+0xaf6>
 80008b2:	4b9c      	ldr	r3, [pc, #624]	; (8000b24 <_dtoa_r+0x31a>)
 80008b4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	9303      	str	r3, [sp, #12]
 80008bc:	e7de      	b.n	800087c <_dtoa_r+0x72>
 80008be:	aa16      	add	r2, sp, #88	; 0x58
 80008c0:	a917      	add	r1, sp, #92	; 0x5c
 80008c2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80008c6:	4658      	mov	r0, fp
 80008c8:	f003 f968 	bl	8003b9c <__d2b>
 80008cc:	f3c4 560a 	ubfx	r6, r4, #20, #11
 80008d0:	4680      	mov	r8, r0
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d07f      	beq.n	80009d6 <_dtoa_r+0x1cc>
 80008d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80008d8:	9715      	str	r7, [sp, #84]	; 0x54
 80008da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80008de:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 80008e2:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80008e6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80008ea:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80008ee:	2200      	movs	r2, #0
 80008f0:	4b8d      	ldr	r3, [pc, #564]	; (8000b28 <_dtoa_r+0x31e>)
 80008f2:	4620      	mov	r0, r4
 80008f4:	4629      	mov	r1, r5
 80008f6:	f000 fd33 	bl	8001360 <__aeabi_dsub>
 80008fa:	a381      	add	r3, pc, #516	; (adr r3, 8000b00 <_dtoa_r+0x2f6>)
 80008fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000900:	f000 fee6 	bl	80016d0 <__aeabi_dmul>
 8000904:	a380      	add	r3, pc, #512	; (adr r3, 8000b08 <_dtoa_r+0x2fe>)
 8000906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800090a:	f000 fd2b 	bl	8001364 <__adddf3>
 800090e:	4604      	mov	r4, r0
 8000910:	4630      	mov	r0, r6
 8000912:	460d      	mov	r5, r1
 8000914:	f000 fe72 	bl	80015fc <__aeabi_i2d>
 8000918:	a37d      	add	r3, pc, #500	; (adr r3, 8000b10 <_dtoa_r+0x306>)
 800091a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800091e:	f000 fed7 	bl	80016d0 <__aeabi_dmul>
 8000922:	4602      	mov	r2, r0
 8000924:	460b      	mov	r3, r1
 8000926:	4620      	mov	r0, r4
 8000928:	4629      	mov	r1, r5
 800092a:	f000 fd1b 	bl	8001364 <__adddf3>
 800092e:	4604      	mov	r4, r0
 8000930:	460d      	mov	r5, r1
 8000932:	f001 f8df 	bl	8001af4 <__aeabi_d2iz>
 8000936:	2200      	movs	r2, #0
 8000938:	4682      	mov	sl, r0
 800093a:	2300      	movs	r3, #0
 800093c:	4620      	mov	r0, r4
 800093e:	4629      	mov	r1, r5
 8000940:	f003 fe30 	bl	80045a4 <__aeabi_dcmplt>
 8000944:	b148      	cbz	r0, 800095a <_dtoa_r+0x150>
 8000946:	4650      	mov	r0, sl
 8000948:	f000 fe58 	bl	80015fc <__aeabi_i2d>
 800094c:	4622      	mov	r2, r4
 800094e:	462b      	mov	r3, r5
 8000950:	f003 fe1e 	bl	8004590 <__aeabi_dcmpeq>
 8000954:	b908      	cbnz	r0, 800095a <_dtoa_r+0x150>
 8000956:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800095a:	f1ba 0f16 	cmp.w	sl, #22
 800095e:	d859      	bhi.n	8000a14 <_dtoa_r+0x20a>
 8000960:	4b72      	ldr	r3, [pc, #456]	; (8000b2c <_dtoa_r+0x322>)
 8000962:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8000966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800096a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800096e:	f003 fe19 	bl	80045a4 <__aeabi_dcmplt>
 8000972:	2800      	cmp	r0, #0
 8000974:	d050      	beq.n	8000a18 <_dtoa_r+0x20e>
 8000976:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800097a:	2300      	movs	r3, #0
 800097c:	9311      	str	r3, [sp, #68]	; 0x44
 800097e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000980:	1b9e      	subs	r6, r3, r6
 8000982:	1e73      	subs	r3, r6, #1
 8000984:	9307      	str	r3, [sp, #28]
 8000986:	bf45      	ittet	mi
 8000988:	f1c6 0301 	rsbmi	r3, r6, #1
 800098c:	9306      	strmi	r3, [sp, #24]
 800098e:	2300      	movpl	r3, #0
 8000990:	2300      	movmi	r3, #0
 8000992:	bf4c      	ite	mi
 8000994:	9307      	strmi	r3, [sp, #28]
 8000996:	9306      	strpl	r3, [sp, #24]
 8000998:	f1ba 0f00 	cmp.w	sl, #0
 800099c:	db3e      	blt.n	8000a1c <_dtoa_r+0x212>
 800099e:	9b07      	ldr	r3, [sp, #28]
 80009a0:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80009a4:	4453      	add	r3, sl
 80009a6:	9307      	str	r3, [sp, #28]
 80009a8:	2300      	movs	r3, #0
 80009aa:	9309      	str	r3, [sp, #36]	; 0x24
 80009ac:	9b08      	ldr	r3, [sp, #32]
 80009ae:	2b09      	cmp	r3, #9
 80009b0:	f200 808d 	bhi.w	8000ace <_dtoa_r+0x2c4>
 80009b4:	2b05      	cmp	r3, #5
 80009b6:	bfc4      	itt	gt
 80009b8:	3b04      	subgt	r3, #4
 80009ba:	9308      	strgt	r3, [sp, #32]
 80009bc:	9b08      	ldr	r3, [sp, #32]
 80009be:	f1a3 0302 	sub.w	r3, r3, #2
 80009c2:	bfcc      	ite	gt
 80009c4:	2400      	movgt	r4, #0
 80009c6:	2401      	movle	r4, #1
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	f200 808b 	bhi.w	8000ae4 <_dtoa_r+0x2da>
 80009ce:	e8df f003 	tbb	[pc, r3]
 80009d2:	3c2f      	.short	0x3c2f
 80009d4:	7c3a      	.short	0x7c3a
 80009d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
 80009da:	441e      	add	r6, r3
 80009dc:	f206 4032 	addw	r0, r6, #1074	; 0x432
 80009e0:	2820      	cmp	r0, #32
 80009e2:	dd11      	ble.n	8000a08 <_dtoa_r+0x1fe>
 80009e4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80009e8:	9b00      	ldr	r3, [sp, #0]
 80009ea:	4084      	lsls	r4, r0
 80009ec:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80009f0:	fa23 f000 	lsr.w	r0, r3, r0
 80009f4:	4320      	orrs	r0, r4
 80009f6:	f000 fdf1 	bl	80015dc <__aeabi_ui2d>
 80009fa:	2301      	movs	r3, #1
 80009fc:	4604      	mov	r4, r0
 80009fe:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
 8000a02:	3e01      	subs	r6, #1
 8000a04:	9315      	str	r3, [sp, #84]	; 0x54
 8000a06:	e772      	b.n	80008ee <_dtoa_r+0xe4>
 8000a08:	9b00      	ldr	r3, [sp, #0]
 8000a0a:	f1c0 0020 	rsb	r0, r0, #32
 8000a0e:	fa03 f000 	lsl.w	r0, r3, r0
 8000a12:	e7f0      	b.n	80009f6 <_dtoa_r+0x1ec>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e7b1      	b.n	800097c <_dtoa_r+0x172>
 8000a18:	9011      	str	r0, [sp, #68]	; 0x44
 8000a1a:	e7b0      	b.n	800097e <_dtoa_r+0x174>
 8000a1c:	9b06      	ldr	r3, [sp, #24]
 8000a1e:	eba3 030a 	sub.w	r3, r3, sl
 8000a22:	9306      	str	r3, [sp, #24]
 8000a24:	f1ca 0300 	rsb	r3, sl, #0
 8000a28:	9309      	str	r3, [sp, #36]	; 0x24
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	9310      	str	r3, [sp, #64]	; 0x40
 8000a2e:	e7bd      	b.n	80009ac <_dtoa_r+0x1a2>
 8000a30:	2300      	movs	r3, #0
 8000a32:	930c      	str	r3, [sp, #48]	; 0x30
 8000a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	dc57      	bgt.n	8000aea <_dtoa_r+0x2e0>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	9304      	str	r3, [sp, #16]
 8000a3e:	4699      	mov	r9, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	920d      	str	r2, [sp, #52]	; 0x34
 8000a44:	e00c      	b.n	8000a60 <_dtoa_r+0x256>
 8000a46:	2301      	movs	r3, #1
 8000a48:	e7f3      	b.n	8000a32 <_dtoa_r+0x228>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	930c      	str	r3, [sp, #48]	; 0x30
 8000a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000a50:	4453      	add	r3, sl
 8000a52:	f103 0901 	add.w	r9, r3, #1
 8000a56:	9304      	str	r3, [sp, #16]
 8000a58:	464b      	mov	r3, r9
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	bfb8      	it	lt
 8000a5e:	2301      	movlt	r3, #1
 8000a60:	2200      	movs	r2, #0
 8000a62:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 8000a66:	2204      	movs	r2, #4
 8000a68:	f102 0014 	add.w	r0, r2, #20
 8000a6c:	4298      	cmp	r0, r3
 8000a6e:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
 8000a72:	d93e      	bls.n	8000af2 <_dtoa_r+0x2e8>
 8000a74:	4658      	mov	r0, fp
 8000a76:	f002 fd81 	bl	800357c <_Balloc>
 8000a7a:	f1b9 0f0e 	cmp.w	r9, #14
 8000a7e:	9003      	str	r0, [sp, #12]
 8000a80:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8000a84:	f200 80d7 	bhi.w	8000c36 <_dtoa_r+0x42c>
 8000a88:	2c00      	cmp	r4, #0
 8000a8a:	f000 80d4 	beq.w	8000c36 <_dtoa_r+0x42c>
 8000a8e:	f1ba 0f00 	cmp.w	sl, #0
 8000a92:	dd69      	ble.n	8000b68 <_dtoa_r+0x35e>
 8000a94:	4a25      	ldr	r2, [pc, #148]	; (8000b2c <_dtoa_r+0x322>)
 8000a96:	f00a 030f 	and.w	r3, sl, #15
 8000a9a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000a9e:	ed93 7b00 	vldr	d7, [r3]
 8000aa2:	ea4f 142a 	mov.w	r4, sl, asr #4
 8000aa6:	06e2      	lsls	r2, r4, #27
 8000aa8:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8000aac:	d55a      	bpl.n	8000b64 <_dtoa_r+0x35a>
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <_dtoa_r+0x326>)
 8000ab0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8000ab4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000ab8:	f000 ff34 	bl	8001924 <__aeabi_ddiv>
 8000abc:	e9cd 0100 	strd	r0, r1, [sp]
 8000ac0:	f004 040f 	and.w	r4, r4, #15
 8000ac4:	2603      	movs	r6, #3
 8000ac6:	4d1a      	ldr	r5, [pc, #104]	; (8000b30 <_dtoa_r+0x326>)
 8000ac8:	e041      	b.n	8000b4e <_dtoa_r+0x344>
 8000aca:	2301      	movs	r3, #1
 8000acc:	e7be      	b.n	8000a4c <_dtoa_r+0x242>
 8000ace:	2401      	movs	r4, #1
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	9308      	str	r3, [sp, #32]
 8000ad4:	940c      	str	r4, [sp, #48]	; 0x30
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ada:	9304      	str	r3, [sp, #16]
 8000adc:	4699      	mov	r9, r3
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2312      	movs	r3, #18
 8000ae2:	e7ae      	b.n	8000a42 <_dtoa_r+0x238>
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	930c      	str	r3, [sp, #48]	; 0x30
 8000ae8:	e7f5      	b.n	8000ad6 <_dtoa_r+0x2cc>
 8000aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000aec:	9304      	str	r3, [sp, #16]
 8000aee:	4699      	mov	r9, r3
 8000af0:	e7b6      	b.n	8000a60 <_dtoa_r+0x256>
 8000af2:	3101      	adds	r1, #1
 8000af4:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 8000af8:	0052      	lsls	r2, r2, #1
 8000afa:	e7b5      	b.n	8000a68 <_dtoa_r+0x25e>
 8000afc:	f3af 8000 	nop.w
 8000b00:	636f4361 	.word	0x636f4361
 8000b04:	3fd287a7 	.word	0x3fd287a7
 8000b08:	8b60c8b3 	.word	0x8b60c8b3
 8000b0c:	3fc68a28 	.word	0x3fc68a28
 8000b10:	509f79fb 	.word	0x509f79fb
 8000b14:	3fd34413 	.word	0x3fd34413
 8000b18:	7ff00000 	.word	0x7ff00000
 8000b1c:	0801d85a 	.word	0x0801d85a
 8000b20:	0801d85e 	.word	0x0801d85e
 8000b24:	0801a477 	.word	0x0801a477
 8000b28:	3ff80000 	.word	0x3ff80000
 8000b2c:	080193b0 	.word	0x080193b0
 8000b30:	080194a0 	.word	0x080194a0
 8000b34:	07e3      	lsls	r3, r4, #31
 8000b36:	d508      	bpl.n	8000b4a <_dtoa_r+0x340>
 8000b38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8000b3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000b40:	f000 fdc6 	bl	80016d0 <__aeabi_dmul>
 8000b44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8000b48:	3601      	adds	r6, #1
 8000b4a:	1064      	asrs	r4, r4, #1
 8000b4c:	3508      	adds	r5, #8
 8000b4e:	2c00      	cmp	r4, #0
 8000b50:	d1f0      	bne.n	8000b34 <_dtoa_r+0x32a>
 8000b52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8000b56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000b5a:	f000 fee3 	bl	8001924 <__aeabi_ddiv>
 8000b5e:	e9cd 0100 	strd	r0, r1, [sp]
 8000b62:	e01a      	b.n	8000b9a <_dtoa_r+0x390>
 8000b64:	2602      	movs	r6, #2
 8000b66:	e7ae      	b.n	8000ac6 <_dtoa_r+0x2bc>
 8000b68:	f000 809f 	beq.w	8000caa <_dtoa_r+0x4a0>
 8000b6c:	f1ca 0400 	rsb	r4, sl, #0
 8000b70:	4b9e      	ldr	r3, [pc, #632]	; (8000dec <_dtoa_r+0x5e2>)
 8000b72:	4d9f      	ldr	r5, [pc, #636]	; (8000df0 <_dtoa_r+0x5e6>)
 8000b74:	f004 020f 	and.w	r2, r4, #15
 8000b78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b80:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8000b84:	f000 fda4 	bl	80016d0 <__aeabi_dmul>
 8000b88:	e9cd 0100 	strd	r0, r1, [sp]
 8000b8c:	1124      	asrs	r4, r4, #4
 8000b8e:	2300      	movs	r3, #0
 8000b90:	2602      	movs	r6, #2
 8000b92:	2c00      	cmp	r4, #0
 8000b94:	d17e      	bne.n	8000c94 <_dtoa_r+0x48a>
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1e1      	bne.n	8000b5e <_dtoa_r+0x354>
 8000b9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f000 8086 	beq.w	8000cae <_dtoa_r+0x4a4>
 8000ba2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4b92      	ldr	r3, [pc, #584]	; (8000df4 <_dtoa_r+0x5ea>)
 8000baa:	4620      	mov	r0, r4
 8000bac:	4629      	mov	r1, r5
 8000bae:	f003 fcf9 	bl	80045a4 <__aeabi_dcmplt>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d07b      	beq.n	8000cae <_dtoa_r+0x4a4>
 8000bb6:	f1b9 0f00 	cmp.w	r9, #0
 8000bba:	d078      	beq.n	8000cae <_dtoa_r+0x4a4>
 8000bbc:	9b04      	ldr	r3, [sp, #16]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	dd35      	ble.n	8000c2e <_dtoa_r+0x424>
 8000bc2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8000bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8000bc8:	4620      	mov	r0, r4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	4b8a      	ldr	r3, [pc, #552]	; (8000df8 <_dtoa_r+0x5ee>)
 8000bce:	4629      	mov	r1, r5
 8000bd0:	f000 fd7e 	bl	80016d0 <__aeabi_dmul>
 8000bd4:	e9cd 0100 	strd	r0, r1, [sp]
 8000bd8:	9c04      	ldr	r4, [sp, #16]
 8000bda:	3601      	adds	r6, #1
 8000bdc:	4630      	mov	r0, r6
 8000bde:	f000 fd0d 	bl	80015fc <__aeabi_i2d>
 8000be2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000be6:	f000 fd73 	bl	80016d0 <__aeabi_dmul>
 8000bea:	2200      	movs	r2, #0
 8000bec:	4b83      	ldr	r3, [pc, #524]	; (8000dfc <_dtoa_r+0x5f2>)
 8000bee:	f000 fbb9 	bl	8001364 <__adddf3>
 8000bf2:	4606      	mov	r6, r0
 8000bf4:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8000bf8:	2c00      	cmp	r4, #0
 8000bfa:	d15c      	bne.n	8000cb6 <_dtoa_r+0x4ac>
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4b80      	ldr	r3, [pc, #512]	; (8000e00 <_dtoa_r+0x5f6>)
 8000c00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000c04:	f000 fbac 	bl	8001360 <__aeabi_dsub>
 8000c08:	4632      	mov	r2, r6
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	e9cd 0100 	strd	r0, r1, [sp]
 8000c10:	f003 fce6 	bl	80045e0 <__aeabi_dcmpgt>
 8000c14:	2800      	cmp	r0, #0
 8000c16:	f040 828a 	bne.w	800112e <_dtoa_r+0x924>
 8000c1a:	4632      	mov	r2, r6
 8000c1c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8000c20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000c24:	f003 fcbe 	bl	80045a4 <__aeabi_dcmplt>
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	f040 827e 	bne.w	800112a <_dtoa_r+0x920>
 8000c2e:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8000c32:	e9cd 3400 	strd	r3, r4, [sp]
 8000c36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f2c0 814d 	blt.w	8000ed8 <_dtoa_r+0x6ce>
 8000c3e:	f1ba 0f0e 	cmp.w	sl, #14
 8000c42:	f300 8149 	bgt.w	8000ed8 <_dtoa_r+0x6ce>
 8000c46:	4b69      	ldr	r3, [pc, #420]	; (8000dec <_dtoa_r+0x5e2>)
 8000c48:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8000c4c:	ed93 7b00 	vldr	d7, [r3]
 8000c50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8000c58:	f280 80d6 	bge.w	8000e08 <_dtoa_r+0x5fe>
 8000c5c:	f1b9 0f00 	cmp.w	r9, #0
 8000c60:	f300 80d2 	bgt.w	8000e08 <_dtoa_r+0x5fe>
 8000c64:	f040 8260 	bne.w	8001128 <_dtoa_r+0x91e>
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4b65      	ldr	r3, [pc, #404]	; (8000e00 <_dtoa_r+0x5f6>)
 8000c6c:	ec51 0b17 	vmov	r0, r1, d7
 8000c70:	f000 fd2e 	bl	80016d0 <__aeabi_dmul>
 8000c74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000c78:	f003 fca8 	bl	80045cc <__aeabi_dcmpge>
 8000c7c:	464c      	mov	r4, r9
 8000c7e:	464e      	mov	r6, r9
 8000c80:	2800      	cmp	r0, #0
 8000c82:	f040 8239 	bne.w	80010f8 <_dtoa_r+0x8ee>
 8000c86:	9d03      	ldr	r5, [sp, #12]
 8000c88:	2331      	movs	r3, #49	; 0x31
 8000c8a:	f805 3b01 	strb.w	r3, [r5], #1
 8000c8e:	f10a 0a01 	add.w	sl, sl, #1
 8000c92:	e235      	b.n	8001100 <_dtoa_r+0x8f6>
 8000c94:	07e7      	lsls	r7, r4, #31
 8000c96:	d505      	bpl.n	8000ca4 <_dtoa_r+0x49a>
 8000c98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000c9c:	f000 fd18 	bl	80016d0 <__aeabi_dmul>
 8000ca0:	3601      	adds	r6, #1
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	1064      	asrs	r4, r4, #1
 8000ca6:	3508      	adds	r5, #8
 8000ca8:	e773      	b.n	8000b92 <_dtoa_r+0x388>
 8000caa:	2602      	movs	r6, #2
 8000cac:	e775      	b.n	8000b9a <_dtoa_r+0x390>
 8000cae:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8000cb2:	464c      	mov	r4, r9
 8000cb4:	e792      	b.n	8000bdc <_dtoa_r+0x3d2>
 8000cb6:	9903      	ldr	r1, [sp, #12]
 8000cb8:	4b4c      	ldr	r3, [pc, #304]	; (8000dec <_dtoa_r+0x5e2>)
 8000cba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8000cbe:	440c      	add	r4, r1
 8000cc0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000cc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d044      	beq.n	8000d54 <_dtoa_r+0x54a>
 8000cca:	2000      	movs	r0, #0
 8000ccc:	494d      	ldr	r1, [pc, #308]	; (8000e04 <_dtoa_r+0x5fa>)
 8000cce:	f000 fe29 	bl	8001924 <__aeabi_ddiv>
 8000cd2:	4632      	mov	r2, r6
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	f000 fb43 	bl	8001360 <__aeabi_dsub>
 8000cda:	9d03      	ldr	r5, [sp, #12]
 8000cdc:	4606      	mov	r6, r0
 8000cde:	460f      	mov	r7, r1
 8000ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000ce4:	f000 ff06 	bl	8001af4 <__aeabi_d2iz>
 8000ce8:	9012      	str	r0, [sp, #72]	; 0x48
 8000cea:	f000 fc87 	bl	80015fc <__aeabi_i2d>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000cf6:	f000 fb33 	bl	8001360 <__aeabi_dsub>
 8000cfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000cfc:	3330      	adds	r3, #48	; 0x30
 8000cfe:	f805 3b01 	strb.w	r3, [r5], #1
 8000d02:	4632      	mov	r2, r6
 8000d04:	463b      	mov	r3, r7
 8000d06:	e9cd 0100 	strd	r0, r1, [sp]
 8000d0a:	f003 fc4b 	bl	80045a4 <__aeabi_dcmplt>
 8000d0e:	2800      	cmp	r0, #0
 8000d10:	d160      	bne.n	8000dd4 <_dtoa_r+0x5ca>
 8000d12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000d16:	2000      	movs	r0, #0
 8000d18:	4936      	ldr	r1, [pc, #216]	; (8000df4 <_dtoa_r+0x5ea>)
 8000d1a:	f000 fb21 	bl	8001360 <__aeabi_dsub>
 8000d1e:	4632      	mov	r2, r6
 8000d20:	463b      	mov	r3, r7
 8000d22:	f003 fc3f 	bl	80045a4 <__aeabi_dcmplt>
 8000d26:	2800      	cmp	r0, #0
 8000d28:	f040 80b4 	bne.w	8000e94 <_dtoa_r+0x68a>
 8000d2c:	42a5      	cmp	r5, r4
 8000d2e:	f43f af7e 	beq.w	8000c2e <_dtoa_r+0x424>
 8000d32:	2200      	movs	r2, #0
 8000d34:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <_dtoa_r+0x5ee>)
 8000d36:	4630      	mov	r0, r6
 8000d38:	4639      	mov	r1, r7
 8000d3a:	f000 fcc9 	bl	80016d0 <__aeabi_dmul>
 8000d3e:	2200      	movs	r2, #0
 8000d40:	4606      	mov	r6, r0
 8000d42:	460f      	mov	r7, r1
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <_dtoa_r+0x5ee>)
 8000d46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000d4a:	f000 fcc1 	bl	80016d0 <__aeabi_dmul>
 8000d4e:	e9cd 0100 	strd	r0, r1, [sp]
 8000d52:	e7c5      	b.n	8000ce0 <_dtoa_r+0x4d6>
 8000d54:	4630      	mov	r0, r6
 8000d56:	4639      	mov	r1, r7
 8000d58:	f000 fcba 	bl	80016d0 <__aeabi_dmul>
 8000d5c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8000d60:	9e03      	ldr	r6, [sp, #12]
 8000d62:	4625      	mov	r5, r4
 8000d64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000d68:	f000 fec4 	bl	8001af4 <__aeabi_d2iz>
 8000d6c:	4607      	mov	r7, r0
 8000d6e:	f000 fc45 	bl	80015fc <__aeabi_i2d>
 8000d72:	3730      	adds	r7, #48	; 0x30
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000d7c:	f000 faf0 	bl	8001360 <__aeabi_dsub>
 8000d80:	f806 7b01 	strb.w	r7, [r6], #1
 8000d84:	42a6      	cmp	r6, r4
 8000d86:	e9cd 0100 	strd	r0, r1, [sp]
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	d126      	bne.n	8000dde <_dtoa_r+0x5d4>
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <_dtoa_r+0x5fa>)
 8000d92:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8000d96:	f000 fae5 	bl	8001364 <__adddf3>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000da2:	f003 fc1d 	bl	80045e0 <__aeabi_dcmpgt>
 8000da6:	2800      	cmp	r0, #0
 8000da8:	d174      	bne.n	8000e94 <_dtoa_r+0x68a>
 8000daa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8000dae:	2000      	movs	r0, #0
 8000db0:	4914      	ldr	r1, [pc, #80]	; (8000e04 <_dtoa_r+0x5fa>)
 8000db2:	f000 fad5 	bl	8001360 <__aeabi_dsub>
 8000db6:	4602      	mov	r2, r0
 8000db8:	460b      	mov	r3, r1
 8000dba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000dbe:	f003 fbf1 	bl	80045a4 <__aeabi_dcmplt>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	f43f af33 	beq.w	8000c2e <_dtoa_r+0x424>
 8000dc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8000dcc:	2b30      	cmp	r3, #48	; 0x30
 8000dce:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8000dd2:	d002      	beq.n	8000dda <_dtoa_r+0x5d0>
 8000dd4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8000dd8:	e04a      	b.n	8000e70 <_dtoa_r+0x666>
 8000dda:	4615      	mov	r5, r2
 8000ddc:	e7f4      	b.n	8000dc8 <_dtoa_r+0x5be>
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <_dtoa_r+0x5ee>)
 8000de0:	f000 fc76 	bl	80016d0 <__aeabi_dmul>
 8000de4:	e9cd 0100 	strd	r0, r1, [sp]
 8000de8:	e7bc      	b.n	8000d64 <_dtoa_r+0x55a>
 8000dea:	bf00      	nop
 8000dec:	080193b0 	.word	0x080193b0
 8000df0:	080194a0 	.word	0x080194a0
 8000df4:	3ff00000 	.word	0x3ff00000
 8000df8:	40240000 	.word	0x40240000
 8000dfc:	401c0000 	.word	0x401c0000
 8000e00:	40140000 	.word	0x40140000
 8000e04:	3fe00000 	.word	0x3fe00000
 8000e08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8000e0c:	9d03      	ldr	r5, [sp, #12]
 8000e0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000e12:	4630      	mov	r0, r6
 8000e14:	4639      	mov	r1, r7
 8000e16:	f000 fd85 	bl	8001924 <__aeabi_ddiv>
 8000e1a:	f000 fe6b 	bl	8001af4 <__aeabi_d2iz>
 8000e1e:	4604      	mov	r4, r0
 8000e20:	f000 fbec 	bl	80015fc <__aeabi_i2d>
 8000e24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000e28:	f000 fc52 	bl	80016d0 <__aeabi_dmul>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4630      	mov	r0, r6
 8000e32:	4639      	mov	r1, r7
 8000e34:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8000e38:	f000 fa92 	bl	8001360 <__aeabi_dsub>
 8000e3c:	f805 6b01 	strb.w	r6, [r5], #1
 8000e40:	9e03      	ldr	r6, [sp, #12]
 8000e42:	1bae      	subs	r6, r5, r6
 8000e44:	45b1      	cmp	r9, r6
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	d138      	bne.n	8000ebe <_dtoa_r+0x6b4>
 8000e4c:	f000 fa8a 	bl	8001364 <__adddf3>
 8000e50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000e54:	4606      	mov	r6, r0
 8000e56:	460f      	mov	r7, r1
 8000e58:	f003 fbc2 	bl	80045e0 <__aeabi_dcmpgt>
 8000e5c:	b9c0      	cbnz	r0, 8000e90 <_dtoa_r+0x686>
 8000e5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000e62:	4630      	mov	r0, r6
 8000e64:	4639      	mov	r1, r7
 8000e66:	f003 fb93 	bl	8004590 <__aeabi_dcmpeq>
 8000e6a:	b108      	cbz	r0, 8000e70 <_dtoa_r+0x666>
 8000e6c:	07e1      	lsls	r1, r4, #31
 8000e6e:	d40f      	bmi.n	8000e90 <_dtoa_r+0x686>
 8000e70:	4641      	mov	r1, r8
 8000e72:	4658      	mov	r0, fp
 8000e74:	f002 fba7 	bl	80035c6 <_Bfree>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000e7c:	702b      	strb	r3, [r5, #0]
 8000e7e:	f10a 0301 	add.w	r3, sl, #1
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f43f acf8 	beq.w	800087c <_dtoa_r+0x72>
 8000e8c:	601d      	str	r5, [r3, #0]
 8000e8e:	e4f5      	b.n	800087c <_dtoa_r+0x72>
 8000e90:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8000e94:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8000e98:	2a39      	cmp	r2, #57	; 0x39
 8000e9a:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8000e9e:	d108      	bne.n	8000eb2 <_dtoa_r+0x6a8>
 8000ea0:	9a03      	ldr	r2, [sp, #12]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d109      	bne.n	8000eba <_dtoa_r+0x6b0>
 8000ea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000ea8:	9903      	ldr	r1, [sp, #12]
 8000eaa:	3201      	adds	r2, #1
 8000eac:	920a      	str	r2, [sp, #40]	; 0x28
 8000eae:	2230      	movs	r2, #48	; 0x30
 8000eb0:	700a      	strb	r2, [r1, #0]
 8000eb2:	781a      	ldrb	r2, [r3, #0]
 8000eb4:	3201      	adds	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	e78c      	b.n	8000dd4 <_dtoa_r+0x5ca>
 8000eba:	461d      	mov	r5, r3
 8000ebc:	e7ea      	b.n	8000e94 <_dtoa_r+0x68a>
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4b9d      	ldr	r3, [pc, #628]	; (8001138 <_dtoa_r+0x92e>)
 8000ec2:	f000 fc05 	bl	80016d0 <__aeabi_dmul>
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4606      	mov	r6, r0
 8000ecc:	460f      	mov	r7, r1
 8000ece:	f003 fb5f 	bl	8004590 <__aeabi_dcmpeq>
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	d09b      	beq.n	8000e0e <_dtoa_r+0x604>
 8000ed6:	e7cb      	b.n	8000e70 <_dtoa_r+0x666>
 8000ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	f000 80cb 	beq.w	8001076 <_dtoa_r+0x86c>
 8000ee0:	9a08      	ldr	r2, [sp, #32]
 8000ee2:	2a01      	cmp	r2, #1
 8000ee4:	f300 80ae 	bgt.w	8001044 <_dtoa_r+0x83a>
 8000ee8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8000eea:	2a00      	cmp	r2, #0
 8000eec:	f000 80a6 	beq.w	800103c <_dtoa_r+0x832>
 8000ef0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8000ef4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8000ef6:	9d06      	ldr	r5, [sp, #24]
 8000ef8:	9a06      	ldr	r2, [sp, #24]
 8000efa:	441a      	add	r2, r3
 8000efc:	9206      	str	r2, [sp, #24]
 8000efe:	9a07      	ldr	r2, [sp, #28]
 8000f00:	2101      	movs	r1, #1
 8000f02:	441a      	add	r2, r3
 8000f04:	4658      	mov	r0, fp
 8000f06:	9207      	str	r2, [sp, #28]
 8000f08:	f002 fc2f 	bl	800376a <__i2b>
 8000f0c:	4606      	mov	r6, r0
 8000f0e:	2d00      	cmp	r5, #0
 8000f10:	dd0c      	ble.n	8000f2c <_dtoa_r+0x722>
 8000f12:	9b07      	ldr	r3, [sp, #28]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	dd09      	ble.n	8000f2c <_dtoa_r+0x722>
 8000f18:	42ab      	cmp	r3, r5
 8000f1a:	9a06      	ldr	r2, [sp, #24]
 8000f1c:	bfa8      	it	ge
 8000f1e:	462b      	movge	r3, r5
 8000f20:	1ad2      	subs	r2, r2, r3
 8000f22:	9206      	str	r2, [sp, #24]
 8000f24:	9a07      	ldr	r2, [sp, #28]
 8000f26:	1aed      	subs	r5, r5, r3
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	9307      	str	r3, [sp, #28]
 8000f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f2e:	b1f3      	cbz	r3, 8000f6e <_dtoa_r+0x764>
 8000f30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 80a3 	beq.w	800107e <_dtoa_r+0x874>
 8000f38:	2c00      	cmp	r4, #0
 8000f3a:	dd10      	ble.n	8000f5e <_dtoa_r+0x754>
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	4622      	mov	r2, r4
 8000f40:	4658      	mov	r0, fp
 8000f42:	f002 fcab 	bl	800389c <__pow5mult>
 8000f46:	4642      	mov	r2, r8
 8000f48:	4601      	mov	r1, r0
 8000f4a:	4606      	mov	r6, r0
 8000f4c:	4658      	mov	r0, fp
 8000f4e:	f002 fc15 	bl	800377c <__multiply>
 8000f52:	4641      	mov	r1, r8
 8000f54:	4607      	mov	r7, r0
 8000f56:	4658      	mov	r0, fp
 8000f58:	f002 fb35 	bl	80035c6 <_Bfree>
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f60:	1b1a      	subs	r2, r3, r4
 8000f62:	d004      	beq.n	8000f6e <_dtoa_r+0x764>
 8000f64:	4641      	mov	r1, r8
 8000f66:	4658      	mov	r0, fp
 8000f68:	f002 fc98 	bl	800389c <__pow5mult>
 8000f6c:	4680      	mov	r8, r0
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4658      	mov	r0, fp
 8000f72:	f002 fbfa 	bl	800376a <__i2b>
 8000f76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	f340 8081 	ble.w	8001082 <_dtoa_r+0x878>
 8000f80:	461a      	mov	r2, r3
 8000f82:	4601      	mov	r1, r0
 8000f84:	4658      	mov	r0, fp
 8000f86:	f002 fc89 	bl	800389c <__pow5mult>
 8000f8a:	9b08      	ldr	r3, [sp, #32]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	4604      	mov	r4, r0
 8000f90:	dd7a      	ble.n	8001088 <_dtoa_r+0x87e>
 8000f92:	2700      	movs	r7, #0
 8000f94:	6923      	ldr	r3, [r4, #16]
 8000f96:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000f9a:	6918      	ldr	r0, [r3, #16]
 8000f9c:	f002 fb95 	bl	80036ca <__hi0bits>
 8000fa0:	f1c0 0020 	rsb	r0, r0, #32
 8000fa4:	9b07      	ldr	r3, [sp, #28]
 8000fa6:	4418      	add	r0, r3
 8000fa8:	f010 001f 	ands.w	r0, r0, #31
 8000fac:	f000 808b 	beq.w	80010c6 <_dtoa_r+0x8bc>
 8000fb0:	f1c0 0320 	rsb	r3, r0, #32
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	f340 8084 	ble.w	80010c2 <_dtoa_r+0x8b8>
 8000fba:	f1c0 001c 	rsb	r0, r0, #28
 8000fbe:	9b06      	ldr	r3, [sp, #24]
 8000fc0:	4403      	add	r3, r0
 8000fc2:	9306      	str	r3, [sp, #24]
 8000fc4:	9b07      	ldr	r3, [sp, #28]
 8000fc6:	4403      	add	r3, r0
 8000fc8:	4405      	add	r5, r0
 8000fca:	9307      	str	r3, [sp, #28]
 8000fcc:	9b06      	ldr	r3, [sp, #24]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	dd05      	ble.n	8000fde <_dtoa_r+0x7d4>
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4658      	mov	r0, fp
 8000fd8:	f002 fca0 	bl	800391c <__lshift>
 8000fdc:	4680      	mov	r8, r0
 8000fde:	9b07      	ldr	r3, [sp, #28]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	dd05      	ble.n	8000ff0 <_dtoa_r+0x7e6>
 8000fe4:	4621      	mov	r1, r4
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4658      	mov	r0, fp
 8000fea:	f002 fc97 	bl	800391c <__lshift>
 8000fee:	4604      	mov	r4, r0
 8000ff0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d069      	beq.n	80010ca <_dtoa_r+0x8c0>
 8000ff6:	4621      	mov	r1, r4
 8000ff8:	4640      	mov	r0, r8
 8000ffa:	f002 fce2 	bl	80039c2 <__mcmp>
 8000ffe:	2800      	cmp	r0, #0
 8001000:	da63      	bge.n	80010ca <_dtoa_r+0x8c0>
 8001002:	2300      	movs	r3, #0
 8001004:	4641      	mov	r1, r8
 8001006:	220a      	movs	r2, #10
 8001008:	4658      	mov	r0, fp
 800100a:	f002 fae5 	bl	80035d8 <__multadd>
 800100e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001010:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8001014:	4680      	mov	r8, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 817c 	beq.w	8001314 <_dtoa_r+0xb0a>
 800101c:	2300      	movs	r3, #0
 800101e:	4631      	mov	r1, r6
 8001020:	220a      	movs	r2, #10
 8001022:	4658      	mov	r0, fp
 8001024:	f002 fad8 	bl	80035d8 <__multadd>
 8001028:	9b04      	ldr	r3, [sp, #16]
 800102a:	2b00      	cmp	r3, #0
 800102c:	4606      	mov	r6, r0
 800102e:	f300 808b 	bgt.w	8001148 <_dtoa_r+0x93e>
 8001032:	9b08      	ldr	r3, [sp, #32]
 8001034:	2b02      	cmp	r3, #2
 8001036:	f340 8087 	ble.w	8001148 <_dtoa_r+0x93e>
 800103a:	e04e      	b.n	80010da <_dtoa_r+0x8d0>
 800103c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800103e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8001042:	e757      	b.n	8000ef4 <_dtoa_r+0x6ea>
 8001044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001046:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800104a:	42a3      	cmp	r3, r4
 800104c:	bfbf      	itttt	lt
 800104e:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 8001050:	9409      	strlt	r4, [sp, #36]	; 0x24
 8001052:	1ae2      	sublt	r2, r4, r3
 8001054:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8001056:	bfbb      	ittet	lt
 8001058:	189b      	addlt	r3, r3, r2
 800105a:	9310      	strlt	r3, [sp, #64]	; 0x40
 800105c:	1b1c      	subge	r4, r3, r4
 800105e:	2400      	movlt	r4, #0
 8001060:	f1b9 0f00 	cmp.w	r9, #0
 8001064:	bfb5      	itete	lt
 8001066:	9b06      	ldrlt	r3, [sp, #24]
 8001068:	9d06      	ldrge	r5, [sp, #24]
 800106a:	eba3 0509 	sublt.w	r5, r3, r9
 800106e:	464b      	movge	r3, r9
 8001070:	bfb8      	it	lt
 8001072:	2300      	movlt	r3, #0
 8001074:	e740      	b.n	8000ef8 <_dtoa_r+0x6ee>
 8001076:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001078:	9d06      	ldr	r5, [sp, #24]
 800107a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800107c:	e747      	b.n	8000f0e <_dtoa_r+0x704>
 800107e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001080:	e770      	b.n	8000f64 <_dtoa_r+0x75a>
 8001082:	9b08      	ldr	r3, [sp, #32]
 8001084:	2b01      	cmp	r3, #1
 8001086:	dc18      	bgt.n	80010ba <_dtoa_r+0x8b0>
 8001088:	9b00      	ldr	r3, [sp, #0]
 800108a:	b9b3      	cbnz	r3, 80010ba <_dtoa_r+0x8b0>
 800108c:	9b01      	ldr	r3, [sp, #4]
 800108e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001092:	b9a3      	cbnz	r3, 80010be <_dtoa_r+0x8b4>
 8001094:	9b01      	ldr	r3, [sp, #4]
 8001096:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800109a:	0d3f      	lsrs	r7, r7, #20
 800109c:	053f      	lsls	r7, r7, #20
 800109e:	b137      	cbz	r7, 80010ae <_dtoa_r+0x8a4>
 80010a0:	9b06      	ldr	r3, [sp, #24]
 80010a2:	3301      	adds	r3, #1
 80010a4:	9306      	str	r3, [sp, #24]
 80010a6:	9b07      	ldr	r3, [sp, #28]
 80010a8:	3301      	adds	r3, #1
 80010aa:	9307      	str	r3, [sp, #28]
 80010ac:	2701      	movs	r7, #1
 80010ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f47f af6f 	bne.w	8000f94 <_dtoa_r+0x78a>
 80010b6:	2001      	movs	r0, #1
 80010b8:	e774      	b.n	8000fa4 <_dtoa_r+0x79a>
 80010ba:	2700      	movs	r7, #0
 80010bc:	e7f7      	b.n	80010ae <_dtoa_r+0x8a4>
 80010be:	9f00      	ldr	r7, [sp, #0]
 80010c0:	e7f5      	b.n	80010ae <_dtoa_r+0x8a4>
 80010c2:	d083      	beq.n	8000fcc <_dtoa_r+0x7c2>
 80010c4:	4618      	mov	r0, r3
 80010c6:	301c      	adds	r0, #28
 80010c8:	e779      	b.n	8000fbe <_dtoa_r+0x7b4>
 80010ca:	f1b9 0f00 	cmp.w	r9, #0
 80010ce:	dc35      	bgt.n	800113c <_dtoa_r+0x932>
 80010d0:	9b08      	ldr	r3, [sp, #32]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	dd32      	ble.n	800113c <_dtoa_r+0x932>
 80010d6:	f8cd 9010 	str.w	r9, [sp, #16]
 80010da:	9b04      	ldr	r3, [sp, #16]
 80010dc:	b963      	cbnz	r3, 80010f8 <_dtoa_r+0x8ee>
 80010de:	4621      	mov	r1, r4
 80010e0:	2205      	movs	r2, #5
 80010e2:	4658      	mov	r0, fp
 80010e4:	f002 fa78 	bl	80035d8 <__multadd>
 80010e8:	4601      	mov	r1, r0
 80010ea:	4604      	mov	r4, r0
 80010ec:	4640      	mov	r0, r8
 80010ee:	f002 fc68 	bl	80039c2 <__mcmp>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	f73f adc7 	bgt.w	8000c86 <_dtoa_r+0x47c>
 80010f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80010fa:	9d03      	ldr	r5, [sp, #12]
 80010fc:	ea6f 0a03 	mvn.w	sl, r3
 8001100:	2700      	movs	r7, #0
 8001102:	4621      	mov	r1, r4
 8001104:	4658      	mov	r0, fp
 8001106:	f002 fa5e 	bl	80035c6 <_Bfree>
 800110a:	2e00      	cmp	r6, #0
 800110c:	f43f aeb0 	beq.w	8000e70 <_dtoa_r+0x666>
 8001110:	b12f      	cbz	r7, 800111e <_dtoa_r+0x914>
 8001112:	42b7      	cmp	r7, r6
 8001114:	d003      	beq.n	800111e <_dtoa_r+0x914>
 8001116:	4639      	mov	r1, r7
 8001118:	4658      	mov	r0, fp
 800111a:	f002 fa54 	bl	80035c6 <_Bfree>
 800111e:	4631      	mov	r1, r6
 8001120:	4658      	mov	r0, fp
 8001122:	f002 fa50 	bl	80035c6 <_Bfree>
 8001126:	e6a3      	b.n	8000e70 <_dtoa_r+0x666>
 8001128:	2400      	movs	r4, #0
 800112a:	4626      	mov	r6, r4
 800112c:	e7e4      	b.n	80010f8 <_dtoa_r+0x8ee>
 800112e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8001132:	4626      	mov	r6, r4
 8001134:	e5a7      	b.n	8000c86 <_dtoa_r+0x47c>
 8001136:	bf00      	nop
 8001138:	40240000 	.word	0x40240000
 800113c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800113e:	f8cd 9010 	str.w	r9, [sp, #16]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 80ed 	beq.w	8001322 <_dtoa_r+0xb18>
 8001148:	2d00      	cmp	r5, #0
 800114a:	dd05      	ble.n	8001158 <_dtoa_r+0x94e>
 800114c:	4631      	mov	r1, r6
 800114e:	462a      	mov	r2, r5
 8001150:	4658      	mov	r0, fp
 8001152:	f002 fbe3 	bl	800391c <__lshift>
 8001156:	4606      	mov	r6, r0
 8001158:	2f00      	cmp	r7, #0
 800115a:	d056      	beq.n	800120a <_dtoa_r+0xa00>
 800115c:	6871      	ldr	r1, [r6, #4]
 800115e:	4658      	mov	r0, fp
 8001160:	f002 fa0c 	bl	800357c <_Balloc>
 8001164:	6932      	ldr	r2, [r6, #16]
 8001166:	3202      	adds	r2, #2
 8001168:	4605      	mov	r5, r0
 800116a:	0092      	lsls	r2, r2, #2
 800116c:	f106 010c 	add.w	r1, r6, #12
 8001170:	300c      	adds	r0, #12
 8001172:	f003 fbd4 	bl	800491e <memcpy>
 8001176:	2201      	movs	r2, #1
 8001178:	4629      	mov	r1, r5
 800117a:	4658      	mov	r0, fp
 800117c:	f002 fbce 	bl	800391c <__lshift>
 8001180:	9b03      	ldr	r3, [sp, #12]
 8001182:	f103 0901 	add.w	r9, r3, #1
 8001186:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800118a:	4413      	add	r3, r2
 800118c:	9309      	str	r3, [sp, #36]	; 0x24
 800118e:	9b00      	ldr	r3, [sp, #0]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	4637      	mov	r7, r6
 8001196:	9307      	str	r3, [sp, #28]
 8001198:	4606      	mov	r6, r0
 800119a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800119e:	4621      	mov	r1, r4
 80011a0:	4640      	mov	r0, r8
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	f7ff faa8 	bl	80006f8 <quorem>
 80011a8:	4603      	mov	r3, r0
 80011aa:	3330      	adds	r3, #48	; 0x30
 80011ac:	9004      	str	r0, [sp, #16]
 80011ae:	4639      	mov	r1, r7
 80011b0:	4640      	mov	r0, r8
 80011b2:	930a      	str	r3, [sp, #40]	; 0x28
 80011b4:	f002 fc05 	bl	80039c2 <__mcmp>
 80011b8:	4632      	mov	r2, r6
 80011ba:	9006      	str	r0, [sp, #24]
 80011bc:	4621      	mov	r1, r4
 80011be:	4658      	mov	r0, fp
 80011c0:	f002 fc19 	bl	80039f6 <__mdiff>
 80011c4:	68c2      	ldr	r2, [r0, #12]
 80011c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011c8:	4605      	mov	r5, r0
 80011ca:	bb02      	cbnz	r2, 800120e <_dtoa_r+0xa04>
 80011cc:	4601      	mov	r1, r0
 80011ce:	4640      	mov	r0, r8
 80011d0:	f002 fbf7 	bl	80039c2 <__mcmp>
 80011d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011d6:	4602      	mov	r2, r0
 80011d8:	4629      	mov	r1, r5
 80011da:	4658      	mov	r0, fp
 80011dc:	920c      	str	r2, [sp, #48]	; 0x30
 80011de:	930a      	str	r3, [sp, #40]	; 0x28
 80011e0:	f002 f9f1 	bl	80035c6 <_Bfree>
 80011e4:	9b08      	ldr	r3, [sp, #32]
 80011e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80011e8:	ea43 0102 	orr.w	r1, r3, r2
 80011ec:	9b07      	ldr	r3, [sp, #28]
 80011ee:	430b      	orrs	r3, r1
 80011f0:	464d      	mov	r5, r9
 80011f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011f4:	d10d      	bne.n	8001212 <_dtoa_r+0xa08>
 80011f6:	2b39      	cmp	r3, #57	; 0x39
 80011f8:	d027      	beq.n	800124a <_dtoa_r+0xa40>
 80011fa:	9a06      	ldr	r2, [sp, #24]
 80011fc:	2a00      	cmp	r2, #0
 80011fe:	dd01      	ble.n	8001204 <_dtoa_r+0x9fa>
 8001200:	9b04      	ldr	r3, [sp, #16]
 8001202:	3331      	adds	r3, #49	; 0x31
 8001204:	9a00      	ldr	r2, [sp, #0]
 8001206:	7013      	strb	r3, [r2, #0]
 8001208:	e77b      	b.n	8001102 <_dtoa_r+0x8f8>
 800120a:	4630      	mov	r0, r6
 800120c:	e7b8      	b.n	8001180 <_dtoa_r+0x976>
 800120e:	2201      	movs	r2, #1
 8001210:	e7e2      	b.n	80011d8 <_dtoa_r+0x9ce>
 8001212:	9906      	ldr	r1, [sp, #24]
 8001214:	2900      	cmp	r1, #0
 8001216:	db04      	blt.n	8001222 <_dtoa_r+0xa18>
 8001218:	9808      	ldr	r0, [sp, #32]
 800121a:	4301      	orrs	r1, r0
 800121c:	9807      	ldr	r0, [sp, #28]
 800121e:	4301      	orrs	r1, r0
 8001220:	d11e      	bne.n	8001260 <_dtoa_r+0xa56>
 8001222:	2a00      	cmp	r2, #0
 8001224:	ddee      	ble.n	8001204 <_dtoa_r+0x9fa>
 8001226:	4641      	mov	r1, r8
 8001228:	2201      	movs	r2, #1
 800122a:	4658      	mov	r0, fp
 800122c:	9306      	str	r3, [sp, #24]
 800122e:	f002 fb75 	bl	800391c <__lshift>
 8001232:	4621      	mov	r1, r4
 8001234:	4680      	mov	r8, r0
 8001236:	f002 fbc4 	bl	80039c2 <__mcmp>
 800123a:	2800      	cmp	r0, #0
 800123c:	9b06      	ldr	r3, [sp, #24]
 800123e:	dc02      	bgt.n	8001246 <_dtoa_r+0xa3c>
 8001240:	d1e0      	bne.n	8001204 <_dtoa_r+0x9fa>
 8001242:	07da      	lsls	r2, r3, #31
 8001244:	d5de      	bpl.n	8001204 <_dtoa_r+0x9fa>
 8001246:	2b39      	cmp	r3, #57	; 0x39
 8001248:	d1da      	bne.n	8001200 <_dtoa_r+0x9f6>
 800124a:	9a00      	ldr	r2, [sp, #0]
 800124c:	2339      	movs	r3, #57	; 0x39
 800124e:	7013      	strb	r3, [r2, #0]
 8001250:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8001254:	2b39      	cmp	r3, #57	; 0x39
 8001256:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800125a:	d047      	beq.n	80012ec <_dtoa_r+0xae2>
 800125c:	3301      	adds	r3, #1
 800125e:	e7d2      	b.n	8001206 <_dtoa_r+0x9fc>
 8001260:	2a00      	cmp	r2, #0
 8001262:	dd03      	ble.n	800126c <_dtoa_r+0xa62>
 8001264:	2b39      	cmp	r3, #57	; 0x39
 8001266:	d0f0      	beq.n	800124a <_dtoa_r+0xa40>
 8001268:	3301      	adds	r3, #1
 800126a:	e7cb      	b.n	8001204 <_dtoa_r+0x9fa>
 800126c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800126e:	f809 3c01 	strb.w	r3, [r9, #-1]
 8001272:	4591      	cmp	r9, r2
 8001274:	d021      	beq.n	80012ba <_dtoa_r+0xab0>
 8001276:	4641      	mov	r1, r8
 8001278:	2300      	movs	r3, #0
 800127a:	220a      	movs	r2, #10
 800127c:	4658      	mov	r0, fp
 800127e:	f002 f9ab 	bl	80035d8 <__multadd>
 8001282:	42b7      	cmp	r7, r6
 8001284:	4680      	mov	r8, r0
 8001286:	f04f 0300 	mov.w	r3, #0
 800128a:	f04f 020a 	mov.w	r2, #10
 800128e:	4639      	mov	r1, r7
 8001290:	4658      	mov	r0, fp
 8001292:	d106      	bne.n	80012a2 <_dtoa_r+0xa98>
 8001294:	f002 f9a0 	bl	80035d8 <__multadd>
 8001298:	4607      	mov	r7, r0
 800129a:	4606      	mov	r6, r0
 800129c:	f109 0901 	add.w	r9, r9, #1
 80012a0:	e77b      	b.n	800119a <_dtoa_r+0x990>
 80012a2:	f002 f999 	bl	80035d8 <__multadd>
 80012a6:	4631      	mov	r1, r6
 80012a8:	4607      	mov	r7, r0
 80012aa:	2300      	movs	r3, #0
 80012ac:	220a      	movs	r2, #10
 80012ae:	4658      	mov	r0, fp
 80012b0:	f002 f992 	bl	80035d8 <__multadd>
 80012b4:	4606      	mov	r6, r0
 80012b6:	e7f1      	b.n	800129c <_dtoa_r+0xa92>
 80012b8:	2700      	movs	r7, #0
 80012ba:	4641      	mov	r1, r8
 80012bc:	2201      	movs	r2, #1
 80012be:	4658      	mov	r0, fp
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	f002 fb2b 	bl	800391c <__lshift>
 80012c6:	4621      	mov	r1, r4
 80012c8:	4680      	mov	r8, r0
 80012ca:	f002 fb7a 	bl	80039c2 <__mcmp>
 80012ce:	2800      	cmp	r0, #0
 80012d0:	dcbe      	bgt.n	8001250 <_dtoa_r+0xa46>
 80012d2:	d102      	bne.n	80012da <_dtoa_r+0xad0>
 80012d4:	9b00      	ldr	r3, [sp, #0]
 80012d6:	07db      	lsls	r3, r3, #31
 80012d8:	d4ba      	bmi.n	8001250 <_dtoa_r+0xa46>
 80012da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80012de:	2b30      	cmp	r3, #48	; 0x30
 80012e0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80012e4:	f47f af0d 	bne.w	8001102 <_dtoa_r+0x8f8>
 80012e8:	4615      	mov	r5, r2
 80012ea:	e7f6      	b.n	80012da <_dtoa_r+0xad0>
 80012ec:	9b03      	ldr	r3, [sp, #12]
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d104      	bne.n	80012fc <_dtoa_r+0xaf2>
 80012f2:	f10a 0a01 	add.w	sl, sl, #1
 80012f6:	2331      	movs	r3, #49	; 0x31
 80012f8:	9a03      	ldr	r2, [sp, #12]
 80012fa:	e784      	b.n	8001206 <_dtoa_r+0x9fc>
 80012fc:	4615      	mov	r5, r2
 80012fe:	e7a7      	b.n	8001250 <_dtoa_r+0xa46>
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <_dtoa_r+0xb46>)
 8001302:	f7ff bada 	b.w	80008ba <_dtoa_r+0xb0>
 8001306:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001308:	2b00      	cmp	r3, #0
 800130a:	f47f aabb 	bne.w	8000884 <_dtoa_r+0x7a>
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <_dtoa_r+0xb4a>)
 8001310:	f7ff bad3 	b.w	80008ba <_dtoa_r+0xb0>
 8001314:	9b04      	ldr	r3, [sp, #16]
 8001316:	2b00      	cmp	r3, #0
 8001318:	dc03      	bgt.n	8001322 <_dtoa_r+0xb18>
 800131a:	9b08      	ldr	r3, [sp, #32]
 800131c:	2b02      	cmp	r3, #2
 800131e:	f73f aedc 	bgt.w	80010da <_dtoa_r+0x8d0>
 8001322:	9d03      	ldr	r5, [sp, #12]
 8001324:	4621      	mov	r1, r4
 8001326:	4640      	mov	r0, r8
 8001328:	f7ff f9e6 	bl	80006f8 <quorem>
 800132c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001330:	f805 3b01 	strb.w	r3, [r5], #1
 8001334:	9a03      	ldr	r2, [sp, #12]
 8001336:	9904      	ldr	r1, [sp, #16]
 8001338:	1aaa      	subs	r2, r5, r2
 800133a:	4291      	cmp	r1, r2
 800133c:	ddbc      	ble.n	80012b8 <_dtoa_r+0xaae>
 800133e:	4641      	mov	r1, r8
 8001340:	2300      	movs	r3, #0
 8001342:	220a      	movs	r2, #10
 8001344:	4658      	mov	r0, fp
 8001346:	f002 f947 	bl	80035d8 <__multadd>
 800134a:	4680      	mov	r8, r0
 800134c:	e7ea      	b.n	8001324 <_dtoa_r+0xb1a>
 800134e:	bf00      	nop
 8001350:	0801a476 	.word	0x0801a476
 8001354:	0801d85e 	.word	0x0801d85e

08001358 <__aeabi_drsub>:
 8001358:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800135c:	e002      	b.n	8001364 <__adddf3>
 800135e:	bf00      	nop

08001360 <__aeabi_dsub>:
 8001360:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08001364 <__adddf3>:
 8001364:	b530      	push	{r4, r5, lr}
 8001366:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800136a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800136e:	ea94 0f05 	teq	r4, r5
 8001372:	bf08      	it	eq
 8001374:	ea90 0f02 	teqeq	r0, r2
 8001378:	bf1f      	itttt	ne
 800137a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800137e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8001382:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8001386:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800138a:	f000 80e2 	beq.w	8001552 <__adddf3+0x1ee>
 800138e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8001392:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8001396:	bfb8      	it	lt
 8001398:	426d      	neglt	r5, r5
 800139a:	dd0c      	ble.n	80013b6 <__adddf3+0x52>
 800139c:	442c      	add	r4, r5
 800139e:	ea80 0202 	eor.w	r2, r0, r2
 80013a2:	ea81 0303 	eor.w	r3, r1, r3
 80013a6:	ea82 0000 	eor.w	r0, r2, r0
 80013aa:	ea83 0101 	eor.w	r1, r3, r1
 80013ae:	ea80 0202 	eor.w	r2, r0, r2
 80013b2:	ea81 0303 	eor.w	r3, r1, r3
 80013b6:	2d36      	cmp	r5, #54	; 0x36
 80013b8:	bf88      	it	hi
 80013ba:	bd30      	pophi	{r4, r5, pc}
 80013bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80013c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80013c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80013c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80013cc:	d002      	beq.n	80013d4 <__adddf3+0x70>
 80013ce:	4240      	negs	r0, r0
 80013d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80013d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80013d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80013dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80013e0:	d002      	beq.n	80013e8 <__adddf3+0x84>
 80013e2:	4252      	negs	r2, r2
 80013e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80013e8:	ea94 0f05 	teq	r4, r5
 80013ec:	f000 80a7 	beq.w	800153e <__adddf3+0x1da>
 80013f0:	f1a4 0401 	sub.w	r4, r4, #1
 80013f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80013f8:	db0d      	blt.n	8001416 <__adddf3+0xb2>
 80013fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80013fe:	fa22 f205 	lsr.w	r2, r2, r5
 8001402:	1880      	adds	r0, r0, r2
 8001404:	f141 0100 	adc.w	r1, r1, #0
 8001408:	fa03 f20e 	lsl.w	r2, r3, lr
 800140c:	1880      	adds	r0, r0, r2
 800140e:	fa43 f305 	asr.w	r3, r3, r5
 8001412:	4159      	adcs	r1, r3
 8001414:	e00e      	b.n	8001434 <__adddf3+0xd0>
 8001416:	f1a5 0520 	sub.w	r5, r5, #32
 800141a:	f10e 0e20 	add.w	lr, lr, #32
 800141e:	2a01      	cmp	r2, #1
 8001420:	fa03 fc0e 	lsl.w	ip, r3, lr
 8001424:	bf28      	it	cs
 8001426:	f04c 0c02 	orrcs.w	ip, ip, #2
 800142a:	fa43 f305 	asr.w	r3, r3, r5
 800142e:	18c0      	adds	r0, r0, r3
 8001430:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8001434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001438:	d507      	bpl.n	800144a <__adddf3+0xe6>
 800143a:	f04f 0e00 	mov.w	lr, #0
 800143e:	f1dc 0c00 	rsbs	ip, ip, #0
 8001442:	eb7e 0000 	sbcs.w	r0, lr, r0
 8001446:	eb6e 0101 	sbc.w	r1, lr, r1
 800144a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800144e:	d31b      	bcc.n	8001488 <__adddf3+0x124>
 8001450:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8001454:	d30c      	bcc.n	8001470 <__adddf3+0x10c>
 8001456:	0849      	lsrs	r1, r1, #1
 8001458:	ea5f 0030 	movs.w	r0, r0, rrx
 800145c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8001460:	f104 0401 	add.w	r4, r4, #1
 8001464:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8001468:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800146c:	f080 809a 	bcs.w	80015a4 <__adddf3+0x240>
 8001470:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8001474:	bf08      	it	eq
 8001476:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800147a:	f150 0000 	adcs.w	r0, r0, #0
 800147e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001482:	ea41 0105 	orr.w	r1, r1, r5
 8001486:	bd30      	pop	{r4, r5, pc}
 8001488:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800148c:	4140      	adcs	r0, r0
 800148e:	eb41 0101 	adc.w	r1, r1, r1
 8001492:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001496:	f1a4 0401 	sub.w	r4, r4, #1
 800149a:	d1e9      	bne.n	8001470 <__adddf3+0x10c>
 800149c:	f091 0f00 	teq	r1, #0
 80014a0:	bf04      	itt	eq
 80014a2:	4601      	moveq	r1, r0
 80014a4:	2000      	moveq	r0, #0
 80014a6:	fab1 f381 	clz	r3, r1
 80014aa:	bf08      	it	eq
 80014ac:	3320      	addeq	r3, #32
 80014ae:	f1a3 030b 	sub.w	r3, r3, #11
 80014b2:	f1b3 0220 	subs.w	r2, r3, #32
 80014b6:	da0c      	bge.n	80014d2 <__adddf3+0x16e>
 80014b8:	320c      	adds	r2, #12
 80014ba:	dd08      	ble.n	80014ce <__adddf3+0x16a>
 80014bc:	f102 0c14 	add.w	ip, r2, #20
 80014c0:	f1c2 020c 	rsb	r2, r2, #12
 80014c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80014c8:	fa21 f102 	lsr.w	r1, r1, r2
 80014cc:	e00c      	b.n	80014e8 <__adddf3+0x184>
 80014ce:	f102 0214 	add.w	r2, r2, #20
 80014d2:	bfd8      	it	le
 80014d4:	f1c2 0c20 	rsble	ip, r2, #32
 80014d8:	fa01 f102 	lsl.w	r1, r1, r2
 80014dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80014e0:	bfdc      	itt	le
 80014e2:	ea41 010c 	orrle.w	r1, r1, ip
 80014e6:	4090      	lslle	r0, r2
 80014e8:	1ae4      	subs	r4, r4, r3
 80014ea:	bfa2      	ittt	ge
 80014ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80014f0:	4329      	orrge	r1, r5
 80014f2:	bd30      	popge	{r4, r5, pc}
 80014f4:	ea6f 0404 	mvn.w	r4, r4
 80014f8:	3c1f      	subs	r4, #31
 80014fa:	da1c      	bge.n	8001536 <__adddf3+0x1d2>
 80014fc:	340c      	adds	r4, #12
 80014fe:	dc0e      	bgt.n	800151e <__adddf3+0x1ba>
 8001500:	f104 0414 	add.w	r4, r4, #20
 8001504:	f1c4 0220 	rsb	r2, r4, #32
 8001508:	fa20 f004 	lsr.w	r0, r0, r4
 800150c:	fa01 f302 	lsl.w	r3, r1, r2
 8001510:	ea40 0003 	orr.w	r0, r0, r3
 8001514:	fa21 f304 	lsr.w	r3, r1, r4
 8001518:	ea45 0103 	orr.w	r1, r5, r3
 800151c:	bd30      	pop	{r4, r5, pc}
 800151e:	f1c4 040c 	rsb	r4, r4, #12
 8001522:	f1c4 0220 	rsb	r2, r4, #32
 8001526:	fa20 f002 	lsr.w	r0, r0, r2
 800152a:	fa01 f304 	lsl.w	r3, r1, r4
 800152e:	ea40 0003 	orr.w	r0, r0, r3
 8001532:	4629      	mov	r1, r5
 8001534:	bd30      	pop	{r4, r5, pc}
 8001536:	fa21 f004 	lsr.w	r0, r1, r4
 800153a:	4629      	mov	r1, r5
 800153c:	bd30      	pop	{r4, r5, pc}
 800153e:	f094 0f00 	teq	r4, #0
 8001542:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8001546:	bf06      	itte	eq
 8001548:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800154c:	3401      	addeq	r4, #1
 800154e:	3d01      	subne	r5, #1
 8001550:	e74e      	b.n	80013f0 <__adddf3+0x8c>
 8001552:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8001556:	bf18      	it	ne
 8001558:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800155c:	d029      	beq.n	80015b2 <__adddf3+0x24e>
 800155e:	ea94 0f05 	teq	r4, r5
 8001562:	bf08      	it	eq
 8001564:	ea90 0f02 	teqeq	r0, r2
 8001568:	d005      	beq.n	8001576 <__adddf3+0x212>
 800156a:	ea54 0c00 	orrs.w	ip, r4, r0
 800156e:	bf04      	itt	eq
 8001570:	4619      	moveq	r1, r3
 8001572:	4610      	moveq	r0, r2
 8001574:	bd30      	pop	{r4, r5, pc}
 8001576:	ea91 0f03 	teq	r1, r3
 800157a:	bf1e      	ittt	ne
 800157c:	2100      	movne	r1, #0
 800157e:	2000      	movne	r0, #0
 8001580:	bd30      	popne	{r4, r5, pc}
 8001582:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8001586:	d105      	bne.n	8001594 <__adddf3+0x230>
 8001588:	0040      	lsls	r0, r0, #1
 800158a:	4149      	adcs	r1, r1
 800158c:	bf28      	it	cs
 800158e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8001592:	bd30      	pop	{r4, r5, pc}
 8001594:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8001598:	bf3c      	itt	cc
 800159a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800159e:	bd30      	popcc	{r4, r5, pc}
 80015a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80015a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80015a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80015ac:	f04f 0000 	mov.w	r0, #0
 80015b0:	bd30      	pop	{r4, r5, pc}
 80015b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80015b6:	bf1a      	itte	ne
 80015b8:	4619      	movne	r1, r3
 80015ba:	4610      	movne	r0, r2
 80015bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80015c0:	bf1c      	itt	ne
 80015c2:	460b      	movne	r3, r1
 80015c4:	4602      	movne	r2, r0
 80015c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80015ca:	bf06      	itte	eq
 80015cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80015d0:	ea91 0f03 	teqeq	r1, r3
 80015d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80015d8:	bd30      	pop	{r4, r5, pc}
 80015da:	bf00      	nop

080015dc <__aeabi_ui2d>:
 80015dc:	f090 0f00 	teq	r0, #0
 80015e0:	bf04      	itt	eq
 80015e2:	2100      	moveq	r1, #0
 80015e4:	4770      	bxeq	lr
 80015e6:	b530      	push	{r4, r5, lr}
 80015e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80015ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80015f0:	f04f 0500 	mov.w	r5, #0
 80015f4:	f04f 0100 	mov.w	r1, #0
 80015f8:	e750      	b.n	800149c <__adddf3+0x138>
 80015fa:	bf00      	nop

080015fc <__aeabi_i2d>:
 80015fc:	f090 0f00 	teq	r0, #0
 8001600:	bf04      	itt	eq
 8001602:	2100      	moveq	r1, #0
 8001604:	4770      	bxeq	lr
 8001606:	b530      	push	{r4, r5, lr}
 8001608:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800160c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001610:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8001614:	bf48      	it	mi
 8001616:	4240      	negmi	r0, r0
 8001618:	f04f 0100 	mov.w	r1, #0
 800161c:	e73e      	b.n	800149c <__adddf3+0x138>
 800161e:	bf00      	nop

08001620 <__aeabi_f2d>:
 8001620:	0042      	lsls	r2, r0, #1
 8001622:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8001626:	ea4f 0131 	mov.w	r1, r1, rrx
 800162a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800162e:	bf1f      	itttt	ne
 8001630:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8001634:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8001638:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800163c:	4770      	bxne	lr
 800163e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8001642:	bf08      	it	eq
 8001644:	4770      	bxeq	lr
 8001646:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800164a:	bf04      	itt	eq
 800164c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8001650:	4770      	bxeq	lr
 8001652:	b530      	push	{r4, r5, lr}
 8001654:	f44f 7460 	mov.w	r4, #896	; 0x380
 8001658:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800165c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001660:	e71c      	b.n	800149c <__adddf3+0x138>
 8001662:	bf00      	nop

08001664 <__aeabi_ul2d>:
 8001664:	ea50 0201 	orrs.w	r2, r0, r1
 8001668:	bf08      	it	eq
 800166a:	4770      	bxeq	lr
 800166c:	b530      	push	{r4, r5, lr}
 800166e:	f04f 0500 	mov.w	r5, #0
 8001672:	e00a      	b.n	800168a <__aeabi_l2d+0x16>

08001674 <__aeabi_l2d>:
 8001674:	ea50 0201 	orrs.w	r2, r0, r1
 8001678:	bf08      	it	eq
 800167a:	4770      	bxeq	lr
 800167c:	b530      	push	{r4, r5, lr}
 800167e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8001682:	d502      	bpl.n	800168a <__aeabi_l2d+0x16>
 8001684:	4240      	negs	r0, r0
 8001686:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800168a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800168e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001692:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8001696:	f43f aed8 	beq.w	800144a <__adddf3+0xe6>
 800169a:	f04f 0203 	mov.w	r2, #3
 800169e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80016a2:	bf18      	it	ne
 80016a4:	3203      	addne	r2, #3
 80016a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80016aa:	bf18      	it	ne
 80016ac:	3203      	addne	r2, #3
 80016ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80016b2:	f1c2 0320 	rsb	r3, r2, #32
 80016b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80016ba:	fa20 f002 	lsr.w	r0, r0, r2
 80016be:	fa01 fe03 	lsl.w	lr, r1, r3
 80016c2:	ea40 000e 	orr.w	r0, r0, lr
 80016c6:	fa21 f102 	lsr.w	r1, r1, r2
 80016ca:	4414      	add	r4, r2
 80016cc:	e6bd      	b.n	800144a <__adddf3+0xe6>
 80016ce:	bf00      	nop

080016d0 <__aeabi_dmul>:
 80016d0:	b570      	push	{r4, r5, r6, lr}
 80016d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80016d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80016da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80016de:	bf1d      	ittte	ne
 80016e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80016e4:	ea94 0f0c 	teqne	r4, ip
 80016e8:	ea95 0f0c 	teqne	r5, ip
 80016ec:	f000 f8de 	bleq	80018ac <__aeabi_dmul+0x1dc>
 80016f0:	442c      	add	r4, r5
 80016f2:	ea81 0603 	eor.w	r6, r1, r3
 80016f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80016fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80016fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8001702:	bf18      	it	ne
 8001704:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8001708:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800170c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001710:	d038      	beq.n	8001784 <__aeabi_dmul+0xb4>
 8001712:	fba0 ce02 	umull	ip, lr, r0, r2
 8001716:	f04f 0500 	mov.w	r5, #0
 800171a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800171e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8001722:	fbe0 e503 	umlal	lr, r5, r0, r3
 8001726:	f04f 0600 	mov.w	r6, #0
 800172a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800172e:	f09c 0f00 	teq	ip, #0
 8001732:	bf18      	it	ne
 8001734:	f04e 0e01 	orrne.w	lr, lr, #1
 8001738:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800173c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8001740:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8001744:	d204      	bcs.n	8001750 <__aeabi_dmul+0x80>
 8001746:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800174a:	416d      	adcs	r5, r5
 800174c:	eb46 0606 	adc.w	r6, r6, r6
 8001750:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8001754:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8001758:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800175c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8001760:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8001764:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8001768:	bf88      	it	hi
 800176a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800176e:	d81e      	bhi.n	80017ae <__aeabi_dmul+0xde>
 8001770:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8001774:	bf08      	it	eq
 8001776:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800177a:	f150 0000 	adcs.w	r0, r0, #0
 800177e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001782:	bd70      	pop	{r4, r5, r6, pc}
 8001784:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8001788:	ea46 0101 	orr.w	r1, r6, r1
 800178c:	ea40 0002 	orr.w	r0, r0, r2
 8001790:	ea81 0103 	eor.w	r1, r1, r3
 8001794:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8001798:	bfc2      	ittt	gt
 800179a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800179e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80017a2:	bd70      	popgt	{r4, r5, r6, pc}
 80017a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80017a8:	f04f 0e00 	mov.w	lr, #0
 80017ac:	3c01      	subs	r4, #1
 80017ae:	f300 80ab 	bgt.w	8001908 <__aeabi_dmul+0x238>
 80017b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80017b6:	bfde      	ittt	le
 80017b8:	2000      	movle	r0, #0
 80017ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80017be:	bd70      	pople	{r4, r5, r6, pc}
 80017c0:	f1c4 0400 	rsb	r4, r4, #0
 80017c4:	3c20      	subs	r4, #32
 80017c6:	da35      	bge.n	8001834 <__aeabi_dmul+0x164>
 80017c8:	340c      	adds	r4, #12
 80017ca:	dc1b      	bgt.n	8001804 <__aeabi_dmul+0x134>
 80017cc:	f104 0414 	add.w	r4, r4, #20
 80017d0:	f1c4 0520 	rsb	r5, r4, #32
 80017d4:	fa00 f305 	lsl.w	r3, r0, r5
 80017d8:	fa20 f004 	lsr.w	r0, r0, r4
 80017dc:	fa01 f205 	lsl.w	r2, r1, r5
 80017e0:	ea40 0002 	orr.w	r0, r0, r2
 80017e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80017e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80017ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80017f0:	fa21 f604 	lsr.w	r6, r1, r4
 80017f4:	eb42 0106 	adc.w	r1, r2, r6
 80017f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80017fc:	bf08      	it	eq
 80017fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001802:	bd70      	pop	{r4, r5, r6, pc}
 8001804:	f1c4 040c 	rsb	r4, r4, #12
 8001808:	f1c4 0520 	rsb	r5, r4, #32
 800180c:	fa00 f304 	lsl.w	r3, r0, r4
 8001810:	fa20 f005 	lsr.w	r0, r0, r5
 8001814:	fa01 f204 	lsl.w	r2, r1, r4
 8001818:	ea40 0002 	orr.w	r0, r0, r2
 800181c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001820:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001824:	f141 0100 	adc.w	r1, r1, #0
 8001828:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800182c:	bf08      	it	eq
 800182e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001832:	bd70      	pop	{r4, r5, r6, pc}
 8001834:	f1c4 0520 	rsb	r5, r4, #32
 8001838:	fa00 f205 	lsl.w	r2, r0, r5
 800183c:	ea4e 0e02 	orr.w	lr, lr, r2
 8001840:	fa20 f304 	lsr.w	r3, r0, r4
 8001844:	fa01 f205 	lsl.w	r2, r1, r5
 8001848:	ea43 0302 	orr.w	r3, r3, r2
 800184c:	fa21 f004 	lsr.w	r0, r1, r4
 8001850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001854:	fa21 f204 	lsr.w	r2, r1, r4
 8001858:	ea20 0002 	bic.w	r0, r0, r2
 800185c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8001860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001864:	bf08      	it	eq
 8001866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800186a:	bd70      	pop	{r4, r5, r6, pc}
 800186c:	f094 0f00 	teq	r4, #0
 8001870:	d10f      	bne.n	8001892 <__aeabi_dmul+0x1c2>
 8001872:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8001876:	0040      	lsls	r0, r0, #1
 8001878:	eb41 0101 	adc.w	r1, r1, r1
 800187c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001880:	bf08      	it	eq
 8001882:	3c01      	subeq	r4, #1
 8001884:	d0f7      	beq.n	8001876 <__aeabi_dmul+0x1a6>
 8001886:	ea41 0106 	orr.w	r1, r1, r6
 800188a:	f095 0f00 	teq	r5, #0
 800188e:	bf18      	it	ne
 8001890:	4770      	bxne	lr
 8001892:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8001896:	0052      	lsls	r2, r2, #1
 8001898:	eb43 0303 	adc.w	r3, r3, r3
 800189c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80018a0:	bf08      	it	eq
 80018a2:	3d01      	subeq	r5, #1
 80018a4:	d0f7      	beq.n	8001896 <__aeabi_dmul+0x1c6>
 80018a6:	ea43 0306 	orr.w	r3, r3, r6
 80018aa:	4770      	bx	lr
 80018ac:	ea94 0f0c 	teq	r4, ip
 80018b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80018b4:	bf18      	it	ne
 80018b6:	ea95 0f0c 	teqne	r5, ip
 80018ba:	d00c      	beq.n	80018d6 <__aeabi_dmul+0x206>
 80018bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80018c0:	bf18      	it	ne
 80018c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80018c6:	d1d1      	bne.n	800186c <__aeabi_dmul+0x19c>
 80018c8:	ea81 0103 	eor.w	r1, r1, r3
 80018cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80018d0:	f04f 0000 	mov.w	r0, #0
 80018d4:	bd70      	pop	{r4, r5, r6, pc}
 80018d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80018da:	bf06      	itte	eq
 80018dc:	4610      	moveq	r0, r2
 80018de:	4619      	moveq	r1, r3
 80018e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80018e4:	d019      	beq.n	800191a <__aeabi_dmul+0x24a>
 80018e6:	ea94 0f0c 	teq	r4, ip
 80018ea:	d102      	bne.n	80018f2 <__aeabi_dmul+0x222>
 80018ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80018f0:	d113      	bne.n	800191a <__aeabi_dmul+0x24a>
 80018f2:	ea95 0f0c 	teq	r5, ip
 80018f6:	d105      	bne.n	8001904 <__aeabi_dmul+0x234>
 80018f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80018fc:	bf1c      	itt	ne
 80018fe:	4610      	movne	r0, r2
 8001900:	4619      	movne	r1, r3
 8001902:	d10a      	bne.n	800191a <__aeabi_dmul+0x24a>
 8001904:	ea81 0103 	eor.w	r1, r1, r3
 8001908:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800190c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001910:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001914:	f04f 0000 	mov.w	r0, #0
 8001918:	bd70      	pop	{r4, r5, r6, pc}
 800191a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800191e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8001922:	bd70      	pop	{r4, r5, r6, pc}

08001924 <__aeabi_ddiv>:
 8001924:	b570      	push	{r4, r5, r6, lr}
 8001926:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800192a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800192e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001932:	bf1d      	ittte	ne
 8001934:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001938:	ea94 0f0c 	teqne	r4, ip
 800193c:	ea95 0f0c 	teqne	r5, ip
 8001940:	f000 f8a7 	bleq	8001a92 <__aeabi_ddiv+0x16e>
 8001944:	eba4 0405 	sub.w	r4, r4, r5
 8001948:	ea81 0e03 	eor.w	lr, r1, r3
 800194c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001950:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8001954:	f000 8088 	beq.w	8001a68 <__aeabi_ddiv+0x144>
 8001958:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800195c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8001960:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8001964:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8001968:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800196c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8001970:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8001974:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8001978:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800197c:	429d      	cmp	r5, r3
 800197e:	bf08      	it	eq
 8001980:	4296      	cmpeq	r6, r2
 8001982:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8001986:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800198a:	d202      	bcs.n	8001992 <__aeabi_ddiv+0x6e>
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	ea4f 0232 	mov.w	r2, r2, rrx
 8001992:	1ab6      	subs	r6, r6, r2
 8001994:	eb65 0503 	sbc.w	r5, r5, r3
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	ea4f 0232 	mov.w	r2, r2, rrx
 800199e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80019a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80019a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80019aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80019ae:	bf22      	ittt	cs
 80019b0:	1ab6      	subcs	r6, r6, r2
 80019b2:	4675      	movcs	r5, lr
 80019b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80019b8:	085b      	lsrs	r3, r3, #1
 80019ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80019be:	ebb6 0e02 	subs.w	lr, r6, r2
 80019c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80019c6:	bf22      	ittt	cs
 80019c8:	1ab6      	subcs	r6, r6, r2
 80019ca:	4675      	movcs	r5, lr
 80019cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80019d0:	085b      	lsrs	r3, r3, #1
 80019d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80019d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80019da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80019de:	bf22      	ittt	cs
 80019e0:	1ab6      	subcs	r6, r6, r2
 80019e2:	4675      	movcs	r5, lr
 80019e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80019ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80019f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80019f6:	bf22      	ittt	cs
 80019f8:	1ab6      	subcs	r6, r6, r2
 80019fa:	4675      	movcs	r5, lr
 80019fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001a00:	ea55 0e06 	orrs.w	lr, r5, r6
 8001a04:	d018      	beq.n	8001a38 <__aeabi_ddiv+0x114>
 8001a06:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8001a0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8001a0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8001a12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001a16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8001a1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8001a1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8001a22:	d1c0      	bne.n	80019a6 <__aeabi_ddiv+0x82>
 8001a24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001a28:	d10b      	bne.n	8001a42 <__aeabi_ddiv+0x11e>
 8001a2a:	ea41 0100 	orr.w	r1, r1, r0
 8001a2e:	f04f 0000 	mov.w	r0, #0
 8001a32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8001a36:	e7b6      	b.n	80019a6 <__aeabi_ddiv+0x82>
 8001a38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001a3c:	bf04      	itt	eq
 8001a3e:	4301      	orreq	r1, r0
 8001a40:	2000      	moveq	r0, #0
 8001a42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8001a46:	bf88      	it	hi
 8001a48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001a4c:	f63f aeaf 	bhi.w	80017ae <__aeabi_dmul+0xde>
 8001a50:	ebb5 0c03 	subs.w	ip, r5, r3
 8001a54:	bf04      	itt	eq
 8001a56:	ebb6 0c02 	subseq.w	ip, r6, r2
 8001a5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001a5e:	f150 0000 	adcs.w	r0, r0, #0
 8001a62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001a66:	bd70      	pop	{r4, r5, r6, pc}
 8001a68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8001a6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8001a70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8001a74:	bfc2      	ittt	gt
 8001a76:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001a7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001a7e:	bd70      	popgt	{r4, r5, r6, pc}
 8001a80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001a84:	f04f 0e00 	mov.w	lr, #0
 8001a88:	3c01      	subs	r4, #1
 8001a8a:	e690      	b.n	80017ae <__aeabi_dmul+0xde>
 8001a8c:	ea45 0e06 	orr.w	lr, r5, r6
 8001a90:	e68d      	b.n	80017ae <__aeabi_dmul+0xde>
 8001a92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001a96:	ea94 0f0c 	teq	r4, ip
 8001a9a:	bf08      	it	eq
 8001a9c:	ea95 0f0c 	teqeq	r5, ip
 8001aa0:	f43f af3b 	beq.w	800191a <__aeabi_dmul+0x24a>
 8001aa4:	ea94 0f0c 	teq	r4, ip
 8001aa8:	d10a      	bne.n	8001ac0 <__aeabi_ddiv+0x19c>
 8001aaa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001aae:	f47f af34 	bne.w	800191a <__aeabi_dmul+0x24a>
 8001ab2:	ea95 0f0c 	teq	r5, ip
 8001ab6:	f47f af25 	bne.w	8001904 <__aeabi_dmul+0x234>
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	e72c      	b.n	800191a <__aeabi_dmul+0x24a>
 8001ac0:	ea95 0f0c 	teq	r5, ip
 8001ac4:	d106      	bne.n	8001ad4 <__aeabi_ddiv+0x1b0>
 8001ac6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001aca:	f43f aefd 	beq.w	80018c8 <__aeabi_dmul+0x1f8>
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	e722      	b.n	800191a <__aeabi_dmul+0x24a>
 8001ad4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001ad8:	bf18      	it	ne
 8001ada:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001ade:	f47f aec5 	bne.w	800186c <__aeabi_dmul+0x19c>
 8001ae2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8001ae6:	f47f af0d 	bne.w	8001904 <__aeabi_dmul+0x234>
 8001aea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001aee:	f47f aeeb 	bne.w	80018c8 <__aeabi_dmul+0x1f8>
 8001af2:	e712      	b.n	800191a <__aeabi_dmul+0x24a>

08001af4 <__aeabi_d2iz>:
 8001af4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8001af8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001afc:	d215      	bcs.n	8001b2a <__aeabi_d2iz+0x36>
 8001afe:	d511      	bpl.n	8001b24 <__aeabi_d2iz+0x30>
 8001b00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001b04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001b08:	d912      	bls.n	8001b30 <__aeabi_d2iz+0x3c>
 8001b0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001b0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8001b1e:	bf18      	it	ne
 8001b20:	4240      	negne	r0, r0
 8001b22:	4770      	bx	lr
 8001b24:	f04f 0000 	mov.w	r0, #0
 8001b28:	4770      	bx	lr
 8001b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001b2e:	d105      	bne.n	8001b3c <__aeabi_d2iz+0x48>
 8001b30:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001b34:	bf08      	it	eq
 8001b36:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001b3a:	4770      	bx	lr
 8001b3c:	f04f 0000 	mov.w	r0, #0
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop

08001b44 <__aeabi_d2f>:
 8001b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8001b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8001b4c:	bf24      	itt	cs
 8001b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8001b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8001b56:	d90d      	bls.n	8001b74 <__aeabi_d2f+0x30>
 8001b58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8001b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8001b64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8001b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8001b6c:	bf08      	it	eq
 8001b6e:	f020 0001 	biceq.w	r0, r0, #1
 8001b72:	4770      	bx	lr
 8001b74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8001b78:	d121      	bne.n	8001bbe <__aeabi_d2f+0x7a>
 8001b7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8001b7e:	bfbc      	itt	lt
 8001b80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8001b84:	4770      	bxlt	lr
 8001b86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8001b8e:	f1c2 0218 	rsb	r2, r2, #24
 8001b92:	f1c2 0c20 	rsb	ip, r2, #32
 8001b96:	fa10 f30c 	lsls.w	r3, r0, ip
 8001b9a:	fa20 f002 	lsr.w	r0, r0, r2
 8001b9e:	bf18      	it	ne
 8001ba0:	f040 0001 	orrne.w	r0, r0, #1
 8001ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001bac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8001bb0:	ea40 000c 	orr.w	r0, r0, ip
 8001bb4:	fa23 f302 	lsr.w	r3, r3, r2
 8001bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001bbc:	e7cc      	b.n	8001b58 <__aeabi_d2f+0x14>
 8001bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8001bc2:	d107      	bne.n	8001bd4 <__aeabi_d2f+0x90>
 8001bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8001bc8:	bf1e      	ittt	ne
 8001bca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8001bce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8001bd2:	4770      	bxne	lr
 8001bd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8001bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop

08001be4 <__aeabi_ldivmod>:
 8001be4:	b97b      	cbnz	r3, 8001c06 <__aeabi_ldivmod+0x22>
 8001be6:	b972      	cbnz	r2, 8001c06 <__aeabi_ldivmod+0x22>
 8001be8:	2900      	cmp	r1, #0
 8001bea:	bfbe      	ittt	lt
 8001bec:	2000      	movlt	r0, #0
 8001bee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8001bf2:	e006      	blt.n	8001c02 <__aeabi_ldivmod+0x1e>
 8001bf4:	bf08      	it	eq
 8001bf6:	2800      	cmpeq	r0, #0
 8001bf8:	bf1c      	itt	ne
 8001bfa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8001bfe:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001c02:	f000 b857 	b.w	8001cb4 <__aeabi_idiv0>
 8001c06:	f1ad 0c08 	sub.w	ip, sp, #8
 8001c0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001c0e:	2900      	cmp	r1, #0
 8001c10:	db09      	blt.n	8001c26 <__aeabi_ldivmod+0x42>
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db1a      	blt.n	8001c4c <__aeabi_ldivmod+0x68>
 8001c16:	f002 fd03 	bl	8004620 <__udivmoddi4>
 8001c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001c22:	b004      	add	sp, #16
 8001c24:	4770      	bx	lr
 8001c26:	4240      	negs	r0, r0
 8001c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db1b      	blt.n	8001c68 <__aeabi_ldivmod+0x84>
 8001c30:	f002 fcf6 	bl	8004620 <__udivmoddi4>
 8001c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001c3c:	b004      	add	sp, #16
 8001c3e:	4240      	negs	r0, r0
 8001c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001c44:	4252      	negs	r2, r2
 8001c46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001c4a:	4770      	bx	lr
 8001c4c:	4252      	negs	r2, r2
 8001c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001c52:	f002 fce5 	bl	8004620 <__udivmoddi4>
 8001c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001c5e:	b004      	add	sp, #16
 8001c60:	4240      	negs	r0, r0
 8001c62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001c66:	4770      	bx	lr
 8001c68:	4252      	negs	r2, r2
 8001c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001c6e:	f002 fcd7 	bl	8004620 <__udivmoddi4>
 8001c72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001c76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001c7a:	b004      	add	sp, #16
 8001c7c:	4252      	negs	r2, r2
 8001c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001c82:	4770      	bx	lr

08001c84 <__aeabi_uldivmod>:
 8001c84:	b953      	cbnz	r3, 8001c9c <__aeabi_uldivmod+0x18>
 8001c86:	b94a      	cbnz	r2, 8001c9c <__aeabi_uldivmod+0x18>
 8001c88:	2900      	cmp	r1, #0
 8001c8a:	bf08      	it	eq
 8001c8c:	2800      	cmpeq	r0, #0
 8001c8e:	bf1c      	itt	ne
 8001c90:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001c94:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001c98:	f000 b80c 	b.w	8001cb4 <__aeabi_idiv0>
 8001c9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001ca0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001ca4:	f002 fcbc 	bl	8004620 <__udivmoddi4>
 8001ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001cb0:	b004      	add	sp, #16
 8001cb2:	4770      	bx	lr

08001cb4 <__aeabi_idiv0>:
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop

08001cb8 <acos>:
 8001cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cba:	ed2d 8b02 	vpush	{d8}
 8001cbe:	4e26      	ldr	r6, [pc, #152]	; (8001d58 <acos+0xa0>)
 8001cc0:	b08b      	sub	sp, #44	; 0x2c
 8001cc2:	ec55 4b10 	vmov	r4, r5, d0
 8001cc6:	f7fe fab3 	bl	8000230 <__ieee754_acos>
 8001cca:	f996 3000 	ldrsb.w	r3, [r6]
 8001cce:	eeb0 8a40 	vmov.f32	s16, s0
 8001cd2:	eef0 8a60 	vmov.f32	s17, s1
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	d036      	beq.n	8001d48 <acos+0x90>
 8001cda:	4622      	mov	r2, r4
 8001cdc:	462b      	mov	r3, r5
 8001cde:	4620      	mov	r0, r4
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	f002 fc87 	bl	80045f4 <__aeabi_dcmpun>
 8001ce6:	4607      	mov	r7, r0
 8001ce8:	bb70      	cbnz	r0, 8001d48 <acos+0x90>
 8001cea:	ec45 4b10 	vmov	d0, r4, r5
 8001cee:	f002 fdf1 	bl	80048d4 <fabs>
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <acos+0xa4>)
 8001cf6:	ec51 0b10 	vmov	r0, r1, d0
 8001cfa:	f002 fc71 	bl	80045e0 <__aeabi_dcmpgt>
 8001cfe:	b318      	cbz	r0, 8001d48 <acos+0x90>
 8001d00:	2301      	movs	r3, #1
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	4816      	ldr	r0, [pc, #88]	; (8001d60 <acos+0xa8>)
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <acos+0xac>)
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	9708      	str	r7, [sp, #32]
 8001d0c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001d10:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001d14:	f7fe fce8 	bl	80006e8 <nan>
 8001d18:	f996 3000 	ldrsb.w	r3, [r6]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8001d22:	d104      	bne.n	8001d2e <acos+0x76>
 8001d24:	f013 fdf2 	bl	801590c <__errno>
 8001d28:	2321      	movs	r3, #33	; 0x21
 8001d2a:	6003      	str	r3, [r0, #0]
 8001d2c:	e004      	b.n	8001d38 <acos+0x80>
 8001d2e:	4668      	mov	r0, sp
 8001d30:	f002 fdd9 	bl	80048e6 <matherr>
 8001d34:	2800      	cmp	r0, #0
 8001d36:	d0f5      	beq.n	8001d24 <acos+0x6c>
 8001d38:	9b08      	ldr	r3, [sp, #32]
 8001d3a:	b11b      	cbz	r3, 8001d44 <acos+0x8c>
 8001d3c:	f013 fde6 	bl	801590c <__errno>
 8001d40:	9b08      	ldr	r3, [sp, #32]
 8001d42:	6003      	str	r3, [r0, #0]
 8001d44:	ed9d 8b06 	vldr	d8, [sp, #24]
 8001d48:	eeb0 0a48 	vmov.f32	s0, s16
 8001d4c:	eef0 0a68 	vmov.f32	s1, s17
 8001d50:	b00b      	add	sp, #44	; 0x2c
 8001d52:	ecbd 8b02 	vpop	{d8}
 8001d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d58:	20008464 	.word	0x20008464
 8001d5c:	3ff00000 	.word	0x3ff00000
 8001d60:	0801c8da 	.word	0x0801c8da
 8001d64:	0801d7a7 	.word	0x0801d7a7

08001d68 <sqrt>:
 8001d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d6a:	ed2d 8b02 	vpush	{d8}
 8001d6e:	b08b      	sub	sp, #44	; 0x2c
 8001d70:	ec55 4b10 	vmov	r4, r5, d0
 8001d74:	f000 f84e 	bl	8001e14 <__ieee754_sqrt>
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <sqrt+0xa4>)
 8001d7a:	eeb0 8a40 	vmov.f32	s16, s0
 8001d7e:	eef0 8a60 	vmov.f32	s17, s1
 8001d82:	f993 6000 	ldrsb.w	r6, [r3]
 8001d86:	1c73      	adds	r3, r6, #1
 8001d88:	d037      	beq.n	8001dfa <sqrt+0x92>
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	462b      	mov	r3, r5
 8001d8e:	4620      	mov	r0, r4
 8001d90:	4629      	mov	r1, r5
 8001d92:	f002 fc2f 	bl	80045f4 <__aeabi_dcmpun>
 8001d96:	4607      	mov	r7, r0
 8001d98:	bb78      	cbnz	r0, 8001dfa <sqrt+0x92>
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	4620      	mov	r0, r4
 8001da0:	4629      	mov	r1, r5
 8001da2:	f002 fbff 	bl	80045a4 <__aeabi_dcmplt>
 8001da6:	b340      	cbz	r0, 8001dfa <sqrt+0x92>
 8001da8:	2301      	movs	r3, #1
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <sqrt+0xa8>)
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	9708      	str	r7, [sp, #32]
 8001db2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001db6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001dba:	b176      	cbz	r6, 8001dda <sqrt+0x72>
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f7ff fdae 	bl	8001924 <__aeabi_ddiv>
 8001dc8:	2e02      	cmp	r6, #2
 8001dca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001dce:	d107      	bne.n	8001de0 <sqrt+0x78>
 8001dd0:	f013 fd9c 	bl	801590c <__errno>
 8001dd4:	2321      	movs	r3, #33	; 0x21
 8001dd6:	6003      	str	r3, [r0, #0]
 8001dd8:	e007      	b.n	8001dea <sqrt+0x82>
 8001dda:	2000      	movs	r0, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	e7f3      	b.n	8001dc8 <sqrt+0x60>
 8001de0:	4668      	mov	r0, sp
 8001de2:	f002 fd80 	bl	80048e6 <matherr>
 8001de6:	2800      	cmp	r0, #0
 8001de8:	d0f2      	beq.n	8001dd0 <sqrt+0x68>
 8001dea:	9b08      	ldr	r3, [sp, #32]
 8001dec:	b11b      	cbz	r3, 8001df6 <sqrt+0x8e>
 8001dee:	f013 fd8d 	bl	801590c <__errno>
 8001df2:	9b08      	ldr	r3, [sp, #32]
 8001df4:	6003      	str	r3, [r0, #0]
 8001df6:	ed9d 8b06 	vldr	d8, [sp, #24]
 8001dfa:	eeb0 0a48 	vmov.f32	s0, s16
 8001dfe:	eef0 0a68 	vmov.f32	s1, s17
 8001e02:	b00b      	add	sp, #44	; 0x2c
 8001e04:	ecbd 8b02 	vpop	{d8}
 8001e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20008464 	.word	0x20008464
 8001e10:	0801d7ac 	.word	0x0801d7ac

08001e14 <__ieee754_sqrt>:
 8001e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e18:	ec55 4b10 	vmov	r4, r5, d0
 8001e1c:	4e54      	ldr	r6, [pc, #336]	; (8001f70 <__ieee754_sqrt+0x15c>)
 8001e1e:	43ae      	bics	r6, r5
 8001e20:	4629      	mov	r1, r5
 8001e22:	462a      	mov	r2, r5
 8001e24:	ee10 0a10 	vmov	r0, s0
 8001e28:	4623      	mov	r3, r4
 8001e2a:	d110      	bne.n	8001e4e <__ieee754_sqrt+0x3a>
 8001e2c:	ee10 2a10 	vmov	r2, s0
 8001e30:	462b      	mov	r3, r5
 8001e32:	f7ff fc4d 	bl	80016d0 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	f7ff fa91 	bl	8001364 <__adddf3>
 8001e42:	4604      	mov	r4, r0
 8001e44:	460d      	mov	r5, r1
 8001e46:	ec45 4b10 	vmov	d0, r4, r5
 8001e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e4e:	2d00      	cmp	r5, #0
 8001e50:	dc0f      	bgt.n	8001e72 <__ieee754_sqrt+0x5e>
 8001e52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8001e56:	4330      	orrs	r0, r6
 8001e58:	d0f5      	beq.n	8001e46 <__ieee754_sqrt+0x32>
 8001e5a:	b155      	cbz	r5, 8001e72 <__ieee754_sqrt+0x5e>
 8001e5c:	ee10 2a10 	vmov	r2, s0
 8001e60:	462b      	mov	r3, r5
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7ff fa7c 	bl	8001360 <__aeabi_dsub>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	f7ff fd5a 	bl	8001924 <__aeabi_ddiv>
 8001e70:	e7e7      	b.n	8001e42 <__ieee754_sqrt+0x2e>
 8001e72:	1509      	asrs	r1, r1, #20
 8001e74:	d075      	beq.n	8001f62 <__ieee754_sqrt+0x14e>
 8001e76:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8001e7a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8001e7e:	07ce      	lsls	r6, r1, #31
 8001e80:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8001e84:	bf42      	ittt	mi
 8001e86:	0fda      	lsrmi	r2, r3, #31
 8001e88:	005b      	lslmi	r3, r3, #1
 8001e8a:	eb02 0040 	addmi.w	r0, r2, r0, lsl #1
 8001e8e:	2400      	movs	r4, #0
 8001e90:	0fda      	lsrs	r2, r3, #31
 8001e92:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8001e96:	1049      	asrs	r1, r1, #1
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	f04f 0e16 	mov.w	lr, #22
 8001e9e:	46a4      	mov	ip, r4
 8001ea0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001ea4:	eb0c 0500 	add.w	r5, ip, r0
 8001ea8:	4295      	cmp	r5, r2
 8001eaa:	bfde      	ittt	le
 8001eac:	1b52      	suble	r2, r2, r5
 8001eae:	eb05 0c00 	addle.w	ip, r5, r0
 8001eb2:	1824      	addle	r4, r4, r0
 8001eb4:	0052      	lsls	r2, r2, #1
 8001eb6:	f1be 0e01 	subs.w	lr, lr, #1
 8001eba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8001ebe:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8001ec2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001ec6:	d1ed      	bne.n	8001ea4 <__ieee754_sqrt+0x90>
 8001ec8:	4670      	mov	r0, lr
 8001eca:	2720      	movs	r7, #32
 8001ecc:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8001ed0:	4562      	cmp	r2, ip
 8001ed2:	eb05 060e 	add.w	r6, r5, lr
 8001ed6:	dc02      	bgt.n	8001ede <__ieee754_sqrt+0xca>
 8001ed8:	d113      	bne.n	8001f02 <__ieee754_sqrt+0xee>
 8001eda:	429e      	cmp	r6, r3
 8001edc:	d811      	bhi.n	8001f02 <__ieee754_sqrt+0xee>
 8001ede:	2e00      	cmp	r6, #0
 8001ee0:	eb06 0e05 	add.w	lr, r6, r5
 8001ee4:	da42      	bge.n	8001f6c <__ieee754_sqrt+0x158>
 8001ee6:	f1be 0f00 	cmp.w	lr, #0
 8001eea:	db3f      	blt.n	8001f6c <__ieee754_sqrt+0x158>
 8001eec:	f10c 0801 	add.w	r8, ip, #1
 8001ef0:	eba2 020c 	sub.w	r2, r2, ip
 8001ef4:	429e      	cmp	r6, r3
 8001ef6:	bf88      	it	hi
 8001ef8:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8001efc:	1b9b      	subs	r3, r3, r6
 8001efe:	4428      	add	r0, r5
 8001f00:	46c4      	mov	ip, r8
 8001f02:	0052      	lsls	r2, r2, #1
 8001f04:	3f01      	subs	r7, #1
 8001f06:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8001f0a:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8001f0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001f12:	d1dd      	bne.n	8001ed0 <__ieee754_sqrt+0xbc>
 8001f14:	4313      	orrs	r3, r2
 8001f16:	d006      	beq.n	8001f26 <__ieee754_sqrt+0x112>
 8001f18:	1c45      	adds	r5, r0, #1
 8001f1a:	bf13      	iteet	ne
 8001f1c:	3001      	addne	r0, #1
 8001f1e:	3401      	addeq	r4, #1
 8001f20:	4638      	moveq	r0, r7
 8001f22:	f020 0001 	bicne.w	r0, r0, #1
 8001f26:	1063      	asrs	r3, r4, #1
 8001f28:	0840      	lsrs	r0, r0, #1
 8001f2a:	07e2      	lsls	r2, r4, #31
 8001f2c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8001f30:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001f34:	bf48      	it	mi
 8001f36:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 8001f3a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8001f3e:	4604      	mov	r4, r0
 8001f40:	e781      	b.n	8001e46 <__ieee754_sqrt+0x32>
 8001f42:	0ada      	lsrs	r2, r3, #11
 8001f44:	3815      	subs	r0, #21
 8001f46:	055b      	lsls	r3, r3, #21
 8001f48:	2a00      	cmp	r2, #0
 8001f4a:	d0fa      	beq.n	8001f42 <__ieee754_sqrt+0x12e>
 8001f4c:	02d7      	lsls	r7, r2, #11
 8001f4e:	d50a      	bpl.n	8001f66 <__ieee754_sqrt+0x152>
 8001f50:	f1c1 0420 	rsb	r4, r1, #32
 8001f54:	fa23 f404 	lsr.w	r4, r3, r4
 8001f58:	1e4d      	subs	r5, r1, #1
 8001f5a:	408b      	lsls	r3, r1
 8001f5c:	4322      	orrs	r2, r4
 8001f5e:	1b41      	subs	r1, r0, r5
 8001f60:	e789      	b.n	8001e76 <__ieee754_sqrt+0x62>
 8001f62:	4608      	mov	r0, r1
 8001f64:	e7f0      	b.n	8001f48 <__ieee754_sqrt+0x134>
 8001f66:	0052      	lsls	r2, r2, #1
 8001f68:	3101      	adds	r1, #1
 8001f6a:	e7ef      	b.n	8001f4c <__ieee754_sqrt+0x138>
 8001f6c:	46e0      	mov	r8, ip
 8001f6e:	e7bf      	b.n	8001ef0 <__ieee754_sqrt+0xdc>
 8001f70:	7ff00000 	.word	0x7ff00000

08001f74 <__assert_func>:
 8001f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001f76:	461c      	mov	r4, r3
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <__assert_func+0x2c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4605      	mov	r5, r0
 8001f7e:	68d8      	ldr	r0, [r3, #12]
 8001f80:	b152      	cbz	r2, 8001f98 <__assert_func+0x24>
 8001f82:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <__assert_func+0x30>)
 8001f84:	9100      	str	r1, [sp, #0]
 8001f86:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001f8a:	4907      	ldr	r1, [pc, #28]	; (8001fa8 <__assert_func+0x34>)
 8001f8c:	462b      	mov	r3, r5
 8001f8e:	4622      	mov	r2, r4
 8001f90:	f000 f821 	bl	8001fd6 <fiprintf>
 8001f94:	f002 fd84 	bl	8004aa0 <abort>
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <__assert_func+0x38>)
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	e7f2      	b.n	8001f84 <__assert_func+0x10>
 8001f9e:	bf00      	nop
 8001fa0:	20008068 	.word	0x20008068
 8001fa4:	0801d7b1 	.word	0x0801d7b1
 8001fa8:	0801d7be 	.word	0x0801d7be
 8001fac:	0801c8da 	.word	0x0801c8da

08001fb0 <__assert>:
 8001fb0:	b508      	push	{r3, lr}
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f7ff ffdd 	bl	8001f74 <__assert_func>
 8001fba:	bf00      	nop

08001fbc <_fiprintf_r>:
 8001fbc:	b40c      	push	{r2, r3}
 8001fbe:	b507      	push	{r0, r1, r2, lr}
 8001fc0:	ab04      	add	r3, sp, #16
 8001fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	f000 f84e 	bl	8002068 <_vfiprintf_r>
 8001fcc:	b003      	add	sp, #12
 8001fce:	f85d eb04 	ldr.w	lr, [sp], #4
 8001fd2:	b002      	add	sp, #8
 8001fd4:	4770      	bx	lr

08001fd6 <fiprintf>:
 8001fd6:	b40e      	push	{r1, r2, r3}
 8001fd8:	b503      	push	{r0, r1, lr}
 8001fda:	4601      	mov	r1, r0
 8001fdc:	ab03      	add	r3, sp, #12
 8001fde:	4806      	ldr	r0, [pc, #24]	; (8001ff8 <fiprintf+0x22>)
 8001fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8001fe4:	6800      	ldr	r0, [r0, #0]
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	f000 f83e 	bl	8002068 <_vfiprintf_r>
 8001fec:	b002      	add	sp, #8
 8001fee:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ff2:	b003      	add	sp, #12
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20008068 	.word	0x20008068

08001ffc <__sfputc_r>:
 8001ffc:	6893      	ldr	r3, [r2, #8]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	b410      	push	{r4}
 8002004:	6093      	str	r3, [r2, #8]
 8002006:	da08      	bge.n	800201a <__sfputc_r+0x1e>
 8002008:	6994      	ldr	r4, [r2, #24]
 800200a:	42a3      	cmp	r3, r4
 800200c:	db01      	blt.n	8002012 <__sfputc_r+0x16>
 800200e:	290a      	cmp	r1, #10
 8002010:	d103      	bne.n	800201a <__sfputc_r+0x1e>
 8002012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002016:	f000 bed3 	b.w	8002dc0 <__swbuf_r>
 800201a:	6813      	ldr	r3, [r2, #0]
 800201c:	1c58      	adds	r0, r3, #1
 800201e:	6010      	str	r0, [r2, #0]
 8002020:	7019      	strb	r1, [r3, #0]
 8002022:	4608      	mov	r0, r1
 8002024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002028:	4770      	bx	lr

0800202a <__sfputs_r>:
 800202a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202c:	4606      	mov	r6, r0
 800202e:	460f      	mov	r7, r1
 8002030:	4614      	mov	r4, r2
 8002032:	18d5      	adds	r5, r2, r3
 8002034:	42ac      	cmp	r4, r5
 8002036:	d101      	bne.n	800203c <__sfputs_r+0x12>
 8002038:	2000      	movs	r0, #0
 800203a:	e007      	b.n	800204c <__sfputs_r+0x22>
 800203c:	463a      	mov	r2, r7
 800203e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002042:	4630      	mov	r0, r6
 8002044:	f7ff ffda 	bl	8001ffc <__sfputc_r>
 8002048:	1c43      	adds	r3, r0, #1
 800204a:	d1f3      	bne.n	8002034 <__sfputs_r+0xa>
 800204c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800204e <__sprint_r>:
 800204e:	b538      	push	{r3, r4, r5, lr}
 8002050:	6893      	ldr	r3, [r2, #8]
 8002052:	4614      	mov	r4, r2
 8002054:	2500      	movs	r5, #0
 8002056:	b913      	cbnz	r3, 800205e <__sprint_r+0x10>
 8002058:	6053      	str	r3, [r2, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	bd38      	pop	{r3, r4, r5, pc}
 800205e:	f001 f8c7 	bl	80031f0 <__sfvwrite_r>
 8002062:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002066:	e7f9      	b.n	800205c <__sprint_r+0xe>

08002068 <_vfiprintf_r>:
 8002068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800206c:	460e      	mov	r6, r1
 800206e:	b09d      	sub	sp, #116	; 0x74
 8002070:	4614      	mov	r4, r2
 8002072:	461d      	mov	r5, r3
 8002074:	4607      	mov	r7, r0
 8002076:	b118      	cbz	r0, 8002080 <_vfiprintf_r+0x18>
 8002078:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800207a:	b90b      	cbnz	r3, 8002080 <_vfiprintf_r+0x18>
 800207c:	f001 f85a 	bl	8003134 <__sinit>
 8002080:	89b3      	ldrh	r3, [r6, #12]
 8002082:	0718      	lsls	r0, r3, #28
 8002084:	d556      	bpl.n	8002134 <_vfiprintf_r+0xcc>
 8002086:	6933      	ldr	r3, [r6, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d053      	beq.n	8002134 <_vfiprintf_r+0xcc>
 800208c:	2300      	movs	r3, #0
 800208e:	9309      	str	r3, [sp, #36]	; 0x24
 8002090:	2320      	movs	r3, #32
 8002092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002096:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8002244 <_vfiprintf_r+0x1dc>
 800209a:	9503      	str	r5, [sp, #12]
 800209c:	2330      	movs	r3, #48	; 0x30
 800209e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80020a2:	f04f 0a01 	mov.w	sl, #1
 80020a6:	4623      	mov	r3, r4
 80020a8:	461d      	mov	r5, r3
 80020aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020ae:	b10a      	cbz	r2, 80020b4 <_vfiprintf_r+0x4c>
 80020b0:	2a25      	cmp	r2, #37	; 0x25
 80020b2:	d1f9      	bne.n	80020a8 <_vfiprintf_r+0x40>
 80020b4:	ebb5 0b04 	subs.w	fp, r5, r4
 80020b8:	d00b      	beq.n	80020d2 <_vfiprintf_r+0x6a>
 80020ba:	465b      	mov	r3, fp
 80020bc:	4622      	mov	r2, r4
 80020be:	4631      	mov	r1, r6
 80020c0:	4638      	mov	r0, r7
 80020c2:	f7ff ffb2 	bl	800202a <__sfputs_r>
 80020c6:	3001      	adds	r0, #1
 80020c8:	f000 80ae 	beq.w	8002228 <_vfiprintf_r+0x1c0>
 80020cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020ce:	445b      	add	r3, fp
 80020d0:	9309      	str	r3, [sp, #36]	; 0x24
 80020d2:	782b      	ldrb	r3, [r5, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80a7 	beq.w	8002228 <_vfiprintf_r+0x1c0>
 80020da:	2300      	movs	r3, #0
 80020dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020e4:	3501      	adds	r5, #1
 80020e6:	9304      	str	r3, [sp, #16]
 80020e8:	9307      	str	r3, [sp, #28]
 80020ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020ee:	931a      	str	r3, [sp, #104]	; 0x68
 80020f0:	462c      	mov	r4, r5
 80020f2:	2205      	movs	r2, #5
 80020f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020f8:	4852      	ldr	r0, [pc, #328]	; (8002244 <_vfiprintf_r+0x1dc>)
 80020fa:	f7fe f849 	bl	8000190 <memchr>
 80020fe:	9b04      	ldr	r3, [sp, #16]
 8002100:	bb18      	cbnz	r0, 800214a <_vfiprintf_r+0xe2>
 8002102:	06d9      	lsls	r1, r3, #27
 8002104:	bf44      	itt	mi
 8002106:	2220      	movmi	r2, #32
 8002108:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800210c:	071a      	lsls	r2, r3, #28
 800210e:	bf44      	itt	mi
 8002110:	222b      	movmi	r2, #43	; 0x2b
 8002112:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002116:	782a      	ldrb	r2, [r5, #0]
 8002118:	2a2a      	cmp	r2, #42	; 0x2a
 800211a:	d01e      	beq.n	800215a <_vfiprintf_r+0xf2>
 800211c:	9a07      	ldr	r2, [sp, #28]
 800211e:	462c      	mov	r4, r5
 8002120:	2000      	movs	r0, #0
 8002122:	250a      	movs	r5, #10
 8002124:	4621      	mov	r1, r4
 8002126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800212a:	3b30      	subs	r3, #48	; 0x30
 800212c:	2b09      	cmp	r3, #9
 800212e:	d956      	bls.n	80021de <_vfiprintf_r+0x176>
 8002130:	b9c8      	cbnz	r0, 8002166 <_vfiprintf_r+0xfe>
 8002132:	e01f      	b.n	8002174 <_vfiprintf_r+0x10c>
 8002134:	4631      	mov	r1, r6
 8002136:	4638      	mov	r0, r7
 8002138:	f000 fe88 	bl	8002e4c <__swsetup_r>
 800213c:	2800      	cmp	r0, #0
 800213e:	d0a5      	beq.n	800208c <_vfiprintf_r+0x24>
 8002140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002144:	b01d      	add	sp, #116	; 0x74
 8002146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800214a:	eba0 0009 	sub.w	r0, r0, r9
 800214e:	fa0a f000 	lsl.w	r0, sl, r0
 8002152:	4318      	orrs	r0, r3
 8002154:	9004      	str	r0, [sp, #16]
 8002156:	4625      	mov	r5, r4
 8002158:	e7ca      	b.n	80020f0 <_vfiprintf_r+0x88>
 800215a:	9a03      	ldr	r2, [sp, #12]
 800215c:	1d11      	adds	r1, r2, #4
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	9103      	str	r1, [sp, #12]
 8002162:	2a00      	cmp	r2, #0
 8002164:	db01      	blt.n	800216a <_vfiprintf_r+0x102>
 8002166:	9207      	str	r2, [sp, #28]
 8002168:	e004      	b.n	8002174 <_vfiprintf_r+0x10c>
 800216a:	4252      	negs	r2, r2
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	9207      	str	r2, [sp, #28]
 8002172:	9304      	str	r3, [sp, #16]
 8002174:	7823      	ldrb	r3, [r4, #0]
 8002176:	2b2e      	cmp	r3, #46	; 0x2e
 8002178:	d10c      	bne.n	8002194 <_vfiprintf_r+0x12c>
 800217a:	7863      	ldrb	r3, [r4, #1]
 800217c:	2b2a      	cmp	r3, #42	; 0x2a
 800217e:	d133      	bne.n	80021e8 <_vfiprintf_r+0x180>
 8002180:	9b03      	ldr	r3, [sp, #12]
 8002182:	1d1a      	adds	r2, r3, #4
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	9203      	str	r2, [sp, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	bfb8      	it	lt
 800218c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002190:	3402      	adds	r4, #2
 8002192:	9305      	str	r3, [sp, #20]
 8002194:	4d2c      	ldr	r5, [pc, #176]	; (8002248 <_vfiprintf_r+0x1e0>)
 8002196:	7821      	ldrb	r1, [r4, #0]
 8002198:	2203      	movs	r2, #3
 800219a:	4628      	mov	r0, r5
 800219c:	f7fd fff8 	bl	8000190 <memchr>
 80021a0:	b138      	cbz	r0, 80021b2 <_vfiprintf_r+0x14a>
 80021a2:	2340      	movs	r3, #64	; 0x40
 80021a4:	1b40      	subs	r0, r0, r5
 80021a6:	fa03 f000 	lsl.w	r0, r3, r0
 80021aa:	9b04      	ldr	r3, [sp, #16]
 80021ac:	4303      	orrs	r3, r0
 80021ae:	3401      	adds	r4, #1
 80021b0:	9304      	str	r3, [sp, #16]
 80021b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021b6:	4825      	ldr	r0, [pc, #148]	; (800224c <_vfiprintf_r+0x1e4>)
 80021b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80021bc:	2206      	movs	r2, #6
 80021be:	f7fd ffe7 	bl	8000190 <memchr>
 80021c2:	2800      	cmp	r0, #0
 80021c4:	d035      	beq.n	8002232 <_vfiprintf_r+0x1ca>
 80021c6:	4b22      	ldr	r3, [pc, #136]	; (8002250 <_vfiprintf_r+0x1e8>)
 80021c8:	bb13      	cbnz	r3, 8002210 <_vfiprintf_r+0x1a8>
 80021ca:	9b03      	ldr	r3, [sp, #12]
 80021cc:	3307      	adds	r3, #7
 80021ce:	f023 0307 	bic.w	r3, r3, #7
 80021d2:	3308      	adds	r3, #8
 80021d4:	9303      	str	r3, [sp, #12]
 80021d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021d8:	4443      	add	r3, r8
 80021da:	9309      	str	r3, [sp, #36]	; 0x24
 80021dc:	e763      	b.n	80020a6 <_vfiprintf_r+0x3e>
 80021de:	fb05 3202 	mla	r2, r5, r2, r3
 80021e2:	2001      	movs	r0, #1
 80021e4:	460c      	mov	r4, r1
 80021e6:	e79d      	b.n	8002124 <_vfiprintf_r+0xbc>
 80021e8:	2300      	movs	r3, #0
 80021ea:	3401      	adds	r4, #1
 80021ec:	9305      	str	r3, [sp, #20]
 80021ee:	4619      	mov	r1, r3
 80021f0:	250a      	movs	r5, #10
 80021f2:	4620      	mov	r0, r4
 80021f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021f8:	3a30      	subs	r2, #48	; 0x30
 80021fa:	2a09      	cmp	r2, #9
 80021fc:	d903      	bls.n	8002206 <_vfiprintf_r+0x19e>
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0c8      	beq.n	8002194 <_vfiprintf_r+0x12c>
 8002202:	9105      	str	r1, [sp, #20]
 8002204:	e7c6      	b.n	8002194 <_vfiprintf_r+0x12c>
 8002206:	fb05 2101 	mla	r1, r5, r1, r2
 800220a:	2301      	movs	r3, #1
 800220c:	4604      	mov	r4, r0
 800220e:	e7f0      	b.n	80021f2 <_vfiprintf_r+0x18a>
 8002210:	ab03      	add	r3, sp, #12
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	4632      	mov	r2, r6
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <_vfiprintf_r+0x1ec>)
 8002218:	a904      	add	r1, sp, #16
 800221a:	4638      	mov	r0, r7
 800221c:	f000 f8b5 	bl	800238a <_printf_float>
 8002220:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002224:	4680      	mov	r8, r0
 8002226:	d1d6      	bne.n	80021d6 <_vfiprintf_r+0x16e>
 8002228:	89b3      	ldrh	r3, [r6, #12]
 800222a:	065b      	lsls	r3, r3, #25
 800222c:	d488      	bmi.n	8002140 <_vfiprintf_r+0xd8>
 800222e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002230:	e788      	b.n	8002144 <_vfiprintf_r+0xdc>
 8002232:	ab03      	add	r3, sp, #12
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	4632      	mov	r2, r6
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <_vfiprintf_r+0x1ec>)
 800223a:	a904      	add	r1, sp, #16
 800223c:	4638      	mov	r0, r7
 800223e:	f000 fb44 	bl	80028ca <_printf_i>
 8002242:	e7ed      	b.n	8002220 <_vfiprintf_r+0x1b8>
 8002244:	0801d7ed 	.word	0x0801d7ed
 8002248:	0801d7f3 	.word	0x0801d7f3
 800224c:	0801d7f7 	.word	0x0801d7f7
 8002250:	0800238b 	.word	0x0800238b
 8002254:	0800202b 	.word	0x0800202b

08002258 <vfiprintf>:
 8002258:	4613      	mov	r3, r2
 800225a:	460a      	mov	r2, r1
 800225c:	4601      	mov	r1, r0
 800225e:	4802      	ldr	r0, [pc, #8]	; (8002268 <vfiprintf+0x10>)
 8002260:	6800      	ldr	r0, [r0, #0]
 8002262:	f7ff bf01 	b.w	8002068 <_vfiprintf_r>
 8002266:	bf00      	nop
 8002268:	20008068 	.word	0x20008068

0800226c <__cvt>:
 800226c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002270:	ec55 4b10 	vmov	r4, r5, d0
 8002274:	2d00      	cmp	r5, #0
 8002276:	460e      	mov	r6, r1
 8002278:	4691      	mov	r9, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	da03      	bge.n	800228e <__cvt+0x22>
 8002286:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800228a:	461d      	mov	r5, r3
 800228c:	222d      	movs	r2, #45	; 0x2d
 800228e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002290:	700a      	strb	r2, [r1, #0]
 8002292:	f027 0720 	bic.w	r7, r7, #32
 8002296:	2f46      	cmp	r7, #70	; 0x46
 8002298:	d004      	beq.n	80022a4 <__cvt+0x38>
 800229a:	2f45      	cmp	r7, #69	; 0x45
 800229c:	d100      	bne.n	80022a0 <__cvt+0x34>
 800229e:	3601      	adds	r6, #1
 80022a0:	2102      	movs	r1, #2
 80022a2:	e000      	b.n	80022a6 <__cvt+0x3a>
 80022a4:	2103      	movs	r1, #3
 80022a6:	ab03      	add	r3, sp, #12
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	ab02      	add	r3, sp, #8
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	4632      	mov	r2, r6
 80022b0:	4653      	mov	r3, sl
 80022b2:	ec45 4b10 	vmov	d0, r4, r5
 80022b6:	f7fe faa8 	bl	800080a <_dtoa_r>
 80022ba:	2f47      	cmp	r7, #71	; 0x47
 80022bc:	4680      	mov	r8, r0
 80022be:	d102      	bne.n	80022c6 <__cvt+0x5a>
 80022c0:	f019 0f01 	tst.w	r9, #1
 80022c4:	d022      	beq.n	800230c <__cvt+0xa0>
 80022c6:	2f46      	cmp	r7, #70	; 0x46
 80022c8:	eb08 0906 	add.w	r9, r8, r6
 80022cc:	d111      	bne.n	80022f2 <__cvt+0x86>
 80022ce:	f898 3000 	ldrb.w	r3, [r8]
 80022d2:	2b30      	cmp	r3, #48	; 0x30
 80022d4:	d10a      	bne.n	80022ec <__cvt+0x80>
 80022d6:	2200      	movs	r2, #0
 80022d8:	2300      	movs	r3, #0
 80022da:	4620      	mov	r0, r4
 80022dc:	4629      	mov	r1, r5
 80022de:	f002 f957 	bl	8004590 <__aeabi_dcmpeq>
 80022e2:	b918      	cbnz	r0, 80022ec <__cvt+0x80>
 80022e4:	f1c6 0601 	rsb	r6, r6, #1
 80022e8:	f8ca 6000 	str.w	r6, [sl]
 80022ec:	f8da 3000 	ldr.w	r3, [sl]
 80022f0:	4499      	add	r9, r3
 80022f2:	2200      	movs	r2, #0
 80022f4:	2300      	movs	r3, #0
 80022f6:	4620      	mov	r0, r4
 80022f8:	4629      	mov	r1, r5
 80022fa:	f002 f949 	bl	8004590 <__aeabi_dcmpeq>
 80022fe:	b108      	cbz	r0, 8002304 <__cvt+0x98>
 8002300:	f8cd 900c 	str.w	r9, [sp, #12]
 8002304:	2230      	movs	r2, #48	; 0x30
 8002306:	9b03      	ldr	r3, [sp, #12]
 8002308:	454b      	cmp	r3, r9
 800230a:	d308      	bcc.n	800231e <__cvt+0xb2>
 800230c:	9b03      	ldr	r3, [sp, #12]
 800230e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002310:	eba3 0308 	sub.w	r3, r3, r8
 8002314:	4640      	mov	r0, r8
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	b004      	add	sp, #16
 800231a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800231e:	1c59      	adds	r1, r3, #1
 8002320:	9103      	str	r1, [sp, #12]
 8002322:	701a      	strb	r2, [r3, #0]
 8002324:	e7ef      	b.n	8002306 <__cvt+0x9a>

08002326 <__exponent>:
 8002326:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002328:	2900      	cmp	r1, #0
 800232a:	bfba      	itte	lt
 800232c:	4249      	neglt	r1, r1
 800232e:	232d      	movlt	r3, #45	; 0x2d
 8002330:	232b      	movge	r3, #43	; 0x2b
 8002332:	2909      	cmp	r1, #9
 8002334:	7002      	strb	r2, [r0, #0]
 8002336:	7043      	strb	r3, [r0, #1]
 8002338:	dd21      	ble.n	800237e <__exponent+0x58>
 800233a:	f10d 0307 	add.w	r3, sp, #7
 800233e:	461f      	mov	r7, r3
 8002340:	260a      	movs	r6, #10
 8002342:	fb91 f2f6 	sdiv	r2, r1, r6
 8002346:	fb06 1412 	mls	r4, r6, r2, r1
 800234a:	3430      	adds	r4, #48	; 0x30
 800234c:	2963      	cmp	r1, #99	; 0x63
 800234e:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8002352:	f803 4c01 	strb.w	r4, [r3, #-1]
 8002356:	dc0a      	bgt.n	800236e <__exponent+0x48>
 8002358:	3230      	adds	r2, #48	; 0x30
 800235a:	f805 2c01 	strb.w	r2, [r5, #-1]
 800235e:	3b02      	subs	r3, #2
 8002360:	1c82      	adds	r2, r0, #2
 8002362:	42bb      	cmp	r3, r7
 8002364:	4614      	mov	r4, r2
 8002366:	d305      	bcc.n	8002374 <__exponent+0x4e>
 8002368:	1a20      	subs	r0, r4, r0
 800236a:	b003      	add	sp, #12
 800236c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800236e:	462b      	mov	r3, r5
 8002370:	4611      	mov	r1, r2
 8002372:	e7e6      	b.n	8002342 <__exponent+0x1c>
 8002374:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002378:	f802 1b01 	strb.w	r1, [r2], #1
 800237c:	e7f1      	b.n	8002362 <__exponent+0x3c>
 800237e:	2330      	movs	r3, #48	; 0x30
 8002380:	4419      	add	r1, r3
 8002382:	7083      	strb	r3, [r0, #2]
 8002384:	1d04      	adds	r4, r0, #4
 8002386:	70c1      	strb	r1, [r0, #3]
 8002388:	e7ee      	b.n	8002368 <__exponent+0x42>

0800238a <_printf_float>:
 800238a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800238e:	b08d      	sub	sp, #52	; 0x34
 8002390:	460c      	mov	r4, r1
 8002392:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002396:	4616      	mov	r6, r2
 8002398:	461f      	mov	r7, r3
 800239a:	4605      	mov	r5, r0
 800239c:	f001 f87a 	bl	8003494 <_localeconv_r>
 80023a0:	6803      	ldr	r3, [r0, #0]
 80023a2:	9306      	str	r3, [sp, #24]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f002 fb23 	bl	80049f0 <strlen>
 80023aa:	2300      	movs	r3, #0
 80023ac:	930a      	str	r3, [sp, #40]	; 0x28
 80023ae:	f8d8 3000 	ldr.w	r3, [r8]
 80023b2:	9007      	str	r0, [sp, #28]
 80023b4:	3307      	adds	r3, #7
 80023b6:	f023 0307 	bic.w	r3, r3, #7
 80023ba:	f103 0208 	add.w	r2, r3, #8
 80023be:	f894 a018 	ldrb.w	sl, [r4, #24]
 80023c2:	f8d4 b000 	ldr.w	fp, [r4]
 80023c6:	f8c8 2000 	str.w	r2, [r8]
 80023ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80023d2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80023d6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80023da:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
 80023de:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80023e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023e6:	4ba7      	ldr	r3, [pc, #668]	; (8002684 <_printf_float+0x2fa>)
 80023e8:	4640      	mov	r0, r8
 80023ea:	4649      	mov	r1, r9
 80023ec:	f002 f902 	bl	80045f4 <__aeabi_dcmpun>
 80023f0:	bb70      	cbnz	r0, 8002450 <_printf_float+0xc6>
 80023f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023f6:	4ba3      	ldr	r3, [pc, #652]	; (8002684 <_printf_float+0x2fa>)
 80023f8:	4640      	mov	r0, r8
 80023fa:	4649      	mov	r1, r9
 80023fc:	f002 f8dc 	bl	80045b8 <__aeabi_dcmple>
 8002400:	bb30      	cbnz	r0, 8002450 <_printf_float+0xc6>
 8002402:	2200      	movs	r2, #0
 8002404:	2300      	movs	r3, #0
 8002406:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800240a:	f002 f8cb 	bl	80045a4 <__aeabi_dcmplt>
 800240e:	b110      	cbz	r0, 8002416 <_printf_float+0x8c>
 8002410:	232d      	movs	r3, #45	; 0x2d
 8002412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002416:	4a9c      	ldr	r2, [pc, #624]	; (8002688 <_printf_float+0x2fe>)
 8002418:	4b9c      	ldr	r3, [pc, #624]	; (800268c <_printf_float+0x302>)
 800241a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800241e:	bf94      	ite	ls
 8002420:	4690      	movls	r8, r2
 8002422:	4698      	movhi	r8, r3
 8002424:	2303      	movs	r3, #3
 8002426:	f02b 0204 	bic.w	r2, fp, #4
 800242a:	6123      	str	r3, [r4, #16]
 800242c:	6022      	str	r2, [r4, #0]
 800242e:	f04f 0900 	mov.w	r9, #0
 8002432:	9700      	str	r7, [sp, #0]
 8002434:	4633      	mov	r3, r6
 8002436:	aa0b      	add	r2, sp, #44	; 0x2c
 8002438:	4621      	mov	r1, r4
 800243a:	4628      	mov	r0, r5
 800243c:	f000 f9d0 	bl	80027e0 <_printf_common>
 8002440:	3001      	adds	r0, #1
 8002442:	f040 808c 	bne.w	800255e <_printf_float+0x1d4>
 8002446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800244a:	b00d      	add	sp, #52	; 0x34
 800244c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002450:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	f002 f8cc 	bl	80045f4 <__aeabi_dcmpun>
 800245c:	b140      	cbz	r0, 8002470 <_printf_float+0xe6>
 800245e:	9b05      	ldr	r3, [sp, #20]
 8002460:	4a8b      	ldr	r2, [pc, #556]	; (8002690 <_printf_float+0x306>)
 8002462:	2b00      	cmp	r3, #0
 8002464:	bfbc      	itt	lt
 8002466:	232d      	movlt	r3, #45	; 0x2d
 8002468:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800246c:	4b89      	ldr	r3, [pc, #548]	; (8002694 <_printf_float+0x30a>)
 800246e:	e7d4      	b.n	800241a <_printf_float+0x90>
 8002470:	6863      	ldr	r3, [r4, #4]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	f00a 09df 	and.w	r9, sl, #223	; 0xdf
 8002478:	d13e      	bne.n	80024f8 <_printf_float+0x16e>
 800247a:	2306      	movs	r3, #6
 800247c:	6063      	str	r3, [r4, #4]
 800247e:	2300      	movs	r3, #0
 8002480:	9303      	str	r3, [sp, #12]
 8002482:	ab0a      	add	r3, sp, #40	; 0x28
 8002484:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002488:	e9cd a301 	strd	sl, r3, [sp, #4]
 800248c:	ab09      	add	r3, sp, #36	; 0x24
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	6861      	ldr	r1, [r4, #4]
 8002492:	6022      	str	r2, [r4, #0]
 8002494:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002498:	ed9d 0b04 	vldr	d0, [sp, #16]
 800249c:	4628      	mov	r0, r5
 800249e:	f7ff fee5 	bl	800226c <__cvt>
 80024a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80024a6:	4680      	mov	r8, r0
 80024a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80024aa:	d108      	bne.n	80024be <_printf_float+0x134>
 80024ac:	1cc8      	adds	r0, r1, #3
 80024ae:	db02      	blt.n	80024b6 <_printf_float+0x12c>
 80024b0:	6863      	ldr	r3, [r4, #4]
 80024b2:	4299      	cmp	r1, r3
 80024b4:	dd41      	ble.n	800253a <_printf_float+0x1b0>
 80024b6:	f1aa 0a02 	sub.w	sl, sl, #2
 80024ba:	fa5f fa8a 	uxtb.w	sl, sl
 80024be:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80024c2:	d820      	bhi.n	8002506 <_printf_float+0x17c>
 80024c4:	3901      	subs	r1, #1
 80024c6:	4652      	mov	r2, sl
 80024c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80024cc:	9109      	str	r1, [sp, #36]	; 0x24
 80024ce:	f7ff ff2a 	bl	8002326 <__exponent>
 80024d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80024d4:	1813      	adds	r3, r2, r0
 80024d6:	2a01      	cmp	r2, #1
 80024d8:	4681      	mov	r9, r0
 80024da:	6123      	str	r3, [r4, #16]
 80024dc:	dc02      	bgt.n	80024e4 <_printf_float+0x15a>
 80024de:	6822      	ldr	r2, [r4, #0]
 80024e0:	07d2      	lsls	r2, r2, #31
 80024e2:	d501      	bpl.n	80024e8 <_printf_float+0x15e>
 80024e4:	3301      	adds	r3, #1
 80024e6:	6123      	str	r3, [r4, #16]
 80024e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0a0      	beq.n	8002432 <_printf_float+0xa8>
 80024f0:	232d      	movs	r3, #45	; 0x2d
 80024f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024f6:	e79c      	b.n	8002432 <_printf_float+0xa8>
 80024f8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80024fc:	d1bf      	bne.n	800247e <_printf_float+0xf4>
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1bd      	bne.n	800247e <_printf_float+0xf4>
 8002502:	2301      	movs	r3, #1
 8002504:	e7ba      	b.n	800247c <_printf_float+0xf2>
 8002506:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800250a:	d118      	bne.n	800253e <_printf_float+0x1b4>
 800250c:	2900      	cmp	r1, #0
 800250e:	6863      	ldr	r3, [r4, #4]
 8002510:	dd0b      	ble.n	800252a <_printf_float+0x1a0>
 8002512:	6121      	str	r1, [r4, #16]
 8002514:	b913      	cbnz	r3, 800251c <_printf_float+0x192>
 8002516:	6822      	ldr	r2, [r4, #0]
 8002518:	07d0      	lsls	r0, r2, #31
 800251a:	d502      	bpl.n	8002522 <_printf_float+0x198>
 800251c:	3301      	adds	r3, #1
 800251e:	440b      	add	r3, r1
 8002520:	6123      	str	r3, [r4, #16]
 8002522:	65a1      	str	r1, [r4, #88]	; 0x58
 8002524:	f04f 0900 	mov.w	r9, #0
 8002528:	e7de      	b.n	80024e8 <_printf_float+0x15e>
 800252a:	b913      	cbnz	r3, 8002532 <_printf_float+0x1a8>
 800252c:	6822      	ldr	r2, [r4, #0]
 800252e:	07d2      	lsls	r2, r2, #31
 8002530:	d501      	bpl.n	8002536 <_printf_float+0x1ac>
 8002532:	3302      	adds	r3, #2
 8002534:	e7f4      	b.n	8002520 <_printf_float+0x196>
 8002536:	2301      	movs	r3, #1
 8002538:	e7f2      	b.n	8002520 <_printf_float+0x196>
 800253a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800253e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002540:	4299      	cmp	r1, r3
 8002542:	db05      	blt.n	8002550 <_printf_float+0x1c6>
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	6121      	str	r1, [r4, #16]
 8002548:	07d8      	lsls	r0, r3, #31
 800254a:	d5ea      	bpl.n	8002522 <_printf_float+0x198>
 800254c:	1c4b      	adds	r3, r1, #1
 800254e:	e7e7      	b.n	8002520 <_printf_float+0x196>
 8002550:	2900      	cmp	r1, #0
 8002552:	bfd4      	ite	le
 8002554:	f1c1 0202 	rsble	r2, r1, #2
 8002558:	2201      	movgt	r2, #1
 800255a:	4413      	add	r3, r2
 800255c:	e7e0      	b.n	8002520 <_printf_float+0x196>
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	055a      	lsls	r2, r3, #21
 8002562:	d407      	bmi.n	8002574 <_printf_float+0x1ea>
 8002564:	6923      	ldr	r3, [r4, #16]
 8002566:	4642      	mov	r2, r8
 8002568:	4631      	mov	r1, r6
 800256a:	4628      	mov	r0, r5
 800256c:	47b8      	blx	r7
 800256e:	3001      	adds	r0, #1
 8002570:	d12b      	bne.n	80025ca <_printf_float+0x240>
 8002572:	e768      	b.n	8002446 <_printf_float+0xbc>
 8002574:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002578:	f240 80dd 	bls.w	8002736 <_printf_float+0x3ac>
 800257c:	2200      	movs	r2, #0
 800257e:	2300      	movs	r3, #0
 8002580:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002584:	f002 f804 	bl	8004590 <__aeabi_dcmpeq>
 8002588:	2800      	cmp	r0, #0
 800258a:	d033      	beq.n	80025f4 <_printf_float+0x26a>
 800258c:	2301      	movs	r3, #1
 800258e:	4a42      	ldr	r2, [pc, #264]	; (8002698 <_printf_float+0x30e>)
 8002590:	4631      	mov	r1, r6
 8002592:	4628      	mov	r0, r5
 8002594:	47b8      	blx	r7
 8002596:	3001      	adds	r0, #1
 8002598:	f43f af55 	beq.w	8002446 <_printf_float+0xbc>
 800259c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80025a0:	429a      	cmp	r2, r3
 80025a2:	db02      	blt.n	80025aa <_printf_float+0x220>
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	07d8      	lsls	r0, r3, #31
 80025a8:	d50f      	bpl.n	80025ca <_printf_float+0x240>
 80025aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80025ae:	4631      	mov	r1, r6
 80025b0:	4628      	mov	r0, r5
 80025b2:	47b8      	blx	r7
 80025b4:	3001      	adds	r0, #1
 80025b6:	f43f af46 	beq.w	8002446 <_printf_float+0xbc>
 80025ba:	f04f 0800 	mov.w	r8, #0
 80025be:	f104 091a 	add.w	r9, r4, #26
 80025c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80025c4:	3b01      	subs	r3, #1
 80025c6:	4543      	cmp	r3, r8
 80025c8:	dc09      	bgt.n	80025de <_printf_float+0x254>
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	079b      	lsls	r3, r3, #30
 80025ce:	f100 8102 	bmi.w	80027d6 <_printf_float+0x44c>
 80025d2:	68e0      	ldr	r0, [r4, #12]
 80025d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80025d6:	4298      	cmp	r0, r3
 80025d8:	bfb8      	it	lt
 80025da:	4618      	movlt	r0, r3
 80025dc:	e735      	b.n	800244a <_printf_float+0xc0>
 80025de:	2301      	movs	r3, #1
 80025e0:	464a      	mov	r2, r9
 80025e2:	4631      	mov	r1, r6
 80025e4:	4628      	mov	r0, r5
 80025e6:	47b8      	blx	r7
 80025e8:	3001      	adds	r0, #1
 80025ea:	f43f af2c 	beq.w	8002446 <_printf_float+0xbc>
 80025ee:	f108 0801 	add.w	r8, r8, #1
 80025f2:	e7e6      	b.n	80025c2 <_printf_float+0x238>
 80025f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	dc2b      	bgt.n	8002652 <_printf_float+0x2c8>
 80025fa:	2301      	movs	r3, #1
 80025fc:	4a26      	ldr	r2, [pc, #152]	; (8002698 <_printf_float+0x30e>)
 80025fe:	4631      	mov	r1, r6
 8002600:	4628      	mov	r0, r5
 8002602:	47b8      	blx	r7
 8002604:	3001      	adds	r0, #1
 8002606:	f43f af1e 	beq.w	8002446 <_printf_float+0xbc>
 800260a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800260e:	4313      	orrs	r3, r2
 8002610:	d102      	bne.n	8002618 <_printf_float+0x28e>
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	07d9      	lsls	r1, r3, #31
 8002616:	d5d8      	bpl.n	80025ca <_printf_float+0x240>
 8002618:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800261c:	4631      	mov	r1, r6
 800261e:	4628      	mov	r0, r5
 8002620:	47b8      	blx	r7
 8002622:	3001      	adds	r0, #1
 8002624:	f43f af0f 	beq.w	8002446 <_printf_float+0xbc>
 8002628:	f04f 0900 	mov.w	r9, #0
 800262c:	f104 0a1a 	add.w	sl, r4, #26
 8002630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002632:	425b      	negs	r3, r3
 8002634:	454b      	cmp	r3, r9
 8002636:	dc01      	bgt.n	800263c <_printf_float+0x2b2>
 8002638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800263a:	e794      	b.n	8002566 <_printf_float+0x1dc>
 800263c:	2301      	movs	r3, #1
 800263e:	4652      	mov	r2, sl
 8002640:	4631      	mov	r1, r6
 8002642:	4628      	mov	r0, r5
 8002644:	47b8      	blx	r7
 8002646:	3001      	adds	r0, #1
 8002648:	f43f aefd 	beq.w	8002446 <_printf_float+0xbc>
 800264c:	f109 0901 	add.w	r9, r9, #1
 8002650:	e7ee      	b.n	8002630 <_printf_float+0x2a6>
 8002652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002654:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002656:	429a      	cmp	r2, r3
 8002658:	bfa8      	it	ge
 800265a:	461a      	movge	r2, r3
 800265c:	2a00      	cmp	r2, #0
 800265e:	4691      	mov	r9, r2
 8002660:	dd07      	ble.n	8002672 <_printf_float+0x2e8>
 8002662:	4613      	mov	r3, r2
 8002664:	4631      	mov	r1, r6
 8002666:	4642      	mov	r2, r8
 8002668:	4628      	mov	r0, r5
 800266a:	47b8      	blx	r7
 800266c:	3001      	adds	r0, #1
 800266e:	f43f aeea 	beq.w	8002446 <_printf_float+0xbc>
 8002672:	f104 031a 	add.w	r3, r4, #26
 8002676:	f04f 0b00 	mov.w	fp, #0
 800267a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800267e:	9304      	str	r3, [sp, #16]
 8002680:	e016      	b.n	80026b0 <_printf_float+0x326>
 8002682:	bf00      	nop
 8002684:	7fefffff 	.word	0x7fefffff
 8002688:	0801d7fe 	.word	0x0801d7fe
 800268c:	0801a75a 	.word	0x0801a75a
 8002690:	0801d802 	.word	0x0801d802
 8002694:	0801d806 	.word	0x0801d806
 8002698:	0801a476 	.word	0x0801a476
 800269c:	2301      	movs	r3, #1
 800269e:	9a04      	ldr	r2, [sp, #16]
 80026a0:	4631      	mov	r1, r6
 80026a2:	4628      	mov	r0, r5
 80026a4:	47b8      	blx	r7
 80026a6:	3001      	adds	r0, #1
 80026a8:	f43f aecd 	beq.w	8002446 <_printf_float+0xbc>
 80026ac:	f10b 0b01 	add.w	fp, fp, #1
 80026b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80026b4:	ebaa 0309 	sub.w	r3, sl, r9
 80026b8:	455b      	cmp	r3, fp
 80026ba:	dcef      	bgt.n	800269c <_printf_float+0x312>
 80026bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80026c0:	429a      	cmp	r2, r3
 80026c2:	db1b      	blt.n	80026fc <_printf_float+0x372>
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	07da      	lsls	r2, r3, #31
 80026c8:	d418      	bmi.n	80026fc <_printf_float+0x372>
 80026ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80026ce:	4592      	cmp	sl, r2
 80026d0:	db1c      	blt.n	800270c <_printf_float+0x382>
 80026d2:	eba3 090a 	sub.w	r9, r3, sl
 80026d6:	f1b9 0f00 	cmp.w	r9, #0
 80026da:	dd08      	ble.n	80026ee <_printf_float+0x364>
 80026dc:	464b      	mov	r3, r9
 80026de:	eb08 020a 	add.w	r2, r8, sl
 80026e2:	4631      	mov	r1, r6
 80026e4:	4628      	mov	r0, r5
 80026e6:	47b8      	blx	r7
 80026e8:	3001      	adds	r0, #1
 80026ea:	f43f aeac 	beq.w	8002446 <_printf_float+0xbc>
 80026ee:	f04f 0800 	mov.w	r8, #0
 80026f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80026f6:	f104 0a1a 	add.w	sl, r4, #26
 80026fa:	e014      	b.n	8002726 <_printf_float+0x39c>
 80026fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002700:	4631      	mov	r1, r6
 8002702:	4628      	mov	r0, r5
 8002704:	47b8      	blx	r7
 8002706:	3001      	adds	r0, #1
 8002708:	d1df      	bne.n	80026ca <_printf_float+0x340>
 800270a:	e69c      	b.n	8002446 <_printf_float+0xbc>
 800270c:	eba3 0902 	sub.w	r9, r3, r2
 8002710:	e7e1      	b.n	80026d6 <_printf_float+0x34c>
 8002712:	2301      	movs	r3, #1
 8002714:	4652      	mov	r2, sl
 8002716:	4631      	mov	r1, r6
 8002718:	4628      	mov	r0, r5
 800271a:	47b8      	blx	r7
 800271c:	3001      	adds	r0, #1
 800271e:	f43f ae92 	beq.w	8002446 <_printf_float+0xbc>
 8002722:	f108 0801 	add.w	r8, r8, #1
 8002726:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	eba3 0309 	sub.w	r3, r3, r9
 8002730:	4543      	cmp	r3, r8
 8002732:	dcee      	bgt.n	8002712 <_printf_float+0x388>
 8002734:	e749      	b.n	80025ca <_printf_float+0x240>
 8002736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002738:	2a01      	cmp	r2, #1
 800273a:	dc01      	bgt.n	8002740 <_printf_float+0x3b6>
 800273c:	07db      	lsls	r3, r3, #31
 800273e:	d537      	bpl.n	80027b0 <_printf_float+0x426>
 8002740:	2301      	movs	r3, #1
 8002742:	4642      	mov	r2, r8
 8002744:	4631      	mov	r1, r6
 8002746:	4628      	mov	r0, r5
 8002748:	47b8      	blx	r7
 800274a:	3001      	adds	r0, #1
 800274c:	f43f ae7b 	beq.w	8002446 <_printf_float+0xbc>
 8002750:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002754:	4631      	mov	r1, r6
 8002756:	4628      	mov	r0, r5
 8002758:	47b8      	blx	r7
 800275a:	3001      	adds	r0, #1
 800275c:	f43f ae73 	beq.w	8002446 <_printf_float+0xbc>
 8002760:	2200      	movs	r2, #0
 8002762:	2300      	movs	r3, #0
 8002764:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002768:	f001 ff12 	bl	8004590 <__aeabi_dcmpeq>
 800276c:	b9d8      	cbnz	r0, 80027a6 <_printf_float+0x41c>
 800276e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002770:	f108 0201 	add.w	r2, r8, #1
 8002774:	3b01      	subs	r3, #1
 8002776:	4631      	mov	r1, r6
 8002778:	4628      	mov	r0, r5
 800277a:	47b8      	blx	r7
 800277c:	3001      	adds	r0, #1
 800277e:	d10e      	bne.n	800279e <_printf_float+0x414>
 8002780:	e661      	b.n	8002446 <_printf_float+0xbc>
 8002782:	2301      	movs	r3, #1
 8002784:	4652      	mov	r2, sl
 8002786:	4631      	mov	r1, r6
 8002788:	4628      	mov	r0, r5
 800278a:	47b8      	blx	r7
 800278c:	3001      	adds	r0, #1
 800278e:	f43f ae5a 	beq.w	8002446 <_printf_float+0xbc>
 8002792:	f108 0801 	add.w	r8, r8, #1
 8002796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002798:	3b01      	subs	r3, #1
 800279a:	4543      	cmp	r3, r8
 800279c:	dcf1      	bgt.n	8002782 <_printf_float+0x3f8>
 800279e:	464b      	mov	r3, r9
 80027a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80027a4:	e6e0      	b.n	8002568 <_printf_float+0x1de>
 80027a6:	f04f 0800 	mov.w	r8, #0
 80027aa:	f104 0a1a 	add.w	sl, r4, #26
 80027ae:	e7f2      	b.n	8002796 <_printf_float+0x40c>
 80027b0:	2301      	movs	r3, #1
 80027b2:	4642      	mov	r2, r8
 80027b4:	e7df      	b.n	8002776 <_printf_float+0x3ec>
 80027b6:	2301      	movs	r3, #1
 80027b8:	464a      	mov	r2, r9
 80027ba:	4631      	mov	r1, r6
 80027bc:	4628      	mov	r0, r5
 80027be:	47b8      	blx	r7
 80027c0:	3001      	adds	r0, #1
 80027c2:	f43f ae40 	beq.w	8002446 <_printf_float+0xbc>
 80027c6:	f108 0801 	add.w	r8, r8, #1
 80027ca:	68e3      	ldr	r3, [r4, #12]
 80027cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	4543      	cmp	r3, r8
 80027d2:	dcf0      	bgt.n	80027b6 <_printf_float+0x42c>
 80027d4:	e6fd      	b.n	80025d2 <_printf_float+0x248>
 80027d6:	f04f 0800 	mov.w	r8, #0
 80027da:	f104 0919 	add.w	r9, r4, #25
 80027de:	e7f4      	b.n	80027ca <_printf_float+0x440>

080027e0 <_printf_common>:
 80027e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027e4:	4691      	mov	r9, r2
 80027e6:	461f      	mov	r7, r3
 80027e8:	688a      	ldr	r2, [r1, #8]
 80027ea:	690b      	ldr	r3, [r1, #16]
 80027ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027f0:	4293      	cmp	r3, r2
 80027f2:	bfb8      	it	lt
 80027f4:	4613      	movlt	r3, r2
 80027f6:	f8c9 3000 	str.w	r3, [r9]
 80027fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027fe:	4606      	mov	r6, r0
 8002800:	460c      	mov	r4, r1
 8002802:	b112      	cbz	r2, 800280a <_printf_common+0x2a>
 8002804:	3301      	adds	r3, #1
 8002806:	f8c9 3000 	str.w	r3, [r9]
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	0699      	lsls	r1, r3, #26
 800280e:	bf42      	ittt	mi
 8002810:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002814:	3302      	addmi	r3, #2
 8002816:	f8c9 3000 	strmi.w	r3, [r9]
 800281a:	6825      	ldr	r5, [r4, #0]
 800281c:	f015 0506 	ands.w	r5, r5, #6
 8002820:	d107      	bne.n	8002832 <_printf_common+0x52>
 8002822:	f104 0a19 	add.w	sl, r4, #25
 8002826:	68e3      	ldr	r3, [r4, #12]
 8002828:	f8d9 2000 	ldr.w	r2, [r9]
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	42ab      	cmp	r3, r5
 8002830:	dc28      	bgt.n	8002884 <_printf_common+0xa4>
 8002832:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002836:	6822      	ldr	r2, [r4, #0]
 8002838:	3300      	adds	r3, #0
 800283a:	bf18      	it	ne
 800283c:	2301      	movne	r3, #1
 800283e:	0692      	lsls	r2, r2, #26
 8002840:	d42d      	bmi.n	800289e <_printf_common+0xbe>
 8002842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002846:	4639      	mov	r1, r7
 8002848:	4630      	mov	r0, r6
 800284a:	47c0      	blx	r8
 800284c:	3001      	adds	r0, #1
 800284e:	d020      	beq.n	8002892 <_printf_common+0xb2>
 8002850:	6823      	ldr	r3, [r4, #0]
 8002852:	68e5      	ldr	r5, [r4, #12]
 8002854:	f8d9 2000 	ldr.w	r2, [r9]
 8002858:	f003 0306 	and.w	r3, r3, #6
 800285c:	2b04      	cmp	r3, #4
 800285e:	bf08      	it	eq
 8002860:	1aad      	subeq	r5, r5, r2
 8002862:	68a3      	ldr	r3, [r4, #8]
 8002864:	6922      	ldr	r2, [r4, #16]
 8002866:	bf0c      	ite	eq
 8002868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800286c:	2500      	movne	r5, #0
 800286e:	4293      	cmp	r3, r2
 8002870:	bfc4      	itt	gt
 8002872:	1a9b      	subgt	r3, r3, r2
 8002874:	18ed      	addgt	r5, r5, r3
 8002876:	f04f 0900 	mov.w	r9, #0
 800287a:	341a      	adds	r4, #26
 800287c:	454d      	cmp	r5, r9
 800287e:	d11a      	bne.n	80028b6 <_printf_common+0xd6>
 8002880:	2000      	movs	r0, #0
 8002882:	e008      	b.n	8002896 <_printf_common+0xb6>
 8002884:	2301      	movs	r3, #1
 8002886:	4652      	mov	r2, sl
 8002888:	4639      	mov	r1, r7
 800288a:	4630      	mov	r0, r6
 800288c:	47c0      	blx	r8
 800288e:	3001      	adds	r0, #1
 8002890:	d103      	bne.n	800289a <_printf_common+0xba>
 8002892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800289a:	3501      	adds	r5, #1
 800289c:	e7c3      	b.n	8002826 <_printf_common+0x46>
 800289e:	18e1      	adds	r1, r4, r3
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	2030      	movs	r0, #48	; 0x30
 80028a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028a8:	4422      	add	r2, r4
 80028aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028b2:	3302      	adds	r3, #2
 80028b4:	e7c5      	b.n	8002842 <_printf_common+0x62>
 80028b6:	2301      	movs	r3, #1
 80028b8:	4622      	mov	r2, r4
 80028ba:	4639      	mov	r1, r7
 80028bc:	4630      	mov	r0, r6
 80028be:	47c0      	blx	r8
 80028c0:	3001      	adds	r0, #1
 80028c2:	d0e6      	beq.n	8002892 <_printf_common+0xb2>
 80028c4:	f109 0901 	add.w	r9, r9, #1
 80028c8:	e7d8      	b.n	800287c <_printf_common+0x9c>

080028ca <_printf_i>:
 80028ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028ce:	4606      	mov	r6, r0
 80028d0:	460c      	mov	r4, r1
 80028d2:	f101 0043 	add.w	r0, r1, #67	; 0x43
 80028d6:	7e09      	ldrb	r1, [r1, #24]
 80028d8:	b085      	sub	sp, #20
 80028da:	296e      	cmp	r1, #110	; 0x6e
 80028dc:	4698      	mov	r8, r3
 80028de:	4617      	mov	r7, r2
 80028e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80028e2:	f000 80ba 	beq.w	8002a5a <_printf_i+0x190>
 80028e6:	d824      	bhi.n	8002932 <_printf_i+0x68>
 80028e8:	2963      	cmp	r1, #99	; 0x63
 80028ea:	d039      	beq.n	8002960 <_printf_i+0x96>
 80028ec:	d80a      	bhi.n	8002904 <_printf_i+0x3a>
 80028ee:	2900      	cmp	r1, #0
 80028f0:	f000 80c3 	beq.w	8002a7a <_printf_i+0x1b0>
 80028f4:	2958      	cmp	r1, #88	; 0x58
 80028f6:	f000 8091 	beq.w	8002a1c <_printf_i+0x152>
 80028fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028fe:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002902:	e035      	b.n	8002970 <_printf_i+0xa6>
 8002904:	2964      	cmp	r1, #100	; 0x64
 8002906:	d001      	beq.n	800290c <_printf_i+0x42>
 8002908:	2969      	cmp	r1, #105	; 0x69
 800290a:	d1f6      	bne.n	80028fa <_printf_i+0x30>
 800290c:	6825      	ldr	r5, [r4, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002914:	f102 0104 	add.w	r1, r2, #4
 8002918:	d02c      	beq.n	8002974 <_printf_i+0xaa>
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	6019      	str	r1, [r3, #0]
 800291e:	2a00      	cmp	r2, #0
 8002920:	da03      	bge.n	800292a <_printf_i+0x60>
 8002922:	232d      	movs	r3, #45	; 0x2d
 8002924:	4252      	negs	r2, r2
 8002926:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800292a:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8002aec <_printf_i+0x222>
 800292e:	230a      	movs	r3, #10
 8002930:	e03f      	b.n	80029b2 <_printf_i+0xe8>
 8002932:	2973      	cmp	r1, #115	; 0x73
 8002934:	f000 80a5 	beq.w	8002a82 <_printf_i+0x1b8>
 8002938:	d808      	bhi.n	800294c <_printf_i+0x82>
 800293a:	296f      	cmp	r1, #111	; 0x6f
 800293c:	d021      	beq.n	8002982 <_printf_i+0xb8>
 800293e:	2970      	cmp	r1, #112	; 0x70
 8002940:	d1db      	bne.n	80028fa <_printf_i+0x30>
 8002942:	6822      	ldr	r2, [r4, #0]
 8002944:	f042 0220 	orr.w	r2, r2, #32
 8002948:	6022      	str	r2, [r4, #0]
 800294a:	e003      	b.n	8002954 <_printf_i+0x8a>
 800294c:	2975      	cmp	r1, #117	; 0x75
 800294e:	d018      	beq.n	8002982 <_printf_i+0xb8>
 8002950:	2978      	cmp	r1, #120	; 0x78
 8002952:	d1d2      	bne.n	80028fa <_printf_i+0x30>
 8002954:	2278      	movs	r2, #120	; 0x78
 8002956:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800295a:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002af0 <_printf_i+0x226>
 800295e:	e061      	b.n	8002a24 <_printf_i+0x15a>
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	1d11      	adds	r1, r2, #4
 8002964:	6019      	str	r1, [r3, #0]
 8002966:	6813      	ldr	r3, [r2, #0]
 8002968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800296c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002970:	2301      	movs	r3, #1
 8002972:	e093      	b.n	8002a9c <_printf_i+0x1d2>
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	6019      	str	r1, [r3, #0]
 8002978:	f015 0f40 	tst.w	r5, #64	; 0x40
 800297c:	bf18      	it	ne
 800297e:	b212      	sxthne	r2, r2
 8002980:	e7cd      	b.n	800291e <_printf_i+0x54>
 8002982:	f8d4 c000 	ldr.w	ip, [r4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800298c:	f102 0504 	add.w	r5, r2, #4
 8002990:	601d      	str	r5, [r3, #0]
 8002992:	d001      	beq.n	8002998 <_printf_i+0xce>
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	e003      	b.n	80029a0 <_printf_i+0xd6>
 8002998:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800299c:	d0fa      	beq.n	8002994 <_printf_i+0xca>
 800299e:	8812      	ldrh	r2, [r2, #0]
 80029a0:	f8df c148 	ldr.w	ip, [pc, #328]	; 8002aec <_printf_i+0x222>
 80029a4:	296f      	cmp	r1, #111	; 0x6f
 80029a6:	bf0c      	ite	eq
 80029a8:	2308      	moveq	r3, #8
 80029aa:	230a      	movne	r3, #10
 80029ac:	2100      	movs	r1, #0
 80029ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029b2:	6865      	ldr	r5, [r4, #4]
 80029b4:	60a5      	str	r5, [r4, #8]
 80029b6:	2d00      	cmp	r5, #0
 80029b8:	bfa2      	ittt	ge
 80029ba:	6821      	ldrge	r1, [r4, #0]
 80029bc:	f021 0104 	bicge.w	r1, r1, #4
 80029c0:	6021      	strge	r1, [r4, #0]
 80029c2:	b90a      	cbnz	r2, 80029c8 <_printf_i+0xfe>
 80029c4:	2d00      	cmp	r5, #0
 80029c6:	d046      	beq.n	8002a56 <_printf_i+0x18c>
 80029c8:	4605      	mov	r5, r0
 80029ca:	fbb2 f1f3 	udiv	r1, r2, r3
 80029ce:	fb03 2e11 	mls	lr, r3, r1, r2
 80029d2:	4293      	cmp	r3, r2
 80029d4:	f81c e00e 	ldrb.w	lr, [ip, lr]
 80029d8:	f805 ed01 	strb.w	lr, [r5, #-1]!
 80029dc:	d939      	bls.n	8002a52 <_printf_i+0x188>
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d10b      	bne.n	80029fa <_printf_i+0x130>
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	07da      	lsls	r2, r3, #31
 80029e6:	d508      	bpl.n	80029fa <_printf_i+0x130>
 80029e8:	6923      	ldr	r3, [r4, #16]
 80029ea:	6862      	ldr	r2, [r4, #4]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	bfde      	ittt	le
 80029f0:	2330      	movle	r3, #48	; 0x30
 80029f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029f6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80029fa:	1b40      	subs	r0, r0, r5
 80029fc:	6120      	str	r0, [r4, #16]
 80029fe:	f8cd 8000 	str.w	r8, [sp]
 8002a02:	463b      	mov	r3, r7
 8002a04:	aa03      	add	r2, sp, #12
 8002a06:	4621      	mov	r1, r4
 8002a08:	4630      	mov	r0, r6
 8002a0a:	f7ff fee9 	bl	80027e0 <_printf_common>
 8002a0e:	3001      	adds	r0, #1
 8002a10:	d149      	bne.n	8002aa6 <_printf_i+0x1dc>
 8002a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a16:	b005      	add	sp, #20
 8002a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a1c:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8002aec <_printf_i+0x222>
 8002a20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002a24:	681d      	ldr	r5, [r3, #0]
 8002a26:	6821      	ldr	r1, [r4, #0]
 8002a28:	f855 2b04 	ldr.w	r2, [r5], #4
 8002a2c:	601d      	str	r5, [r3, #0]
 8002a2e:	060d      	lsls	r5, r1, #24
 8002a30:	d50b      	bpl.n	8002a4a <_printf_i+0x180>
 8002a32:	07cd      	lsls	r5, r1, #31
 8002a34:	bf44      	itt	mi
 8002a36:	f041 0120 	orrmi.w	r1, r1, #32
 8002a3a:	6021      	strmi	r1, [r4, #0]
 8002a3c:	b91a      	cbnz	r2, 8002a46 <_printf_i+0x17c>
 8002a3e:	6823      	ldr	r3, [r4, #0]
 8002a40:	f023 0320 	bic.w	r3, r3, #32
 8002a44:	6023      	str	r3, [r4, #0]
 8002a46:	2310      	movs	r3, #16
 8002a48:	e7b0      	b.n	80029ac <_printf_i+0xe2>
 8002a4a:	064b      	lsls	r3, r1, #25
 8002a4c:	bf48      	it	mi
 8002a4e:	b292      	uxthmi	r2, r2
 8002a50:	e7ef      	b.n	8002a32 <_printf_i+0x168>
 8002a52:	460a      	mov	r2, r1
 8002a54:	e7b9      	b.n	80029ca <_printf_i+0x100>
 8002a56:	4605      	mov	r5, r0
 8002a58:	e7c1      	b.n	80029de <_printf_i+0x114>
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	f8d4 c000 	ldr.w	ip, [r4]
 8002a60:	6961      	ldr	r1, [r4, #20]
 8002a62:	1d15      	adds	r5, r2, #4
 8002a64:	601d      	str	r5, [r3, #0]
 8002a66:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8002a6a:	6813      	ldr	r3, [r2, #0]
 8002a6c:	d001      	beq.n	8002a72 <_printf_i+0x1a8>
 8002a6e:	6019      	str	r1, [r3, #0]
 8002a70:	e003      	b.n	8002a7a <_printf_i+0x1b0>
 8002a72:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8002a76:	d0fa      	beq.n	8002a6e <_printf_i+0x1a4>
 8002a78:	8019      	strh	r1, [r3, #0]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	6123      	str	r3, [r4, #16]
 8002a7e:	4605      	mov	r5, r0
 8002a80:	e7bd      	b.n	80029fe <_printf_i+0x134>
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	1d11      	adds	r1, r2, #4
 8002a86:	6019      	str	r1, [r3, #0]
 8002a88:	6815      	ldr	r5, [r2, #0]
 8002a8a:	6862      	ldr	r2, [r4, #4]
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4628      	mov	r0, r5
 8002a90:	f7fd fb7e 	bl	8000190 <memchr>
 8002a94:	b108      	cbz	r0, 8002a9a <_printf_i+0x1d0>
 8002a96:	1b40      	subs	r0, r0, r5
 8002a98:	6060      	str	r0, [r4, #4]
 8002a9a:	6863      	ldr	r3, [r4, #4]
 8002a9c:	6123      	str	r3, [r4, #16]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aa4:	e7ab      	b.n	80029fe <_printf_i+0x134>
 8002aa6:	6923      	ldr	r3, [r4, #16]
 8002aa8:	462a      	mov	r2, r5
 8002aaa:	4639      	mov	r1, r7
 8002aac:	4630      	mov	r0, r6
 8002aae:	47c0      	blx	r8
 8002ab0:	3001      	adds	r0, #1
 8002ab2:	d0ae      	beq.n	8002a12 <_printf_i+0x148>
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	079b      	lsls	r3, r3, #30
 8002ab8:	d413      	bmi.n	8002ae2 <_printf_i+0x218>
 8002aba:	68e0      	ldr	r0, [r4, #12]
 8002abc:	9b03      	ldr	r3, [sp, #12]
 8002abe:	4298      	cmp	r0, r3
 8002ac0:	bfb8      	it	lt
 8002ac2:	4618      	movlt	r0, r3
 8002ac4:	e7a7      	b.n	8002a16 <_printf_i+0x14c>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	464a      	mov	r2, r9
 8002aca:	4639      	mov	r1, r7
 8002acc:	4630      	mov	r0, r6
 8002ace:	47c0      	blx	r8
 8002ad0:	3001      	adds	r0, #1
 8002ad2:	d09e      	beq.n	8002a12 <_printf_i+0x148>
 8002ad4:	3501      	adds	r5, #1
 8002ad6:	68e3      	ldr	r3, [r4, #12]
 8002ad8:	9a03      	ldr	r2, [sp, #12]
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	42ab      	cmp	r3, r5
 8002ade:	dcf2      	bgt.n	8002ac6 <_printf_i+0x1fc>
 8002ae0:	e7eb      	b.n	8002aba <_printf_i+0x1f0>
 8002ae2:	2500      	movs	r5, #0
 8002ae4:	f104 0919 	add.w	r9, r4, #25
 8002ae8:	e7f5      	b.n	8002ad6 <_printf_i+0x20c>
 8002aea:	bf00      	nop
 8002aec:	0801d80a 	.word	0x0801d80a
 8002af0:	0801d81b 	.word	0x0801d81b

08002af4 <_iprintf_r>:
 8002af4:	b40e      	push	{r1, r2, r3}
 8002af6:	b503      	push	{r0, r1, lr}
 8002af8:	ab03      	add	r3, sp, #12
 8002afa:	6881      	ldr	r1, [r0, #8]
 8002afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	f7ff fab1 	bl	8002068 <_vfiprintf_r>
 8002b06:	b002      	add	sp, #8
 8002b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b0c:	b003      	add	sp, #12
 8002b0e:	4770      	bx	lr

08002b10 <iprintf>:
 8002b10:	b40f      	push	{r0, r1, r2, r3}
 8002b12:	b507      	push	{r0, r1, r2, lr}
 8002b14:	4906      	ldr	r1, [pc, #24]	; (8002b30 <iprintf+0x20>)
 8002b16:	ab04      	add	r3, sp, #16
 8002b18:	6808      	ldr	r0, [r1, #0]
 8002b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b1e:	6881      	ldr	r1, [r0, #8]
 8002b20:	9301      	str	r3, [sp, #4]
 8002b22:	f7ff faa1 	bl	8002068 <_vfiprintf_r>
 8002b26:	b003      	add	sp, #12
 8002b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b2c:	b004      	add	sp, #16
 8002b2e:	4770      	bx	lr
 8002b30:	20008068 	.word	0x20008068

08002b34 <_sniprintf_r>:
 8002b34:	b408      	push	{r3}
 8002b36:	b530      	push	{r4, r5, lr}
 8002b38:	1e14      	subs	r4, r2, #0
 8002b3a:	b09a      	sub	sp, #104	; 0x68
 8002b3c:	4605      	mov	r5, r0
 8002b3e:	da08      	bge.n	8002b52 <_sniprintf_r+0x1e>
 8002b40:	238b      	movs	r3, #139	; 0x8b
 8002b42:	6003      	str	r3, [r0, #0]
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b48:	b01a      	add	sp, #104	; 0x68
 8002b4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b4e:	b001      	add	sp, #4
 8002b50:	4770      	bx	lr
 8002b52:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002b56:	f8ad 3010 	strh.w	r3, [sp, #16]
 8002b5a:	bf14      	ite	ne
 8002b5c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002b60:	4623      	moveq	r3, r4
 8002b62:	9303      	str	r3, [sp, #12]
 8002b64:	9306      	str	r3, [sp, #24]
 8002b66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b6a:	9101      	str	r1, [sp, #4]
 8002b6c:	9105      	str	r1, [sp, #20]
 8002b6e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8002b72:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8002b74:	ab1e      	add	r3, sp, #120	; 0x78
 8002b76:	a901      	add	r1, sp, #4
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	f001 fa60 	bl	800403e <_svfiprintf_r>
 8002b7e:	1c43      	adds	r3, r0, #1
 8002b80:	bfbc      	itt	lt
 8002b82:	238b      	movlt	r3, #139	; 0x8b
 8002b84:	602b      	strlt	r3, [r5, #0]
 8002b86:	2c00      	cmp	r4, #0
 8002b88:	d0de      	beq.n	8002b48 <_sniprintf_r+0x14>
 8002b8a:	9b01      	ldr	r3, [sp, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	e7da      	b.n	8002b48 <_sniprintf_r+0x14>

08002b92 <sniprintf>:
 8002b92:	b40c      	push	{r2, r3}
 8002b94:	b530      	push	{r4, r5, lr}
 8002b96:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <sniprintf+0x62>)
 8002b98:	1e0c      	subs	r4, r1, #0
 8002b9a:	b09b      	sub	sp, #108	; 0x6c
 8002b9c:	681d      	ldr	r5, [r3, #0]
 8002b9e:	da08      	bge.n	8002bb2 <sniprintf+0x20>
 8002ba0:	238b      	movs	r3, #139	; 0x8b
 8002ba2:	602b      	str	r3, [r5, #0]
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ba8:	b01b      	add	sp, #108	; 0x6c
 8002baa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002bae:	b002      	add	sp, #8
 8002bb0:	4770      	bx	lr
 8002bb2:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002bb6:	f8ad 3010 	strh.w	r3, [sp, #16]
 8002bba:	bf14      	ite	ne
 8002bbc:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002bc0:	4623      	moveq	r3, r4
 8002bc2:	9303      	str	r3, [sp, #12]
 8002bc4:	9306      	str	r3, [sp, #24]
 8002bc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bca:	9001      	str	r0, [sp, #4]
 8002bcc:	9005      	str	r0, [sp, #20]
 8002bce:	f8ad 3012 	strh.w	r3, [sp, #18]
 8002bd2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002bd4:	ab1f      	add	r3, sp, #124	; 0x7c
 8002bd6:	a901      	add	r1, sp, #4
 8002bd8:	4628      	mov	r0, r5
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	f001 fa2f 	bl	800403e <_svfiprintf_r>
 8002be0:	1c43      	adds	r3, r0, #1
 8002be2:	bfbc      	itt	lt
 8002be4:	238b      	movlt	r3, #139	; 0x8b
 8002be6:	602b      	strlt	r3, [r5, #0]
 8002be8:	2c00      	cmp	r4, #0
 8002bea:	d0dd      	beq.n	8002ba8 <sniprintf+0x16>
 8002bec:	9b01      	ldr	r3, [sp, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	e7d9      	b.n	8002ba8 <sniprintf+0x16>
 8002bf4:	20008068 	.word	0x20008068

08002bf8 <_strtol_l.isra.0>:
 8002bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bfc:	4f39      	ldr	r7, [pc, #228]	; (8002ce4 <_strtol_l.isra.0+0xec>)
 8002bfe:	4686      	mov	lr, r0
 8002c00:	4608      	mov	r0, r1
 8002c02:	4605      	mov	r5, r0
 8002c04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002c08:	5de6      	ldrb	r6, [r4, r7]
 8002c0a:	f016 0608 	ands.w	r6, r6, #8
 8002c0e:	d134      	bne.n	8002c7a <_strtol_l.isra.0+0x82>
 8002c10:	2c2d      	cmp	r4, #45	; 0x2d
 8002c12:	d134      	bne.n	8002c7e <_strtol_l.isra.0+0x86>
 8002c14:	782c      	ldrb	r4, [r5, #0]
 8002c16:	f04f 0801 	mov.w	r8, #1
 8002c1a:	1c85      	adds	r5, r0, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d05c      	beq.n	8002cda <_strtol_l.isra.0+0xe2>
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d109      	bne.n	8002c38 <_strtol_l.isra.0+0x40>
 8002c24:	2c30      	cmp	r4, #48	; 0x30
 8002c26:	d107      	bne.n	8002c38 <_strtol_l.isra.0+0x40>
 8002c28:	7828      	ldrb	r0, [r5, #0]
 8002c2a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002c2e:	2858      	cmp	r0, #88	; 0x58
 8002c30:	d14e      	bne.n	8002cd0 <_strtol_l.isra.0+0xd8>
 8002c32:	786c      	ldrb	r4, [r5, #1]
 8002c34:	2310      	movs	r3, #16
 8002c36:	3502      	adds	r5, #2
 8002c38:	f1b8 0f00 	cmp.w	r8, #0
 8002c3c:	bf14      	ite	ne
 8002c3e:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8002c42:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8002c46:	2700      	movs	r7, #0
 8002c48:	fbbc f9f3 	udiv	r9, ip, r3
 8002c4c:	4638      	mov	r0, r7
 8002c4e:	fb03 ca19 	mls	sl, r3, r9, ip
 8002c52:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8002c56:	2e09      	cmp	r6, #9
 8002c58:	d818      	bhi.n	8002c8c <_strtol_l.isra.0+0x94>
 8002c5a:	4634      	mov	r4, r6
 8002c5c:	42a3      	cmp	r3, r4
 8002c5e:	dd24      	ble.n	8002caa <_strtol_l.isra.0+0xb2>
 8002c60:	1c7e      	adds	r6, r7, #1
 8002c62:	d007      	beq.n	8002c74 <_strtol_l.isra.0+0x7c>
 8002c64:	4581      	cmp	r9, r0
 8002c66:	d31d      	bcc.n	8002ca4 <_strtol_l.isra.0+0xac>
 8002c68:	d101      	bne.n	8002c6e <_strtol_l.isra.0+0x76>
 8002c6a:	45a2      	cmp	sl, r4
 8002c6c:	db1a      	blt.n	8002ca4 <_strtol_l.isra.0+0xac>
 8002c6e:	fb00 4003 	mla	r0, r0, r3, r4
 8002c72:	2701      	movs	r7, #1
 8002c74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002c78:	e7eb      	b.n	8002c52 <_strtol_l.isra.0+0x5a>
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	e7c1      	b.n	8002c02 <_strtol_l.isra.0+0xa>
 8002c7e:	2c2b      	cmp	r4, #43	; 0x2b
 8002c80:	bf08      	it	eq
 8002c82:	782c      	ldrbeq	r4, [r5, #0]
 8002c84:	46b0      	mov	r8, r6
 8002c86:	bf08      	it	eq
 8002c88:	1c85      	addeq	r5, r0, #2
 8002c8a:	e7c7      	b.n	8002c1c <_strtol_l.isra.0+0x24>
 8002c8c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8002c90:	2e19      	cmp	r6, #25
 8002c92:	d801      	bhi.n	8002c98 <_strtol_l.isra.0+0xa0>
 8002c94:	3c37      	subs	r4, #55	; 0x37
 8002c96:	e7e1      	b.n	8002c5c <_strtol_l.isra.0+0x64>
 8002c98:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8002c9c:	2e19      	cmp	r6, #25
 8002c9e:	d804      	bhi.n	8002caa <_strtol_l.isra.0+0xb2>
 8002ca0:	3c57      	subs	r4, #87	; 0x57
 8002ca2:	e7db      	b.n	8002c5c <_strtol_l.isra.0+0x64>
 8002ca4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002ca8:	e7e4      	b.n	8002c74 <_strtol_l.isra.0+0x7c>
 8002caa:	1c7b      	adds	r3, r7, #1
 8002cac:	d106      	bne.n	8002cbc <_strtol_l.isra.0+0xc4>
 8002cae:	2322      	movs	r3, #34	; 0x22
 8002cb0:	f8ce 3000 	str.w	r3, [lr]
 8002cb4:	4660      	mov	r0, ip
 8002cb6:	b942      	cbnz	r2, 8002cca <_strtol_l.isra.0+0xd2>
 8002cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cbc:	f1b8 0f00 	cmp.w	r8, #0
 8002cc0:	d000      	beq.n	8002cc4 <_strtol_l.isra.0+0xcc>
 8002cc2:	4240      	negs	r0, r0
 8002cc4:	2a00      	cmp	r2, #0
 8002cc6:	d0f7      	beq.n	8002cb8 <_strtol_l.isra.0+0xc0>
 8002cc8:	b107      	cbz	r7, 8002ccc <_strtol_l.isra.0+0xd4>
 8002cca:	1e69      	subs	r1, r5, #1
 8002ccc:	6011      	str	r1, [r2, #0]
 8002cce:	e7f3      	b.n	8002cb8 <_strtol_l.isra.0+0xc0>
 8002cd0:	2430      	movs	r4, #48	; 0x30
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1b0      	bne.n	8002c38 <_strtol_l.isra.0+0x40>
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	e7ae      	b.n	8002c38 <_strtol_l.isra.0+0x40>
 8002cda:	2c30      	cmp	r4, #48	; 0x30
 8002cdc:	d0a4      	beq.n	8002c28 <_strtol_l.isra.0+0x30>
 8002cde:	230a      	movs	r3, #10
 8002ce0:	e7aa      	b.n	8002c38 <_strtol_l.isra.0+0x40>
 8002ce2:	bf00      	nop
 8002ce4:	08019513 	.word	0x08019513

08002ce8 <_strtol_r>:
 8002ce8:	e786      	b.n	8002bf8 <_strtol_l.isra.0>

08002cea <strtol_l>:
 8002cea:	4613      	mov	r3, r2
 8002cec:	460a      	mov	r2, r1
 8002cee:	4601      	mov	r1, r0
 8002cf0:	4801      	ldr	r0, [pc, #4]	; (8002cf8 <strtol_l+0xe>)
 8002cf2:	6800      	ldr	r0, [r0, #0]
 8002cf4:	e780      	b.n	8002bf8 <_strtol_l.isra.0>
 8002cf6:	bf00      	nop
 8002cf8:	20008068 	.word	0x20008068

08002cfc <strtol>:
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	460a      	mov	r2, r1
 8002d00:	4601      	mov	r1, r0
 8002d02:	4801      	ldr	r0, [pc, #4]	; (8002d08 <strtol+0xc>)
 8002d04:	6800      	ldr	r0, [r0, #0]
 8002d06:	e777      	b.n	8002bf8 <_strtol_l.isra.0>
 8002d08:	20008068 	.word	0x20008068

08002d0c <_vsniprintf_r>:
 8002d0c:	b530      	push	{r4, r5, lr}
 8002d0e:	1e14      	subs	r4, r2, #0
 8002d10:	4605      	mov	r5, r0
 8002d12:	b09b      	sub	sp, #108	; 0x6c
 8002d14:	4618      	mov	r0, r3
 8002d16:	da05      	bge.n	8002d24 <_vsniprintf_r+0x18>
 8002d18:	238b      	movs	r3, #139	; 0x8b
 8002d1a:	602b      	str	r3, [r5, #0]
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d20:	b01b      	add	sp, #108	; 0x6c
 8002d22:	bd30      	pop	{r4, r5, pc}
 8002d24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002d28:	f8ad 3010 	strh.w	r3, [sp, #16]
 8002d2c:	bf14      	ite	ne
 8002d2e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002d32:	4623      	moveq	r3, r4
 8002d34:	9303      	str	r3, [sp, #12]
 8002d36:	9306      	str	r3, [sp, #24]
 8002d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d3c:	9101      	str	r1, [sp, #4]
 8002d3e:	9105      	str	r1, [sp, #20]
 8002d40:	f8ad 3012 	strh.w	r3, [sp, #18]
 8002d44:	4602      	mov	r2, r0
 8002d46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002d48:	a901      	add	r1, sp, #4
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	f001 f977 	bl	800403e <_svfiprintf_r>
 8002d50:	1c43      	adds	r3, r0, #1
 8002d52:	bfbc      	itt	lt
 8002d54:	238b      	movlt	r3, #139	; 0x8b
 8002d56:	602b      	strlt	r3, [r5, #0]
 8002d58:	2c00      	cmp	r4, #0
 8002d5a:	d0e1      	beq.n	8002d20 <_vsniprintf_r+0x14>
 8002d5c:	9b01      	ldr	r3, [sp, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e7dd      	b.n	8002d20 <_vsniprintf_r+0x14>

08002d64 <vsniprintf>:
 8002d64:	b507      	push	{r0, r1, r2, lr}
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	460a      	mov	r2, r1
 8002d6c:	4601      	mov	r1, r0
 8002d6e:	4803      	ldr	r0, [pc, #12]	; (8002d7c <vsniprintf+0x18>)
 8002d70:	6800      	ldr	r0, [r0, #0]
 8002d72:	f7ff ffcb 	bl	8002d0c <_vsniprintf_r>
 8002d76:	b003      	add	sp, #12
 8002d78:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d7c:	20008068 	.word	0x20008068

08002d80 <_vsiprintf_r>:
 8002d80:	b500      	push	{lr}
 8002d82:	b09b      	sub	sp, #108	; 0x6c
 8002d84:	9101      	str	r1, [sp, #4]
 8002d86:	9105      	str	r1, [sp, #20]
 8002d88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d8c:	9106      	str	r1, [sp, #24]
 8002d8e:	9103      	str	r1, [sp, #12]
 8002d90:	4905      	ldr	r1, [pc, #20]	; (8002da8 <_vsiprintf_r+0x28>)
 8002d92:	9104      	str	r1, [sp, #16]
 8002d94:	a901      	add	r1, sp, #4
 8002d96:	f001 f952 	bl	800403e <_svfiprintf_r>
 8002d9a:	9b01      	ldr	r3, [sp, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	b01b      	add	sp, #108	; 0x6c
 8002da2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002da6:	bf00      	nop
 8002da8:	ffff0208 	.word	0xffff0208

08002dac <vsiprintf>:
 8002dac:	4613      	mov	r3, r2
 8002dae:	460a      	mov	r2, r1
 8002db0:	4601      	mov	r1, r0
 8002db2:	4802      	ldr	r0, [pc, #8]	; (8002dbc <vsiprintf+0x10>)
 8002db4:	6800      	ldr	r0, [r0, #0]
 8002db6:	f7ff bfe3 	b.w	8002d80 <_vsiprintf_r>
 8002dba:	bf00      	nop
 8002dbc:	20008068 	.word	0x20008068

08002dc0 <__swbuf_r>:
 8002dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc2:	460d      	mov	r5, r1
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	4606      	mov	r6, r0
 8002dc8:	b118      	cbz	r0, 8002dd2 <__swbuf_r+0x12>
 8002dca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002dcc:	b90b      	cbnz	r3, 8002dd2 <__swbuf_r+0x12>
 8002dce:	f000 f9b1 	bl	8003134 <__sinit>
 8002dd2:	69a3      	ldr	r3, [r4, #24]
 8002dd4:	60a3      	str	r3, [r4, #8]
 8002dd6:	89a3      	ldrh	r3, [r4, #12]
 8002dd8:	071a      	lsls	r2, r3, #28
 8002dda:	d525      	bpl.n	8002e28 <__swbuf_r+0x68>
 8002ddc:	6923      	ldr	r3, [r4, #16]
 8002dde:	b31b      	cbz	r3, 8002e28 <__swbuf_r+0x68>
 8002de0:	6923      	ldr	r3, [r4, #16]
 8002de2:	6820      	ldr	r0, [r4, #0]
 8002de4:	1ac0      	subs	r0, r0, r3
 8002de6:	6963      	ldr	r3, [r4, #20]
 8002de8:	b2ed      	uxtb	r5, r5
 8002dea:	4283      	cmp	r3, r0
 8002dec:	462f      	mov	r7, r5
 8002dee:	dc04      	bgt.n	8002dfa <__swbuf_r+0x3a>
 8002df0:	4621      	mov	r1, r4
 8002df2:	4630      	mov	r0, r6
 8002df4:	f000 f934 	bl	8003060 <_fflush_r>
 8002df8:	b9e0      	cbnz	r0, 8002e34 <__swbuf_r+0x74>
 8002dfa:	68a3      	ldr	r3, [r4, #8]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	60a3      	str	r3, [r4, #8]
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	6022      	str	r2, [r4, #0]
 8002e06:	701d      	strb	r5, [r3, #0]
 8002e08:	6963      	ldr	r3, [r4, #20]
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	4283      	cmp	r3, r0
 8002e0e:	d004      	beq.n	8002e1a <__swbuf_r+0x5a>
 8002e10:	89a3      	ldrh	r3, [r4, #12]
 8002e12:	07db      	lsls	r3, r3, #31
 8002e14:	d506      	bpl.n	8002e24 <__swbuf_r+0x64>
 8002e16:	2d0a      	cmp	r5, #10
 8002e18:	d104      	bne.n	8002e24 <__swbuf_r+0x64>
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	f000 f91f 	bl	8003060 <_fflush_r>
 8002e22:	b938      	cbnz	r0, 8002e34 <__swbuf_r+0x74>
 8002e24:	4638      	mov	r0, r7
 8002e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e28:	4621      	mov	r1, r4
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	f000 f80e 	bl	8002e4c <__swsetup_r>
 8002e30:	2800      	cmp	r0, #0
 8002e32:	d0d5      	beq.n	8002de0 <__swbuf_r+0x20>
 8002e34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002e38:	e7f4      	b.n	8002e24 <__swbuf_r+0x64>

08002e3a <__swbuf>:
 8002e3a:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <__swbuf+0xe>)
 8002e3c:	460a      	mov	r2, r1
 8002e3e:	4601      	mov	r1, r0
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	f7ff bfbd 	b.w	8002dc0 <__swbuf_r>
 8002e46:	bf00      	nop
 8002e48:	20008068 	.word	0x20008068

08002e4c <__swsetup_r>:
 8002e4c:	b538      	push	{r3, r4, r5, lr}
 8002e4e:	4b2a      	ldr	r3, [pc, #168]	; (8002ef8 <__swsetup_r+0xac>)
 8002e50:	4605      	mov	r5, r0
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	460c      	mov	r4, r1
 8002e56:	b118      	cbz	r0, 8002e60 <__swsetup_r+0x14>
 8002e58:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002e5a:	b90b      	cbnz	r3, 8002e60 <__swsetup_r+0x14>
 8002e5c:	f000 f96a 	bl	8003134 <__sinit>
 8002e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	0711      	lsls	r1, r2, #28
 8002e68:	d422      	bmi.n	8002eb0 <__swsetup_r+0x64>
 8002e6a:	06d0      	lsls	r0, r2, #27
 8002e6c:	d407      	bmi.n	8002e7e <__swsetup_r+0x32>
 8002e6e:	2209      	movs	r2, #9
 8002e70:	602a      	str	r2, [r5, #0]
 8002e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e76:	81a3      	strh	r3, [r4, #12]
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e7c:	e034      	b.n	8002ee8 <__swsetup_r+0x9c>
 8002e7e:	0751      	lsls	r1, r2, #29
 8002e80:	d512      	bpl.n	8002ea8 <__swsetup_r+0x5c>
 8002e82:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002e84:	b141      	cbz	r1, 8002e98 <__swsetup_r+0x4c>
 8002e86:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8002e8a:	4299      	cmp	r1, r3
 8002e8c:	d002      	beq.n	8002e94 <__swsetup_r+0x48>
 8002e8e:	4628      	mov	r0, r5
 8002e90:	f000 ff5e 	bl	8003d50 <_free_r>
 8002e94:	2300      	movs	r3, #0
 8002e96:	6323      	str	r3, [r4, #48]	; 0x30
 8002e98:	89a3      	ldrh	r3, [r4, #12]
 8002e9a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e9e:	81a3      	strh	r3, [r4, #12]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	6063      	str	r3, [r4, #4]
 8002ea4:	6923      	ldr	r3, [r4, #16]
 8002ea6:	6023      	str	r3, [r4, #0]
 8002ea8:	89a3      	ldrh	r3, [r4, #12]
 8002eaa:	f043 0308 	orr.w	r3, r3, #8
 8002eae:	81a3      	strh	r3, [r4, #12]
 8002eb0:	6923      	ldr	r3, [r4, #16]
 8002eb2:	b94b      	cbnz	r3, 8002ec8 <__swsetup_r+0x7c>
 8002eb4:	89a3      	ldrh	r3, [r4, #12]
 8002eb6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebe:	d003      	beq.n	8002ec8 <__swsetup_r+0x7c>
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	f000 fb19 	bl	80034fa <__smakebuf_r>
 8002ec8:	89a2      	ldrh	r2, [r4, #12]
 8002eca:	f012 0301 	ands.w	r3, r2, #1
 8002ece:	d00c      	beq.n	8002eea <__swsetup_r+0x9e>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60a3      	str	r3, [r4, #8]
 8002ed4:	6963      	ldr	r3, [r4, #20]
 8002ed6:	425b      	negs	r3, r3
 8002ed8:	61a3      	str	r3, [r4, #24]
 8002eda:	6923      	ldr	r3, [r4, #16]
 8002edc:	b953      	cbnz	r3, 8002ef4 <__swsetup_r+0xa8>
 8002ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ee2:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002ee6:	d1c4      	bne.n	8002e72 <__swsetup_r+0x26>
 8002ee8:	bd38      	pop	{r3, r4, r5, pc}
 8002eea:	0792      	lsls	r2, r2, #30
 8002eec:	bf58      	it	pl
 8002eee:	6963      	ldrpl	r3, [r4, #20]
 8002ef0:	60a3      	str	r3, [r4, #8]
 8002ef2:	e7f2      	b.n	8002eda <__swsetup_r+0x8e>
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	e7f7      	b.n	8002ee8 <__swsetup_r+0x9c>
 8002ef8:	20008068 	.word	0x20008068

08002efc <__chk_fail>:
 8002efc:	b500      	push	{lr}
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <__chk_fail+0x44>)
 8002f00:	b08d      	sub	sp, #52	; 0x34
 8002f02:	466a      	mov	r2, sp
 8002f04:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8002f08:	4615      	mov	r5, r2
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	6859      	ldr	r1, [r3, #4]
 8002f0e:	4614      	mov	r4, r2
 8002f10:	c403      	stmia	r4!, {r0, r1}
 8002f12:	3308      	adds	r3, #8
 8002f14:	42b3      	cmp	r3, r6
 8002f16:	4622      	mov	r2, r4
 8002f18:	d1f7      	bne.n	8002f0a <__chk_fail+0xe>
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	889b      	ldrh	r3, [r3, #4]
 8002f1e:	80a3      	strh	r3, [r4, #4]
 8002f20:	6020      	str	r0, [r4, #0]
 8002f22:	4628      	mov	r0, r5
 8002f24:	f001 fd64 	bl	80049f0 <strlen>
 8002f28:	4629      	mov	r1, r5
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	2002      	movs	r0, #2
 8002f2e:	f012 fcd9 	bl	80158e4 <_write>
 8002f32:	2006      	movs	r0, #6
 8002f34:	f001 fa09 	bl	800434a <raise>
 8002f38:	207f      	movs	r0, #127	; 0x7f
 8002f3a:	f007 fa83 	bl	800a444 <_exit>
 8002f3e:	bf00      	nop
 8002f40:	0801d82c 	.word	0x0801d82c

08002f44 <__sflush_r>:
 8002f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f48:	b293      	uxth	r3, r2
 8002f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f4e:	4605      	mov	r5, r0
 8002f50:	0718      	lsls	r0, r3, #28
 8002f52:	460c      	mov	r4, r1
 8002f54:	d45f      	bmi.n	8003016 <__sflush_r+0xd2>
 8002f56:	684b      	ldr	r3, [r1, #4]
 8002f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	818a      	strh	r2, [r1, #12]
 8002f60:	dc05      	bgt.n	8002f6e <__sflush_r+0x2a>
 8002f62:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	dc02      	bgt.n	8002f6e <__sflush_r+0x2a>
 8002f68:	2000      	movs	r0, #0
 8002f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f70:	2e00      	cmp	r6, #0
 8002f72:	d0f9      	beq.n	8002f68 <__sflush_r+0x24>
 8002f74:	2300      	movs	r3, #0
 8002f76:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f7a:	682f      	ldr	r7, [r5, #0]
 8002f7c:	602b      	str	r3, [r5, #0]
 8002f7e:	d036      	beq.n	8002fee <__sflush_r+0xaa>
 8002f80:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002f82:	89a3      	ldrh	r3, [r4, #12]
 8002f84:	075a      	lsls	r2, r3, #29
 8002f86:	d505      	bpl.n	8002f94 <__sflush_r+0x50>
 8002f88:	6863      	ldr	r3, [r4, #4]
 8002f8a:	1ac0      	subs	r0, r0, r3
 8002f8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f8e:	b10b      	cbz	r3, 8002f94 <__sflush_r+0x50>
 8002f90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f92:	1ac0      	subs	r0, r0, r3
 8002f94:	2300      	movs	r3, #0
 8002f96:	4602      	mov	r2, r0
 8002f98:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f9a:	69e1      	ldr	r1, [r4, #28]
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	47b0      	blx	r6
 8002fa0:	1c43      	adds	r3, r0, #1
 8002fa2:	89a3      	ldrh	r3, [r4, #12]
 8002fa4:	d106      	bne.n	8002fb4 <__sflush_r+0x70>
 8002fa6:	6829      	ldr	r1, [r5, #0]
 8002fa8:	291d      	cmp	r1, #29
 8002faa:	d830      	bhi.n	800300e <__sflush_r+0xca>
 8002fac:	4a2b      	ldr	r2, [pc, #172]	; (800305c <__sflush_r+0x118>)
 8002fae:	40ca      	lsrs	r2, r1
 8002fb0:	07d6      	lsls	r6, r2, #31
 8002fb2:	d52c      	bpl.n	800300e <__sflush_r+0xca>
 8002fb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fb8:	b21b      	sxth	r3, r3
 8002fba:	2200      	movs	r2, #0
 8002fbc:	6062      	str	r2, [r4, #4]
 8002fbe:	04d9      	lsls	r1, r3, #19
 8002fc0:	6922      	ldr	r2, [r4, #16]
 8002fc2:	81a3      	strh	r3, [r4, #12]
 8002fc4:	6022      	str	r2, [r4, #0]
 8002fc6:	d504      	bpl.n	8002fd2 <__sflush_r+0x8e>
 8002fc8:	1c42      	adds	r2, r0, #1
 8002fca:	d101      	bne.n	8002fd0 <__sflush_r+0x8c>
 8002fcc:	682b      	ldr	r3, [r5, #0]
 8002fce:	b903      	cbnz	r3, 8002fd2 <__sflush_r+0x8e>
 8002fd0:	6520      	str	r0, [r4, #80]	; 0x50
 8002fd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002fd4:	602f      	str	r7, [r5, #0]
 8002fd6:	2900      	cmp	r1, #0
 8002fd8:	d0c6      	beq.n	8002f68 <__sflush_r+0x24>
 8002fda:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8002fde:	4299      	cmp	r1, r3
 8002fe0:	d002      	beq.n	8002fe8 <__sflush_r+0xa4>
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	f000 feb4 	bl	8003d50 <_free_r>
 8002fe8:	2000      	movs	r0, #0
 8002fea:	6320      	str	r0, [r4, #48]	; 0x30
 8002fec:	e7bd      	b.n	8002f6a <__sflush_r+0x26>
 8002fee:	69e1      	ldr	r1, [r4, #28]
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	47b0      	blx	r6
 8002ff6:	1c41      	adds	r1, r0, #1
 8002ff8:	d1c3      	bne.n	8002f82 <__sflush_r+0x3e>
 8002ffa:	682b      	ldr	r3, [r5, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0c0      	beq.n	8002f82 <__sflush_r+0x3e>
 8003000:	2b1d      	cmp	r3, #29
 8003002:	d001      	beq.n	8003008 <__sflush_r+0xc4>
 8003004:	2b16      	cmp	r3, #22
 8003006:	d101      	bne.n	800300c <__sflush_r+0xc8>
 8003008:	602f      	str	r7, [r5, #0]
 800300a:	e7ad      	b.n	8002f68 <__sflush_r+0x24>
 800300c:	89a3      	ldrh	r3, [r4, #12]
 800300e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003012:	81a3      	strh	r3, [r4, #12]
 8003014:	e7a9      	b.n	8002f6a <__sflush_r+0x26>
 8003016:	690f      	ldr	r7, [r1, #16]
 8003018:	2f00      	cmp	r7, #0
 800301a:	d0a5      	beq.n	8002f68 <__sflush_r+0x24>
 800301c:	079b      	lsls	r3, r3, #30
 800301e:	680e      	ldr	r6, [r1, #0]
 8003020:	bf08      	it	eq
 8003022:	694b      	ldreq	r3, [r1, #20]
 8003024:	600f      	str	r7, [r1, #0]
 8003026:	bf18      	it	ne
 8003028:	2300      	movne	r3, #0
 800302a:	eba6 0807 	sub.w	r8, r6, r7
 800302e:	608b      	str	r3, [r1, #8]
 8003030:	f1b8 0f00 	cmp.w	r8, #0
 8003034:	dd98      	ble.n	8002f68 <__sflush_r+0x24>
 8003036:	4643      	mov	r3, r8
 8003038:	463a      	mov	r2, r7
 800303a:	69e1      	ldr	r1, [r4, #28]
 800303c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800303e:	4628      	mov	r0, r5
 8003040:	47b0      	blx	r6
 8003042:	2800      	cmp	r0, #0
 8003044:	dc06      	bgt.n	8003054 <__sflush_r+0x110>
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800304c:	81a3      	strh	r3, [r4, #12]
 800304e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003052:	e78a      	b.n	8002f6a <__sflush_r+0x26>
 8003054:	4407      	add	r7, r0
 8003056:	eba8 0800 	sub.w	r8, r8, r0
 800305a:	e7e9      	b.n	8003030 <__sflush_r+0xec>
 800305c:	20400001 	.word	0x20400001

08003060 <_fflush_r>:
 8003060:	b538      	push	{r3, r4, r5, lr}
 8003062:	460d      	mov	r5, r1
 8003064:	4604      	mov	r4, r0
 8003066:	b118      	cbz	r0, 8003070 <_fflush_r+0x10>
 8003068:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800306a:	b90b      	cbnz	r3, 8003070 <_fflush_r+0x10>
 800306c:	f000 f862 	bl	8003134 <__sinit>
 8003070:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 8003074:	b128      	cbz	r0, 8003082 <_fflush_r+0x22>
 8003076:	4629      	mov	r1, r5
 8003078:	4620      	mov	r0, r4
 800307a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800307e:	f7ff bf61 	b.w	8002f44 <__sflush_r>
 8003082:	bd38      	pop	{r3, r4, r5, pc}

08003084 <fflush>:
 8003084:	4601      	mov	r1, r0
 8003086:	b920      	cbnz	r0, 8003092 <fflush+0xe>
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <fflush+0x18>)
 800308a:	4905      	ldr	r1, [pc, #20]	; (80030a0 <fflush+0x1c>)
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	f001 bd2a 	b.w	8004ae6 <_fwalk_reent>
 8003092:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <fflush+0x20>)
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	f7ff bfe3 	b.w	8003060 <_fflush_r>
 800309a:	bf00      	nop
 800309c:	080194f0 	.word	0x080194f0
 80030a0:	08003061 	.word	0x08003061
 80030a4:	20008068 	.word	0x20008068

080030a8 <std>:
 80030a8:	2300      	movs	r3, #0
 80030aa:	b510      	push	{r4, lr}
 80030ac:	4604      	mov	r4, r0
 80030ae:	e9c0 3300 	strd	r3, r3, [r0]
 80030b2:	6083      	str	r3, [r0, #8]
 80030b4:	8181      	strh	r1, [r0, #12]
 80030b6:	6603      	str	r3, [r0, #96]	; 0x60
 80030b8:	81c2      	strh	r2, [r0, #14]
 80030ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030be:	6183      	str	r3, [r0, #24]
 80030c0:	4619      	mov	r1, r3
 80030c2:	2208      	movs	r2, #8
 80030c4:	3058      	adds	r0, #88	; 0x58
 80030c6:	f001 fc52 	bl	800496e <memset>
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <std+0x38>)
 80030cc:	6223      	str	r3, [r4, #32]
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <std+0x3c>)
 80030d0:	6263      	str	r3, [r4, #36]	; 0x24
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <std+0x40>)
 80030d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <std+0x44>)
 80030d8:	61e4      	str	r4, [r4, #28]
 80030da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030dc:	bd10      	pop	{r4, pc}
 80030de:	bf00      	nop
 80030e0:	08004b8b 	.word	0x08004b8b
 80030e4:	08004bb1 	.word	0x08004bb1
 80030e8:	08004be9 	.word	0x08004be9
 80030ec:	08004c0d 	.word	0x08004c0d

080030f0 <_cleanup_r>:
 80030f0:	4901      	ldr	r1, [pc, #4]	; (80030f8 <_cleanup_r+0x8>)
 80030f2:	f001 bcf8 	b.w	8004ae6 <_fwalk_reent>
 80030f6:	bf00      	nop
 80030f8:	08003061 	.word	0x08003061

080030fc <__sfmoreglue>:
 80030fc:	b570      	push	{r4, r5, r6, lr}
 80030fe:	1e4a      	subs	r2, r1, #1
 8003100:	2564      	movs	r5, #100	; 0x64
 8003102:	4355      	muls	r5, r2
 8003104:	460e      	mov	r6, r1
 8003106:	f105 0170 	add.w	r1, r5, #112	; 0x70
 800310a:	f000 fe6f 	bl	8003dec <_malloc_r>
 800310e:	4604      	mov	r4, r0
 8003110:	b140      	cbz	r0, 8003124 <__sfmoreglue+0x28>
 8003112:	2100      	movs	r1, #0
 8003114:	e9c0 1600 	strd	r1, r6, [r0]
 8003118:	300c      	adds	r0, #12
 800311a:	60a0      	str	r0, [r4, #8]
 800311c:	f105 0264 	add.w	r2, r5, #100	; 0x64
 8003120:	f001 fc25 	bl	800496e <memset>
 8003124:	4620      	mov	r0, r4
 8003126:	bd70      	pop	{r4, r5, r6, pc}

08003128 <_cleanup>:
 8003128:	4b01      	ldr	r3, [pc, #4]	; (8003130 <_cleanup+0x8>)
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	f7ff bfe0 	b.w	80030f0 <_cleanup_r>
 8003130:	080194f0 	.word	0x080194f0

08003134 <__sinit>:
 8003134:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003136:	b510      	push	{r4, lr}
 8003138:	4604      	mov	r4, r0
 800313a:	b9d2      	cbnz	r2, 8003172 <__sinit+0x3e>
 800313c:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <__sinit+0x40>)
 800313e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8003140:	2303      	movs	r3, #3
 8003142:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
 8003146:	f500 73ac 	add.w	r3, r0, #344	; 0x158
 800314a:	f8c0 3154 	str.w	r3, [r0, #340]	; 0x154
 800314e:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
 8003152:	2104      	movs	r1, #4
 8003154:	6840      	ldr	r0, [r0, #4]
 8003156:	f7ff ffa7 	bl	80030a8 <std>
 800315a:	2201      	movs	r2, #1
 800315c:	2109      	movs	r1, #9
 800315e:	68a0      	ldr	r0, [r4, #8]
 8003160:	f7ff ffa2 	bl	80030a8 <std>
 8003164:	2202      	movs	r2, #2
 8003166:	2112      	movs	r1, #18
 8003168:	68e0      	ldr	r0, [r4, #12]
 800316a:	f7ff ff9d 	bl	80030a8 <std>
 800316e:	2301      	movs	r3, #1
 8003170:	63a3      	str	r3, [r4, #56]	; 0x38
 8003172:	bd10      	pop	{r4, pc}
 8003174:	080030f1 	.word	0x080030f1

08003178 <__sfp>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <__sfp+0x70>)
 800317c:	681e      	ldr	r6, [r3, #0]
 800317e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8003180:	4607      	mov	r7, r0
 8003182:	b913      	cbnz	r3, 800318a <__sfp+0x12>
 8003184:	4630      	mov	r0, r6
 8003186:	f7ff ffd5 	bl	8003134 <__sinit>
 800318a:	f506 76a6 	add.w	r6, r6, #332	; 0x14c
 800318e:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	d503      	bpl.n	800319e <__sfp+0x26>
 8003196:	6833      	ldr	r3, [r6, #0]
 8003198:	b1db      	cbz	r3, 80031d2 <__sfp+0x5a>
 800319a:	6836      	ldr	r6, [r6, #0]
 800319c:	e7f7      	b.n	800318e <__sfp+0x16>
 800319e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031a2:	b9a5      	cbnz	r5, 80031ce <__sfp+0x56>
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <__sfp+0x74>)
 80031a6:	6625      	str	r5, [r4, #96]	; 0x60
 80031a8:	e9c4 5500 	strd	r5, r5, [r4]
 80031ac:	60a5      	str	r5, [r4, #8]
 80031ae:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80031b2:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80031b6:	2208      	movs	r2, #8
 80031b8:	4629      	mov	r1, r5
 80031ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031be:	f001 fbd6 	bl	800496e <memset>
 80031c2:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 80031c6:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 80031ca:	4620      	mov	r0, r4
 80031cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ce:	3464      	adds	r4, #100	; 0x64
 80031d0:	e7df      	b.n	8003192 <__sfp+0x1a>
 80031d2:	2104      	movs	r1, #4
 80031d4:	4638      	mov	r0, r7
 80031d6:	f7ff ff91 	bl	80030fc <__sfmoreglue>
 80031da:	4604      	mov	r4, r0
 80031dc:	6030      	str	r0, [r6, #0]
 80031de:	2800      	cmp	r0, #0
 80031e0:	d1db      	bne.n	800319a <__sfp+0x22>
 80031e2:	230c      	movs	r3, #12
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	e7f0      	b.n	80031ca <__sfp+0x52>
 80031e8:	080194f0 	.word	0x080194f0
 80031ec:	ffff0001 	.word	0xffff0001

080031f0 <__sfvwrite_r>:
 80031f0:	6893      	ldr	r3, [r2, #8]
 80031f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f6:	4607      	mov	r7, r0
 80031f8:	460c      	mov	r4, r1
 80031fa:	4690      	mov	r8, r2
 80031fc:	b91b      	cbnz	r3, 8003206 <__sfvwrite_r+0x16>
 80031fe:	2000      	movs	r0, #0
 8003200:	b003      	add	sp, #12
 8003202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003206:	898b      	ldrh	r3, [r1, #12]
 8003208:	0718      	lsls	r0, r3, #28
 800320a:	d550      	bpl.n	80032ae <__sfvwrite_r+0xbe>
 800320c:	690b      	ldr	r3, [r1, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d04d      	beq.n	80032ae <__sfvwrite_r+0xbe>
 8003212:	89a3      	ldrh	r3, [r4, #12]
 8003214:	f8d8 6000 	ldr.w	r6, [r8]
 8003218:	f013 0902 	ands.w	r9, r3, #2
 800321c:	d16c      	bne.n	80032f8 <__sfvwrite_r+0x108>
 800321e:	f013 0301 	ands.w	r3, r3, #1
 8003222:	f000 809c 	beq.w	800335e <__sfvwrite_r+0x16e>
 8003226:	4648      	mov	r0, r9
 8003228:	46ca      	mov	sl, r9
 800322a:	46cb      	mov	fp, r9
 800322c:	f1bb 0f00 	cmp.w	fp, #0
 8003230:	f000 8106 	beq.w	8003440 <__sfvwrite_r+0x250>
 8003234:	b950      	cbnz	r0, 800324c <__sfvwrite_r+0x5c>
 8003236:	465a      	mov	r2, fp
 8003238:	210a      	movs	r1, #10
 800323a:	4650      	mov	r0, sl
 800323c:	f7fc ffa8 	bl	8000190 <memchr>
 8003240:	2800      	cmp	r0, #0
 8003242:	f000 8102 	beq.w	800344a <__sfvwrite_r+0x25a>
 8003246:	3001      	adds	r0, #1
 8003248:	eba0 090a 	sub.w	r9, r0, sl
 800324c:	6820      	ldr	r0, [r4, #0]
 800324e:	6921      	ldr	r1, [r4, #16]
 8003250:	6962      	ldr	r2, [r4, #20]
 8003252:	45d9      	cmp	r9, fp
 8003254:	464b      	mov	r3, r9
 8003256:	bf28      	it	cs
 8003258:	465b      	movcs	r3, fp
 800325a:	4288      	cmp	r0, r1
 800325c:	f240 80f8 	bls.w	8003450 <__sfvwrite_r+0x260>
 8003260:	68a5      	ldr	r5, [r4, #8]
 8003262:	4415      	add	r5, r2
 8003264:	42ab      	cmp	r3, r5
 8003266:	f340 80f3 	ble.w	8003450 <__sfvwrite_r+0x260>
 800326a:	4651      	mov	r1, sl
 800326c:	462a      	mov	r2, r5
 800326e:	f001 fb64 	bl	800493a <memmove>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	442b      	add	r3, r5
 8003276:	6023      	str	r3, [r4, #0]
 8003278:	4621      	mov	r1, r4
 800327a:	4638      	mov	r0, r7
 800327c:	f7ff fef0 	bl	8003060 <_fflush_r>
 8003280:	2800      	cmp	r0, #0
 8003282:	d167      	bne.n	8003354 <__sfvwrite_r+0x164>
 8003284:	ebb9 0905 	subs.w	r9, r9, r5
 8003288:	f040 80fc 	bne.w	8003484 <__sfvwrite_r+0x294>
 800328c:	4621      	mov	r1, r4
 800328e:	4638      	mov	r0, r7
 8003290:	f7ff fee6 	bl	8003060 <_fflush_r>
 8003294:	2800      	cmp	r0, #0
 8003296:	d15d      	bne.n	8003354 <__sfvwrite_r+0x164>
 8003298:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800329c:	44aa      	add	sl, r5
 800329e:	ebab 0b05 	sub.w	fp, fp, r5
 80032a2:	1b5d      	subs	r5, r3, r5
 80032a4:	f8c8 5008 	str.w	r5, [r8, #8]
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d1bf      	bne.n	800322c <__sfvwrite_r+0x3c>
 80032ac:	e7a7      	b.n	80031fe <__sfvwrite_r+0xe>
 80032ae:	4621      	mov	r1, r4
 80032b0:	4638      	mov	r0, r7
 80032b2:	f7ff fdcb 	bl	8002e4c <__swsetup_r>
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d0ab      	beq.n	8003212 <__sfvwrite_r+0x22>
 80032ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032be:	e79f      	b.n	8003200 <__sfvwrite_r+0x10>
 80032c0:	e9d6 a900 	ldrd	sl, r9, [r6]
 80032c4:	3608      	adds	r6, #8
 80032c6:	f1b9 0f00 	cmp.w	r9, #0
 80032ca:	d0f9      	beq.n	80032c0 <__sfvwrite_r+0xd0>
 80032cc:	45d9      	cmp	r9, fp
 80032ce:	464b      	mov	r3, r9
 80032d0:	4652      	mov	r2, sl
 80032d2:	bf28      	it	cs
 80032d4:	465b      	movcs	r3, fp
 80032d6:	69e1      	ldr	r1, [r4, #28]
 80032d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80032da:	4638      	mov	r0, r7
 80032dc:	47a8      	blx	r5
 80032de:	2800      	cmp	r0, #0
 80032e0:	dd38      	ble.n	8003354 <__sfvwrite_r+0x164>
 80032e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80032e6:	4482      	add	sl, r0
 80032e8:	eba9 0900 	sub.w	r9, r9, r0
 80032ec:	1a18      	subs	r0, r3, r0
 80032ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80032f2:	2800      	cmp	r0, #0
 80032f4:	d1e7      	bne.n	80032c6 <__sfvwrite_r+0xd6>
 80032f6:	e782      	b.n	80031fe <__sfvwrite_r+0xe>
 80032f8:	f04f 0a00 	mov.w	sl, #0
 80032fc:	46d1      	mov	r9, sl
 80032fe:	f8df b18c 	ldr.w	fp, [pc, #396]	; 800348c <__sfvwrite_r+0x29c>
 8003302:	e7e0      	b.n	80032c6 <__sfvwrite_r+0xd6>
 8003304:	e9d6 9a00 	ldrd	r9, sl, [r6]
 8003308:	3608      	adds	r6, #8
 800330a:	f1ba 0f00 	cmp.w	sl, #0
 800330e:	d0f9      	beq.n	8003304 <__sfvwrite_r+0x114>
 8003310:	89a2      	ldrh	r2, [r4, #12]
 8003312:	68a3      	ldr	r3, [r4, #8]
 8003314:	6820      	ldr	r0, [r4, #0]
 8003316:	0591      	lsls	r1, r2, #22
 8003318:	d564      	bpl.n	80033e4 <__sfvwrite_r+0x1f4>
 800331a:	4553      	cmp	r3, sl
 800331c:	d836      	bhi.n	800338c <__sfvwrite_r+0x19c>
 800331e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003322:	d033      	beq.n	800338c <__sfvwrite_r+0x19c>
 8003324:	6921      	ldr	r1, [r4, #16]
 8003326:	6965      	ldr	r5, [r4, #20]
 8003328:	eba0 0b01 	sub.w	fp, r0, r1
 800332c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003330:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003334:	f10b 0301 	add.w	r3, fp, #1
 8003338:	4453      	add	r3, sl
 800333a:	106d      	asrs	r5, r5, #1
 800333c:	429d      	cmp	r5, r3
 800333e:	bf38      	it	cc
 8003340:	461d      	movcc	r5, r3
 8003342:	0553      	lsls	r3, r2, #21
 8003344:	d53e      	bpl.n	80033c4 <__sfvwrite_r+0x1d4>
 8003346:	4629      	mov	r1, r5
 8003348:	4638      	mov	r0, r7
 800334a:	f000 fd4f 	bl	8003dec <_malloc_r>
 800334e:	b948      	cbnz	r0, 8003364 <__sfvwrite_r+0x174>
 8003350:	230c      	movs	r3, #12
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	89a3      	ldrh	r3, [r4, #12]
 8003356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800335a:	81a3      	strh	r3, [r4, #12]
 800335c:	e7ad      	b.n	80032ba <__sfvwrite_r+0xca>
 800335e:	4699      	mov	r9, r3
 8003360:	469a      	mov	sl, r3
 8003362:	e7d2      	b.n	800330a <__sfvwrite_r+0x11a>
 8003364:	465a      	mov	r2, fp
 8003366:	6921      	ldr	r1, [r4, #16]
 8003368:	9001      	str	r0, [sp, #4]
 800336a:	f001 fad8 	bl	800491e <memcpy>
 800336e:	89a2      	ldrh	r2, [r4, #12]
 8003370:	9b01      	ldr	r3, [sp, #4]
 8003372:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8003376:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800337a:	81a2      	strh	r2, [r4, #12]
 800337c:	6123      	str	r3, [r4, #16]
 800337e:	6165      	str	r5, [r4, #20]
 8003380:	445b      	add	r3, fp
 8003382:	eba5 050b 	sub.w	r5, r5, fp
 8003386:	6023      	str	r3, [r4, #0]
 8003388:	60a5      	str	r5, [r4, #8]
 800338a:	4653      	mov	r3, sl
 800338c:	4553      	cmp	r3, sl
 800338e:	bf28      	it	cs
 8003390:	4653      	movcs	r3, sl
 8003392:	461a      	mov	r2, r3
 8003394:	4649      	mov	r1, r9
 8003396:	6820      	ldr	r0, [r4, #0]
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	f001 face 	bl	800493a <memmove>
 800339e:	68a2      	ldr	r2, [r4, #8]
 80033a0:	9b01      	ldr	r3, [sp, #4]
 80033a2:	1ad2      	subs	r2, r2, r3
 80033a4:	60a2      	str	r2, [r4, #8]
 80033a6:	6822      	ldr	r2, [r4, #0]
 80033a8:	4413      	add	r3, r2
 80033aa:	4655      	mov	r5, sl
 80033ac:	6023      	str	r3, [r4, #0]
 80033ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80033b2:	44a9      	add	r9, r5
 80033b4:	ebaa 0a05 	sub.w	sl, sl, r5
 80033b8:	1b5d      	subs	r5, r3, r5
 80033ba:	f8c8 5008 	str.w	r5, [r8, #8]
 80033be:	2d00      	cmp	r5, #0
 80033c0:	d1a3      	bne.n	800330a <__sfvwrite_r+0x11a>
 80033c2:	e71c      	b.n	80031fe <__sfvwrite_r+0xe>
 80033c4:	462a      	mov	r2, r5
 80033c6:	4638      	mov	r0, r7
 80033c8:	f001 fbb9 	bl	8004b3e <_realloc_r>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2800      	cmp	r0, #0
 80033d0:	d1d4      	bne.n	800337c <__sfvwrite_r+0x18c>
 80033d2:	6921      	ldr	r1, [r4, #16]
 80033d4:	4638      	mov	r0, r7
 80033d6:	f000 fcbb 	bl	8003d50 <_free_r>
 80033da:	89a3      	ldrh	r3, [r4, #12]
 80033dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033e0:	81a3      	strh	r3, [r4, #12]
 80033e2:	e7b5      	b.n	8003350 <__sfvwrite_r+0x160>
 80033e4:	6922      	ldr	r2, [r4, #16]
 80033e6:	4282      	cmp	r2, r0
 80033e8:	d302      	bcc.n	80033f0 <__sfvwrite_r+0x200>
 80033ea:	6962      	ldr	r2, [r4, #20]
 80033ec:	4552      	cmp	r2, sl
 80033ee:	d916      	bls.n	800341e <__sfvwrite_r+0x22e>
 80033f0:	4553      	cmp	r3, sl
 80033f2:	bf28      	it	cs
 80033f4:	4653      	movcs	r3, sl
 80033f6:	461a      	mov	r2, r3
 80033f8:	4649      	mov	r1, r9
 80033fa:	461d      	mov	r5, r3
 80033fc:	f001 fa9d 	bl	800493a <memmove>
 8003400:	68a3      	ldr	r3, [r4, #8]
 8003402:	6822      	ldr	r2, [r4, #0]
 8003404:	1b5b      	subs	r3, r3, r5
 8003406:	442a      	add	r2, r5
 8003408:	60a3      	str	r3, [r4, #8]
 800340a:	6022      	str	r2, [r4, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1ce      	bne.n	80033ae <__sfvwrite_r+0x1be>
 8003410:	4621      	mov	r1, r4
 8003412:	4638      	mov	r0, r7
 8003414:	f7ff fe24 	bl	8003060 <_fflush_r>
 8003418:	2800      	cmp	r0, #0
 800341a:	d0c8      	beq.n	80033ae <__sfvwrite_r+0x1be>
 800341c:	e79a      	b.n	8003354 <__sfvwrite_r+0x164>
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <__sfvwrite_r+0x298>)
 8003420:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003422:	69e1      	ldr	r1, [r4, #28]
 8003424:	459a      	cmp	sl, r3
 8003426:	bf94      	ite	ls
 8003428:	4653      	movls	r3, sl
 800342a:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 800342e:	4638      	mov	r0, r7
 8003430:	fb93 f3f2 	sdiv	r3, r3, r2
 8003434:	4353      	muls	r3, r2
 8003436:	464a      	mov	r2, r9
 8003438:	47a8      	blx	r5
 800343a:	1e05      	subs	r5, r0, #0
 800343c:	dcb7      	bgt.n	80033ae <__sfvwrite_r+0x1be>
 800343e:	e789      	b.n	8003354 <__sfvwrite_r+0x164>
 8003440:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8003444:	2000      	movs	r0, #0
 8003446:	3608      	adds	r6, #8
 8003448:	e6f0      	b.n	800322c <__sfvwrite_r+0x3c>
 800344a:	f10b 0901 	add.w	r9, fp, #1
 800344e:	e6fd      	b.n	800324c <__sfvwrite_r+0x5c>
 8003450:	429a      	cmp	r2, r3
 8003452:	dc09      	bgt.n	8003468 <__sfvwrite_r+0x278>
 8003454:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003456:	69e1      	ldr	r1, [r4, #28]
 8003458:	4613      	mov	r3, r2
 800345a:	4638      	mov	r0, r7
 800345c:	4652      	mov	r2, sl
 800345e:	47a8      	blx	r5
 8003460:	1e05      	subs	r5, r0, #0
 8003462:	f73f af0f 	bgt.w	8003284 <__sfvwrite_r+0x94>
 8003466:	e775      	b.n	8003354 <__sfvwrite_r+0x164>
 8003468:	461a      	mov	r2, r3
 800346a:	4651      	mov	r1, sl
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	f001 fa64 	bl	800493a <memmove>
 8003472:	9b01      	ldr	r3, [sp, #4]
 8003474:	68a2      	ldr	r2, [r4, #8]
 8003476:	1ad2      	subs	r2, r2, r3
 8003478:	60a2      	str	r2, [r4, #8]
 800347a:	6822      	ldr	r2, [r4, #0]
 800347c:	441a      	add	r2, r3
 800347e:	6022      	str	r2, [r4, #0]
 8003480:	461d      	mov	r5, r3
 8003482:	e6ff      	b.n	8003284 <__sfvwrite_r+0x94>
 8003484:	2001      	movs	r0, #1
 8003486:	e707      	b.n	8003298 <__sfvwrite_r+0xa8>
 8003488:	7ffffffe 	.word	0x7ffffffe
 800348c:	7ffffc00 	.word	0x7ffffc00

08003490 <__localeconv_l>:
 8003490:	30f0      	adds	r0, #240	; 0xf0
 8003492:	4770      	bx	lr

08003494 <_localeconv_r>:
 8003494:	4800      	ldr	r0, [pc, #0]	; (8003498 <_localeconv_r+0x4>)
 8003496:	4770      	bx	lr
 8003498:	200083e8 	.word	0x200083e8

0800349c <localeconv>:
 800349c:	4800      	ldr	r0, [pc, #0]	; (80034a0 <localeconv+0x4>)
 800349e:	4770      	bx	lr
 80034a0:	200083e8 	.word	0x200083e8

080034a4 <__swhatbuf_r>:
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	460e      	mov	r6, r1
 80034a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ac:	2900      	cmp	r1, #0
 80034ae:	b096      	sub	sp, #88	; 0x58
 80034b0:	4614      	mov	r4, r2
 80034b2:	461d      	mov	r5, r3
 80034b4:	da09      	bge.n	80034ca <__swhatbuf_r+0x26>
 80034b6:	89b3      	ldrh	r3, [r6, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80034be:	602a      	str	r2, [r5, #0]
 80034c0:	d116      	bne.n	80034f0 <__swhatbuf_r+0x4c>
 80034c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c6:	6023      	str	r3, [r4, #0]
 80034c8:	e015      	b.n	80034f6 <__swhatbuf_r+0x52>
 80034ca:	466a      	mov	r2, sp
 80034cc:	f000 ff90 	bl	80043f0 <_fstat_r>
 80034d0:	2800      	cmp	r0, #0
 80034d2:	dbf0      	blt.n	80034b6 <__swhatbuf_r+0x12>
 80034d4:	9a01      	ldr	r2, [sp, #4]
 80034d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80034da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80034de:	425a      	negs	r2, r3
 80034e0:	415a      	adcs	r2, r3
 80034e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034e6:	602a      	str	r2, [r5, #0]
 80034e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80034ec:	6023      	str	r3, [r4, #0]
 80034ee:	e002      	b.n	80034f6 <__swhatbuf_r+0x52>
 80034f0:	2340      	movs	r3, #64	; 0x40
 80034f2:	6023      	str	r3, [r4, #0]
 80034f4:	4610      	mov	r0, r2
 80034f6:	b016      	add	sp, #88	; 0x58
 80034f8:	bd70      	pop	{r4, r5, r6, pc}

080034fa <__smakebuf_r>:
 80034fa:	898b      	ldrh	r3, [r1, #12]
 80034fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034fe:	079d      	lsls	r5, r3, #30
 8003500:	4606      	mov	r6, r0
 8003502:	460c      	mov	r4, r1
 8003504:	d507      	bpl.n	8003516 <__smakebuf_r+0x1c>
 8003506:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800350a:	6023      	str	r3, [r4, #0]
 800350c:	6123      	str	r3, [r4, #16]
 800350e:	2301      	movs	r3, #1
 8003510:	6163      	str	r3, [r4, #20]
 8003512:	b002      	add	sp, #8
 8003514:	bd70      	pop	{r4, r5, r6, pc}
 8003516:	ab01      	add	r3, sp, #4
 8003518:	466a      	mov	r2, sp
 800351a:	f7ff ffc3 	bl	80034a4 <__swhatbuf_r>
 800351e:	9900      	ldr	r1, [sp, #0]
 8003520:	4605      	mov	r5, r0
 8003522:	4630      	mov	r0, r6
 8003524:	f000 fc62 	bl	8003dec <_malloc_r>
 8003528:	b948      	cbnz	r0, 800353e <__smakebuf_r+0x44>
 800352a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800352e:	059a      	lsls	r2, r3, #22
 8003530:	d4ef      	bmi.n	8003512 <__smakebuf_r+0x18>
 8003532:	f023 0303 	bic.w	r3, r3, #3
 8003536:	f043 0302 	orr.w	r3, r3, #2
 800353a:	81a3      	strh	r3, [r4, #12]
 800353c:	e7e3      	b.n	8003506 <__smakebuf_r+0xc>
 800353e:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <__smakebuf_r+0x7e>)
 8003540:	63f3      	str	r3, [r6, #60]	; 0x3c
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	6020      	str	r0, [r4, #0]
 8003546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354a:	81a3      	strh	r3, [r4, #12]
 800354c:	9b00      	ldr	r3, [sp, #0]
 800354e:	6163      	str	r3, [r4, #20]
 8003550:	9b01      	ldr	r3, [sp, #4]
 8003552:	6120      	str	r0, [r4, #16]
 8003554:	b15b      	cbz	r3, 800356e <__smakebuf_r+0x74>
 8003556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800355a:	4630      	mov	r0, r6
 800355c:	f000 ff5a 	bl	8004414 <_isatty_r>
 8003560:	b128      	cbz	r0, 800356e <__smakebuf_r+0x74>
 8003562:	89a3      	ldrh	r3, [r4, #12]
 8003564:	f023 0303 	bic.w	r3, r3, #3
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	81a3      	strh	r3, [r4, #12]
 800356e:	89a3      	ldrh	r3, [r4, #12]
 8003570:	431d      	orrs	r5, r3
 8003572:	81a5      	strh	r5, [r4, #12]
 8003574:	e7cd      	b.n	8003512 <__smakebuf_r+0x18>
 8003576:	bf00      	nop
 8003578:	080030f1 	.word	0x080030f1

0800357c <_Balloc>:
 800357c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800357e:	b570      	push	{r4, r5, r6, lr}
 8003580:	4605      	mov	r5, r0
 8003582:	460c      	mov	r4, r1
 8003584:	b17b      	cbz	r3, 80035a6 <_Balloc+0x2a>
 8003586:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003588:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800358c:	b9a0      	cbnz	r0, 80035b8 <_Balloc+0x3c>
 800358e:	2101      	movs	r1, #1
 8003590:	fa01 f604 	lsl.w	r6, r1, r4
 8003594:	1d72      	adds	r2, r6, #5
 8003596:	0092      	lsls	r2, r2, #2
 8003598:	4628      	mov	r0, r5
 800359a:	f001 fac2 	bl	8004b22 <_calloc_r>
 800359e:	b148      	cbz	r0, 80035b4 <_Balloc+0x38>
 80035a0:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80035a4:	e00b      	b.n	80035be <_Balloc+0x42>
 80035a6:	2221      	movs	r2, #33	; 0x21
 80035a8:	2104      	movs	r1, #4
 80035aa:	f001 faba 	bl	8004b22 <_calloc_r>
 80035ae:	64e8      	str	r0, [r5, #76]	; 0x4c
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d1e8      	bne.n	8003586 <_Balloc+0xa>
 80035b4:	2000      	movs	r0, #0
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	6802      	ldr	r2, [r0, #0]
 80035ba:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80035be:	2300      	movs	r3, #0
 80035c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80035c4:	e7f7      	b.n	80035b6 <_Balloc+0x3a>

080035c6 <_Bfree>:
 80035c6:	b131      	cbz	r1, 80035d6 <_Bfree+0x10>
 80035c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80035ca:	684a      	ldr	r2, [r1, #4]
 80035cc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80035d0:	6008      	str	r0, [r1, #0]
 80035d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80035d6:	4770      	bx	lr

080035d8 <__multadd>:
 80035d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035dc:	690d      	ldr	r5, [r1, #16]
 80035de:	461f      	mov	r7, r3
 80035e0:	4606      	mov	r6, r0
 80035e2:	460c      	mov	r4, r1
 80035e4:	f101 0c14 	add.w	ip, r1, #20
 80035e8:	2300      	movs	r3, #0
 80035ea:	f8dc 0000 	ldr.w	r0, [ip]
 80035ee:	b281      	uxth	r1, r0
 80035f0:	fb02 7101 	mla	r1, r2, r1, r7
 80035f4:	0c0f      	lsrs	r7, r1, #16
 80035f6:	0c00      	lsrs	r0, r0, #16
 80035f8:	fb02 7000 	mla	r0, r2, r0, r7
 80035fc:	b289      	uxth	r1, r1
 80035fe:	3301      	adds	r3, #1
 8003600:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003604:	429d      	cmp	r5, r3
 8003606:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800360a:	f84c 1b04 	str.w	r1, [ip], #4
 800360e:	dcec      	bgt.n	80035ea <__multadd+0x12>
 8003610:	b1d7      	cbz	r7, 8003648 <__multadd+0x70>
 8003612:	68a3      	ldr	r3, [r4, #8]
 8003614:	42ab      	cmp	r3, r5
 8003616:	dc12      	bgt.n	800363e <__multadd+0x66>
 8003618:	6861      	ldr	r1, [r4, #4]
 800361a:	4630      	mov	r0, r6
 800361c:	3101      	adds	r1, #1
 800361e:	f7ff ffad 	bl	800357c <_Balloc>
 8003622:	6922      	ldr	r2, [r4, #16]
 8003624:	3202      	adds	r2, #2
 8003626:	f104 010c 	add.w	r1, r4, #12
 800362a:	4680      	mov	r8, r0
 800362c:	0092      	lsls	r2, r2, #2
 800362e:	300c      	adds	r0, #12
 8003630:	f001 f975 	bl	800491e <memcpy>
 8003634:	4621      	mov	r1, r4
 8003636:	4630      	mov	r0, r6
 8003638:	f7ff ffc5 	bl	80035c6 <_Bfree>
 800363c:	4644      	mov	r4, r8
 800363e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003642:	3501      	adds	r5, #1
 8003644:	615f      	str	r7, [r3, #20]
 8003646:	6125      	str	r5, [r4, #16]
 8003648:	4620      	mov	r0, r4
 800364a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800364e <__s2b>:
 800364e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003652:	460c      	mov	r4, r1
 8003654:	4615      	mov	r5, r2
 8003656:	461f      	mov	r7, r3
 8003658:	2209      	movs	r2, #9
 800365a:	3308      	adds	r3, #8
 800365c:	4606      	mov	r6, r0
 800365e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003662:	2100      	movs	r1, #0
 8003664:	2201      	movs	r2, #1
 8003666:	429a      	cmp	r2, r3
 8003668:	db20      	blt.n	80036ac <__s2b+0x5e>
 800366a:	4630      	mov	r0, r6
 800366c:	f7ff ff86 	bl	800357c <_Balloc>
 8003670:	9b08      	ldr	r3, [sp, #32]
 8003672:	6143      	str	r3, [r0, #20]
 8003674:	2d09      	cmp	r5, #9
 8003676:	f04f 0301 	mov.w	r3, #1
 800367a:	6103      	str	r3, [r0, #16]
 800367c:	dd19      	ble.n	80036b2 <__s2b+0x64>
 800367e:	f104 0909 	add.w	r9, r4, #9
 8003682:	46c8      	mov	r8, r9
 8003684:	442c      	add	r4, r5
 8003686:	f818 3b01 	ldrb.w	r3, [r8], #1
 800368a:	4601      	mov	r1, r0
 800368c:	3b30      	subs	r3, #48	; 0x30
 800368e:	220a      	movs	r2, #10
 8003690:	4630      	mov	r0, r6
 8003692:	f7ff ffa1 	bl	80035d8 <__multadd>
 8003696:	45a0      	cmp	r8, r4
 8003698:	d1f5      	bne.n	8003686 <__s2b+0x38>
 800369a:	f1a5 0408 	sub.w	r4, r5, #8
 800369e:	444c      	add	r4, r9
 80036a0:	1b2d      	subs	r5, r5, r4
 80036a2:	1963      	adds	r3, r4, r5
 80036a4:	42bb      	cmp	r3, r7
 80036a6:	db07      	blt.n	80036b8 <__s2b+0x6a>
 80036a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036ac:	0052      	lsls	r2, r2, #1
 80036ae:	3101      	adds	r1, #1
 80036b0:	e7d9      	b.n	8003666 <__s2b+0x18>
 80036b2:	340a      	adds	r4, #10
 80036b4:	2509      	movs	r5, #9
 80036b6:	e7f3      	b.n	80036a0 <__s2b+0x52>
 80036b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80036bc:	4601      	mov	r1, r0
 80036be:	3b30      	subs	r3, #48	; 0x30
 80036c0:	220a      	movs	r2, #10
 80036c2:	4630      	mov	r0, r6
 80036c4:	f7ff ff88 	bl	80035d8 <__multadd>
 80036c8:	e7eb      	b.n	80036a2 <__s2b+0x54>

080036ca <__hi0bits>:
 80036ca:	0c02      	lsrs	r2, r0, #16
 80036cc:	0412      	lsls	r2, r2, #16
 80036ce:	4603      	mov	r3, r0
 80036d0:	b9ca      	cbnz	r2, 8003706 <__hi0bits+0x3c>
 80036d2:	0403      	lsls	r3, r0, #16
 80036d4:	2010      	movs	r0, #16
 80036d6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80036da:	bf04      	itt	eq
 80036dc:	021b      	lsleq	r3, r3, #8
 80036de:	3008      	addeq	r0, #8
 80036e0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80036e4:	bf04      	itt	eq
 80036e6:	011b      	lsleq	r3, r3, #4
 80036e8:	3004      	addeq	r0, #4
 80036ea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80036ee:	bf04      	itt	eq
 80036f0:	009b      	lsleq	r3, r3, #2
 80036f2:	3002      	addeq	r0, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	db05      	blt.n	8003704 <__hi0bits+0x3a>
 80036f8:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80036fc:	f100 0001 	add.w	r0, r0, #1
 8003700:	bf08      	it	eq
 8003702:	2020      	moveq	r0, #32
 8003704:	4770      	bx	lr
 8003706:	2000      	movs	r0, #0
 8003708:	e7e5      	b.n	80036d6 <__hi0bits+0xc>

0800370a <__lo0bits>:
 800370a:	6803      	ldr	r3, [r0, #0]
 800370c:	f013 0207 	ands.w	r2, r3, #7
 8003710:	4601      	mov	r1, r0
 8003712:	d00b      	beq.n	800372c <__lo0bits+0x22>
 8003714:	07da      	lsls	r2, r3, #31
 8003716:	d424      	bmi.n	8003762 <__lo0bits+0x58>
 8003718:	0798      	lsls	r0, r3, #30
 800371a:	bf49      	itett	mi
 800371c:	085b      	lsrmi	r3, r3, #1
 800371e:	089b      	lsrpl	r3, r3, #2
 8003720:	2001      	movmi	r0, #1
 8003722:	600b      	strmi	r3, [r1, #0]
 8003724:	bf5c      	itt	pl
 8003726:	600b      	strpl	r3, [r1, #0]
 8003728:	2002      	movpl	r0, #2
 800372a:	4770      	bx	lr
 800372c:	b298      	uxth	r0, r3
 800372e:	b9b0      	cbnz	r0, 800375e <__lo0bits+0x54>
 8003730:	0c1b      	lsrs	r3, r3, #16
 8003732:	2010      	movs	r0, #16
 8003734:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003738:	bf04      	itt	eq
 800373a:	0a1b      	lsreq	r3, r3, #8
 800373c:	3008      	addeq	r0, #8
 800373e:	071a      	lsls	r2, r3, #28
 8003740:	bf04      	itt	eq
 8003742:	091b      	lsreq	r3, r3, #4
 8003744:	3004      	addeq	r0, #4
 8003746:	079a      	lsls	r2, r3, #30
 8003748:	bf04      	itt	eq
 800374a:	089b      	lsreq	r3, r3, #2
 800374c:	3002      	addeq	r0, #2
 800374e:	07da      	lsls	r2, r3, #31
 8003750:	d403      	bmi.n	800375a <__lo0bits+0x50>
 8003752:	085b      	lsrs	r3, r3, #1
 8003754:	f100 0001 	add.w	r0, r0, #1
 8003758:	d005      	beq.n	8003766 <__lo0bits+0x5c>
 800375a:	600b      	str	r3, [r1, #0]
 800375c:	4770      	bx	lr
 800375e:	4610      	mov	r0, r2
 8003760:	e7e8      	b.n	8003734 <__lo0bits+0x2a>
 8003762:	2000      	movs	r0, #0
 8003764:	4770      	bx	lr
 8003766:	2020      	movs	r0, #32
 8003768:	4770      	bx	lr

0800376a <__i2b>:
 800376a:	b510      	push	{r4, lr}
 800376c:	460c      	mov	r4, r1
 800376e:	2101      	movs	r1, #1
 8003770:	f7ff ff04 	bl	800357c <_Balloc>
 8003774:	2201      	movs	r2, #1
 8003776:	6144      	str	r4, [r0, #20]
 8003778:	6102      	str	r2, [r0, #16]
 800377a:	bd10      	pop	{r4, pc}

0800377c <__multiply>:
 800377c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003780:	4690      	mov	r8, r2
 8003782:	690a      	ldr	r2, [r1, #16]
 8003784:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003788:	429a      	cmp	r2, r3
 800378a:	bfb8      	it	lt
 800378c:	460b      	movlt	r3, r1
 800378e:	460c      	mov	r4, r1
 8003790:	bfbc      	itt	lt
 8003792:	4644      	movlt	r4, r8
 8003794:	4698      	movlt	r8, r3
 8003796:	6927      	ldr	r7, [r4, #16]
 8003798:	f8d8 9010 	ldr.w	r9, [r8, #16]
 800379c:	68a3      	ldr	r3, [r4, #8]
 800379e:	6861      	ldr	r1, [r4, #4]
 80037a0:	eb07 0609 	add.w	r6, r7, r9
 80037a4:	42b3      	cmp	r3, r6
 80037a6:	bfb8      	it	lt
 80037a8:	3101      	addlt	r1, #1
 80037aa:	f7ff fee7 	bl	800357c <_Balloc>
 80037ae:	f100 0514 	add.w	r5, r0, #20
 80037b2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80037b6:	462b      	mov	r3, r5
 80037b8:	2200      	movs	r2, #0
 80037ba:	4573      	cmp	r3, lr
 80037bc:	d316      	bcc.n	80037ec <__multiply+0x70>
 80037be:	f104 0314 	add.w	r3, r4, #20
 80037c2:	f108 0214 	add.w	r2, r8, #20
 80037c6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80037ca:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	9b00      	ldr	r3, [sp, #0]
 80037d2:	9201      	str	r2, [sp, #4]
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d80c      	bhi.n	80037f2 <__multiply+0x76>
 80037d8:	2e00      	cmp	r6, #0
 80037da:	dd03      	ble.n	80037e4 <__multiply+0x68>
 80037dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d059      	beq.n	8003898 <__multiply+0x11c>
 80037e4:	6106      	str	r6, [r0, #16]
 80037e6:	b003      	add	sp, #12
 80037e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ec:	f843 2b04 	str.w	r2, [r3], #4
 80037f0:	e7e3      	b.n	80037ba <__multiply+0x3e>
 80037f2:	f8b2 a000 	ldrh.w	sl, [r2]
 80037f6:	f1ba 0f00 	cmp.w	sl, #0
 80037fa:	d023      	beq.n	8003844 <__multiply+0xc8>
 80037fc:	f104 0914 	add.w	r9, r4, #20
 8003800:	46ac      	mov	ip, r5
 8003802:	f04f 0800 	mov.w	r8, #0
 8003806:	f859 1b04 	ldr.w	r1, [r9], #4
 800380a:	f8dc b000 	ldr.w	fp, [ip]
 800380e:	b28b      	uxth	r3, r1
 8003810:	fa1f fb8b 	uxth.w	fp, fp
 8003814:	fb0a b303 	mla	r3, sl, r3, fp
 8003818:	ea4f 4b11 	mov.w	fp, r1, lsr #16
 800381c:	f8dc 1000 	ldr.w	r1, [ip]
 8003820:	4443      	add	r3, r8
 8003822:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8003826:	fb0a 810b 	mla	r1, sl, fp, r8
 800382a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 800382e:	b29b      	uxth	r3, r3
 8003830:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003834:	454f      	cmp	r7, r9
 8003836:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800383a:	f84c 3b04 	str.w	r3, [ip], #4
 800383e:	d8e2      	bhi.n	8003806 <__multiply+0x8a>
 8003840:	f8cc 8000 	str.w	r8, [ip]
 8003844:	9b01      	ldr	r3, [sp, #4]
 8003846:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800384a:	3204      	adds	r2, #4
 800384c:	f1b9 0f00 	cmp.w	r9, #0
 8003850:	d020      	beq.n	8003894 <__multiply+0x118>
 8003852:	682b      	ldr	r3, [r5, #0]
 8003854:	f104 0814 	add.w	r8, r4, #20
 8003858:	46ac      	mov	ip, r5
 800385a:	f04f 0a00 	mov.w	sl, #0
 800385e:	f8b8 1000 	ldrh.w	r1, [r8]
 8003862:	f8bc b002 	ldrh.w	fp, [ip, #2]
 8003866:	fb09 b101 	mla	r1, r9, r1, fp
 800386a:	448a      	add	sl, r1
 800386c:	b29b      	uxth	r3, r3
 800386e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8003872:	f84c 3b04 	str.w	r3, [ip], #4
 8003876:	f858 3b04 	ldr.w	r3, [r8], #4
 800387a:	f8bc 1000 	ldrh.w	r1, [ip]
 800387e:	0c1b      	lsrs	r3, r3, #16
 8003880:	fb09 1303 	mla	r3, r9, r3, r1
 8003884:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8003888:	4547      	cmp	r7, r8
 800388a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800388e:	d8e6      	bhi.n	800385e <__multiply+0xe2>
 8003890:	f8cc 3000 	str.w	r3, [ip]
 8003894:	3504      	adds	r5, #4
 8003896:	e79b      	b.n	80037d0 <__multiply+0x54>
 8003898:	3e01      	subs	r6, #1
 800389a:	e79d      	b.n	80037d8 <__multiply+0x5c>

0800389c <__pow5mult>:
 800389c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038a0:	4615      	mov	r5, r2
 80038a2:	f012 0203 	ands.w	r2, r2, #3
 80038a6:	4606      	mov	r6, r0
 80038a8:	460f      	mov	r7, r1
 80038aa:	d007      	beq.n	80038bc <__pow5mult+0x20>
 80038ac:	3a01      	subs	r2, #1
 80038ae:	4c1a      	ldr	r4, [pc, #104]	; (8003918 <__pow5mult+0x7c>)
 80038b0:	2300      	movs	r3, #0
 80038b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80038b6:	f7ff fe8f 	bl	80035d8 <__multadd>
 80038ba:	4607      	mov	r7, r0
 80038bc:	10ad      	asrs	r5, r5, #2
 80038be:	d027      	beq.n	8003910 <__pow5mult+0x74>
 80038c0:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80038c2:	b944      	cbnz	r4, 80038d6 <__pow5mult+0x3a>
 80038c4:	f240 2171 	movw	r1, #625	; 0x271
 80038c8:	4630      	mov	r0, r6
 80038ca:	f7ff ff4e 	bl	800376a <__i2b>
 80038ce:	2300      	movs	r3, #0
 80038d0:	64b0      	str	r0, [r6, #72]	; 0x48
 80038d2:	4604      	mov	r4, r0
 80038d4:	6003      	str	r3, [r0, #0]
 80038d6:	f04f 0800 	mov.w	r8, #0
 80038da:	07eb      	lsls	r3, r5, #31
 80038dc:	d50a      	bpl.n	80038f4 <__pow5mult+0x58>
 80038de:	4639      	mov	r1, r7
 80038e0:	4622      	mov	r2, r4
 80038e2:	4630      	mov	r0, r6
 80038e4:	f7ff ff4a 	bl	800377c <__multiply>
 80038e8:	4639      	mov	r1, r7
 80038ea:	4681      	mov	r9, r0
 80038ec:	4630      	mov	r0, r6
 80038ee:	f7ff fe6a 	bl	80035c6 <_Bfree>
 80038f2:	464f      	mov	r7, r9
 80038f4:	106d      	asrs	r5, r5, #1
 80038f6:	d00b      	beq.n	8003910 <__pow5mult+0x74>
 80038f8:	6820      	ldr	r0, [r4, #0]
 80038fa:	b938      	cbnz	r0, 800390c <__pow5mult+0x70>
 80038fc:	4622      	mov	r2, r4
 80038fe:	4621      	mov	r1, r4
 8003900:	4630      	mov	r0, r6
 8003902:	f7ff ff3b 	bl	800377c <__multiply>
 8003906:	6020      	str	r0, [r4, #0]
 8003908:	f8c0 8000 	str.w	r8, [r0]
 800390c:	4604      	mov	r4, r0
 800390e:	e7e4      	b.n	80038da <__pow5mult+0x3e>
 8003910:	4638      	mov	r0, r7
 8003912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003916:	bf00      	nop
 8003918:	080193a0 	.word	0x080193a0

0800391c <__lshift>:
 800391c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003920:	460c      	mov	r4, r1
 8003922:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003926:	6923      	ldr	r3, [r4, #16]
 8003928:	6849      	ldr	r1, [r1, #4]
 800392a:	eb0a 0903 	add.w	r9, sl, r3
 800392e:	68a3      	ldr	r3, [r4, #8]
 8003930:	4607      	mov	r7, r0
 8003932:	4616      	mov	r6, r2
 8003934:	f109 0501 	add.w	r5, r9, #1
 8003938:	42ab      	cmp	r3, r5
 800393a:	db33      	blt.n	80039a4 <__lshift+0x88>
 800393c:	4638      	mov	r0, r7
 800393e:	f7ff fe1d 	bl	800357c <_Balloc>
 8003942:	2300      	movs	r3, #0
 8003944:	4680      	mov	r8, r0
 8003946:	f100 0114 	add.w	r1, r0, #20
 800394a:	f100 0210 	add.w	r2, r0, #16
 800394e:	4618      	mov	r0, r3
 8003950:	4553      	cmp	r3, sl
 8003952:	db2a      	blt.n	80039aa <__lshift+0x8e>
 8003954:	6920      	ldr	r0, [r4, #16]
 8003956:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800395a:	f104 0314 	add.w	r3, r4, #20
 800395e:	f016 021f 	ands.w	r2, r6, #31
 8003962:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003966:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800396a:	d022      	beq.n	80039b2 <__lshift+0x96>
 800396c:	f1c2 0e20 	rsb	lr, r2, #32
 8003970:	2000      	movs	r0, #0
 8003972:	681e      	ldr	r6, [r3, #0]
 8003974:	4096      	lsls	r6, r2
 8003976:	4330      	orrs	r0, r6
 8003978:	f841 0b04 	str.w	r0, [r1], #4
 800397c:	f853 0b04 	ldr.w	r0, [r3], #4
 8003980:	459c      	cmp	ip, r3
 8003982:	fa20 f00e 	lsr.w	r0, r0, lr
 8003986:	d8f4      	bhi.n	8003972 <__lshift+0x56>
 8003988:	6008      	str	r0, [r1, #0]
 800398a:	b108      	cbz	r0, 8003990 <__lshift+0x74>
 800398c:	f109 0502 	add.w	r5, r9, #2
 8003990:	3d01      	subs	r5, #1
 8003992:	4638      	mov	r0, r7
 8003994:	f8c8 5010 	str.w	r5, [r8, #16]
 8003998:	4621      	mov	r1, r4
 800399a:	f7ff fe14 	bl	80035c6 <_Bfree>
 800399e:	4640      	mov	r0, r8
 80039a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a4:	3101      	adds	r1, #1
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	e7c6      	b.n	8003938 <__lshift+0x1c>
 80039aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80039ae:	3301      	adds	r3, #1
 80039b0:	e7ce      	b.n	8003950 <__lshift+0x34>
 80039b2:	3904      	subs	r1, #4
 80039b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80039b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80039bc:	459c      	cmp	ip, r3
 80039be:	d8f9      	bhi.n	80039b4 <__lshift+0x98>
 80039c0:	e7e6      	b.n	8003990 <__lshift+0x74>

080039c2 <__mcmp>:
 80039c2:	6903      	ldr	r3, [r0, #16]
 80039c4:	690a      	ldr	r2, [r1, #16]
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	b530      	push	{r4, r5, lr}
 80039ca:	d10c      	bne.n	80039e6 <__mcmp+0x24>
 80039cc:	0092      	lsls	r2, r2, #2
 80039ce:	3014      	adds	r0, #20
 80039d0:	3114      	adds	r1, #20
 80039d2:	1884      	adds	r4, r0, r2
 80039d4:	4411      	add	r1, r2
 80039d6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80039da:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80039de:	4295      	cmp	r5, r2
 80039e0:	d003      	beq.n	80039ea <__mcmp+0x28>
 80039e2:	d305      	bcc.n	80039f0 <__mcmp+0x2e>
 80039e4:	2301      	movs	r3, #1
 80039e6:	4618      	mov	r0, r3
 80039e8:	bd30      	pop	{r4, r5, pc}
 80039ea:	42a0      	cmp	r0, r4
 80039ec:	d3f3      	bcc.n	80039d6 <__mcmp+0x14>
 80039ee:	e7fa      	b.n	80039e6 <__mcmp+0x24>
 80039f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039f4:	e7f7      	b.n	80039e6 <__mcmp+0x24>

080039f6 <__mdiff>:
 80039f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039fa:	460d      	mov	r5, r1
 80039fc:	4607      	mov	r7, r0
 80039fe:	4611      	mov	r1, r2
 8003a00:	4628      	mov	r0, r5
 8003a02:	4614      	mov	r4, r2
 8003a04:	f7ff ffdd 	bl	80039c2 <__mcmp>
 8003a08:	1e06      	subs	r6, r0, #0
 8003a0a:	d108      	bne.n	8003a1e <__mdiff+0x28>
 8003a0c:	4631      	mov	r1, r6
 8003a0e:	4638      	mov	r0, r7
 8003a10:	f7ff fdb4 	bl	800357c <_Balloc>
 8003a14:	2301      	movs	r3, #1
 8003a16:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a1e:	bfa4      	itt	ge
 8003a20:	4623      	movge	r3, r4
 8003a22:	462c      	movge	r4, r5
 8003a24:	4638      	mov	r0, r7
 8003a26:	6861      	ldr	r1, [r4, #4]
 8003a28:	bfa6      	itte	ge
 8003a2a:	461d      	movge	r5, r3
 8003a2c:	2600      	movge	r6, #0
 8003a2e:	2601      	movlt	r6, #1
 8003a30:	f7ff fda4 	bl	800357c <_Balloc>
 8003a34:	692b      	ldr	r3, [r5, #16]
 8003a36:	60c6      	str	r6, [r0, #12]
 8003a38:	6926      	ldr	r6, [r4, #16]
 8003a3a:	f105 0914 	add.w	r9, r5, #20
 8003a3e:	f104 0214 	add.w	r2, r4, #20
 8003a42:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003a46:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003a4a:	f100 0514 	add.w	r5, r0, #20
 8003a4e:	f04f 0e00 	mov.w	lr, #0
 8003a52:	f852 ab04 	ldr.w	sl, [r2], #4
 8003a56:	f859 4b04 	ldr.w	r4, [r9], #4
 8003a5a:	fa1e f18a 	uxtah	r1, lr, sl
 8003a5e:	b2a3      	uxth	r3, r4
 8003a60:	1ac9      	subs	r1, r1, r3
 8003a62:	0c23      	lsrs	r3, r4, #16
 8003a64:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8003a68:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003a6c:	b289      	uxth	r1, r1
 8003a6e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8003a72:	45c8      	cmp	r8, r9
 8003a74:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003a78:	4694      	mov	ip, r2
 8003a7a:	f845 3b04 	str.w	r3, [r5], #4
 8003a7e:	d8e8      	bhi.n	8003a52 <__mdiff+0x5c>
 8003a80:	45bc      	cmp	ip, r7
 8003a82:	d304      	bcc.n	8003a8e <__mdiff+0x98>
 8003a84:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003a88:	b183      	cbz	r3, 8003aac <__mdiff+0xb6>
 8003a8a:	6106      	str	r6, [r0, #16]
 8003a8c:	e7c5      	b.n	8003a1a <__mdiff+0x24>
 8003a8e:	f85c 1b04 	ldr.w	r1, [ip], #4
 8003a92:	fa1e f381 	uxtah	r3, lr, r1
 8003a96:	141a      	asrs	r2, r3, #16
 8003a98:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003aa2:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003aa6:	f845 3b04 	str.w	r3, [r5], #4
 8003aaa:	e7e9      	b.n	8003a80 <__mdiff+0x8a>
 8003aac:	3e01      	subs	r6, #1
 8003aae:	e7e9      	b.n	8003a84 <__mdiff+0x8e>

08003ab0 <__ulp>:
 8003ab0:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <__ulp+0x48>)
 8003ab2:	ee10 2a90 	vmov	r2, s1
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	dd04      	ble.n	8003aca <__ulp+0x1a>
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	ec41 0b10 	vmov	d0, r0, r1
 8003ac8:	4770      	bx	lr
 8003aca:	425b      	negs	r3, r3
 8003acc:	151b      	asrs	r3, r3, #20
 8003ace:	2b13      	cmp	r3, #19
 8003ad0:	f04f 0000 	mov.w	r0, #0
 8003ad4:	f04f 0100 	mov.w	r1, #0
 8003ad8:	dc04      	bgt.n	8003ae4 <__ulp+0x34>
 8003ada:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003ade:	fa42 f103 	asr.w	r1, r2, r3
 8003ae2:	e7ef      	b.n	8003ac4 <__ulp+0x14>
 8003ae4:	3b14      	subs	r3, #20
 8003ae6:	2b1e      	cmp	r3, #30
 8003ae8:	bfda      	itte	le
 8003aea:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8003aee:	fa22 f303 	lsrle.w	r3, r2, r3
 8003af2:	2301      	movgt	r3, #1
 8003af4:	4618      	mov	r0, r3
 8003af6:	e7e5      	b.n	8003ac4 <__ulp+0x14>
 8003af8:	7ff00000 	.word	0x7ff00000

08003afc <__b2d>:
 8003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afe:	6905      	ldr	r5, [r0, #16]
 8003b00:	f100 0714 	add.w	r7, r0, #20
 8003b04:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8003b08:	1f2e      	subs	r6, r5, #4
 8003b0a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f7ff fddb 	bl	80036ca <__hi0bits>
 8003b14:	f1c0 0320 	rsb	r3, r0, #32
 8003b18:	280a      	cmp	r0, #10
 8003b1a:	600b      	str	r3, [r1, #0]
 8003b1c:	f8df c078 	ldr.w	ip, [pc, #120]	; 8003b98 <__b2d+0x9c>
 8003b20:	dc14      	bgt.n	8003b4c <__b2d+0x50>
 8003b22:	f1c0 0e0b 	rsb	lr, r0, #11
 8003b26:	fa24 f10e 	lsr.w	r1, r4, lr
 8003b2a:	42b7      	cmp	r7, r6
 8003b2c:	ea41 030c 	orr.w	r3, r1, ip
 8003b30:	bf34      	ite	cc
 8003b32:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8003b36:	2100      	movcs	r1, #0
 8003b38:	3015      	adds	r0, #21
 8003b3a:	fa04 f000 	lsl.w	r0, r4, r0
 8003b3e:	fa21 f10e 	lsr.w	r1, r1, lr
 8003b42:	ea40 0201 	orr.w	r2, r0, r1
 8003b46:	ec43 2b10 	vmov	d0, r2, r3
 8003b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b4c:	42b7      	cmp	r7, r6
 8003b4e:	bf3a      	itte	cc
 8003b50:	f1a5 0608 	subcc.w	r6, r5, #8
 8003b54:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8003b58:	2100      	movcs	r1, #0
 8003b5a:	380b      	subs	r0, #11
 8003b5c:	d017      	beq.n	8003b8e <__b2d+0x92>
 8003b5e:	f1c0 0c20 	rsb	ip, r0, #32
 8003b62:	fa04 f500 	lsl.w	r5, r4, r0
 8003b66:	42be      	cmp	r6, r7
 8003b68:	fa21 f40c 	lsr.w	r4, r1, ip
 8003b6c:	ea45 0504 	orr.w	r5, r5, r4
 8003b70:	bf8c      	ite	hi
 8003b72:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8003b76:	2400      	movls	r4, #0
 8003b78:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8003b7c:	fa01 f000 	lsl.w	r0, r1, r0
 8003b80:	fa24 f40c 	lsr.w	r4, r4, ip
 8003b84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003b88:	ea40 0204 	orr.w	r2, r0, r4
 8003b8c:	e7db      	b.n	8003b46 <__b2d+0x4a>
 8003b8e:	ea44 030c 	orr.w	r3, r4, ip
 8003b92:	460a      	mov	r2, r1
 8003b94:	e7d7      	b.n	8003b46 <__b2d+0x4a>
 8003b96:	bf00      	nop
 8003b98:	3ff00000 	.word	0x3ff00000

08003b9c <__d2b>:
 8003b9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003ba0:	460e      	mov	r6, r1
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	ec59 8b10 	vmov	r8, r9, d0
 8003ba8:	4615      	mov	r5, r2
 8003baa:	f7ff fce7 	bl	800357c <_Balloc>
 8003bae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003bb2:	4607      	mov	r7, r0
 8003bb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003bb8:	bb2c      	cbnz	r4, 8003c06 <__d2b+0x6a>
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	f1b8 0300 	subs.w	r3, r8, #0
 8003bc0:	d026      	beq.n	8003c10 <__d2b+0x74>
 8003bc2:	4668      	mov	r0, sp
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	f7ff fda0 	bl	800370a <__lo0bits>
 8003bca:	9900      	ldr	r1, [sp, #0]
 8003bcc:	b1f0      	cbz	r0, 8003c0c <__d2b+0x70>
 8003bce:	9a01      	ldr	r2, [sp, #4]
 8003bd0:	f1c0 0320 	rsb	r3, r0, #32
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	40c2      	lsrs	r2, r0
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	9201      	str	r2, [sp, #4]
 8003be0:	9b01      	ldr	r3, [sp, #4]
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf14      	ite	ne
 8003be8:	2102      	movne	r1, #2
 8003bea:	2101      	moveq	r1, #1
 8003bec:	6139      	str	r1, [r7, #16]
 8003bee:	b1c4      	cbz	r4, 8003c22 <__d2b+0x86>
 8003bf0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003bf4:	4404      	add	r4, r0
 8003bf6:	6034      	str	r4, [r6, #0]
 8003bf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003bfc:	6028      	str	r0, [r5, #0]
 8003bfe:	4638      	mov	r0, r7
 8003c00:	b003      	add	sp, #12
 8003c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c0a:	e7d6      	b.n	8003bba <__d2b+0x1e>
 8003c0c:	6179      	str	r1, [r7, #20]
 8003c0e:	e7e7      	b.n	8003be0 <__d2b+0x44>
 8003c10:	a801      	add	r0, sp, #4
 8003c12:	f7ff fd7a 	bl	800370a <__lo0bits>
 8003c16:	9b01      	ldr	r3, [sp, #4]
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	6139      	str	r1, [r7, #16]
 8003c1e:	3020      	adds	r0, #32
 8003c20:	e7e5      	b.n	8003bee <__d2b+0x52>
 8003c22:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003c26:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003c2a:	6030      	str	r0, [r6, #0]
 8003c2c:	6918      	ldr	r0, [r3, #16]
 8003c2e:	f7ff fd4c 	bl	80036ca <__hi0bits>
 8003c32:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003c36:	e7e1      	b.n	8003bfc <__d2b+0x60>

08003c38 <__ratio>:
 8003c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3c:	4688      	mov	r8, r1
 8003c3e:	4669      	mov	r1, sp
 8003c40:	4681      	mov	r9, r0
 8003c42:	f7ff ff5b 	bl	8003afc <__b2d>
 8003c46:	a901      	add	r1, sp, #4
 8003c48:	4640      	mov	r0, r8
 8003c4a:	ec57 6b10 	vmov	r6, r7, d0
 8003c4e:	f7ff ff55 	bl	8003afc <__b2d>
 8003c52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003c56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8003c5a:	eba3 0c02 	sub.w	ip, r3, r2
 8003c5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8003c68:	ec5b ab10 	vmov	sl, fp, d0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bfce      	itee	gt
 8003c70:	463a      	movgt	r2, r7
 8003c72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8003c76:	465a      	movle	r2, fp
 8003c78:	4659      	mov	r1, fp
 8003c7a:	463d      	mov	r5, r7
 8003c7c:	bfd4      	ite	le
 8003c7e:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8003c82:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8003c86:	4630      	mov	r0, r6
 8003c88:	ee10 2a10 	vmov	r2, s0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4629      	mov	r1, r5
 8003c90:	f7fd fe48 	bl	8001924 <__aeabi_ddiv>
 8003c94:	ec41 0b10 	vmov	d0, r0, r1
 8003c98:	b003      	add	sp, #12
 8003c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003c9e <_mprec_log10>:
 8003c9e:	2817      	cmp	r0, #23
 8003ca0:	b5d0      	push	{r4, r6, r7, lr}
 8003ca2:	4604      	mov	r4, r0
 8003ca4:	dc07      	bgt.n	8003cb6 <_mprec_log10+0x18>
 8003ca6:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <_mprec_log10+0x2e>)
 8003ca8:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8003cac:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8003cb0:	ec41 0b10 	vmov	d0, r0, r1
 8003cb4:	bdd0      	pop	{r4, r6, r7, pc}
 8003cb6:	4906      	ldr	r1, [pc, #24]	; (8003cd0 <_mprec_log10+0x32>)
 8003cb8:	4f06      	ldr	r7, [pc, #24]	; (8003cd4 <_mprec_log10+0x36>)
 8003cba:	2000      	movs	r0, #0
 8003cbc:	2600      	movs	r6, #0
 8003cbe:	4632      	mov	r2, r6
 8003cc0:	463b      	mov	r3, r7
 8003cc2:	f7fd fd05 	bl	80016d0 <__aeabi_dmul>
 8003cc6:	3c01      	subs	r4, #1
 8003cc8:	d1f9      	bne.n	8003cbe <_mprec_log10+0x20>
 8003cca:	e7f1      	b.n	8003cb0 <_mprec_log10+0x12>
 8003ccc:	080193a0 	.word	0x080193a0
 8003cd0:	3ff00000 	.word	0x3ff00000
 8003cd4:	40240000 	.word	0x40240000

08003cd8 <__copybits>:
 8003cd8:	3901      	subs	r1, #1
 8003cda:	b510      	push	{r4, lr}
 8003cdc:	1149      	asrs	r1, r1, #5
 8003cde:	6914      	ldr	r4, [r2, #16]
 8003ce0:	3101      	adds	r1, #1
 8003ce2:	f102 0314 	add.w	r3, r2, #20
 8003ce6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003cea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003cee:	42a3      	cmp	r3, r4
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	d303      	bcc.n	8003cfc <__copybits+0x24>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	428a      	cmp	r2, r1
 8003cf8:	d305      	bcc.n	8003d06 <__copybits+0x2e>
 8003cfa:	bd10      	pop	{r4, pc}
 8003cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d00:	f840 2b04 	str.w	r2, [r0], #4
 8003d04:	e7f3      	b.n	8003cee <__copybits+0x16>
 8003d06:	f842 3b04 	str.w	r3, [r2], #4
 8003d0a:	e7f4      	b.n	8003cf6 <__copybits+0x1e>

08003d0c <__any_on>:
 8003d0c:	f100 0214 	add.w	r2, r0, #20
 8003d10:	6900      	ldr	r0, [r0, #16]
 8003d12:	114b      	asrs	r3, r1, #5
 8003d14:	4298      	cmp	r0, r3
 8003d16:	b510      	push	{r4, lr}
 8003d18:	db11      	blt.n	8003d3e <__any_on+0x32>
 8003d1a:	dd0a      	ble.n	8003d32 <__any_on+0x26>
 8003d1c:	f011 011f 	ands.w	r1, r1, #31
 8003d20:	d007      	beq.n	8003d32 <__any_on+0x26>
 8003d22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003d26:	fa24 f001 	lsr.w	r0, r4, r1
 8003d2a:	fa00 f101 	lsl.w	r1, r0, r1
 8003d2e:	428c      	cmp	r4, r1
 8003d30:	d10b      	bne.n	8003d4a <__any_on+0x3e>
 8003d32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d803      	bhi.n	8003d42 <__any_on+0x36>
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	bd10      	pop	{r4, pc}
 8003d3e:	4603      	mov	r3, r0
 8003d40:	e7f7      	b.n	8003d32 <__any_on+0x26>
 8003d42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8003d46:	2900      	cmp	r1, #0
 8003d48:	d0f5      	beq.n	8003d36 <__any_on+0x2a>
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	e7f6      	b.n	8003d3c <__any_on+0x30>
 8003d4e:	bf00      	nop

08003d50 <_free_r>:
 8003d50:	b538      	push	{r3, r4, r5, lr}
 8003d52:	4605      	mov	r5, r0
 8003d54:	2900      	cmp	r1, #0
 8003d56:	d045      	beq.n	8003de4 <_free_r+0x94>
 8003d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d5c:	1f0c      	subs	r4, r1, #4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bfb8      	it	lt
 8003d62:	18e4      	addlt	r4, r4, r3
 8003d64:	f000 ff56 	bl	8004c14 <__malloc_lock>
 8003d68:	4a1f      	ldr	r2, [pc, #124]	; (8003de8 <_free_r+0x98>)
 8003d6a:	6813      	ldr	r3, [r2, #0]
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	b933      	cbnz	r3, 8003d7e <_free_r+0x2e>
 8003d70:	6063      	str	r3, [r4, #4]
 8003d72:	6014      	str	r4, [r2, #0]
 8003d74:	4628      	mov	r0, r5
 8003d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d7a:	f000 bf4c 	b.w	8004c16 <__malloc_unlock>
 8003d7e:	42a3      	cmp	r3, r4
 8003d80:	d90c      	bls.n	8003d9c <_free_r+0x4c>
 8003d82:	6821      	ldr	r1, [r4, #0]
 8003d84:	1862      	adds	r2, r4, r1
 8003d86:	4293      	cmp	r3, r2
 8003d88:	bf04      	itt	eq
 8003d8a:	681a      	ldreq	r2, [r3, #0]
 8003d8c:	685b      	ldreq	r3, [r3, #4]
 8003d8e:	6063      	str	r3, [r4, #4]
 8003d90:	bf04      	itt	eq
 8003d92:	1852      	addeq	r2, r2, r1
 8003d94:	6022      	streq	r2, [r4, #0]
 8003d96:	6004      	str	r4, [r0, #0]
 8003d98:	e7ec      	b.n	8003d74 <_free_r+0x24>
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	b10a      	cbz	r2, 8003da4 <_free_r+0x54>
 8003da0:	42a2      	cmp	r2, r4
 8003da2:	d9fa      	bls.n	8003d9a <_free_r+0x4a>
 8003da4:	6819      	ldr	r1, [r3, #0]
 8003da6:	1858      	adds	r0, r3, r1
 8003da8:	42a0      	cmp	r0, r4
 8003daa:	d10b      	bne.n	8003dc4 <_free_r+0x74>
 8003dac:	6820      	ldr	r0, [r4, #0]
 8003dae:	4401      	add	r1, r0
 8003db0:	1858      	adds	r0, r3, r1
 8003db2:	4282      	cmp	r2, r0
 8003db4:	6019      	str	r1, [r3, #0]
 8003db6:	d1dd      	bne.n	8003d74 <_free_r+0x24>
 8003db8:	6810      	ldr	r0, [r2, #0]
 8003dba:	6852      	ldr	r2, [r2, #4]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	4401      	add	r1, r0
 8003dc0:	6019      	str	r1, [r3, #0]
 8003dc2:	e7d7      	b.n	8003d74 <_free_r+0x24>
 8003dc4:	d902      	bls.n	8003dcc <_free_r+0x7c>
 8003dc6:	230c      	movs	r3, #12
 8003dc8:	602b      	str	r3, [r5, #0]
 8003dca:	e7d3      	b.n	8003d74 <_free_r+0x24>
 8003dcc:	6820      	ldr	r0, [r4, #0]
 8003dce:	1821      	adds	r1, r4, r0
 8003dd0:	428a      	cmp	r2, r1
 8003dd2:	bf04      	itt	eq
 8003dd4:	6811      	ldreq	r1, [r2, #0]
 8003dd6:	6852      	ldreq	r2, [r2, #4]
 8003dd8:	6062      	str	r2, [r4, #4]
 8003dda:	bf04      	itt	eq
 8003ddc:	1809      	addeq	r1, r1, r0
 8003dde:	6021      	streq	r1, [r4, #0]
 8003de0:	605c      	str	r4, [r3, #4]
 8003de2:	e7c7      	b.n	8003d74 <_free_r+0x24>
 8003de4:	bd38      	pop	{r3, r4, r5, pc}
 8003de6:	bf00      	nop
 8003de8:	20000000 	.word	0x20000000

08003dec <_malloc_r>:
 8003dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dee:	1cce      	adds	r6, r1, #3
 8003df0:	f026 0603 	bic.w	r6, r6, #3
 8003df4:	3608      	adds	r6, #8
 8003df6:	2e0c      	cmp	r6, #12
 8003df8:	bf38      	it	cc
 8003dfa:	260c      	movcc	r6, #12
 8003dfc:	2e00      	cmp	r6, #0
 8003dfe:	4607      	mov	r7, r0
 8003e00:	db01      	blt.n	8003e06 <_malloc_r+0x1a>
 8003e02:	42b1      	cmp	r1, r6
 8003e04:	d903      	bls.n	8003e0e <_malloc_r+0x22>
 8003e06:	230c      	movs	r3, #12
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e0e:	4d21      	ldr	r5, [pc, #132]	; (8003e94 <_malloc_r+0xa8>)
 8003e10:	f000 ff00 	bl	8004c14 <__malloc_lock>
 8003e14:	682a      	ldr	r2, [r5, #0]
 8003e16:	4614      	mov	r4, r2
 8003e18:	b994      	cbnz	r4, 8003e40 <_malloc_r+0x54>
 8003e1a:	686b      	ldr	r3, [r5, #4]
 8003e1c:	b923      	cbnz	r3, 8003e28 <_malloc_r+0x3c>
 8003e1e:	4621      	mov	r1, r4
 8003e20:	4638      	mov	r0, r7
 8003e22:	f000 fa03 	bl	800422c <_sbrk_r>
 8003e26:	6068      	str	r0, [r5, #4]
 8003e28:	4631      	mov	r1, r6
 8003e2a:	4638      	mov	r0, r7
 8003e2c:	f000 f9fe 	bl	800422c <_sbrk_r>
 8003e30:	1c43      	adds	r3, r0, #1
 8003e32:	d123      	bne.n	8003e7c <_malloc_r+0x90>
 8003e34:	230c      	movs	r3, #12
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4638      	mov	r0, r7
 8003e3a:	f000 feec 	bl	8004c16 <__malloc_unlock>
 8003e3e:	e7e4      	b.n	8003e0a <_malloc_r+0x1e>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	1b9b      	subs	r3, r3, r6
 8003e44:	d417      	bmi.n	8003e76 <_malloc_r+0x8a>
 8003e46:	2b0b      	cmp	r3, #11
 8003e48:	d903      	bls.n	8003e52 <_malloc_r+0x66>
 8003e4a:	6023      	str	r3, [r4, #0]
 8003e4c:	441c      	add	r4, r3
 8003e4e:	6026      	str	r6, [r4, #0]
 8003e50:	e004      	b.n	8003e5c <_malloc_r+0x70>
 8003e52:	6863      	ldr	r3, [r4, #4]
 8003e54:	42a2      	cmp	r2, r4
 8003e56:	bf0c      	ite	eq
 8003e58:	602b      	streq	r3, [r5, #0]
 8003e5a:	6053      	strne	r3, [r2, #4]
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	f000 feda 	bl	8004c16 <__malloc_unlock>
 8003e62:	f104 000b 	add.w	r0, r4, #11
 8003e66:	1d23      	adds	r3, r4, #4
 8003e68:	f020 0007 	bic.w	r0, r0, #7
 8003e6c:	1ac2      	subs	r2, r0, r3
 8003e6e:	d0cd      	beq.n	8003e0c <_malloc_r+0x20>
 8003e70:	1a1b      	subs	r3, r3, r0
 8003e72:	50a3      	str	r3, [r4, r2]
 8003e74:	e7ca      	b.n	8003e0c <_malloc_r+0x20>
 8003e76:	4622      	mov	r2, r4
 8003e78:	6864      	ldr	r4, [r4, #4]
 8003e7a:	e7cd      	b.n	8003e18 <_malloc_r+0x2c>
 8003e7c:	1cc4      	adds	r4, r0, #3
 8003e7e:	f024 0403 	bic.w	r4, r4, #3
 8003e82:	42a0      	cmp	r0, r4
 8003e84:	d0e3      	beq.n	8003e4e <_malloc_r+0x62>
 8003e86:	1a21      	subs	r1, r4, r0
 8003e88:	4638      	mov	r0, r7
 8003e8a:	f000 f9cf 	bl	800422c <_sbrk_r>
 8003e8e:	3001      	adds	r0, #1
 8003e90:	d1dd      	bne.n	8003e4e <_malloc_r+0x62>
 8003e92:	e7cf      	b.n	8003e34 <_malloc_r+0x48>
 8003e94:	20000000 	.word	0x20000000

08003e98 <__ssputs_r>:
 8003e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e9c:	688e      	ldr	r6, [r1, #8]
 8003e9e:	429e      	cmp	r6, r3
 8003ea0:	4682      	mov	sl, r0
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	4691      	mov	r9, r2
 8003ea6:	4698      	mov	r8, r3
 8003ea8:	d838      	bhi.n	8003f1c <__ssputs_r+0x84>
 8003eaa:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
 8003eae:	f41c 6f90 	tst.w	ip, #1152	; 0x480
 8003eb2:	d031      	beq.n	8003f18 <__ssputs_r+0x80>
 8003eb4:	6962      	ldr	r2, [r4, #20]
 8003eb6:	6825      	ldr	r5, [r4, #0]
 8003eb8:	6909      	ldr	r1, [r1, #16]
 8003eba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003ebe:	1a6f      	subs	r7, r5, r1
 8003ec0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	1055      	asrs	r5, r2, #1
 8003ec8:	443b      	add	r3, r7
 8003eca:	429d      	cmp	r5, r3
 8003ecc:	bf38      	it	cc
 8003ece:	461d      	movcc	r5, r3
 8003ed0:	f41c 6f80 	tst.w	ip, #1024	; 0x400
 8003ed4:	d030      	beq.n	8003f38 <__ssputs_r+0xa0>
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	f7ff ff88 	bl	8003dec <_malloc_r>
 8003edc:	4606      	mov	r6, r0
 8003ede:	b950      	cbnz	r0, 8003ef6 <__ssputs_r+0x5e>
 8003ee0:	230c      	movs	r3, #12
 8003ee2:	f8ca 3000 	str.w	r3, [sl]
 8003ee6:	89a3      	ldrh	r3, [r4, #12]
 8003ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eec:	81a3      	strh	r3, [r4, #12]
 8003eee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef6:	463a      	mov	r2, r7
 8003ef8:	6921      	ldr	r1, [r4, #16]
 8003efa:	f000 fd10 	bl	800491e <memcpy>
 8003efe:	89a3      	ldrh	r3, [r4, #12]
 8003f00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f08:	81a3      	strh	r3, [r4, #12]
 8003f0a:	6126      	str	r6, [r4, #16]
 8003f0c:	6165      	str	r5, [r4, #20]
 8003f0e:	443e      	add	r6, r7
 8003f10:	1bed      	subs	r5, r5, r7
 8003f12:	6026      	str	r6, [r4, #0]
 8003f14:	60a5      	str	r5, [r4, #8]
 8003f16:	4646      	mov	r6, r8
 8003f18:	4546      	cmp	r6, r8
 8003f1a:	d900      	bls.n	8003f1e <__ssputs_r+0x86>
 8003f1c:	4646      	mov	r6, r8
 8003f1e:	4632      	mov	r2, r6
 8003f20:	4649      	mov	r1, r9
 8003f22:	6820      	ldr	r0, [r4, #0]
 8003f24:	f000 fd09 	bl	800493a <memmove>
 8003f28:	68a3      	ldr	r3, [r4, #8]
 8003f2a:	1b9b      	subs	r3, r3, r6
 8003f2c:	60a3      	str	r3, [r4, #8]
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	441e      	add	r6, r3
 8003f32:	6026      	str	r6, [r4, #0]
 8003f34:	2000      	movs	r0, #0
 8003f36:	e7dc      	b.n	8003ef2 <__ssputs_r+0x5a>
 8003f38:	462a      	mov	r2, r5
 8003f3a:	f000 fe00 	bl	8004b3e <_realloc_r>
 8003f3e:	4606      	mov	r6, r0
 8003f40:	2800      	cmp	r0, #0
 8003f42:	d1e2      	bne.n	8003f0a <__ssputs_r+0x72>
 8003f44:	6921      	ldr	r1, [r4, #16]
 8003f46:	4650      	mov	r0, sl
 8003f48:	f7ff ff02 	bl	8003d50 <_free_r>
 8003f4c:	e7c8      	b.n	8003ee0 <__ssputs_r+0x48>

08003f4e <__ssprint_r>:
 8003f4e:	6893      	ldr	r3, [r2, #8]
 8003f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f54:	4681      	mov	r9, r0
 8003f56:	460c      	mov	r4, r1
 8003f58:	4616      	mov	r6, r2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d05e      	beq.n	800401c <__ssprint_r+0xce>
 8003f5e:	f04f 0b00 	mov.w	fp, #0
 8003f62:	f8d2 a000 	ldr.w	sl, [r2]
 8003f66:	465f      	mov	r7, fp
 8003f68:	b357      	cbz	r7, 8003fc0 <__ssprint_r+0x72>
 8003f6a:	68a3      	ldr	r3, [r4, #8]
 8003f6c:	429f      	cmp	r7, r3
 8003f6e:	d340      	bcc.n	8003ff2 <__ssprint_r+0xa4>
 8003f70:	89a2      	ldrh	r2, [r4, #12]
 8003f72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f76:	d03c      	beq.n	8003ff2 <__ssprint_r+0xa4>
 8003f78:	6825      	ldr	r5, [r4, #0]
 8003f7a:	6921      	ldr	r1, [r4, #16]
 8003f7c:	eba5 0801 	sub.w	r8, r5, r1
 8003f80:	6965      	ldr	r5, [r4, #20]
 8003f82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f8a:	f108 0301 	add.w	r3, r8, #1
 8003f8e:	443b      	add	r3, r7
 8003f90:	106d      	asrs	r5, r5, #1
 8003f92:	429d      	cmp	r5, r3
 8003f94:	bf38      	it	cc
 8003f96:	461d      	movcc	r5, r3
 8003f98:	0553      	lsls	r3, r2, #21
 8003f9a:	d544      	bpl.n	8004026 <__ssprint_r+0xd8>
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	4648      	mov	r0, r9
 8003fa0:	f7ff ff24 	bl	8003dec <_malloc_r>
 8003fa4:	b988      	cbnz	r0, 8003fca <__ssprint_r+0x7c>
 8003fa6:	230c      	movs	r3, #12
 8003fa8:	f8c9 3000 	str.w	r3, [r9]
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb2:	81a3      	strh	r3, [r4, #12]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8003fba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fbe:	e02f      	b.n	8004020 <__ssprint_r+0xd2>
 8003fc0:	e9da b700 	ldrd	fp, r7, [sl]
 8003fc4:	f10a 0a08 	add.w	sl, sl, #8
 8003fc8:	e7ce      	b.n	8003f68 <__ssprint_r+0x1a>
 8003fca:	4642      	mov	r2, r8
 8003fcc:	6921      	ldr	r1, [r4, #16]
 8003fce:	9001      	str	r0, [sp, #4]
 8003fd0:	f000 fca5 	bl	800491e <memcpy>
 8003fd4:	89a2      	ldrh	r2, [r4, #12]
 8003fd6:	9b01      	ldr	r3, [sp, #4]
 8003fd8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8003fdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fe0:	81a2      	strh	r2, [r4, #12]
 8003fe2:	6123      	str	r3, [r4, #16]
 8003fe4:	6165      	str	r5, [r4, #20]
 8003fe6:	4443      	add	r3, r8
 8003fe8:	eba5 0508 	sub.w	r5, r5, r8
 8003fec:	6023      	str	r3, [r4, #0]
 8003fee:	60a5      	str	r5, [r4, #8]
 8003ff0:	463b      	mov	r3, r7
 8003ff2:	42bb      	cmp	r3, r7
 8003ff4:	bf28      	it	cs
 8003ff6:	463b      	movcs	r3, r7
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4659      	mov	r1, fp
 8003ffc:	6820      	ldr	r0, [r4, #0]
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	f000 fc9b 	bl	800493a <memmove>
 8004004:	68a2      	ldr	r2, [r4, #8]
 8004006:	9b01      	ldr	r3, [sp, #4]
 8004008:	1ad2      	subs	r2, r2, r3
 800400a:	60a2      	str	r2, [r4, #8]
 800400c:	6822      	ldr	r2, [r4, #0]
 800400e:	4413      	add	r3, r2
 8004010:	6023      	str	r3, [r4, #0]
 8004012:	68b3      	ldr	r3, [r6, #8]
 8004014:	1bdf      	subs	r7, r3, r7
 8004016:	60b7      	str	r7, [r6, #8]
 8004018:	2f00      	cmp	r7, #0
 800401a:	d1d1      	bne.n	8003fc0 <__ssprint_r+0x72>
 800401c:	2000      	movs	r0, #0
 800401e:	6070      	str	r0, [r6, #4]
 8004020:	b003      	add	sp, #12
 8004022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004026:	462a      	mov	r2, r5
 8004028:	4648      	mov	r0, r9
 800402a:	f000 fd88 	bl	8004b3e <_realloc_r>
 800402e:	4603      	mov	r3, r0
 8004030:	2800      	cmp	r0, #0
 8004032:	d1d6      	bne.n	8003fe2 <__ssprint_r+0x94>
 8004034:	6921      	ldr	r1, [r4, #16]
 8004036:	4648      	mov	r0, r9
 8004038:	f7ff fe8a 	bl	8003d50 <_free_r>
 800403c:	e7b3      	b.n	8003fa6 <__ssprint_r+0x58>

0800403e <_svfiprintf_r>:
 800403e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004042:	461e      	mov	r6, r3
 8004044:	898b      	ldrh	r3, [r1, #12]
 8004046:	061b      	lsls	r3, r3, #24
 8004048:	b09d      	sub	sp, #116	; 0x74
 800404a:	4607      	mov	r7, r0
 800404c:	460d      	mov	r5, r1
 800404e:	4614      	mov	r4, r2
 8004050:	d50e      	bpl.n	8004070 <_svfiprintf_r+0x32>
 8004052:	690b      	ldr	r3, [r1, #16]
 8004054:	b963      	cbnz	r3, 8004070 <_svfiprintf_r+0x32>
 8004056:	2140      	movs	r1, #64	; 0x40
 8004058:	f7ff fec8 	bl	8003dec <_malloc_r>
 800405c:	6028      	str	r0, [r5, #0]
 800405e:	6128      	str	r0, [r5, #16]
 8004060:	b920      	cbnz	r0, 800406c <_svfiprintf_r+0x2e>
 8004062:	230c      	movs	r3, #12
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800406a:	e0c9      	b.n	8004200 <_svfiprintf_r+0x1c2>
 800406c:	2340      	movs	r3, #64	; 0x40
 800406e:	616b      	str	r3, [r5, #20]
 8004070:	2300      	movs	r3, #0
 8004072:	9309      	str	r3, [sp, #36]	; 0x24
 8004074:	2320      	movs	r3, #32
 8004076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800407a:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8004218 <_svfiprintf_r+0x1da>
 800407e:	9603      	str	r6, [sp, #12]
 8004080:	2330      	movs	r3, #48	; 0x30
 8004082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004086:	f04f 0a01 	mov.w	sl, #1
 800408a:	4623      	mov	r3, r4
 800408c:	461e      	mov	r6, r3
 800408e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004092:	b10a      	cbz	r2, 8004098 <_svfiprintf_r+0x5a>
 8004094:	2a25      	cmp	r2, #37	; 0x25
 8004096:	d1f9      	bne.n	800408c <_svfiprintf_r+0x4e>
 8004098:	ebb6 0b04 	subs.w	fp, r6, r4
 800409c:	d00b      	beq.n	80040b6 <_svfiprintf_r+0x78>
 800409e:	465b      	mov	r3, fp
 80040a0:	4622      	mov	r2, r4
 80040a2:	4629      	mov	r1, r5
 80040a4:	4638      	mov	r0, r7
 80040a6:	f7ff fef7 	bl	8003e98 <__ssputs_r>
 80040aa:	3001      	adds	r0, #1
 80040ac:	f000 80a3 	beq.w	80041f6 <_svfiprintf_r+0x1b8>
 80040b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040b2:	445b      	add	r3, fp
 80040b4:	9309      	str	r3, [sp, #36]	; 0x24
 80040b6:	7833      	ldrb	r3, [r6, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 809c 	beq.w	80041f6 <_svfiprintf_r+0x1b8>
 80040be:	2300      	movs	r3, #0
 80040c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040c8:	3601      	adds	r6, #1
 80040ca:	9304      	str	r3, [sp, #16]
 80040cc:	9307      	str	r3, [sp, #28]
 80040ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040d2:	931a      	str	r3, [sp, #104]	; 0x68
 80040d4:	4634      	mov	r4, r6
 80040d6:	2205      	movs	r2, #5
 80040d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040dc:	484e      	ldr	r0, [pc, #312]	; (8004218 <_svfiprintf_r+0x1da>)
 80040de:	f7fc f857 	bl	8000190 <memchr>
 80040e2:	9b04      	ldr	r3, [sp, #16]
 80040e4:	b9c0      	cbnz	r0, 8004118 <_svfiprintf_r+0xda>
 80040e6:	06d9      	lsls	r1, r3, #27
 80040e8:	bf44      	itt	mi
 80040ea:	2220      	movmi	r2, #32
 80040ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040f0:	071a      	lsls	r2, r3, #28
 80040f2:	bf44      	itt	mi
 80040f4:	222b      	movmi	r2, #43	; 0x2b
 80040f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040fa:	7832      	ldrb	r2, [r6, #0]
 80040fc:	2a2a      	cmp	r2, #42	; 0x2a
 80040fe:	d013      	beq.n	8004128 <_svfiprintf_r+0xea>
 8004100:	9a07      	ldr	r2, [sp, #28]
 8004102:	4634      	mov	r4, r6
 8004104:	2000      	movs	r0, #0
 8004106:	260a      	movs	r6, #10
 8004108:	4621      	mov	r1, r4
 800410a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800410e:	3b30      	subs	r3, #48	; 0x30
 8004110:	2b09      	cmp	r3, #9
 8004112:	d94b      	bls.n	80041ac <_svfiprintf_r+0x16e>
 8004114:	b970      	cbnz	r0, 8004134 <_svfiprintf_r+0xf6>
 8004116:	e014      	b.n	8004142 <_svfiprintf_r+0x104>
 8004118:	eba0 0009 	sub.w	r0, r0, r9
 800411c:	fa0a f000 	lsl.w	r0, sl, r0
 8004120:	4318      	orrs	r0, r3
 8004122:	9004      	str	r0, [sp, #16]
 8004124:	4626      	mov	r6, r4
 8004126:	e7d5      	b.n	80040d4 <_svfiprintf_r+0x96>
 8004128:	9a03      	ldr	r2, [sp, #12]
 800412a:	1d11      	adds	r1, r2, #4
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	9103      	str	r1, [sp, #12]
 8004130:	2a00      	cmp	r2, #0
 8004132:	db01      	blt.n	8004138 <_svfiprintf_r+0xfa>
 8004134:	9207      	str	r2, [sp, #28]
 8004136:	e004      	b.n	8004142 <_svfiprintf_r+0x104>
 8004138:	4252      	negs	r2, r2
 800413a:	f043 0302 	orr.w	r3, r3, #2
 800413e:	9207      	str	r2, [sp, #28]
 8004140:	9304      	str	r3, [sp, #16]
 8004142:	7823      	ldrb	r3, [r4, #0]
 8004144:	2b2e      	cmp	r3, #46	; 0x2e
 8004146:	d10c      	bne.n	8004162 <_svfiprintf_r+0x124>
 8004148:	7863      	ldrb	r3, [r4, #1]
 800414a:	2b2a      	cmp	r3, #42	; 0x2a
 800414c:	d133      	bne.n	80041b6 <_svfiprintf_r+0x178>
 800414e:	9b03      	ldr	r3, [sp, #12]
 8004150:	1d1a      	adds	r2, r3, #4
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	9203      	str	r2, [sp, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	bfb8      	it	lt
 800415a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800415e:	3402      	adds	r4, #2
 8004160:	9305      	str	r3, [sp, #20]
 8004162:	4e2e      	ldr	r6, [pc, #184]	; (800421c <_svfiprintf_r+0x1de>)
 8004164:	7821      	ldrb	r1, [r4, #0]
 8004166:	2203      	movs	r2, #3
 8004168:	4630      	mov	r0, r6
 800416a:	f7fc f811 	bl	8000190 <memchr>
 800416e:	b138      	cbz	r0, 8004180 <_svfiprintf_r+0x142>
 8004170:	2340      	movs	r3, #64	; 0x40
 8004172:	1b80      	subs	r0, r0, r6
 8004174:	fa03 f000 	lsl.w	r0, r3, r0
 8004178:	9b04      	ldr	r3, [sp, #16]
 800417a:	4303      	orrs	r3, r0
 800417c:	3401      	adds	r4, #1
 800417e:	9304      	str	r3, [sp, #16]
 8004180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004184:	4826      	ldr	r0, [pc, #152]	; (8004220 <_svfiprintf_r+0x1e2>)
 8004186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800418a:	2206      	movs	r2, #6
 800418c:	f7fc f800 	bl	8000190 <memchr>
 8004190:	2800      	cmp	r0, #0
 8004192:	d038      	beq.n	8004206 <_svfiprintf_r+0x1c8>
 8004194:	4b23      	ldr	r3, [pc, #140]	; (8004224 <_svfiprintf_r+0x1e6>)
 8004196:	bb13      	cbnz	r3, 80041de <_svfiprintf_r+0x1a0>
 8004198:	9b03      	ldr	r3, [sp, #12]
 800419a:	3307      	adds	r3, #7
 800419c:	f023 0307 	bic.w	r3, r3, #7
 80041a0:	3308      	adds	r3, #8
 80041a2:	9303      	str	r3, [sp, #12]
 80041a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041a6:	4443      	add	r3, r8
 80041a8:	9309      	str	r3, [sp, #36]	; 0x24
 80041aa:	e76e      	b.n	800408a <_svfiprintf_r+0x4c>
 80041ac:	fb06 3202 	mla	r2, r6, r2, r3
 80041b0:	2001      	movs	r0, #1
 80041b2:	460c      	mov	r4, r1
 80041b4:	e7a8      	b.n	8004108 <_svfiprintf_r+0xca>
 80041b6:	2300      	movs	r3, #0
 80041b8:	3401      	adds	r4, #1
 80041ba:	9305      	str	r3, [sp, #20]
 80041bc:	4619      	mov	r1, r3
 80041be:	260a      	movs	r6, #10
 80041c0:	4620      	mov	r0, r4
 80041c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041c6:	3a30      	subs	r2, #48	; 0x30
 80041c8:	2a09      	cmp	r2, #9
 80041ca:	d903      	bls.n	80041d4 <_svfiprintf_r+0x196>
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0c8      	beq.n	8004162 <_svfiprintf_r+0x124>
 80041d0:	9105      	str	r1, [sp, #20]
 80041d2:	e7c6      	b.n	8004162 <_svfiprintf_r+0x124>
 80041d4:	fb06 2101 	mla	r1, r6, r1, r2
 80041d8:	2301      	movs	r3, #1
 80041da:	4604      	mov	r4, r0
 80041dc:	e7f0      	b.n	80041c0 <_svfiprintf_r+0x182>
 80041de:	ab03      	add	r3, sp, #12
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	462a      	mov	r2, r5
 80041e4:	4b10      	ldr	r3, [pc, #64]	; (8004228 <_svfiprintf_r+0x1ea>)
 80041e6:	a904      	add	r1, sp, #16
 80041e8:	4638      	mov	r0, r7
 80041ea:	f7fe f8ce 	bl	800238a <_printf_float>
 80041ee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80041f2:	4680      	mov	r8, r0
 80041f4:	d1d6      	bne.n	80041a4 <_svfiprintf_r+0x166>
 80041f6:	89ab      	ldrh	r3, [r5, #12]
 80041f8:	065b      	lsls	r3, r3, #25
 80041fa:	f53f af34 	bmi.w	8004066 <_svfiprintf_r+0x28>
 80041fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004200:	b01d      	add	sp, #116	; 0x74
 8004202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004206:	ab03      	add	r3, sp, #12
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	462a      	mov	r2, r5
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <_svfiprintf_r+0x1ea>)
 800420e:	a904      	add	r1, sp, #16
 8004210:	4638      	mov	r0, r7
 8004212:	f7fe fb5a 	bl	80028ca <_printf_i>
 8004216:	e7ea      	b.n	80041ee <_svfiprintf_r+0x1b0>
 8004218:	0801d7ed 	.word	0x0801d7ed
 800421c:	0801d7f3 	.word	0x0801d7f3
 8004220:	0801d7f7 	.word	0x0801d7f7
 8004224:	0800238b 	.word	0x0800238b
 8004228:	08003e99 	.word	0x08003e99

0800422c <_sbrk_r>:
 800422c:	b538      	push	{r3, r4, r5, lr}
 800422e:	4c06      	ldr	r4, [pc, #24]	; (8004248 <_sbrk_r+0x1c>)
 8004230:	2300      	movs	r3, #0
 8004232:	4605      	mov	r5, r0
 8004234:	4608      	mov	r0, r1
 8004236:	6023      	str	r3, [r4, #0]
 8004238:	f006 f90c 	bl	800a454 <_sbrk>
 800423c:	1c43      	adds	r3, r0, #1
 800423e:	d102      	bne.n	8004246 <_sbrk_r+0x1a>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	b103      	cbz	r3, 8004246 <_sbrk_r+0x1a>
 8004244:	602b      	str	r3, [r5, #0]
 8004246:	bd38      	pop	{r3, r4, r5, pc}
 8004248:	20001d44 	.word	0x20001d44

0800424c <_init_signal_r>:
 800424c:	b538      	push	{r3, r4, r5, lr}
 800424e:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
 8004252:	4605      	mov	r5, r0
 8004254:	b95c      	cbnz	r4, 800426e <_init_signal_r+0x22>
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	f7ff fdc8 	bl	8003dec <_malloc_r>
 800425c:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8004260:	b138      	cbz	r0, 8004272 <_init_signal_r+0x26>
 8004262:	1f03      	subs	r3, r0, #4
 8004264:	307c      	adds	r0, #124	; 0x7c
 8004266:	f843 4f04 	str.w	r4, [r3, #4]!
 800426a:	4283      	cmp	r3, r0
 800426c:	d1fb      	bne.n	8004266 <_init_signal_r+0x1a>
 800426e:	2000      	movs	r0, #0
 8004270:	bd38      	pop	{r3, r4, r5, pc}
 8004272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004276:	e7fb      	b.n	8004270 <_init_signal_r+0x24>

08004278 <_signal_r>:
 8004278:	291f      	cmp	r1, #31
 800427a:	b570      	push	{r4, r5, r6, lr}
 800427c:	4604      	mov	r4, r0
 800427e:	460d      	mov	r5, r1
 8004280:	4616      	mov	r6, r2
 8004282:	d904      	bls.n	800428e <_signal_r+0x16>
 8004284:	2316      	movs	r3, #22
 8004286:	6003      	str	r3, [r0, #0]
 8004288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800428c:	e008      	b.n	80042a0 <_signal_r+0x28>
 800428e:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 8004292:	b133      	cbz	r3, 80042a2 <_signal_r+0x2a>
 8004294:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8004298:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800429c:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 80042a0:	bd70      	pop	{r4, r5, r6, pc}
 80042a2:	f7ff ffd3 	bl	800424c <_init_signal_r>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d0f4      	beq.n	8004294 <_signal_r+0x1c>
 80042aa:	e7ed      	b.n	8004288 <_signal_r+0x10>

080042ac <_raise_r>:
 80042ac:	291f      	cmp	r1, #31
 80042ae:	b538      	push	{r3, r4, r5, lr}
 80042b0:	4604      	mov	r4, r0
 80042b2:	460d      	mov	r5, r1
 80042b4:	d904      	bls.n	80042c0 <_raise_r+0x14>
 80042b6:	2316      	movs	r3, #22
 80042b8:	6003      	str	r3, [r0, #0]
 80042ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042be:	bd38      	pop	{r3, r4, r5, pc}
 80042c0:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
 80042c4:	b112      	cbz	r2, 80042cc <_raise_r+0x20>
 80042c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80042ca:	b94b      	cbnz	r3, 80042e0 <_raise_r+0x34>
 80042cc:	4620      	mov	r0, r4
 80042ce:	f000 f86b 	bl	80043a8 <_getpid_r>
 80042d2:	462a      	mov	r2, r5
 80042d4:	4601      	mov	r1, r0
 80042d6:	4620      	mov	r0, r4
 80042d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042dc:	f000 b852 	b.w	8004384 <_kill_r>
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d00a      	beq.n	80042fa <_raise_r+0x4e>
 80042e4:	1c59      	adds	r1, r3, #1
 80042e6:	d103      	bne.n	80042f0 <_raise_r+0x44>
 80042e8:	2316      	movs	r3, #22
 80042ea:	6003      	str	r3, [r0, #0]
 80042ec:	2001      	movs	r0, #1
 80042ee:	e7e6      	b.n	80042be <_raise_r+0x12>
 80042f0:	2400      	movs	r4, #0
 80042f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80042f6:	4628      	mov	r0, r5
 80042f8:	4798      	blx	r3
 80042fa:	2000      	movs	r0, #0
 80042fc:	e7df      	b.n	80042be <_raise_r+0x12>

080042fe <__sigtramp_r>:
 80042fe:	291f      	cmp	r1, #31
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	4604      	mov	r4, r0
 8004304:	460d      	mov	r5, r1
 8004306:	d902      	bls.n	800430e <__sigtramp_r+0x10>
 8004308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800430c:	bd38      	pop	{r3, r4, r5, pc}
 800430e:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 8004312:	b133      	cbz	r3, 8004322 <__sigtramp_r+0x24>
 8004314:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8004318:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 800431c:	b933      	cbnz	r3, 800432c <__sigtramp_r+0x2e>
 800431e:	2001      	movs	r0, #1
 8004320:	e7f4      	b.n	800430c <__sigtramp_r+0xe>
 8004322:	f7ff ff93 	bl	800424c <_init_signal_r>
 8004326:	2800      	cmp	r0, #0
 8004328:	d0f4      	beq.n	8004314 <__sigtramp_r+0x16>
 800432a:	e7ed      	b.n	8004308 <__sigtramp_r+0xa>
 800432c:	1c59      	adds	r1, r3, #1
 800432e:	d008      	beq.n	8004342 <__sigtramp_r+0x44>
 8004330:	2b01      	cmp	r3, #1
 8004332:	d008      	beq.n	8004346 <__sigtramp_r+0x48>
 8004334:	2400      	movs	r4, #0
 8004336:	4628      	mov	r0, r5
 8004338:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800433c:	4798      	blx	r3
 800433e:	4620      	mov	r0, r4
 8004340:	e7e4      	b.n	800430c <__sigtramp_r+0xe>
 8004342:	2002      	movs	r0, #2
 8004344:	e7e2      	b.n	800430c <__sigtramp_r+0xe>
 8004346:	2003      	movs	r0, #3
 8004348:	e7e0      	b.n	800430c <__sigtramp_r+0xe>

0800434a <raise>:
 800434a:	4b02      	ldr	r3, [pc, #8]	; (8004354 <raise+0xa>)
 800434c:	4601      	mov	r1, r0
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	f7ff bfac 	b.w	80042ac <_raise_r>
 8004354:	20008068 	.word	0x20008068

08004358 <signal>:
 8004358:	4b02      	ldr	r3, [pc, #8]	; (8004364 <signal+0xc>)
 800435a:	460a      	mov	r2, r1
 800435c:	4601      	mov	r1, r0
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	f7ff bf8a 	b.w	8004278 <_signal_r>
 8004364:	20008068 	.word	0x20008068

08004368 <_init_signal>:
 8004368:	4b01      	ldr	r3, [pc, #4]	; (8004370 <_init_signal+0x8>)
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	f7ff bf6e 	b.w	800424c <_init_signal_r>
 8004370:	20008068 	.word	0x20008068

08004374 <__sigtramp>:
 8004374:	4b02      	ldr	r3, [pc, #8]	; (8004380 <__sigtramp+0xc>)
 8004376:	4601      	mov	r1, r0
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	f7ff bfc0 	b.w	80042fe <__sigtramp_r>
 800437e:	bf00      	nop
 8004380:	20008068 	.word	0x20008068

08004384 <_kill_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	4c07      	ldr	r4, [pc, #28]	; (80043a4 <_kill_r+0x20>)
 8004388:	2300      	movs	r3, #0
 800438a:	4605      	mov	r5, r0
 800438c:	4608      	mov	r0, r1
 800438e:	4611      	mov	r1, r2
 8004390:	6023      	str	r3, [r4, #0]
 8004392:	f011 fab2 	bl	80158fa <_kill>
 8004396:	1c43      	adds	r3, r0, #1
 8004398:	d102      	bne.n	80043a0 <_kill_r+0x1c>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	b103      	cbz	r3, 80043a0 <_kill_r+0x1c>
 800439e:	602b      	str	r3, [r5, #0]
 80043a0:	bd38      	pop	{r3, r4, r5, pc}
 80043a2:	bf00      	nop
 80043a4:	20001d44 	.word	0x20001d44

080043a8 <_getpid_r>:
 80043a8:	f011 baa9 	b.w	80158fe <_getpid>

080043ac <_write_r>:
 80043ac:	b538      	push	{r3, r4, r5, lr}
 80043ae:	4c07      	ldr	r4, [pc, #28]	; (80043cc <_write_r+0x20>)
 80043b0:	4605      	mov	r5, r0
 80043b2:	4608      	mov	r0, r1
 80043b4:	4611      	mov	r1, r2
 80043b6:	2200      	movs	r2, #0
 80043b8:	6022      	str	r2, [r4, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	f011 fa92 	bl	80158e4 <_write>
 80043c0:	1c43      	adds	r3, r0, #1
 80043c2:	d102      	bne.n	80043ca <_write_r+0x1e>
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	b103      	cbz	r3, 80043ca <_write_r+0x1e>
 80043c8:	602b      	str	r3, [r5, #0]
 80043ca:	bd38      	pop	{r3, r4, r5, pc}
 80043cc:	20001d44 	.word	0x20001d44

080043d0 <_close_r>:
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	4c06      	ldr	r4, [pc, #24]	; (80043ec <_close_r+0x1c>)
 80043d4:	2300      	movs	r3, #0
 80043d6:	4605      	mov	r5, r0
 80043d8:	4608      	mov	r0, r1
 80043da:	6023      	str	r3, [r4, #0]
 80043dc:	f011 fa86 	bl	80158ec <_close>
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	d102      	bne.n	80043ea <_close_r+0x1a>
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	b103      	cbz	r3, 80043ea <_close_r+0x1a>
 80043e8:	602b      	str	r3, [r5, #0]
 80043ea:	bd38      	pop	{r3, r4, r5, pc}
 80043ec:	20001d44 	.word	0x20001d44

080043f0 <_fstat_r>:
 80043f0:	b538      	push	{r3, r4, r5, lr}
 80043f2:	4c07      	ldr	r4, [pc, #28]	; (8004410 <_fstat_r+0x20>)
 80043f4:	2300      	movs	r3, #0
 80043f6:	4605      	mov	r5, r0
 80043f8:	4608      	mov	r0, r1
 80043fa:	4611      	mov	r1, r2
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	f011 fa80 	bl	8015902 <_fstat>
 8004402:	1c43      	adds	r3, r0, #1
 8004404:	d102      	bne.n	800440c <_fstat_r+0x1c>
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	b103      	cbz	r3, 800440c <_fstat_r+0x1c>
 800440a:	602b      	str	r3, [r5, #0]
 800440c:	bd38      	pop	{r3, r4, r5, pc}
 800440e:	bf00      	nop
 8004410:	20001d44 	.word	0x20001d44

08004414 <_isatty_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	4c06      	ldr	r4, [pc, #24]	; (8004430 <_isatty_r+0x1c>)
 8004418:	2300      	movs	r3, #0
 800441a:	4605      	mov	r5, r0
 800441c:	4608      	mov	r0, r1
 800441e:	6023      	str	r3, [r4, #0]
 8004420:	f011 fa69 	bl	80158f6 <_isatty>
 8004424:	1c43      	adds	r3, r0, #1
 8004426:	d102      	bne.n	800442e <_isatty_r+0x1a>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	b103      	cbz	r3, 800442e <_isatty_r+0x1a>
 800442c:	602b      	str	r3, [r5, #0]
 800442e:	bd38      	pop	{r3, r4, r5, pc}
 8004430:	20001d44 	.word	0x20001d44

08004434 <_lseek_r>:
 8004434:	b538      	push	{r3, r4, r5, lr}
 8004436:	4c07      	ldr	r4, [pc, #28]	; (8004454 <_lseek_r+0x20>)
 8004438:	4605      	mov	r5, r0
 800443a:	4608      	mov	r0, r1
 800443c:	4611      	mov	r1, r2
 800443e:	2200      	movs	r2, #0
 8004440:	6022      	str	r2, [r4, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	f011 fa55 	bl	80158f2 <_lseek>
 8004448:	1c43      	adds	r3, r0, #1
 800444a:	d102      	bne.n	8004452 <_lseek_r+0x1e>
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	b103      	cbz	r3, 8004452 <_lseek_r+0x1e>
 8004450:	602b      	str	r3, [r5, #0]
 8004452:	bd38      	pop	{r3, r4, r5, pc}
 8004454:	20001d44 	.word	0x20001d44

08004458 <_mbtowc_r>:
 8004458:	b410      	push	{r4}
 800445a:	4c03      	ldr	r4, [pc, #12]	; (8004468 <_mbtowc_r+0x10>)
 800445c:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8004460:	46a4      	mov	ip, r4
 8004462:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004466:	4760      	bx	ip
 8004468:	200082f8 	.word	0x200082f8

0800446c <__ascii_mbtowc>:
 800446c:	b082      	sub	sp, #8
 800446e:	b901      	cbnz	r1, 8004472 <__ascii_mbtowc+0x6>
 8004470:	a901      	add	r1, sp, #4
 8004472:	b142      	cbz	r2, 8004486 <__ascii_mbtowc+0x1a>
 8004474:	b14b      	cbz	r3, 800448a <__ascii_mbtowc+0x1e>
 8004476:	7813      	ldrb	r3, [r2, #0]
 8004478:	600b      	str	r3, [r1, #0]
 800447a:	7812      	ldrb	r2, [r2, #0]
 800447c:	1c10      	adds	r0, r2, #0
 800447e:	bf18      	it	ne
 8004480:	2001      	movne	r0, #1
 8004482:	b002      	add	sp, #8
 8004484:	4770      	bx	lr
 8004486:	4610      	mov	r0, r2
 8004488:	e7fb      	b.n	8004482 <__ascii_mbtowc+0x16>
 800448a:	f06f 0001 	mvn.w	r0, #1
 800448e:	e7f8      	b.n	8004482 <__ascii_mbtowc+0x16>

08004490 <_read_r>:
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	4c07      	ldr	r4, [pc, #28]	; (80044b0 <_read_r+0x20>)
 8004494:	4605      	mov	r5, r0
 8004496:	4608      	mov	r0, r1
 8004498:	4611      	mov	r1, r2
 800449a:	2200      	movs	r2, #0
 800449c:	6022      	str	r2, [r4, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	f011 fa1c 	bl	80158dc <_read>
 80044a4:	1c43      	adds	r3, r0, #1
 80044a6:	d102      	bne.n	80044ae <_read_r+0x1e>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	b103      	cbz	r3, 80044ae <_read_r+0x1e>
 80044ac:	602b      	str	r3, [r5, #0]
 80044ae:	bd38      	pop	{r3, r4, r5, pc}
 80044b0:	20001d44 	.word	0x20001d44

080044b4 <_wctomb_r>:
 80044b4:	b410      	push	{r4}
 80044b6:	4c03      	ldr	r4, [pc, #12]	; (80044c4 <_wctomb_r+0x10>)
 80044b8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80044bc:	46a4      	mov	ip, r4
 80044be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044c2:	4760      	bx	ip
 80044c4:	200082f8 	.word	0x200082f8

080044c8 <__ascii_wctomb>:
 80044c8:	b149      	cbz	r1, 80044de <__ascii_wctomb+0x16>
 80044ca:	2aff      	cmp	r2, #255	; 0xff
 80044cc:	bf85      	ittet	hi
 80044ce:	238a      	movhi	r3, #138	; 0x8a
 80044d0:	6003      	strhi	r3, [r0, #0]
 80044d2:	700a      	strbls	r2, [r1, #0]
 80044d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80044d8:	bf98      	it	ls
 80044da:	2001      	movls	r0, #1
 80044dc:	4770      	bx	lr
 80044de:	4608      	mov	r0, r1
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop

080044e4 <__gedf2>:
 80044e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80044e8:	e006      	b.n	80044f8 <__cmpdf2+0x4>
 80044ea:	bf00      	nop

080044ec <__ledf2>:
 80044ec:	f04f 0c01 	mov.w	ip, #1
 80044f0:	e002      	b.n	80044f8 <__cmpdf2+0x4>
 80044f2:	bf00      	nop

080044f4 <__cmpdf2>:
 80044f4:	f04f 0c01 	mov.w	ip, #1
 80044f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80044fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004500:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004504:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004508:	bf18      	it	ne
 800450a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800450e:	d01b      	beq.n	8004548 <__cmpdf2+0x54>
 8004510:	b001      	add	sp, #4
 8004512:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004516:	bf0c      	ite	eq
 8004518:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800451c:	ea91 0f03 	teqne	r1, r3
 8004520:	bf02      	ittt	eq
 8004522:	ea90 0f02 	teqeq	r0, r2
 8004526:	2000      	moveq	r0, #0
 8004528:	4770      	bxeq	lr
 800452a:	f110 0f00 	cmn.w	r0, #0
 800452e:	ea91 0f03 	teq	r1, r3
 8004532:	bf58      	it	pl
 8004534:	4299      	cmppl	r1, r3
 8004536:	bf08      	it	eq
 8004538:	4290      	cmpeq	r0, r2
 800453a:	bf2c      	ite	cs
 800453c:	17d8      	asrcs	r0, r3, #31
 800453e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004542:	f040 0001 	orr.w	r0, r0, #1
 8004546:	4770      	bx	lr
 8004548:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800454c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004550:	d102      	bne.n	8004558 <__cmpdf2+0x64>
 8004552:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004556:	d107      	bne.n	8004568 <__cmpdf2+0x74>
 8004558:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800455c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004560:	d1d6      	bne.n	8004510 <__cmpdf2+0x1c>
 8004562:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004566:	d0d3      	beq.n	8004510 <__cmpdf2+0x1c>
 8004568:	f85d 0b04 	ldr.w	r0, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop

08004570 <__aeabi_cdrcmple>:
 8004570:	4684      	mov	ip, r0
 8004572:	4610      	mov	r0, r2
 8004574:	4662      	mov	r2, ip
 8004576:	468c      	mov	ip, r1
 8004578:	4619      	mov	r1, r3
 800457a:	4663      	mov	r3, ip
 800457c:	e000      	b.n	8004580 <__aeabi_cdcmpeq>
 800457e:	bf00      	nop

08004580 <__aeabi_cdcmpeq>:
 8004580:	b501      	push	{r0, lr}
 8004582:	f7ff ffb7 	bl	80044f4 <__cmpdf2>
 8004586:	2800      	cmp	r0, #0
 8004588:	bf48      	it	mi
 800458a:	f110 0f00 	cmnmi.w	r0, #0
 800458e:	bd01      	pop	{r0, pc}

08004590 <__aeabi_dcmpeq>:
 8004590:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004594:	f7ff fff4 	bl	8004580 <__aeabi_cdcmpeq>
 8004598:	bf0c      	ite	eq
 800459a:	2001      	moveq	r0, #1
 800459c:	2000      	movne	r0, #0
 800459e:	f85d fb08 	ldr.w	pc, [sp], #8
 80045a2:	bf00      	nop

080045a4 <__aeabi_dcmplt>:
 80045a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80045a8:	f7ff ffea 	bl	8004580 <__aeabi_cdcmpeq>
 80045ac:	bf34      	ite	cc
 80045ae:	2001      	movcc	r0, #1
 80045b0:	2000      	movcs	r0, #0
 80045b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80045b6:	bf00      	nop

080045b8 <__aeabi_dcmple>:
 80045b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80045bc:	f7ff ffe0 	bl	8004580 <__aeabi_cdcmpeq>
 80045c0:	bf94      	ite	ls
 80045c2:	2001      	movls	r0, #1
 80045c4:	2000      	movhi	r0, #0
 80045c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80045ca:	bf00      	nop

080045cc <__aeabi_dcmpge>:
 80045cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80045d0:	f7ff ffce 	bl	8004570 <__aeabi_cdrcmple>
 80045d4:	bf94      	ite	ls
 80045d6:	2001      	movls	r0, #1
 80045d8:	2000      	movhi	r0, #0
 80045da:	f85d fb08 	ldr.w	pc, [sp], #8
 80045de:	bf00      	nop

080045e0 <__aeabi_dcmpgt>:
 80045e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80045e4:	f7ff ffc4 	bl	8004570 <__aeabi_cdrcmple>
 80045e8:	bf34      	ite	cc
 80045ea:	2001      	movcc	r0, #1
 80045ec:	2000      	movcs	r0, #0
 80045ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80045f2:	bf00      	nop

080045f4 <__aeabi_dcmpun>:
 80045f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80045f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80045fc:	d102      	bne.n	8004604 <__aeabi_dcmpun+0x10>
 80045fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004602:	d10a      	bne.n	800461a <__aeabi_dcmpun+0x26>
 8004604:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800460c:	d102      	bne.n	8004614 <__aeabi_dcmpun+0x20>
 800460e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004612:	d102      	bne.n	800461a <__aeabi_dcmpun+0x26>
 8004614:	f04f 0000 	mov.w	r0, #0
 8004618:	4770      	bx	lr
 800461a:	f04f 0001 	mov.w	r0, #1
 800461e:	4770      	bx	lr

08004620 <__udivmoddi4>:
 8004620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004624:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004626:	4615      	mov	r5, r2
 8004628:	4604      	mov	r4, r0
 800462a:	468e      	mov	lr, r1
 800462c:	461e      	mov	r6, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	f040 80cc 	bne.w	80047cc <__udivmoddi4+0x1ac>
 8004634:	428a      	cmp	r2, r1
 8004636:	fab2 fc82 	clz	ip, r2
 800463a:	d94c      	bls.n	80046d6 <__udivmoddi4+0xb6>
 800463c:	f1bc 0f00 	cmp.w	ip, #0
 8004640:	d00b      	beq.n	800465a <__udivmoddi4+0x3a>
 8004642:	f1cc 0820 	rsb	r8, ip, #32
 8004646:	fa01 fe0c 	lsl.w	lr, r1, ip
 800464a:	fa20 f808 	lsr.w	r8, r0, r8
 800464e:	fa02 f50c 	lsl.w	r5, r2, ip
 8004652:	ea48 0e0e 	orr.w	lr, r8, lr
 8004656:	fa00 f40c 	lsl.w	r4, r0, ip
 800465a:	ea4f 4915 	mov.w	r9, r5, lsr #16
 800465e:	fa1f f885 	uxth.w	r8, r5
 8004662:	fbbe faf9 	udiv	sl, lr, r9
 8004666:	0c21      	lsrs	r1, r4, #16
 8004668:	fb09 e31a 	mls	r3, r9, sl, lr
 800466c:	fb0a fb08 	mul.w	fp, sl, r8
 8004670:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004674:	459b      	cmp	fp, r3
 8004676:	d92a      	bls.n	80046ce <__udivmoddi4+0xae>
 8004678:	18eb      	adds	r3, r5, r3
 800467a:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 800467e:	d204      	bcs.n	800468a <__udivmoddi4+0x6a>
 8004680:	459b      	cmp	fp, r3
 8004682:	d902      	bls.n	800468a <__udivmoddi4+0x6a>
 8004684:	f1aa 0002 	sub.w	r0, sl, #2
 8004688:	442b      	add	r3, r5
 800468a:	eba3 030b 	sub.w	r3, r3, fp
 800468e:	b2a4      	uxth	r4, r4
 8004690:	fbb3 f2f9 	udiv	r2, r3, r9
 8004694:	fb09 3312 	mls	r3, r9, r2, r3
 8004698:	fb02 f808 	mul.w	r8, r2, r8
 800469c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80046a0:	45a0      	cmp	r8, r4
 80046a2:	d916      	bls.n	80046d2 <__udivmoddi4+0xb2>
 80046a4:	192c      	adds	r4, r5, r4
 80046a6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 80046aa:	d203      	bcs.n	80046b4 <__udivmoddi4+0x94>
 80046ac:	45a0      	cmp	r8, r4
 80046ae:	d901      	bls.n	80046b4 <__udivmoddi4+0x94>
 80046b0:	1e93      	subs	r3, r2, #2
 80046b2:	442c      	add	r4, r5
 80046b4:	eba4 0408 	sub.w	r4, r4, r8
 80046b8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80046bc:	b127      	cbz	r7, 80046c8 <__udivmoddi4+0xa8>
 80046be:	fa24 f40c 	lsr.w	r4, r4, ip
 80046c2:	2300      	movs	r3, #0
 80046c4:	603c      	str	r4, [r7, #0]
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	4631      	mov	r1, r6
 80046ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ce:	4650      	mov	r0, sl
 80046d0:	e7db      	b.n	800468a <__udivmoddi4+0x6a>
 80046d2:	4613      	mov	r3, r2
 80046d4:	e7ee      	b.n	80046b4 <__udivmoddi4+0x94>
 80046d6:	b902      	cbnz	r2, 80046da <__udivmoddi4+0xba>
 80046d8:	deff      	udf	#255	; 0xff
 80046da:	f1bc 0f00 	cmp.w	ip, #0
 80046de:	d12e      	bne.n	800473e <__udivmoddi4+0x11e>
 80046e0:	1a8b      	subs	r3, r1, r2
 80046e2:	2601      	movs	r6, #1
 80046e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80046e8:	b2aa      	uxth	r2, r5
 80046ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80046ee:	0c21      	lsrs	r1, r4, #16
 80046f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80046f4:	fb08 f902 	mul.w	r9, r8, r2
 80046f8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80046fc:	4599      	cmp	r9, r3
 80046fe:	d961      	bls.n	80047c4 <__udivmoddi4+0x1a4>
 8004700:	18eb      	adds	r3, r5, r3
 8004702:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8004706:	d204      	bcs.n	8004712 <__udivmoddi4+0xf2>
 8004708:	4599      	cmp	r9, r3
 800470a:	d902      	bls.n	8004712 <__udivmoddi4+0xf2>
 800470c:	f1a8 0002 	sub.w	r0, r8, #2
 8004710:	442b      	add	r3, r5
 8004712:	eba3 0309 	sub.w	r3, r3, r9
 8004716:	b2a4      	uxth	r4, r4
 8004718:	fbb3 f1fe 	udiv	r1, r3, lr
 800471c:	fb0e 3311 	mls	r3, lr, r1, r3
 8004720:	434a      	muls	r2, r1
 8004722:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004726:	42a2      	cmp	r2, r4
 8004728:	d94e      	bls.n	80047c8 <__udivmoddi4+0x1a8>
 800472a:	192c      	adds	r4, r5, r4
 800472c:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
 8004730:	d203      	bcs.n	800473a <__udivmoddi4+0x11a>
 8004732:	42a2      	cmp	r2, r4
 8004734:	d901      	bls.n	800473a <__udivmoddi4+0x11a>
 8004736:	1e8b      	subs	r3, r1, #2
 8004738:	442c      	add	r4, r5
 800473a:	1aa4      	subs	r4, r4, r2
 800473c:	e7bc      	b.n	80046b8 <__udivmoddi4+0x98>
 800473e:	f1cc 0e20 	rsb	lr, ip, #32
 8004742:	fa02 f50c 	lsl.w	r5, r2, ip
 8004746:	fa21 f90e 	lsr.w	r9, r1, lr
 800474a:	fa01 f30c 	lsl.w	r3, r1, ip
 800474e:	fa20 fe0e 	lsr.w	lr, r0, lr
 8004752:	ea4e 0303 	orr.w	r3, lr, r3
 8004756:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800475a:	fa00 f40c 	lsl.w	r4, r0, ip
 800475e:	fbb9 f1f8 	udiv	r1, r9, r8
 8004762:	fa1f fe85 	uxth.w	lr, r5
 8004766:	fb08 9211 	mls	r2, r8, r1, r9
 800476a:	0c18      	lsrs	r0, r3, #16
 800476c:	fb01 f60e 	mul.w	r6, r1, lr
 8004770:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8004774:	4296      	cmp	r6, r2
 8004776:	d921      	bls.n	80047bc <__udivmoddi4+0x19c>
 8004778:	18aa      	adds	r2, r5, r2
 800477a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800477e:	d203      	bcs.n	8004788 <__udivmoddi4+0x168>
 8004780:	4296      	cmp	r6, r2
 8004782:	d901      	bls.n	8004788 <__udivmoddi4+0x168>
 8004784:	1e88      	subs	r0, r1, #2
 8004786:	442a      	add	r2, r5
 8004788:	1b92      	subs	r2, r2, r6
 800478a:	b29b      	uxth	r3, r3
 800478c:	fbb2 f9f8 	udiv	r9, r2, r8
 8004790:	fb08 2219 	mls	r2, r8, r9, r2
 8004794:	fb09 fe0e 	mul.w	lr, r9, lr
 8004798:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800479c:	459e      	cmp	lr, r3
 800479e:	d90f      	bls.n	80047c0 <__udivmoddi4+0x1a0>
 80047a0:	18eb      	adds	r3, r5, r3
 80047a2:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 80047a6:	d204      	bcs.n	80047b2 <__udivmoddi4+0x192>
 80047a8:	459e      	cmp	lr, r3
 80047aa:	d902      	bls.n	80047b2 <__udivmoddi4+0x192>
 80047ac:	f1a9 0602 	sub.w	r6, r9, #2
 80047b0:	442b      	add	r3, r5
 80047b2:	eba3 030e 	sub.w	r3, r3, lr
 80047b6:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80047ba:	e793      	b.n	80046e4 <__udivmoddi4+0xc4>
 80047bc:	4608      	mov	r0, r1
 80047be:	e7e3      	b.n	8004788 <__udivmoddi4+0x168>
 80047c0:	464e      	mov	r6, r9
 80047c2:	e7f6      	b.n	80047b2 <__udivmoddi4+0x192>
 80047c4:	4640      	mov	r0, r8
 80047c6:	e7a4      	b.n	8004712 <__udivmoddi4+0xf2>
 80047c8:	460b      	mov	r3, r1
 80047ca:	e7b6      	b.n	800473a <__udivmoddi4+0x11a>
 80047cc:	428b      	cmp	r3, r1
 80047ce:	d905      	bls.n	80047dc <__udivmoddi4+0x1bc>
 80047d0:	b10f      	cbz	r7, 80047d6 <__udivmoddi4+0x1b6>
 80047d2:	e9c7 0100 	strd	r0, r1, [r7]
 80047d6:	2600      	movs	r6, #0
 80047d8:	4630      	mov	r0, r6
 80047da:	e775      	b.n	80046c8 <__udivmoddi4+0xa8>
 80047dc:	fab3 fc83 	clz	ip, r3
 80047e0:	f1bc 0f00 	cmp.w	ip, #0
 80047e4:	d10f      	bne.n	8004806 <__udivmoddi4+0x1e6>
 80047e6:	428b      	cmp	r3, r1
 80047e8:	d301      	bcc.n	80047ee <__udivmoddi4+0x1ce>
 80047ea:	4282      	cmp	r2, r0
 80047ec:	d809      	bhi.n	8004802 <__udivmoddi4+0x1e2>
 80047ee:	1a84      	subs	r4, r0, r2
 80047f0:	eb61 0e03 	sbc.w	lr, r1, r3
 80047f4:	2001      	movs	r0, #1
 80047f6:	2f00      	cmp	r7, #0
 80047f8:	d06a      	beq.n	80048d0 <__udivmoddi4+0x2b0>
 80047fa:	e9c7 4e00 	strd	r4, lr, [r7]
 80047fe:	2600      	movs	r6, #0
 8004800:	e762      	b.n	80046c8 <__udivmoddi4+0xa8>
 8004802:	4660      	mov	r0, ip
 8004804:	e7f7      	b.n	80047f6 <__udivmoddi4+0x1d6>
 8004806:	f1cc 0e20 	rsb	lr, ip, #32
 800480a:	fa03 f30c 	lsl.w	r3, r3, ip
 800480e:	fa22 f50e 	lsr.w	r5, r2, lr
 8004812:	fa21 f40e 	lsr.w	r4, r1, lr
 8004816:	431d      	orrs	r5, r3
 8004818:	fa01 f30c 	lsl.w	r3, r1, ip
 800481c:	fa20 f10e 	lsr.w	r1, r0, lr
 8004820:	430b      	orrs	r3, r1
 8004822:	ea4f 4a15 	mov.w	sl, r5, lsr #16
 8004826:	fa00 f60c 	lsl.w	r6, r0, ip
 800482a:	fbb4 f9fa 	udiv	r9, r4, sl
 800482e:	fa1f f885 	uxth.w	r8, r5
 8004832:	fb0a 4019 	mls	r0, sl, r9, r4
 8004836:	0c1c      	lsrs	r4, r3, #16
 8004838:	fb09 f108 	mul.w	r1, r9, r8
 800483c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8004840:	42a1      	cmp	r1, r4
 8004842:	fa02 f20c 	lsl.w	r2, r2, ip
 8004846:	d93f      	bls.n	80048c8 <__udivmoddi4+0x2a8>
 8004848:	192c      	adds	r4, r5, r4
 800484a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800484e:	d204      	bcs.n	800485a <__udivmoddi4+0x23a>
 8004850:	42a1      	cmp	r1, r4
 8004852:	d902      	bls.n	800485a <__udivmoddi4+0x23a>
 8004854:	f1a9 0002 	sub.w	r0, r9, #2
 8004858:	442c      	add	r4, r5
 800485a:	1a64      	subs	r4, r4, r1
 800485c:	b29b      	uxth	r3, r3
 800485e:	fbb4 f9fa 	udiv	r9, r4, sl
 8004862:	fb0a 4419 	mls	r4, sl, r9, r4
 8004866:	fb09 f808 	mul.w	r8, r9, r8
 800486a:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
 800486e:	4588      	cmp	r8, r1
 8004870:	d92c      	bls.n	80048cc <__udivmoddi4+0x2ac>
 8004872:	1869      	adds	r1, r5, r1
 8004874:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8004878:	d204      	bcs.n	8004884 <__udivmoddi4+0x264>
 800487a:	4588      	cmp	r8, r1
 800487c:	d902      	bls.n	8004884 <__udivmoddi4+0x264>
 800487e:	f1a9 0302 	sub.w	r3, r9, #2
 8004882:	4429      	add	r1, r5
 8004884:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004888:	eba1 0108 	sub.w	r1, r1, r8
 800488c:	fba0 8902 	umull	r8, r9, r0, r2
 8004890:	4549      	cmp	r1, r9
 8004892:	46c2      	mov	sl, r8
 8004894:	464c      	mov	r4, r9
 8004896:	d302      	bcc.n	800489e <__udivmoddi4+0x27e>
 8004898:	d106      	bne.n	80048a8 <__udivmoddi4+0x288>
 800489a:	4546      	cmp	r6, r8
 800489c:	d204      	bcs.n	80048a8 <__udivmoddi4+0x288>
 800489e:	ebb8 0a02 	subs.w	sl, r8, r2
 80048a2:	eb69 0405 	sbc.w	r4, r9, r5
 80048a6:	3801      	subs	r0, #1
 80048a8:	b197      	cbz	r7, 80048d0 <__udivmoddi4+0x2b0>
 80048aa:	ebb6 030a 	subs.w	r3, r6, sl
 80048ae:	eb61 0604 	sbc.w	r6, r1, r4
 80048b2:	fa06 fe0e 	lsl.w	lr, r6, lr
 80048b6:	fa23 f30c 	lsr.w	r3, r3, ip
 80048ba:	ea4e 0303 	orr.w	r3, lr, r3
 80048be:	fa26 f60c 	lsr.w	r6, r6, ip
 80048c2:	e9c7 3600 	strd	r3, r6, [r7]
 80048c6:	e79a      	b.n	80047fe <__udivmoddi4+0x1de>
 80048c8:	4648      	mov	r0, r9
 80048ca:	e7c6      	b.n	800485a <__udivmoddi4+0x23a>
 80048cc:	464b      	mov	r3, r9
 80048ce:	e7d9      	b.n	8004884 <__udivmoddi4+0x264>
 80048d0:	463e      	mov	r6, r7
 80048d2:	e6f9      	b.n	80046c8 <__udivmoddi4+0xa8>

080048d4 <fabs>:
 80048d4:	ec51 0b10 	vmov	r0, r1, d0
 80048d8:	ee10 2a10 	vmov	r2, s0
 80048dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80048e0:	ec43 2b10 	vmov	d0, r2, r3
 80048e4:	4770      	bx	lr

080048e6 <matherr>:
 80048e6:	2000      	movs	r0, #0
 80048e8:	4770      	bx	lr

080048ea <abs>:
 80048ea:	2800      	cmp	r0, #0
 80048ec:	bfb8      	it	lt
 80048ee:	4240      	neglt	r0, r0
 80048f0:	4770      	bx	lr

080048f2 <atoi>:
 80048f2:	220a      	movs	r2, #10
 80048f4:	2100      	movs	r1, #0
 80048f6:	f7fe ba01 	b.w	8002cfc <strtol>

080048fa <_atoi_r>:
 80048fa:	230a      	movs	r3, #10
 80048fc:	2200      	movs	r2, #0
 80048fe:	f7fe b9f3 	b.w	8002ce8 <_strtol_r>

08004902 <memcmp>:
 8004902:	b530      	push	{r4, r5, lr}
 8004904:	3901      	subs	r1, #1
 8004906:	2400      	movs	r4, #0
 8004908:	42a2      	cmp	r2, r4
 800490a:	d101      	bne.n	8004910 <memcmp+0xe>
 800490c:	2000      	movs	r0, #0
 800490e:	e005      	b.n	800491c <memcmp+0x1a>
 8004910:	5d03      	ldrb	r3, [r0, r4]
 8004912:	3401      	adds	r4, #1
 8004914:	5d0d      	ldrb	r5, [r1, r4]
 8004916:	42ab      	cmp	r3, r5
 8004918:	d0f6      	beq.n	8004908 <memcmp+0x6>
 800491a:	1b58      	subs	r0, r3, r5
 800491c:	bd30      	pop	{r4, r5, pc}

0800491e <memcpy>:
 800491e:	440a      	add	r2, r1
 8004920:	4291      	cmp	r1, r2
 8004922:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004926:	d100      	bne.n	800492a <memcpy+0xc>
 8004928:	4770      	bx	lr
 800492a:	b510      	push	{r4, lr}
 800492c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004930:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004934:	4291      	cmp	r1, r2
 8004936:	d1f9      	bne.n	800492c <memcpy+0xe>
 8004938:	bd10      	pop	{r4, pc}

0800493a <memmove>:
 800493a:	4288      	cmp	r0, r1
 800493c:	b510      	push	{r4, lr}
 800493e:	eb01 0302 	add.w	r3, r1, r2
 8004942:	d902      	bls.n	800494a <memmove+0x10>
 8004944:	4283      	cmp	r3, r0
 8004946:	461c      	mov	r4, r3
 8004948:	d807      	bhi.n	800495a <memmove+0x20>
 800494a:	1e42      	subs	r2, r0, #1
 800494c:	4299      	cmp	r1, r3
 800494e:	d008      	beq.n	8004962 <memmove+0x28>
 8004950:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004954:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004958:	e7f8      	b.n	800494c <memmove+0x12>
 800495a:	1883      	adds	r3, r0, r2
 800495c:	1a9a      	subs	r2, r3, r2
 800495e:	429a      	cmp	r2, r3
 8004960:	d100      	bne.n	8004964 <memmove+0x2a>
 8004962:	bd10      	pop	{r4, pc}
 8004964:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 8004968:	f803 1d01 	strb.w	r1, [r3, #-1]!
 800496c:	e7f7      	b.n	800495e <memmove+0x24>

0800496e <memset>:
 800496e:	4402      	add	r2, r0
 8004970:	4603      	mov	r3, r0
 8004972:	4293      	cmp	r3, r2
 8004974:	d100      	bne.n	8004978 <memset+0xa>
 8004976:	4770      	bx	lr
 8004978:	f803 1b01 	strb.w	r1, [r3], #1
 800497c:	e7f9      	b.n	8004972 <memset+0x4>

0800497e <__sprintf_chk>:
 800497e:	b408      	push	{r3}
 8004980:	b517      	push	{r0, r1, r2, r4, lr}
 8004982:	ab05      	add	r3, sp, #20
 8004984:	1e14      	subs	r4, r2, #0
 8004986:	f853 1b04 	ldr.w	r1, [r3], #4
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	da07      	bge.n	800499e <__sprintf_chk+0x20>
 800498e:	461a      	mov	r2, r3
 8004990:	f7fe fa0c 	bl	8002dac <vsiprintf>
 8004994:	b003      	add	sp, #12
 8004996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800499a:	b001      	add	sp, #4
 800499c:	4770      	bx	lr
 800499e:	460a      	mov	r2, r1
 80049a0:	4621      	mov	r1, r4
 80049a2:	f7fe f9df 	bl	8002d64 <vsniprintf>
 80049a6:	2800      	cmp	r0, #0
 80049a8:	dbf4      	blt.n	8004994 <__sprintf_chk+0x16>
 80049aa:	42a0      	cmp	r0, r4
 80049ac:	d3f2      	bcc.n	8004994 <__sprintf_chk+0x16>
 80049ae:	f7fe faa5 	bl	8002efc <__chk_fail>

080049b2 <strchr>:
 80049b2:	b2c9      	uxtb	r1, r1
 80049b4:	4603      	mov	r3, r0
 80049b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049ba:	b11a      	cbz	r2, 80049c4 <strchr+0x12>
 80049bc:	428a      	cmp	r2, r1
 80049be:	d1f9      	bne.n	80049b4 <strchr+0x2>
 80049c0:	4618      	mov	r0, r3
 80049c2:	4770      	bx	lr
 80049c4:	2900      	cmp	r1, #0
 80049c6:	bf18      	it	ne
 80049c8:	2300      	movne	r3, #0
 80049ca:	e7f9      	b.n	80049c0 <strchr+0xe>

080049cc <strcmp>:
 80049cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049d4:	2a01      	cmp	r2, #1
 80049d6:	bf28      	it	cs
 80049d8:	429a      	cmpcs	r2, r3
 80049da:	d0f7      	beq.n	80049cc <strcmp>
 80049dc:	1ad0      	subs	r0, r2, r3
 80049de:	4770      	bx	lr

080049e0 <strcpy>:
 80049e0:	4603      	mov	r3, r0
 80049e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049e6:	f803 2b01 	strb.w	r2, [r3], #1
 80049ea:	2a00      	cmp	r2, #0
 80049ec:	d1f9      	bne.n	80049e2 <strcpy+0x2>
 80049ee:	4770      	bx	lr

080049f0 <strlen>:
 80049f0:	4603      	mov	r3, r0
 80049f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049f6:	2a00      	cmp	r2, #0
 80049f8:	d1fb      	bne.n	80049f2 <strlen+0x2>
 80049fa:	1a18      	subs	r0, r3, r0
 80049fc:	3801      	subs	r0, #1
 80049fe:	4770      	bx	lr

08004a00 <strncmp>:
 8004a00:	b510      	push	{r4, lr}
 8004a02:	b16a      	cbz	r2, 8004a20 <strncmp+0x20>
 8004a04:	3901      	subs	r1, #1
 8004a06:	1884      	adds	r4, r0, r2
 8004a08:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004a0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d103      	bne.n	8004a1c <strncmp+0x1c>
 8004a14:	42a0      	cmp	r0, r4
 8004a16:	d001      	beq.n	8004a1c <strncmp+0x1c>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f5      	bne.n	8004a08 <strncmp+0x8>
 8004a1c:	1a98      	subs	r0, r3, r2
 8004a1e:	bd10      	pop	{r4, pc}
 8004a20:	4610      	mov	r0, r2
 8004a22:	e7fc      	b.n	8004a1e <strncmp+0x1e>

08004a24 <strncpy>:
 8004a24:	b510      	push	{r4, lr}
 8004a26:	3901      	subs	r1, #1
 8004a28:	4603      	mov	r3, r0
 8004a2a:	b132      	cbz	r2, 8004a3a <strncpy+0x16>
 8004a2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004a30:	f803 4b01 	strb.w	r4, [r3], #1
 8004a34:	3a01      	subs	r2, #1
 8004a36:	2c00      	cmp	r4, #0
 8004a38:	d1f7      	bne.n	8004a2a <strncpy+0x6>
 8004a3a:	441a      	add	r2, r3
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d100      	bne.n	8004a44 <strncpy+0x20>
 8004a42:	bd10      	pop	{r4, pc}
 8004a44:	f803 1b01 	strb.w	r1, [r3], #1
 8004a48:	e7f9      	b.n	8004a3e <strncpy+0x1a>

08004a4a <strrchr>:
 8004a4a:	b538      	push	{r3, r4, r5, lr}
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	460d      	mov	r5, r1
 8004a50:	b969      	cbnz	r1, 8004a6e <strrchr+0x24>
 8004a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a56:	f7ff bfac 	b.w	80049b2 <strchr>
 8004a5a:	1c43      	adds	r3, r0, #1
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	4629      	mov	r1, r5
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff ffa6 	bl	80049b2 <strchr>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d1f7      	bne.n	8004a5a <strrchr+0x10>
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	bd38      	pop	{r3, r4, r5, pc}
 8004a6e:	2400      	movs	r4, #0
 8004a70:	e7f5      	b.n	8004a5e <strrchr+0x14>

08004a72 <strstr>:
 8004a72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a74:	780c      	ldrb	r4, [r1, #0]
 8004a76:	b164      	cbz	r4, 8004a92 <strstr+0x20>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	781a      	ldrb	r2, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	1c5e      	adds	r6, r3, #1
 8004a80:	b90a      	cbnz	r2, 8004a86 <strstr+0x14>
 8004a82:	4610      	mov	r0, r2
 8004a84:	e005      	b.n	8004a92 <strstr+0x20>
 8004a86:	4294      	cmp	r4, r2
 8004a88:	d108      	bne.n	8004a9c <strstr+0x2a>
 8004a8a:	460d      	mov	r5, r1
 8004a8c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004a90:	b902      	cbnz	r2, 8004a94 <strstr+0x22>
 8004a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a94:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004a98:	4297      	cmp	r7, r2
 8004a9a:	d0f7      	beq.n	8004a8c <strstr+0x1a>
 8004a9c:	4633      	mov	r3, r6
 8004a9e:	e7ec      	b.n	8004a7a <strstr+0x8>

08004aa0 <abort>:
 8004aa0:	b508      	push	{r3, lr}
 8004aa2:	2006      	movs	r0, #6
 8004aa4:	f7ff fc51 	bl	800434a <raise>
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f005 fccb 	bl	800a444 <_exit>

08004aae <_fwalk>:
 8004aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab2:	4688      	mov	r8, r1
 8004ab4:	f500 74a6 	add.w	r4, r0, #332	; 0x14c
 8004ab8:	2600      	movs	r6, #0
 8004aba:	b914      	cbnz	r4, 8004ac2 <_fwalk+0x14>
 8004abc:	4630      	mov	r0, r6
 8004abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ac2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004ac6:	3f01      	subs	r7, #1
 8004ac8:	d501      	bpl.n	8004ace <_fwalk+0x20>
 8004aca:	6824      	ldr	r4, [r4, #0]
 8004acc:	e7f5      	b.n	8004aba <_fwalk+0xc>
 8004ace:	89ab      	ldrh	r3, [r5, #12]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d906      	bls.n	8004ae2 <_fwalk+0x34>
 8004ad4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	d002      	beq.n	8004ae2 <_fwalk+0x34>
 8004adc:	4628      	mov	r0, r5
 8004ade:	47c0      	blx	r8
 8004ae0:	4306      	orrs	r6, r0
 8004ae2:	3564      	adds	r5, #100	; 0x64
 8004ae4:	e7ef      	b.n	8004ac6 <_fwalk+0x18>

08004ae6 <_fwalk_reent>:
 8004ae6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aea:	4680      	mov	r8, r0
 8004aec:	4689      	mov	r9, r1
 8004aee:	f500 74a6 	add.w	r4, r0, #332	; 0x14c
 8004af2:	2600      	movs	r6, #0
 8004af4:	b914      	cbnz	r4, 8004afc <_fwalk_reent+0x16>
 8004af6:	4630      	mov	r0, r6
 8004af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004afc:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004b00:	3f01      	subs	r7, #1
 8004b02:	d501      	bpl.n	8004b08 <_fwalk_reent+0x22>
 8004b04:	6824      	ldr	r4, [r4, #0]
 8004b06:	e7f5      	b.n	8004af4 <_fwalk_reent+0xe>
 8004b08:	89ab      	ldrh	r3, [r5, #12]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d907      	bls.n	8004b1e <_fwalk_reent+0x38>
 8004b0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b12:	3301      	adds	r3, #1
 8004b14:	d003      	beq.n	8004b1e <_fwalk_reent+0x38>
 8004b16:	4629      	mov	r1, r5
 8004b18:	4640      	mov	r0, r8
 8004b1a:	47c8      	blx	r9
 8004b1c:	4306      	orrs	r6, r0
 8004b1e:	3564      	adds	r5, #100	; 0x64
 8004b20:	e7ee      	b.n	8004b00 <_fwalk_reent+0x1a>

08004b22 <_calloc_r>:
 8004b22:	b538      	push	{r3, r4, r5, lr}
 8004b24:	fb02 f401 	mul.w	r4, r2, r1
 8004b28:	4621      	mov	r1, r4
 8004b2a:	f7ff f95f 	bl	8003dec <_malloc_r>
 8004b2e:	4605      	mov	r5, r0
 8004b30:	b118      	cbz	r0, 8004b3a <_calloc_r+0x18>
 8004b32:	4622      	mov	r2, r4
 8004b34:	2100      	movs	r1, #0
 8004b36:	f7ff ff1a 	bl	800496e <memset>
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	bd38      	pop	{r3, r4, r5, pc}

08004b3e <_realloc_r>:
 8004b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b40:	4607      	mov	r7, r0
 8004b42:	4614      	mov	r4, r2
 8004b44:	460e      	mov	r6, r1
 8004b46:	b921      	cbnz	r1, 8004b52 <_realloc_r+0x14>
 8004b48:	4611      	mov	r1, r2
 8004b4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b4e:	f7ff b94d 	b.w	8003dec <_malloc_r>
 8004b52:	b922      	cbnz	r2, 8004b5e <_realloc_r+0x20>
 8004b54:	f7ff f8fc 	bl	8003d50 <_free_r>
 8004b58:	4625      	mov	r5, r4
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b5e:	f000 f85b 	bl	8004c18 <_malloc_usable_size_r>
 8004b62:	42a0      	cmp	r0, r4
 8004b64:	d20f      	bcs.n	8004b86 <_realloc_r+0x48>
 8004b66:	4621      	mov	r1, r4
 8004b68:	4638      	mov	r0, r7
 8004b6a:	f7ff f93f 	bl	8003dec <_malloc_r>
 8004b6e:	4605      	mov	r5, r0
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d0f2      	beq.n	8004b5a <_realloc_r+0x1c>
 8004b74:	4631      	mov	r1, r6
 8004b76:	4622      	mov	r2, r4
 8004b78:	f7ff fed1 	bl	800491e <memcpy>
 8004b7c:	4631      	mov	r1, r6
 8004b7e:	4638      	mov	r0, r7
 8004b80:	f7ff f8e6 	bl	8003d50 <_free_r>
 8004b84:	e7e9      	b.n	8004b5a <_realloc_r+0x1c>
 8004b86:	4635      	mov	r5, r6
 8004b88:	e7e7      	b.n	8004b5a <_realloc_r+0x1c>

08004b8a <__sread>:
 8004b8a:	b510      	push	{r4, lr}
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b92:	f7ff fc7d 	bl	8004490 <_read_r>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	bfab      	itete	ge
 8004b9a:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8004b9c:	89a3      	ldrhlt	r3, [r4, #12]
 8004b9e:	181b      	addge	r3, r3, r0
 8004ba0:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ba4:	bfac      	ite	ge
 8004ba6:	6523      	strge	r3, [r4, #80]	; 0x50
 8004ba8:	81a3      	strhlt	r3, [r4, #12]
 8004baa:	bd10      	pop	{r4, pc}

08004bac <__seofread>:
 8004bac:	2000      	movs	r0, #0
 8004bae:	4770      	bx	lr

08004bb0 <__swrite>:
 8004bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb4:	461f      	mov	r7, r3
 8004bb6:	898b      	ldrh	r3, [r1, #12]
 8004bb8:	05db      	lsls	r3, r3, #23
 8004bba:	4605      	mov	r5, r0
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	4616      	mov	r6, r2
 8004bc0:	d505      	bpl.n	8004bce <__swrite+0x1e>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bca:	f7ff fc33 	bl	8004434 <_lseek_r>
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bd8:	81a3      	strh	r3, [r4, #12]
 8004bda:	4632      	mov	r2, r6
 8004bdc:	463b      	mov	r3, r7
 8004bde:	4628      	mov	r0, r5
 8004be0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004be4:	f7ff bbe2 	b.w	80043ac <_write_r>

08004be8 <__sseek>:
 8004be8:	b510      	push	{r4, lr}
 8004bea:	460c      	mov	r4, r1
 8004bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf0:	f7ff fc20 	bl	8004434 <_lseek_r>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	89a3      	ldrh	r3, [r4, #12]
 8004bf8:	bf15      	itete	ne
 8004bfa:	6520      	strne	r0, [r4, #80]	; 0x50
 8004bfc:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c00:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c04:	81a3      	strheq	r3, [r4, #12]
 8004c06:	bf18      	it	ne
 8004c08:	81a3      	strhne	r3, [r4, #12]
 8004c0a:	bd10      	pop	{r4, pc}

08004c0c <__sclose>:
 8004c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c10:	f7ff bbde 	b.w	80043d0 <_close_r>

08004c14 <__malloc_lock>:
 8004c14:	4770      	bx	lr

08004c16 <__malloc_unlock>:
 8004c16:	4770      	bx	lr

08004c18 <_malloc_usable_size_r>:
 8004c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c1c:	1f18      	subs	r0, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bfbc      	itt	lt
 8004c22:	580b      	ldrlt	r3, [r1, r0]
 8004c24:	18c0      	addlt	r0, r0, r3
 8004c26:	4770      	bx	lr

08004c28 <main>:
		u8_t Coapxandy[30];
		u8_t CoapBMEPress[30];
		u8_t CoapBMEHum[30];
		unsigned char Rx_Buffer[40];//35 36 check
void main(void)
{
 8004c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2c:	ed2d 8b08 	vpush	{d8-d11}
    struct sensor_value tem;
    struct sensor_value pre;
	struct sensor_value gas;
    struct sensor_value HUM;

    unsigned char send[8] = {0x01,0x03,0x00,0x48,0x00,0x08,0xC4,0x1A};
 8004c30:	4bac      	ldr	r3, [pc, #688]	; (8004ee4 <main+0x2bc>)
 8004c32:	4aad      	ldr	r2, [pc, #692]	; (8004ee8 <main+0x2c0>)


	led3 = device_get_binding(LED_PORT3);
 8004c34:	48ad      	ldr	r0, [pc, #692]	; (8004eec <main+0x2c4>)
{
 8004c36:	b0a3      	sub	sp, #140	; 0x8c
    unsigned char send[8] = {0x01,0x03,0x00,0x48,0x00,0x08,0xC4,0x1A};
 8004c38:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
	led3 = device_get_binding(LED_PORT3);
 8004c3c:	f00e fa01 	bl	8013042 <device_get_binding>
 8004c40:	4683      	mov	fp, r0
	led4 = device_get_binding(LED_PORT4);
 8004c42:	48aa      	ldr	r0, [pc, #680]	; (8004eec <main+0x2c4>)
 8004c44:	f00e f9fd 	bl	8013042 <device_get_binding>
 8004c48:	4682      	mov	sl, r0
	led5 = device_get_binding(LED_PORT5);
 8004c4a:	48a8      	ldr	r0, [pc, #672]	; (8004eec <main+0x2c4>)
 8004c4c:	f00e f9f9 	bl	8013042 <device_get_binding>
 8004c50:	4681      	mov	r9, r0
	led6 = device_get_binding(LED_PORT6);
 8004c52:	48a6      	ldr	r0, [pc, #664]	; (8004eec <main+0x2c4>)
 8004c54:	f00e f9f5 	bl	8013042 <device_get_binding>
 8004c58:	4680      	mov	r8, r0
	led7 = device_get_binding(LED_PORT7);
 8004c5a:	48a4      	ldr	r0, [pc, #656]	; (8004eec <main+0x2c4>)
 8004c5c:	f00e f9f1 	bl	8013042 <device_get_binding>
 8004c60:	4607      	mov	r7, r0
	led8 = device_get_binding(LED_PORT8);
 8004c62:	48a2      	ldr	r0, [pc, #648]	; (8004eec <main+0x2c4>)
 8004c64:	f00e f9ed 	bl	8013042 <device_get_binding>
 8004c68:	4606      	mov	r6, r0
	led9 = device_get_binding(LED_PORT9);
 8004c6a:	48a0      	ldr	r0, [pc, #640]	; (8004eec <main+0x2c4>)
 8004c6c:	f00e f9e9 	bl	8013042 <device_get_binding>
 8004c70:	4605      	mov	r5, r0
	led10 = device_get_binding(LED_PORT10);
 8004c72:	489e      	ldr	r0, [pc, #632]	; (8004eec <main+0x2c4>)
 8004c74:	f00e f9e5 	bl	8013042 <device_get_binding>
	gpio_pin_configure(led3, LED3, GPIO_DIR_OUT);
 8004c78:	2109      	movs	r1, #9
	led10 = device_get_binding(LED_PORT10);
 8004c7a:	4604      	mov	r4, r0
	gpio_pin_configure(led3, LED3, GPIO_DIR_OUT);
 8004c7c:	4658      	mov	r0, fp
 8004c7e:	f00e f9ec 	bl	801305a <gpio_pin_configure.constprop.2>
	gpio_pin_configure(led4, LED4, GPIO_DIR_OUT);
 8004c82:	2108      	movs	r1, #8
 8004c84:	4650      	mov	r0, sl
 8004c86:	f00e f9e8 	bl	801305a <gpio_pin_configure.constprop.2>
	gpio_pin_configure(led5, LED5, GPIO_DIR_OUT);
 8004c8a:	210a      	movs	r1, #10
 8004c8c:	4648      	mov	r0, r9
 8004c8e:	f00e f9e4 	bl	801305a <gpio_pin_configure.constprop.2>
	gpio_pin_configure(led6, LED6, GPIO_DIR_OUT);
 8004c92:	210f      	movs	r1, #15
 8004c94:	4640      	mov	r0, r8
 8004c96:	f00e f9e0 	bl	801305a <gpio_pin_configure.constprop.2>
	gpio_pin_configure(led7, LED7, GPIO_DIR_OUT);
 8004c9a:	210b      	movs	r1, #11
 8004c9c:	4638      	mov	r0, r7
 8004c9e:	f00e f9dc 	bl	801305a <gpio_pin_configure.constprop.2>
	gpio_pin_configure(led8, LED8, GPIO_DIR_OUT);
 8004ca2:	210e      	movs	r1, #14
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	f00e f9d8 	bl	801305a <gpio_pin_configure.constprop.2>
	gpio_pin_configure(led9, LED9, GPIO_DIR_OUT);
 8004caa:	210c      	movs	r1, #12
 8004cac:	4628      	mov	r0, r5
 8004cae:	f00e f9d4 	bl	801305a <gpio_pin_configure.constprop.2>
	gpio_pin_configure(led10, LED10, GPIO_DIR_OUT);
 8004cb2:	210d      	movs	r1, #13
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f00e f9d0 	bl	801305a <gpio_pin_configure.constprop.2>
 8004cba:	2303      	movs	r3, #3

for(int i = 0;i<3;i++)
{
	gpio_pin_write(led3, LED3, ledon);
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	2109      	movs	r1, #9
 8004cc0:	4658      	mov	r0, fp
 8004cc2:	9302      	str	r3, [sp, #8]
 8004cc4:	f00e f9bf 	bl	8013046 <gpio_pin_write>
	gpio_pin_write(led4, LED4, ledon);
 8004cc8:	2201      	movs	r2, #1
 8004cca:	2108      	movs	r1, #8
 8004ccc:	4650      	mov	r0, sl
 8004cce:	f00e f9ba 	bl	8013046 <gpio_pin_write>
	gpio_pin_write(led5, LED5, ledon);
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	210a      	movs	r1, #10
 8004cd6:	4648      	mov	r0, r9
 8004cd8:	f00e f9b5 	bl	8013046 <gpio_pin_write>
	gpio_pin_write(led6, LED6, ledon);
 8004cdc:	2201      	movs	r2, #1
 8004cde:	210f      	movs	r1, #15
 8004ce0:	4640      	mov	r0, r8
 8004ce2:	f00e f9b0 	bl	8013046 <gpio_pin_write>
	gpio_pin_write(led7, LED7, ledon);
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	210b      	movs	r1, #11
 8004cea:	4638      	mov	r0, r7
 8004cec:	f00e f9ab 	bl	8013046 <gpio_pin_write>
	gpio_pin_write(led8, LED8, ledon);
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	210e      	movs	r1, #14
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	f00e f9a6 	bl	8013046 <gpio_pin_write>
	gpio_pin_write(led9, LED9, ledon);
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	210c      	movs	r1, #12
 8004cfe:	4628      	mov	r0, r5
 8004d00:	f00e f9a1 	bl	8013046 <gpio_pin_write>
	gpio_pin_write(led10, LED10, ledon);
 8004d04:	2201      	movs	r2, #1
 8004d06:	210d      	movs	r1, #13
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f00e f99c 	bl	8013046 <gpio_pin_write>
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
 8004d0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d12:	f00d fdbb 	bl	801288c <z_impl_k_sleep>
	k_sleep(500);
	gpio_pin_write(led3, LED3, ledoff);
 8004d16:	2200      	movs	r2, #0
 8004d18:	2109      	movs	r1, #9
 8004d1a:	4658      	mov	r0, fp
 8004d1c:	f00e f993 	bl	8013046 <gpio_pin_write>
	gpio_pin_write(led4, LED4, ledoff);
 8004d20:	2200      	movs	r2, #0
 8004d22:	2108      	movs	r1, #8
 8004d24:	4650      	mov	r0, sl
 8004d26:	f00e f98e 	bl	8013046 <gpio_pin_write>
	gpio_pin_write(led5, LED5, ledoff);
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	210a      	movs	r1, #10
 8004d2e:	4648      	mov	r0, r9
 8004d30:	f00e f989 	bl	8013046 <gpio_pin_write>
	gpio_pin_write(led6, LED6, ledoff);
 8004d34:	2200      	movs	r2, #0
 8004d36:	210f      	movs	r1, #15
 8004d38:	4640      	mov	r0, r8
 8004d3a:	f00e f984 	bl	8013046 <gpio_pin_write>
	gpio_pin_write(led7, LED7, ledoff);
 8004d3e:	2200      	movs	r2, #0
 8004d40:	210b      	movs	r1, #11
 8004d42:	4638      	mov	r0, r7
 8004d44:	f00e f97f 	bl	8013046 <gpio_pin_write>
	gpio_pin_write(led8, LED8, ledoff);
 8004d48:	2200      	movs	r2, #0
 8004d4a:	210e      	movs	r1, #14
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	f00e f97a 	bl	8013046 <gpio_pin_write>
	gpio_pin_write(led9, LED9, ledoff);
 8004d52:	2200      	movs	r2, #0
 8004d54:	210c      	movs	r1, #12
 8004d56:	4628      	mov	r0, r5
 8004d58:	f00e f975 	bl	8013046 <gpio_pin_write>
	gpio_pin_write(led10, LED10, ledoff);
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	210d      	movs	r1, #13
 8004d60:	4620      	mov	r0, r4
 8004d62:	f00e f970 	bl	8013046 <gpio_pin_write>
 8004d66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d6a:	f00d fd8f 	bl	801288c <z_impl_k_sleep>
for(int i = 0;i<3;i++)
 8004d6e:	9b02      	ldr	r3, [sp, #8]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	d1a3      	bne.n	8004cbc <main+0x94>
	k_sleep(500);
	
}

    uart_dev = device_get_binding("UART_2");
 8004d74:	485e      	ldr	r0, [pc, #376]	; (8004ef0 <main+0x2c8>)
 8004d76:	f00e f964 	bl	8013042 <device_get_binding>
 8004d7a:	4605      	mov	r5, r0
    bme = device_get_binding("BME680_test");
 8004d7c:	485d      	ldr	r0, [pc, #372]	; (8004ef4 <main+0x2cc>)
 8004d7e:	f00e f960 	bl	8013042 <device_get_binding>
 8004d82:	4604      	mov	r4, r0
	devacc = device_get_binding(DT_INST_0_ST_LIS2DH_LABEL);
 8004d84:	485c      	ldr	r0, [pc, #368]	; (8004ef8 <main+0x2d0>)
 8004d86:	f00e f95c 	bl	8013042 <device_get_binding>
	if(devacc != NULL)
 8004d8a:	4683      	mov	fp, r0
 8004d8c:	b128      	cbz	r0, 8004d9a <main+0x172>
		printk("device is %p, name is %s\n", devacc, devacc->config->name);
 8004d8e:	6803      	ldr	r3, [r0, #0]
 8004d90:	4601      	mov	r1, r0
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	4859      	ldr	r0, [pc, #356]	; (8004efc <main+0x2d4>)
 8004d96:	f00e fd13 	bl	80137c0 <printk>
	if(uart_dev != NULL)
 8004d9a:	b12d      	cbz	r5, 8004da8 <main+0x180>
		printk("device is %p, name is %s\n", uart_dev, uart_dev->config->name);
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	4857      	ldr	r0, [pc, #348]	; (8004efc <main+0x2d4>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4629      	mov	r1, r5
 8004da4:	f00e fd0c 	bl	80137c0 <printk>
	if(bme != NULL)
 8004da8:	b12c      	cbz	r4, 8004db6 <main+0x18e>
		printk("device is %p, name is %s\n", bme, bme->config->name);
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	4853      	ldr	r0, [pc, #332]	; (8004efc <main+0x2d4>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	4621      	mov	r1, r4
 8004db2:	f00e fd05 	bl	80137c0 <printk>
	addr6.sin6_family = AF_INET6;
 8004db6:	4b52      	ldr	r3, [pc, #328]	; (8004f00 <main+0x2d8>)
 8004db8:	931a      	str	r3, [sp, #104]	; 0x68
	addr6.sin6_scope_id = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, K_SYSCALL_ZSOCK_INET_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_inet_pton(family, src, dst);
 8004dc0:	4950      	ldr	r1, [pc, #320]	; (8004f04 <main+0x2dc>)
 8004dc2:	aa1b      	add	r2, sp, #108	; 0x6c
 8004dc4:	2002      	movs	r0, #2
 8004dc6:	f010 fb79 	bl	80154bc <z_impl_zsock_inet_pton>
	sock = socket(addr6.sin6_family, SOCK_DGRAM, IPPROTO_UDP);
 8004dca:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
	return z_impl_zsock_socket(family, type, proto);
 8004dce:	2211      	movs	r2, #17
 8004dd0:	2102      	movs	r1, #2
 8004dd2:	f003 fd31 	bl	8008838 <z_impl_zsock_socket>
 8004dd6:	4f4c      	ldr	r7, [pc, #304]	; (8004f08 <main+0x2e0>)
	if (sock < 0) {
 8004dd8:	2800      	cmp	r0, #0
	sock = socket(addr6.sin6_family, SOCK_DGRAM, IPPROTO_UDP);
 8004dda:	6038      	str	r0, [r7, #0]
	if (sock < 0) {
 8004ddc:	da0f      	bge.n	8004dfe <main+0x1d6>
		printf("Failed to create UDP socket %d", errno);
 8004dde:	f010 fd95 	bl	801590c <__errno>
 8004de2:	6801      	ldr	r1, [r0, #0]
 8004de4:	4849      	ldr	r0, [pc, #292]	; (8004f0c <main+0x2e4>)
		printf("Cannot connect to UDP remote : %d", errno);
 8004de6:	f7fd fe93 	bl	8002b10 <iprintf>
		return -errno;
 8004dea:	f010 fd8f 	bl	801590c <__errno>
 8004dee:	6803      	ldr	r3, [r0, #0]
 8004df0:	425b      	negs	r3, r3
	// {
	// 	printf("\nsock OK sock OK sock OK sock OK\n");
	// }
////////////////////////coapintit
    ret = start_coap_client();
    if(ret < 0){
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	da1a      	bge.n	8004e2c <main+0x204>
        printf("coap_init failed\n");
 8004df6:	4846      	ldr	r0, [pc, #280]	; (8004f10 <main+0x2e8>)
 8004df8:	f7fd fe8a 	bl	8002b10 <iprintf>
 8004dfc:	e016      	b.n	8004e2c <main+0x204>
	return z_impl_zsock_connect(sock, addr, addrlen);
 8004dfe:	2218      	movs	r2, #24
 8004e00:	a91a      	add	r1, sp, #104	; 0x68
 8004e02:	f010 f998 	bl	8015136 <z_impl_zsock_connect>
	if (ret < 0) {
 8004e06:	2800      	cmp	r0, #0
 8004e08:	da04      	bge.n	8004e14 <main+0x1ec>
		printf("Cannot connect to UDP remote : %d", errno);
 8004e0a:	f010 fd7f 	bl	801590c <__errno>
 8004e0e:	6801      	ldr	r1, [r0, #0]
 8004e10:	4840      	ldr	r0, [pc, #256]	; (8004f14 <main+0x2ec>)
 8004e12:	e7e8      	b.n	8004de6 <main+0x1be>
	fds[nfds].fd = sock;
 8004e14:	4940      	ldr	r1, [pc, #256]	; (8004f18 <main+0x2f0>)
 8004e16:	4a41      	ldr	r2, [pc, #260]	; (8004f1c <main+0x2f4>)
 8004e18:	680b      	ldr	r3, [r1, #0]
 8004e1a:	6838      	ldr	r0, [r7, #0]
 8004e1c:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
	fds[nfds].events = POLLIN;
 8004e20:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8004e24:	2001      	movs	r0, #1
	nfds++;
 8004e26:	4403      	add	r3, r0
	fds[nfds].events = POLLIN;
 8004e28:	8090      	strh	r0, [r2, #4]
	nfds++;
 8004e2a:	600b      	str	r3, [r1, #0]
    }

//////////////////////register coap post

	
    u8_t register_data[30] = "5 1_0 2_0 5_0 4_0 7_0";
 8004e2c:	4b3c      	ldr	r3, [pc, #240]	; (8004f20 <main+0x2f8>)
 8004e2e:	aa1a      	add	r2, sp, #104	; 0x68
 8004e30:	f103 0c10 	add.w	ip, r3, #16
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	6859      	ldr	r1, [r3, #4]
 8004e38:	4616      	mov	r6, r2
 8004e3a:	c603      	stmia	r6!, {r0, r1}
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	4563      	cmp	r3, ip
 8004e40:	4632      	mov	r2, r6
 8004e42:	d1f7      	bne.n	8004e34 <main+0x20c>
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	889b      	ldrh	r3, [r3, #4]
 8004e48:	80b3      	strh	r3, [r6, #4]
	if (poll(fds, nfds, K_FOREVER) < 0) {
 8004e4a:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8004f18 <main+0x2f0>
	return z_impl_zsock_poll(fds, nfds, timeout);
 8004e4e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8004f1c <main+0x2f4>
    u8_t register_data[30] = "5 1_0 2_0 5_0 4_0 7_0";
 8004e52:	6030      	str	r0, [r6, #0]
 8004e54:	2300      	movs	r3, #0
 8004e56:	f8cd 307e 	str.w	r3, [sp, #126]	; 0x7e
 8004e5a:	f8cd 3082 	str.w	r3, [sp, #130]	; 0x82
			char * register_path[]={"register",NULL};
 8004e5e:	4b31      	ldr	r3, [pc, #196]	; (8004f24 <main+0x2fc>)
 8004e60:	9314      	str	r3, [sp, #80]	; 0x50
			r = send_simple_coap_request(COAP_METHOD_POST,register_path,data);
 8004e62:	a91a      	add	r1, sp, #104	; 0x68
			char * register_path[]={"register",NULL};
 8004e64:	2300      	movs	r3, #0
			r = send_simple_coap_request(COAP_METHOD_POST,register_path,data);
 8004e66:	a814      	add	r0, sp, #80	; 0x50
			char * register_path[]={"register",NULL};
 8004e68:	9315      	str	r3, [sp, #84]	; 0x54
			r = send_simple_coap_request(COAP_METHOD_POST,register_path,data);
 8004e6a:	f000 fc7b 	bl	8005764 <send_simple_coap_request.constprop.0>
	if (poll(fds, nfds, K_FOREVER) < 0) {
 8004e6e:	f8da 1000 	ldr.w	r1, [sl]
 8004e72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e76:	4648      	mov	r0, r9
 8004e78:	f003 fe00 	bl	8008a7c <z_impl_zsock_poll>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	da05      	bge.n	8004e8c <main+0x264>
		printf("Error in poll:%d", errno);
 8004e80:	f010 fd44 	bl	801590c <__errno>
 8004e84:	6801      	ldr	r1, [r0, #0]
 8004e86:	4828      	ldr	r0, [pc, #160]	; (8004f28 <main+0x300>)
 8004e88:	f7fd fe42 	bl	8002b10 <iprintf>
	data = (u8_t *)k_malloc(MAX_COAP_MSG_LEN);
 8004e8c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004e90:	f00d f8e2 	bl	8012058 <k_malloc>
	if (!data) {
 8004e94:	4680      	mov	r8, r0
 8004e96:	2800      	cmp	r0, #0
 8004e98:	d0e1      	beq.n	8004e5e <main+0x236>
	rcvd = recv(sock, data, MAX_COAP_MSG_LEN, MSG_DONTWAIT);
 8004e9a:	6838      	ldr	r0, [r7, #0]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
 8004e9c:	2600      	movs	r6, #0
 8004e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ea2:	e9cd 6600 	strd	r6, r6, [sp]
 8004ea6:	2340      	movs	r3, #64	; 0x40
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	f010 faee 	bl	801548a <z_impl_zsock_recvfrom>
	if (rcvd == 0) {
 8004eae:	1e02      	subs	r2, r0, #0
 8004eb0:	d103      	bne.n	8004eba <main+0x292>
		printf("rcvd == 0");
 8004eb2:	481e      	ldr	r0, [pc, #120]	; (8004f2c <main+0x304>)
		printf("Invalid data received");
 8004eb4:	f7fd fe2c 	bl	8002b10 <iprintf>
		return ret;
 8004eb8:	e7d1      	b.n	8004e5e <main+0x236>
	if (rcvd < 0) {
 8004eba:	da07      	bge.n	8004ecc <main+0x2a4>
		if (errno == EAGAIN || errno == EWOULDBLOCK) {
 8004ebc:	f010 fd26 	bl	801590c <__errno>
 8004ec0:	6803      	ldr	r3, [r0, #0]
 8004ec2:	2b0b      	cmp	r3, #11
 8004ec4:	d0cb      	beq.n	8004e5e <main+0x236>
 8004ec6:	f010 fd21 	bl	801590c <__errno>
 8004eca:	e7c8      	b.n	8004e5e <main+0x236>
	ret = coap_packet_parse(&reply, data, rcvd, NULL, 0);
 8004ecc:	9600      	str	r6, [sp, #0]
 8004ece:	4633      	mov	r3, r6
 8004ed0:	b292      	uxth	r2, r2
 8004ed2:	4641      	mov	r1, r8
 8004ed4:	a814      	add	r0, sp, #80	; 0x50
 8004ed6:	f010 f826 	bl	8014f26 <coap_packet_parse>
	if (ret < 0) {
 8004eda:	2800      	cmp	r0, #0
 8004edc:	da2a      	bge.n	8004f34 <main+0x30c>
		printf("Invalid data received");
 8004ede:	4814      	ldr	r0, [pc, #80]	; (8004f30 <main+0x308>)
 8004ee0:	e7e8      	b.n	8004eb4 <main+0x28c>
 8004ee2:	bf00      	nop
 8004ee4:	1ac40800 	.word	0x1ac40800
 8004ee8:	48000301 	.word	0x48000301
 8004eec:	0801a3b0 	.word	0x0801a3b0
 8004ef0:	0801a3b6 	.word	0x0801a3b6
 8004ef4:	0801a3bd 	.word	0x0801a3bd
 8004ef8:	0801a3c9 	.word	0x0801a3c9
 8004efc:	0801a3da 	.word	0x0801a3da
 8004f00:	33160002 	.word	0x33160002
 8004f04:	0801a3f4 	.word	0x0801a3f4
 8004f08:	2000001c 	.word	0x2000001c
 8004f0c:	0801a401 	.word	0x0801a401
 8004f10:	0801a442 	.word	0x0801a442
 8004f14:	0801a420 	.word	0x0801a420
 8004f18:	20000018 	.word	0x20000018
 8004f1c:	20000010 	.word	0x20000010
 8004f20:	080194f4 	.word	0x080194f4
 8004f24:	0801a454 	.word	0x0801a454
 8004f28:	0801a45d 	.word	0x0801a45d
 8004f2c:	0801a46e 	.word	0x0801a46e
 8004f30:	0801a478 	.word	0x0801a478
	payload = coap_packet_get_payload(&reply,&lengthofpayload);
 8004f34:	a911      	add	r1, sp, #68	; 0x44
 8004f36:	a814      	add	r0, sp, #80	; 0x50
 8004f38:	f010 f84e 	bl	8014fd8 <coap_packet_get_payload>
	if(payload[0] == 'y'){
 8004f3c:	7803      	ldrb	r3, [r0, #0]
 8004f3e:	2b79      	cmp	r3, #121	; 0x79
 8004f40:	d18d      	bne.n	8004e5e <main+0x236>
 8004f42:	46b0      	mov	r8, r6
			

		int num = 0;
        while(1)
        {
            printf("-------------------------------------\n");
 8004f44:	48bc      	ldr	r0, [pc, #752]	; (8005238 <main+0x610>)
 8004f46:	f7fd fde3 	bl	8002b10 <iprintf>
static inline int z_impl_sensor_sample_fetch(struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->driver_api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
 8004f4a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004f4e:	2125      	movs	r1, #37	; 0x25
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	4658      	mov	r0, fp
 8004f54:	4798      	blx	r3
//             ///////////////////////////////////////////////devacc && devmag
            sensor_sample_fetch(devacc);
			memset(sen_valacc,0,sizeof(sen_valacc));
 8004f56:	2218      	movs	r2, #24
 8004f58:	2100      	movs	r1, #0
 8004f5a:	a814      	add	r0, sp, #80	; 0x50
 8004f5c:	f7ff fd07 	bl	800496e <memset>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&chan, *(uintptr_t *)&val, K_SYSCALL_SENSOR_CHANNEL_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sensor_channel_get(dev, chan, val);
 8004f60:	2103      	movs	r1, #3
 8004f62:	aa14      	add	r2, sp, #80	; 0x50
 8004f64:	4658      	mov	r0, fp
 8004f66:	f00e f869 	bl	801303c <z_impl_sensor_channel_get>
//             //         printk("devmag failed ret %d\n", ret);
//             // }
            
//             // float MagBuffer[3];

			memset(AccBuffer,0,sizeof(AccBuffer));
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8004f70:	9313      	str	r3, [sp, #76]	; 0x4c
            for(int i = 0;i<3;i++)
 8004f72:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 8004f76:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
 8004f7a:	461e      	mov	r6, r3
            {
                AccBuffer[i] = ( (float)sen_valacc[i].val1 + 0.000001 * (float)sen_valacc[i].val2 ) ;
 8004f7c:	edd9 7a01 	vldr	s15, [r9, #4]
 8004f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            for(int i = 0;i<3;i++)
 8004f84:	3601      	adds	r6, #1
                AccBuffer[i] = ( (float)sen_valacc[i].val1 + 0.000001 * (float)sen_valacc[i].val2 ) ;
 8004f86:	ee17 0a90 	vmov	r0, s15
 8004f8a:	f7fc fb49 	bl	8001620 <__aeabi_f2d>
 8004f8e:	a3a4      	add	r3, pc, #656	; (adr r3, 8005220 <main+0x5f8>)
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f7fc fb9c 	bl	80016d0 <__aeabi_dmul>
 8004f98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f9c:	f859 0b08 	ldr.w	r0, [r9], #8
 8004fa0:	ee07 0a90 	vmov	s15, r0
 8004fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa8:	ee17 0a90 	vmov	r0, s15
 8004fac:	f7fc fb38 	bl	8001620 <__aeabi_f2d>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fb8:	f7fc f9d4 	bl	8001364 <__adddf3>
 8004fbc:	f7fc fdc2 	bl	8001b44 <__aeabi_d2f>
            for(int i = 0;i<3;i++)
 8004fc0:	2e03      	cmp	r6, #3
                AccBuffer[i] = ( (float)sen_valacc[i].val1 + 0.000001 * (float)sen_valacc[i].val2 ) ;
 8004fc2:	f84a 0b04 	str.w	r0, [sl], #4
            for(int i = 0;i<3;i++)
 8004fc6:	d1d9      	bne.n	8004f7c <main+0x354>
                // MagBuffer[i] = ( (float)sen_valmag[i].val1 + 0.000001 * (float)sen_valmag[i].val2 ) ;
            }

            sumaccnony = sqrt((AccBuffer[0]*AccBuffer[0])+(AccBuffer[2]*AccBuffer[2]));
 8004fc8:	ed9d 9a13 	vldr	s18, [sp, #76]	; 0x4c
 8004fcc:	eddd aa11 	vldr	s21, [sp, #68]	; 0x44
 8004fd0:	ee69 9a09 	vmul.f32	s19, s18, s18
 8004fd4:	eef0 7a69 	vmov.f32	s15, s19
 8004fd8:	ee4a 7aaa 	vmla.f32	s15, s21, s21
 8004fdc:	ee17 0a90 	vmov	r0, s15
 8004fe0:	f7fc fb1e 	bl	8001620 <__aeabi_f2d>
 8004fe4:	ec41 0b10 	vmov	d0, r0, r1
 8004fe8:	f7fc febe 	bl	8001d68 <sqrt>
 8004fec:	ec51 0b10 	vmov	r0, r1, d0
 8004ff0:	f7fc fda8 	bl	8001b44 <__aeabi_d2f>
            sumaccnonx = sqrt((AccBuffer[1]*AccBuffer[1])+(AccBuffer[2]*AccBuffer[2]));
 8004ff4:	ed9d aa12 	vldr	s20, [sp, #72]	; 0x48
 8004ff8:	ee4a 9a0a 	vmla.f32	s19, s20, s20
            sumaccnony = sqrt((AccBuffer[0]*AccBuffer[0])+(AccBuffer[2]*AccBuffer[2]));
 8004ffc:	ee0b 0a10 	vmov	s22, r0
            sumaccnonx = sqrt((AccBuffer[1]*AccBuffer[1])+(AccBuffer[2]*AccBuffer[2]));
 8005000:	ee19 0a90 	vmov	r0, s19
 8005004:	f7fc fb0c 	bl	8001620 <__aeabi_f2d>
 8005008:	ec41 0b10 	vmov	d0, r0, r1
 800500c:	f7fc feac 	bl	8001d68 <sqrt>
 8005010:	ec51 0b10 	vmov	r0, r1, d0
 8005014:	f7fc fd96 	bl	8001b44 <__aeabi_d2f>
 8005018:	ee07 0a90 	vmov	s15, r0

            sinconsty = AccBuffer[2]/sumaccnony;
            cosconsty = AccBuffer[0]/sumaccnony;
 800501c:	eeca 9a8b 	vdiv.f32	s19, s21, s22
            sinconstx = AccBuffer[1]/sumaccnonx;
 8005020:	eeca aa27 	vdiv.f32	s21, s20, s15
            cosconstx = AccBuffer[2]/sumaccnonx;
 8005024:	ee89 aa27 	vdiv.f32	s20, s18, s15
            sinconsty = AccBuffer[2]/sumaccnony;
 8005028:	eec9 7a0b 	vdiv.f32	s15, s18, s22
 800502c:	ee19 0a90 	vmov	r0, s19
            if(sinconsty >= 0)
 8005030:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005038:	f2c0 80ad 	blt.w	8005196 <main+0x56e>
            {
                if(cosconsty <= 0)
 800503c:	f7fc faf0 	bl	8001620 <__aeabi_f2d>
 8005040:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8005044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005048:	ec41 0b10 	vmov	d0, r0, r1
 800504c:	d811      	bhi.n	8005072 <main+0x44a>
                    consty = acos(cosconsty)*180/PI-90;
 800504e:	f7fc fe33 	bl	8001cb8 <acos>
 8005052:	2200      	movs	r2, #0
 8005054:	4b79      	ldr	r3, [pc, #484]	; (800523c <main+0x614>)
 8005056:	ec51 0b10 	vmov	r0, r1, d0
 800505a:	f7fc fb39 	bl	80016d0 <__aeabi_dmul>
 800505e:	a372      	add	r3, pc, #456	; (adr r3, 8005228 <main+0x600>)
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	f7fc fc5e 	bl	8001924 <__aeabi_ddiv>
 8005068:	4b75      	ldr	r3, [pc, #468]	; (8005240 <main+0x618>)
 800506a:	2200      	movs	r2, #0
                else
                    consty = acos(cosconsty)*180/PI + 270;
            }
            else
            {
                consty =270 - acos(cosconsty)*180/PI;
 800506c:	f7fc f978 	bl	8001360 <__aeabi_dsub>
 8005070:	e011      	b.n	8005096 <main+0x46e>
                    consty = acos(cosconsty)*180/PI + 270;
 8005072:	f7fc fe21 	bl	8001cb8 <acos>
 8005076:	2200      	movs	r2, #0
 8005078:	4b70      	ldr	r3, [pc, #448]	; (800523c <main+0x614>)
 800507a:	ec51 0b10 	vmov	r0, r1, d0
 800507e:	f7fc fb27 	bl	80016d0 <__aeabi_dmul>
 8005082:	a369      	add	r3, pc, #420	; (adr r3, 8005228 <main+0x600>)
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f7fc fc4c 	bl	8001924 <__aeabi_ddiv>
 800508c:	a368      	add	r3, pc, #416	; (adr r3, 8005230 <main+0x608>)
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	f7fc f967 	bl	8001364 <__adddf3>
                consty =270 - acos(cosconsty)*180/PI;
 8005096:	f7fc fd55 	bl	8001b44 <__aeabi_d2f>
 800509a:	4681      	mov	r9, r0
            }
                
            if(sinconstx >= 0)
 800509c:	ee1a 0a10 	vmov	r0, s20
 80050a0:	f7fc fabe 	bl	8001620 <__aeabi_f2d>
 80050a4:	eef5 aac0 	vcmpe.f32	s21, #0.0
 80050a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ac:	ec41 0b10 	vmov	d0, r0, r1
 80050b0:	f2c0 8088 	blt.w	80051c4 <main+0x59c>
            {
                    constx = 360- acos(cosconstx)*180/PI ;
 80050b4:	f7fc fe00 	bl	8001cb8 <acos>
 80050b8:	2200      	movs	r2, #0
 80050ba:	4b60      	ldr	r3, [pc, #384]	; (800523c <main+0x614>)
 80050bc:	ec51 0b10 	vmov	r0, r1, d0
 80050c0:	f7fc fb06 	bl	80016d0 <__aeabi_dmul>
 80050c4:	a358      	add	r3, pc, #352	; (adr r3, 8005228 <main+0x600>)
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	f7fc fc2b 	bl	8001924 <__aeabi_ddiv>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	2000      	movs	r0, #0
 80050d4:	495b      	ldr	r1, [pc, #364]	; (8005244 <main+0x61c>)
 80050d6:	f7fc f943 	bl	8001360 <__aeabi_dsub>
            }
            else
                constx = acos(cosconstx)*180/PI;
 80050da:	f7fc fd33 	bl	8001b44 <__aeabi_d2f>
 80050de:	9002      	str	r0, [sp, #8]
 80050e0:	6863      	ldr	r3, [r4, #4]
 80050e2:	2125      	movs	r1, #37	; 0x25
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	4620      	mov	r0, r4
 80050e8:	4798      	blx	r3
 80050ea:	210d      	movs	r1, #13
 80050ec:	aa07      	add	r2, sp, #28
 80050ee:	4620      	mov	r0, r4
 80050f0:	f00d ffa4 	bl	801303c <z_impl_sensor_channel_get>
 80050f4:	210e      	movs	r1, #14
 80050f6:	aa09      	add	r2, sp, #36	; 0x24
 80050f8:	4620      	mov	r0, r4
 80050fa:	f00d ff9f 	bl	801303c <z_impl_sensor_channel_get>
 80050fe:	2110      	movs	r1, #16
 8005100:	aa0b      	add	r2, sp, #44	; 0x2c
 8005102:	4620      	mov	r0, r4
 8005104:	f00d ff9a 	bl	801303c <z_impl_sensor_channel_get>
            sensor_channel_get(bme,SENSOR_CHAN_AMBIENT_TEMP,&tem);
            sensor_channel_get(bme,SENSOR_CHAN_PRESS,&pre);
//             sensor_channel_get(bme,SENSOR_CHAN_GAS_RES,&gas);
            sensor_channel_get(bme,SENSOR_CHAN_HUMIDITY,&HUM);
            
            printf("PRESS: %d.%d \n",pre.val1,pre.val2);
 8005108:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800510c:	484e      	ldr	r0, [pc, #312]	; (8005248 <main+0x620>)
 800510e:	f7fd fcff 	bl	8002b10 <iprintf>
            printf("TEMP : %d.%d \n",tem.val1,tem.val2);
 8005112:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8005116:	484d      	ldr	r0, [pc, #308]	; (800524c <main+0x624>)
 8005118:	f7fd fcfa 	bl	8002b10 <iprintf>
//             printf("GAS  : %d.%d \n",gas.val1,gas.val2);
            printf("HUM  : %d.%d \n\n",HUM.val1,HUM.val2);
 800511c:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 8005120:	484b      	ldr	r0, [pc, #300]	; (8005250 <main+0x628>)
 8005122:	f7fd fcf5 	bl	8002b10 <iprintf>

//             //////////////////////////////////////////usart
// 			printf("usart\n");
			memset(Rx_Buffer,0,sizeof(Rx_Buffer));
 8005126:	2228      	movs	r2, #40	; 0x28
 8005128:	2100      	movs	r1, #0
 800512a:	484a      	ldr	r0, [pc, #296]	; (8005254 <main+0x62c>)
 800512c:	f7ff fc1f 	bl	800496e <memset>
            num = 0;//max = 37;
			
            for(int i = 0;i<8;i++)
 8005130:	af0d      	add	r7, sp, #52	; 0x34
 8005132:	2600      	movs	r6, #0
            {
                uart_poll_out(uart_dev,send[i]);
 8005134:	f817 1b01 	ldrb.w	r1, [r7], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
 8005138:	686b      	ldr	r3, [r5, #4]
 800513a:	4628      	mov	r0, r5
 800513c:	685b      	ldr	r3, [r3, #4]
            for(int i = 0;i<8;i++)
 800513e:	3601      	adds	r6, #1
 8005140:	4798      	blx	r3
 8005142:	2e08      	cmp	r6, #8
 8005144:	d1f6      	bne.n	8005134 <main+0x50c>
            }
			int everynum = 0;//
 8005146:	2300      	movs	r3, #0
            num = 0;//max = 37;
 8005148:	461f      	mov	r7, r3
			bool drop = false;
            while (num < 37)
            {
				everynum++;
                printf("num:%d\n",num);
 800514a:	4639      	mov	r1, r7
 800514c:	4842      	ldr	r0, [pc, #264]	; (8005258 <main+0x630>)
 800514e:	9305      	str	r3, [sp, #20]
 8005150:	f7fd fcde 	bl	8002b10 <iprintf>
	return api->poll_in(dev, p_char);
 8005154:	686a      	ldr	r2, [r5, #4]
 8005156:	f10d 011b 	add.w	r1, sp, #27
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	4628      	mov	r0, r5
 800515e:	4790      	blx	r2
                ret = uart_poll_in(uart_dev, &recvChar);
                if(ret == 0)
 8005160:	4682      	mov	sl, r0
 8005162:	2800      	cmp	r0, #0
 8005164:	d03f      	beq.n	80051e6 <main+0x5be>
				everynum++;
 8005166:	9b05      	ldr	r3, [sp, #20]
                {
                    Rx_Buffer[num++] = recvChar;
					everynum = 0;
                }
				if(num == 36){
 8005168:	2f24      	cmp	r7, #36	; 0x24
				everynum++;
 800516a:	f103 0a01 	add.w	sl, r3, #1
				if(num == 36){
 800516e:	d151      	bne.n	8005214 <main+0x5ec>
 8005170:	4f38      	ldr	r7, [pc, #224]	; (8005254 <main+0x62c>)
						for(int i = 0;i<num;i++){
 8005172:	2600      	movs	r6, #0
							printf("%d ",Rx_Buffer[i]);
 8005174:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005178:	4838      	ldr	r0, [pc, #224]	; (800525c <main+0x634>)
						for(int i = 0;i<num;i++){
 800517a:	3601      	adds	r6, #1
							printf("%d ",Rx_Buffer[i]);
 800517c:	f7fd fcc8 	bl	8002b10 <iprintf>
						for(int i = 0;i<num;i++){
 8005180:	2e24      	cmp	r6, #36	; 0x24
 8005182:	d1f7      	bne.n	8005174 <main+0x54c>
						}
				}
				if(everynum >= 50){
 8005184:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8005188:	dd2a      	ble.n	80051e0 <main+0x5b8>
            }else{
				printf("crc failed\n");
			}
		}else{
			Current_data = 0.0;
			printf("drop!!!!!!!!!!!!!!\n");
 800518a:	4835      	ldr	r0, [pc, #212]	; (8005260 <main+0x638>)
			Current_data = 0.0;
 800518c:	ed9f 8a35 	vldr	s16, [pc, #212]	; 8005264 <main+0x63c>
			printf("drop!!!!!!!!!!!!!!\n");
 8005190:	f7fd fcbe 	bl	8002b10 <iprintf>
 8005194:	e0a1      	b.n	80052da <main+0x6b2>
                consty =270 - acos(cosconsty)*180/PI;
 8005196:	f7fc fa43 	bl	8001620 <__aeabi_f2d>
 800519a:	ec41 0b10 	vmov	d0, r0, r1
 800519e:	f7fc fd8b 	bl	8001cb8 <acos>
 80051a2:	2200      	movs	r2, #0
 80051a4:	4b25      	ldr	r3, [pc, #148]	; (800523c <main+0x614>)
 80051a6:	ec51 0b10 	vmov	r0, r1, d0
 80051aa:	f7fc fa91 	bl	80016d0 <__aeabi_dmul>
 80051ae:	a31e      	add	r3, pc, #120	; (adr r3, 8005228 <main+0x600>)
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	f7fc fbb6 	bl	8001924 <__aeabi_ddiv>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	a11c      	add	r1, pc, #112	; (adr r1, 8005230 <main+0x608>)
 80051be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051c2:	e753      	b.n	800506c <main+0x444>
                constx = acos(cosconstx)*180/PI;
 80051c4:	f7fc fd78 	bl	8001cb8 <acos>
 80051c8:	2200      	movs	r2, #0
 80051ca:	4b1c      	ldr	r3, [pc, #112]	; (800523c <main+0x614>)
 80051cc:	ec51 0b10 	vmov	r0, r1, d0
 80051d0:	f7fc fa7e 	bl	80016d0 <__aeabi_dmul>
 80051d4:	a314      	add	r3, pc, #80	; (adr r3, 8005228 <main+0x600>)
 80051d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051da:	f7fc fba3 	bl	8001924 <__aeabi_ddiv>
 80051de:	e77c      	b.n	80050da <main+0x4b2>
            for(int i = 0;i<8;i++)
 80051e0:	4653      	mov	r3, sl
 80051e2:	4637      	mov	r7, r6
 80051e4:	e7b1      	b.n	800514a <main+0x522>
                    Rx_Buffer[num++] = recvChar;
 80051e6:	1c7e      	adds	r6, r7, #1
 80051e8:	4a1a      	ldr	r2, [pc, #104]	; (8005254 <main+0x62c>)
 80051ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80051ee:	55d3      	strb	r3, [r2, r7]
				if(num == 36){
 80051f0:	2e24      	cmp	r6, #36	; 0x24
 80051f2:	d0bd      	beq.n	8005170 <main+0x548>
            while (num < 37)
 80051f4:	2e25      	cmp	r6, #37	; 0x25
 80051f6:	d1f3      	bne.n	80051e0 <main+0x5b8>
            after = crc16bitbybit(Rx_Buffer, 35);
 80051f8:	4e16      	ldr	r6, [pc, #88]	; (8005254 <main+0x62c>)
 80051fa:	2123      	movs	r1, #35	; 0x23
 80051fc:	4630      	mov	r0, r6
 80051fe:	f00d ff36 	bl	801306e <crc16bitbybit>
            if(hou == Rx_Buffer[35] && qian == Rx_Buffer[36]){
 8005202:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
 8005206:	b2c3      	uxtb	r3, r0
 8005208:	429a      	cmp	r2, r3
 800520a:	d02f      	beq.n	800526c <main+0x644>
				printf("crc failed\n");
 800520c:	4816      	ldr	r0, [pc, #88]	; (8005268 <main+0x640>)
 800520e:	f7fd fc7f 	bl	8002b10 <iprintf>
 8005212:	e062      	b.n	80052da <main+0x6b2>
				if(everynum >= 50){
 8005214:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8005218:	dcb7      	bgt.n	800518a <main+0x562>
 800521a:	463e      	mov	r6, r7
 800521c:	e7ea      	b.n	80051f4 <main+0x5cc>
 800521e:	bf00      	nop
 8005220:	a0b5ed8d 	.word	0xa0b5ed8d
 8005224:	3eb0c6f7 	.word	0x3eb0c6f7
 8005228:	60000000 	.word	0x60000000
 800522c:	400921fb 	.word	0x400921fb
 8005230:	00000000 	.word	0x00000000
 8005234:	4070e000 	.word	0x4070e000
 8005238:	0801a48e 	.word	0x0801a48e
 800523c:	40668000 	.word	0x40668000
 8005240:	40568000 	.word	0x40568000
 8005244:	40768000 	.word	0x40768000
 8005248:	0801a4b5 	.word	0x0801a4b5
 800524c:	0801a4c4 	.word	0x0801a4c4
 8005250:	0801a4d3 	.word	0x0801a4d3
 8005254:	20001a62 	.word	0x20001a62
 8005258:	0801a4e3 	.word	0x0801a4e3
 800525c:	0801a4eb 	.word	0x0801a4eb
 8005260:	0801a562 	.word	0x0801a562
 8005264:	00000000 	.word	0x00000000
 8005268:	0801a510 	.word	0x0801a510
            if(hou == Rx_Buffer[35] && qian == Rx_Buffer[36]){
 800526c:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8005270:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8005274:	4283      	cmp	r3, r0
 8005276:	d1c9      	bne.n	800520c <main+0x5e4>
                Current_data=(((unsigned long)(Rx_Buffer[7]))<<24) |(((unsigned long)(Rx_Buffer[8]))<<16) |(((unsigned long)(Rx_Buffer[9]))<<8)|Rx_Buffer[10];
 8005278:	f8d6 3007 	ldr.w	r3, [r6, #7]
 800527c:	ba1b      	rev	r3, r3
 800527e:	ee08 3a10 	vmov	s16, r3
                temperature =(((unsigned long)(Rx_Buffer[27]))<<24)|(((unsigned long)(Rx_Buffer[28]))<<16)|(((unsigned long)(Rx_Buffer[29]))<<8)|Rx_Buffer[30]; 
 8005282:	f8d6 301b 	ldr.w	r3, [r6, #27]
                printf("Current_data:%f\n",(float)Current_data/10000.0);
 8005286:	eef8 7a48 	vcvt.f32.u32	s15, s16
 800528a:	ba1b      	rev	r3, r3
 800528c:	ee17 0a90 	vmov	r0, s15
 8005290:	ee08 3a90 	vmov	s17, r3
 8005294:	f7fc f9c4 	bl	8001620 <__aeabi_f2d>
 8005298:	a38f      	add	r3, pc, #572	; (adr r3, 80054d8 <main+0x8b0>)
 800529a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529e:	f7fc fb41 	bl	8001924 <__aeabi_ddiv>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4890      	ldr	r0, [pc, #576]	; (80054e8 <main+0x8c0>)
 80052a8:	f7fd fc32 	bl	8002b10 <iprintf>
                 printf("temperature:%f\n",(float)temperature/100.0);
 80052ac:	eef8 7a68 	vcvt.f32.u32	s15, s17
 80052b0:	ee17 0a90 	vmov	r0, s15
 80052b4:	f7fc f9b4 	bl	8001620 <__aeabi_f2d>
 80052b8:	2200      	movs	r2, #0
 80052ba:	4b8c      	ldr	r3, [pc, #560]	; (80054ec <main+0x8c4>)
 80052bc:	f7fc fb32 	bl	8001924 <__aeabi_ddiv>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	488a      	ldr	r0, [pc, #552]	; (80054f0 <main+0x8c8>)
 80052c6:	f7fd fc23 	bl	8002b10 <iprintf>
                for(int i = 0;i<37;i++)
 80052ca:	2300      	movs	r3, #0
 80052cc:	3301      	adds	r3, #1
                    Rx_Buffer[i] = 0x0;
 80052ce:	f04f 0200 	mov.w	r2, #0
                for(int i = 0;i<37;i++)
 80052d2:	2b25      	cmp	r3, #37	; 0x25
                    Rx_Buffer[i] = 0x0;
 80052d4:	f806 2b01 	strb.w	r2, [r6], #1
                for(int i = 0;i<37;i++)
 80052d8:	d1f8      	bne.n	80052cc <main+0x6a4>
		}



			memset(CoapCurrent,0,sizeof(CoapCurrent));
 80052da:	221e      	movs	r2, #30
 80052dc:	2100      	movs	r1, #0
 80052de:	4885      	ldr	r0, [pc, #532]	; (80054f4 <main+0x8cc>)
 80052e0:	f7ff fb45 	bl	800496e <memset>
            sprintf(CoapCurrent, "0 %f", (float)Current_data/10000.0);
 80052e4:	eef8 7a48 	vcvt.f32.u32	s15, s16
			ret = send_simple_coap_msgs_and_wait_for_reply(7,CoapBMEHum);
			// printf("CoapBMEHum:%s\n",CoapBMEHum);

// 			// printf("consty:%d\n",floattoint(consty));
//             // printf("constx:%d\n",floattoint(constx));
			count++;
 80052e8:	f108 0801 	add.w	r8, r8, #1
            sprintf(CoapCurrent, "0 %f", (float)Current_data/10000.0);
 80052ec:	ee17 0a90 	vmov	r0, s15
 80052f0:	f7fc f996 	bl	8001620 <__aeabi_f2d>
 80052f4:	a378      	add	r3, pc, #480	; (adr r3, 80054d8 <main+0x8b0>)
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	f7fc fb13 	bl	8001924 <__aeabi_ddiv>
 80052fe:	221e      	movs	r2, #30
 8005300:	e9cd 0100 	strd	r0, r1, [sp]
 8005304:	4b7c      	ldr	r3, [pc, #496]	; (80054f8 <main+0x8d0>)
 8005306:	487b      	ldr	r0, [pc, #492]	; (80054f4 <main+0x8cc>)
 8005308:	2100      	movs	r1, #0
 800530a:	f7ff fb38 	bl	800497e <__sprintf_chk>
			char * test_path[]={"1281B_Current",NULL};
 800530e:	4b7b      	ldr	r3, [pc, #492]	; (80054fc <main+0x8d4>)
 8005310:	930f      	str	r3, [sp, #60]	; 0x3c
			r = send_simple_coap_request(COAP_METHOD_POST,test_path,data);
 8005312:	4978      	ldr	r1, [pc, #480]	; (80054f4 <main+0x8cc>)
			char * test_path[]={"1281B_Current",NULL};
 8005314:	2300      	movs	r3, #0
			r = send_simple_coap_request(COAP_METHOD_POST,test_path,data);
 8005316:	a80f      	add	r0, sp, #60	; 0x3c
			char * test_path[]={"1281B_Current",NULL};
 8005318:	9310      	str	r3, [sp, #64]	; 0x40
			r = send_simple_coap_request(COAP_METHOD_POST,test_path,data);
 800531a:	f000 fa23 	bl	8005764 <send_simple_coap_request.constprop.0>
			memset(Coap1281Temp,0,sizeof(Coap1281Temp));
 800531e:	221e      	movs	r2, #30
 8005320:	2100      	movs	r1, #0
 8005322:	4877      	ldr	r0, [pc, #476]	; (8005500 <main+0x8d8>)
 8005324:	f7ff fb23 	bl	800496e <memset>
            sprintf(Coap1281Temp, "0 %f", (float)temperature/100.0);
 8005328:	eef8 7a68 	vcvt.f32.u32	s15, s17
 800532c:	ee17 0a90 	vmov	r0, s15
 8005330:	f7fc f976 	bl	8001620 <__aeabi_f2d>
 8005334:	2200      	movs	r2, #0
 8005336:	4b6d      	ldr	r3, [pc, #436]	; (80054ec <main+0x8c4>)
 8005338:	f7fc faf4 	bl	8001924 <__aeabi_ddiv>
 800533c:	221e      	movs	r2, #30
 800533e:	e9cd 0100 	strd	r0, r1, [sp]
 8005342:	4b6d      	ldr	r3, [pc, #436]	; (80054f8 <main+0x8d0>)
 8005344:	486e      	ldr	r0, [pc, #440]	; (8005500 <main+0x8d8>)
 8005346:	2100      	movs	r1, #0
 8005348:	f7ff fb19 	bl	800497e <__sprintf_chk>
			char * register_path[]={"1281B_Temp",NULL};
 800534c:	4b6d      	ldr	r3, [pc, #436]	; (8005504 <main+0x8dc>)
 800534e:	930f      	str	r3, [sp, #60]	; 0x3c
			r = send_simple_coap_request(COAP_METHOD_POST,register_path,data);
 8005350:	496b      	ldr	r1, [pc, #428]	; (8005500 <main+0x8d8>)
			char * register_path[]={"1281B_Temp",NULL};
 8005352:	2300      	movs	r3, #0
			r = send_simple_coap_request(COAP_METHOD_POST,register_path,data);
 8005354:	a80f      	add	r0, sp, #60	; 0x3c
			char * register_path[]={"1281B_Temp",NULL};
 8005356:	9310      	str	r3, [sp, #64]	; 0x40
			r = send_simple_coap_request(COAP_METHOD_POST,register_path,data);
 8005358:	f000 fa04 	bl	8005764 <send_simple_coap_request.constprop.0>
			memset(CoapBMETemp,0,sizeof(CoapBMETemp));
 800535c:	221e      	movs	r2, #30
 800535e:	2100      	movs	r1, #0
 8005360:	4869      	ldr	r0, [pc, #420]	; (8005508 <main+0x8e0>)
 8005362:	f7ff fb04 	bl	800496e <memset>
			sprintf(CoapBMETemp,"0 %f",((float)tem.val1 + 0.000001 * (float)tem.val2));
 8005366:	eddd 7a08 	vldr	s15, [sp, #32]
 800536a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800536e:	ee17 0a90 	vmov	r0, s15
 8005372:	f7fc f955 	bl	8001620 <__aeabi_f2d>
 8005376:	a35a      	add	r3, pc, #360	; (adr r3, 80054e0 <main+0x8b8>)
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	f7fc f9a8 	bl	80016d0 <__aeabi_dmul>
 8005380:	eddd 7a07 	vldr	s15, [sp, #28]
 8005384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005388:	4606      	mov	r6, r0
 800538a:	ee17 0a90 	vmov	r0, s15
 800538e:	460f      	mov	r7, r1
 8005390:	f7fc f946 	bl	8001620 <__aeabi_f2d>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4630      	mov	r0, r6
 800539a:	4639      	mov	r1, r7
 800539c:	f7fb ffe2 	bl	8001364 <__adddf3>
 80053a0:	221e      	movs	r2, #30
 80053a2:	e9cd 0100 	strd	r0, r1, [sp]
 80053a6:	4b54      	ldr	r3, [pc, #336]	; (80054f8 <main+0x8d0>)
 80053a8:	4857      	ldr	r0, [pc, #348]	; (8005508 <main+0x8e0>)
 80053aa:	2100      	movs	r1, #0
 80053ac:	f7ff fae7 	bl	800497e <__sprintf_chk>
			char * test_path[]={"BME_TEMP",NULL};
 80053b0:	4b56      	ldr	r3, [pc, #344]	; (800550c <main+0x8e4>)
 80053b2:	930f      	str	r3, [sp, #60]	; 0x3c
			r = send_simple_coap_request(COAP_METHOD_POST,test_path,data);
 80053b4:	4954      	ldr	r1, [pc, #336]	; (8005508 <main+0x8e0>)
			char * test_path[]={"BME_TEMP",NULL};
 80053b6:	2300      	movs	r3, #0
			r = send_simple_coap_request(COAP_METHOD_POST,test_path,data);
 80053b8:	a80f      	add	r0, sp, #60	; 0x3c
			char * test_path[]={"BME_TEMP",NULL};
 80053ba:	9310      	str	r3, [sp, #64]	; 0x40
			r = send_simple_coap_request(COAP_METHOD_POST,test_path,data);
 80053bc:	f000 f9d2 	bl	8005764 <send_simple_coap_request.constprop.0>
			memset(Coapxandy,0,sizeof(Coapxandy));
 80053c0:	221e      	movs	r2, #30
 80053c2:	2100      	movs	r1, #0
 80053c4:	4852      	ldr	r0, [pc, #328]	; (8005510 <main+0x8e8>)
 80053c6:	f7ff fad2 	bl	800496e <memset>
			int intconsty = floattoint(consty);
 80053ca:	ee00 9a10 	vmov	s0, r9
 80053ce:	f000 fa2d 	bl	800582c <floattoint>
			int intconstx = floattoint(constx);
 80053d2:	ed9d 0a02 	vldr	s0, [sp, #8]
			int intconsty = floattoint(consty);
 80053d6:	4606      	mov	r6, r0
			int intconstx = floattoint(constx);
 80053d8:	f000 fa28 	bl	800582c <floattoint>
			sprintf(Coapxandy,"%d %d",intconsty,intconstx);
 80053dc:	221e      	movs	r2, #30
 80053de:	e9cd 6000 	strd	r6, r0, [sp]
 80053e2:	4b4c      	ldr	r3, [pc, #304]	; (8005514 <main+0x8ec>)
 80053e4:	484a      	ldr	r0, [pc, #296]	; (8005510 <main+0x8e8>)
 80053e6:	2100      	movs	r1, #0
 80053e8:	f7ff fac9 	bl	800497e <__sprintf_chk>
			char * test_path[]={"rotate",NULL};
 80053ec:	4b4a      	ldr	r3, [pc, #296]	; (8005518 <main+0x8f0>)
 80053ee:	930f      	str	r3, [sp, #60]	; 0x3c
			r = send_simple_coap_request(COAP_METHOD_POST,test_path,data);
 80053f0:	4947      	ldr	r1, [pc, #284]	; (8005510 <main+0x8e8>)
			char * test_path[]={"rotate",NULL};
 80053f2:	2300      	movs	r3, #0
			r = send_simple_coap_request(COAP_METHOD_POST,test_path,data);
 80053f4:	a80f      	add	r0, sp, #60	; 0x3c
			char * test_path[]={"rotate",NULL};
 80053f6:	9310      	str	r3, [sp, #64]	; 0x40
			r = send_simple_coap_request(COAP_METHOD_POST,test_path,data);
 80053f8:	f000 f9b4 	bl	8005764 <send_simple_coap_request.constprop.0>
			memset(CoapBMEPress,0,sizeof(CoapBMEPress));
 80053fc:	221e      	movs	r2, #30
 80053fe:	2100      	movs	r1, #0
 8005400:	4846      	ldr	r0, [pc, #280]	; (800551c <main+0x8f4>)
 8005402:	f7ff fab4 	bl	800496e <memset>
			sprintf(CoapBMEPress,"0 %f",((float)pre.val1 + 0.000001 * (float)pre.val2));
 8005406:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800540a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800540e:	ee17 0a90 	vmov	r0, s15
 8005412:	f7fc f905 	bl	8001620 <__aeabi_f2d>
 8005416:	a332      	add	r3, pc, #200	; (adr r3, 80054e0 <main+0x8b8>)
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	f7fc f958 	bl	80016d0 <__aeabi_dmul>
 8005420:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8005424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005428:	4606      	mov	r6, r0
 800542a:	ee17 0a90 	vmov	r0, s15
 800542e:	460f      	mov	r7, r1
 8005430:	f7fc f8f6 	bl	8001620 <__aeabi_f2d>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4630      	mov	r0, r6
 800543a:	4639      	mov	r1, r7
 800543c:	f7fb ff92 	bl	8001364 <__adddf3>
 8005440:	221e      	movs	r2, #30
 8005442:	e9cd 0100 	strd	r0, r1, [sp]
 8005446:	4b2c      	ldr	r3, [pc, #176]	; (80054f8 <main+0x8d0>)
 8005448:	4834      	ldr	r0, [pc, #208]	; (800551c <main+0x8f4>)
 800544a:	2100      	movs	r1, #0
 800544c:	f7ff fa97 	bl	800497e <__sprintf_chk>
			char * test_path[]={"BME_Press",NULL};
 8005450:	4b33      	ldr	r3, [pc, #204]	; (8005520 <main+0x8f8>)
 8005452:	930f      	str	r3, [sp, #60]	; 0x3c
			r = send_simple_coap_request(COAP_METHOD_POST,test_path,data);
 8005454:	4931      	ldr	r1, [pc, #196]	; (800551c <main+0x8f4>)
			char * test_path[]={"BME_Press",NULL};
 8005456:	2300      	movs	r3, #0
			r = send_simple_coap_request(COAP_METHOD_POST,test_path,data);
 8005458:	a80f      	add	r0, sp, #60	; 0x3c
			char * test_path[]={"BME_Press",NULL};
 800545a:	9310      	str	r3, [sp, #64]	; 0x40
			r = send_simple_coap_request(COAP_METHOD_POST,test_path,data);
 800545c:	f000 f982 	bl	8005764 <send_simple_coap_request.constprop.0>
			memset(CoapBMEHum,0,sizeof(CoapBMEHum));
 8005460:	221e      	movs	r2, #30
 8005462:	2100      	movs	r1, #0
 8005464:	482f      	ldr	r0, [pc, #188]	; (8005524 <main+0x8fc>)
 8005466:	f7ff fa82 	bl	800496e <memset>
			sprintf(CoapBMEHum,"0 %f",((float)HUM.val1 + 0.000001 * (float)HUM.val2));
 800546a:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 800546e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005472:	ee17 0a90 	vmov	r0, s15
 8005476:	f7fc f8d3 	bl	8001620 <__aeabi_f2d>
 800547a:	a319      	add	r3, pc, #100	; (adr r3, 80054e0 <main+0x8b8>)
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	f7fc f926 	bl	80016d0 <__aeabi_dmul>
 8005484:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8005488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800548c:	4606      	mov	r6, r0
 800548e:	ee17 0a90 	vmov	r0, s15
 8005492:	460f      	mov	r7, r1
 8005494:	f7fc f8c4 	bl	8001620 <__aeabi_f2d>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4630      	mov	r0, r6
 800549e:	4639      	mov	r1, r7
 80054a0:	f7fb ff60 	bl	8001364 <__adddf3>
 80054a4:	221e      	movs	r2, #30
 80054a6:	e9cd 0100 	strd	r0, r1, [sp]
 80054aa:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <main+0x8d0>)
 80054ac:	481d      	ldr	r0, [pc, #116]	; (8005524 <main+0x8fc>)
 80054ae:	2100      	movs	r1, #0
 80054b0:	f7ff fa65 	bl	800497e <__sprintf_chk>
			char * test_path[]={"BME_Hum",NULL};
 80054b4:	4b1c      	ldr	r3, [pc, #112]	; (8005528 <main+0x900>)
 80054b6:	930f      	str	r3, [sp, #60]	; 0x3c
			r = send_simple_coap_request(COAP_METHOD_POST,test_path,data);
 80054b8:	491a      	ldr	r1, [pc, #104]	; (8005524 <main+0x8fc>)
			char * test_path[]={"BME_Hum",NULL};
 80054ba:	2300      	movs	r3, #0
			r = send_simple_coap_request(COAP_METHOD_POST,test_path,data);
 80054bc:	a80f      	add	r0, sp, #60	; 0x3c
			char * test_path[]={"BME_Hum",NULL};
 80054be:	9310      	str	r3, [sp, #64]	; 0x40
			r = send_simple_coap_request(COAP_METHOD_POST,test_path,data);
 80054c0:	f000 f950 	bl	8005764 <send_simple_coap_request.constprop.0>
			printf("%d\n",count);
 80054c4:	4641      	mov	r1, r8
 80054c6:	4819      	ldr	r0, [pc, #100]	; (800552c <main+0x904>)
 80054c8:	f7fd fb22 	bl	8002b10 <iprintf>
 80054cc:	2064      	movs	r0, #100	; 0x64
 80054ce:	f00d f9dd 	bl	801288c <z_impl_k_sleep>
 80054d2:	e537      	b.n	8004f44 <main+0x31c>
 80054d4:	f3af 8000 	nop.w
 80054d8:	00000000 	.word	0x00000000
 80054dc:	40c38800 	.word	0x40c38800
 80054e0:	a0b5ed8d 	.word	0xa0b5ed8d
 80054e4:	3eb0c6f7 	.word	0x3eb0c6f7
 80054e8:	0801a4ef 	.word	0x0801a4ef
 80054ec:	40590000 	.word	0x40590000
 80054f0:	0801a500 	.word	0x0801a500
 80054f4:	20001a26 	.word	0x20001a26
 80054f8:	0801a51c 	.word	0x0801a51c
 80054fc:	0801a521 	.word	0x0801a521
 8005500:	200019ae 	.word	0x200019ae
 8005504:	0801a52f 	.word	0x0801a52f
 8005508:	20001a08 	.word	0x20001a08
 800550c:	0801a53a 	.word	0x0801a53a
 8005510:	20001a44 	.word	0x20001a44
 8005514:	0801a543 	.word	0x0801a543
 8005518:	0801a549 	.word	0x0801a549
 800551c:	200019ea 	.word	0x200019ea
 8005520:	0801a550 	.word	0x0801a550
 8005524:	200019cc 	.word	0x200019cc
 8005528:	0801a55a 	.word	0x0801a55a
 800552c:	0801c2c4 	.word	0x0801c2c4

08005530 <handle_ipv6_echo_reply>:
}

static enum net_verdict handle_ipv6_echo_reply(struct net_pkt *pkt,
					       struct net_ipv6_hdr *ip_hdr,
					       struct net_icmp_hdr *icmp_hdr)
{
 8005530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	b08b      	sub	sp, #44	; 0x2c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8005536:	2300      	movs	r3, #0
{
 8005538:	468b      	mov	fp, r1
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 800553a:	2404      	movs	r4, #4
					      struct net_icmpv6_echo_req);
	struct net_icmpv6_echo_req *icmp_echo;
	u32_t cycles;

	icmp_echo = (struct net_icmpv6_echo_req *)net_pkt_get_data(pkt,
 800553c:	a908      	add	r1, sp, #32
{
 800553e:	4606      	mov	r6, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8005540:	e9cd 3408 	strd	r3, r4, [sp, #32]
	icmp_echo = (struct net_icmpv6_echo_req *)net_pkt_get_data(pkt,
 8005544:	f007 fb1e 	bl	800cb84 <net_pkt_get_data>
								&icmp_access);
	if (icmp_echo == NULL) {
 8005548:	4682      	mov	sl, r0
 800554a:	b918      	cbnz	r0, 8005554 <handle_ipv6_echo_reply+0x24>
		return -NET_DROP;
 800554c:	20fe      	movs	r0, #254	; 0xfe
#endif
	k_sem_give(&ping_timeout);

	net_pkt_unref(pkt);
	return NET_OK;
}
 800554e:	b00b      	add	sp, #44	; 0x2c
 8005550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_pkt_skip(pkt, sizeof(*icmp_echo));
 8005554:	4621      	mov	r1, r4
 8005556:	4630      	mov	r0, r6
 8005558:	f011 fb10 	bl	8016b7c <net_pkt_skip>
	if (net_pkt_read_be32(pkt, &cycles)) {
 800555c:	a907      	add	r1, sp, #28
 800555e:	4630      	mov	r0, r6
 8005560:	f011 fb2b 	bl	8016bba <net_pkt_read_be32>
 8005564:	4604      	mov	r4, r0
 8005566:	2800      	cmp	r0, #0
 8005568:	d1f0      	bne.n	800554c <handle_ipv6_echo_reply+0x1c>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
 800556a:	f004 fa0f 	bl	800998c <z_timer_cycle_get_32>
	cycles = k_cycle_get_32() - cycles;
 800556e:	9b07      	ldr	r3, [sp, #28]
 8005570:	1ac0      	subs	r0, r0, r3
	PR_SHELL(shell_for_ping, "%d bytes from %s to %s: icmp_seq=%d ttl=%d "
 8005572:	4b29      	ldr	r3, [pc, #164]	; (8005618 <handle_ipv6_echo_reply+0xe8>)
	cycles = k_cycle_get_32() - cycles;
 8005574:	9007      	str	r0, [sp, #28]
	PR_SHELL(shell_for_ping, "%d bytes from %s to %s: icmp_seq=%d ttl=%d "
 8005576:	681f      	ldr	r7, [r3, #0]
 8005578:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 800557c:	021d      	lsls	r5, r3, #8
 800557e:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
 8005582:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8005584:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8005588:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800558c:	33fc      	adds	r3, #252	; 0xfc
 800558e:	f10b 0108 	add.w	r1, fp, #8
 8005592:	2002      	movs	r0, #2
 8005594:	fa13 f585 	uxtah	r5, r3, r5
 8005598:	f006 fd9c 	bl	800c0d4 <net_sprint_addr>
 800559c:	f10b 0118 	add.w	r1, fp, #24
 80055a0:	4680      	mov	r8, r0
 80055a2:	2002      	movs	r0, #2
 80055a4:	f006 fd96 	bl	800c0d4 <net_sprint_addr>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
 80055a8:	491c      	ldr	r1, [pc, #112]	; (800561c <handle_ipv6_echo_reply+0xec>)
 80055aa:	f8ba a002 	ldrh.w	sl, [sl, #2]
 80055ae:	4681      	mov	r9, r0
 80055b0:	9807      	ldr	r0, [sp, #28]
 80055b2:	a317      	add	r3, pc, #92	; (adr r3, 8005610 <handle_ipv6_echo_reply+0xe0>)
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	fba0 0101 	umull	r0, r1, r0, r1
 80055bc:	f7fc fb62 	bl	8001c84 <__aeabi_uldivmod>
 80055c0:	ee07 0a90 	vmov	s15, r0
 80055c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055c8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005620 <handle_ipv6_echo_reply+0xf0>
 80055cc:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80055d0:	ee17 0a90 	vmov	r0, s15
 80055d4:	f7fc f824 	bl	8001620 <__aeabi_f2d>
 80055d8:	f89b 3007 	ldrb.w	r3, [fp, #7]
 80055dc:	9303      	str	r3, [sp, #12]
 80055de:	ea4f 230a 	mov.w	r3, sl, lsl #8
 80055e2:	ea43 231a 	orr.w	r3, r3, sl, lsr #8
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055ec:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80055f0:	f8cd 8000 	str.w	r8, [sp]
 80055f4:	462b      	mov	r3, r5
 80055f6:	4a0b      	ldr	r2, [pc, #44]	; (8005624 <handle_ipv6_echo_reply+0xf4>)
 80055f8:	4621      	mov	r1, r4
 80055fa:	4638      	mov	r0, r7
 80055fc:	f00e feba 	bl	8014374 <shell_fprintf>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8005600:	4809      	ldr	r0, [pc, #36]	; (8005628 <handle_ipv6_echo_reply+0xf8>)
 8005602:	f00d f967 	bl	80128d4 <z_impl_k_sem_give>
	net_pkt_unref(pkt);
 8005606:	4630      	mov	r0, r6
 8005608:	f011 f9c0 	bl	801698c <net_pkt_unref>
	return NET_OK;
 800560c:	4620      	mov	r0, r4
 800560e:	e79e      	b.n	800554e <handle_ipv6_echo_reply+0x1e>
 8005610:	044aa200 	.word	0x044aa200
 8005614:	00000000 	.word	0x00000000
 8005618:	20000eb0 	.word	0x20000eb0
 800561c:	3b9aca00 	.word	0x3b9aca00
 8005620:	49742400 	.word	0x49742400
 8005624:	0801c5e8 	.word	0x0801c5e8
 8005628:	200090ec 	.word	0x200090ec
 800562c:	00000000 	.word	0x00000000

08005630 <lis2dh_attr_set>:

static int lis2dh_attr_set(struct device *dev, enum sensor_channel chan,
			   enum sensor_attribute attr,
			   const struct sensor_value *val)
{
	switch (chan) {
 8005630:	2903      	cmp	r1, #3
{
 8005632:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005634:	4606      	mov	r6, r0
	switch (chan) {
 8005636:	d86b      	bhi.n	8005710 <lis2dh_attr_set+0xe0>
	switch (attr) {
 8005638:	2a00      	cmp	r2, #0
 800563a:	d03c      	beq.n	80056b6 <lis2dh_attr_set+0x86>
 800563c:	2a06      	cmp	r2, #6
 800563e:	d157      	bne.n	80056f0 <lis2dh_attr_set+0xc0>
 *
 * @return The converted value, in Gs.
 */
static inline s32_t sensor_ms2_to_g(const struct sensor_value *ms2)
{
	s64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
 8005640:	685c      	ldr	r4, [r3, #4]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	4b3e      	ldr	r3, [pc, #248]	; (8005740 <lis2dh_attr_set+0x110>)
 8005646:	17e5      	asrs	r5, r4, #31
 8005648:	fbc3 4502 	smlal	r4, r5, r3, r2

	if (micro_ms2 > 0) {
 800564c:	2c01      	cmp	r4, #1
 800564e:	f175 0300 	sbcs.w	r3, r5, #0
 8005652:	db22      	blt.n	800569a <lis2dh_attr_set+0x6a>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
 8005654:	483b      	ldr	r0, [pc, #236]	; (8005744 <lis2dh_attr_set+0x114>)
 8005656:	a338      	add	r3, pc, #224	; (adr r3, 8005738 <lis2dh_attr_set+0x108>)
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	1820      	adds	r0, r4, r0
 800565e:	f04f 0100 	mov.w	r1, #0
 8005662:	eb45 0101 	adc.w	r1, r5, r1
	} else {
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
 8005666:	f7fc fabd 	bl	8001be4 <__aeabi_ldivmod>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
 800566a:	b280      	uxth	r0, r0
 800566c:	2802      	cmp	r0, #2
 800566e:	d01c      	beq.n	80056aa <lis2dh_attr_set+0x7a>
 8005670:	2804      	cmp	r0, #4
 8005672:	d01c      	beq.n	80056ae <lis2dh_attr_set+0x7e>
 8005674:	2808      	cmp	r0, #8
 8005676:	d01c      	beq.n	80056b2 <lis2dh_attr_set+0x82>
 8005678:	2810      	cmp	r0, #16
 800567a:	d123      	bne.n	80056c4 <lis2dh_attr_set+0x94>
 800567c:	2303      	movs	r3, #3
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
 800567e:	4932      	ldr	r1, [pc, #200]	; (8005748 <lis2dh_attr_set+0x118>)
 8005680:	68b2      	ldr	r2, [r6, #8]
 8005682:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005686:	60d1      	str	r1, [r2, #12]
	return lis2dh_reg_field_update(dev, LIS2DH_REG_CTRL4,
 8005688:	4630      	mov	r0, r6
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	2204      	movs	r2, #4
 800568e:	2330      	movs	r3, #48	; 0x30
 8005690:	2123      	movs	r1, #35	; 0x23
 8005692:	f012 fdc0 	bl	8018216 <lis2dh_reg_field_update>
		LOG_WRN("attr_set() not supported on this channel.");
		return -ENOTSUP;
	}

	return 0;
}
 8005696:	b004      	add	sp, #16
 8005698:	bd70      	pop	{r4, r5, r6, pc}
 800569a:	482c      	ldr	r0, [pc, #176]	; (800574c <lis2dh_attr_set+0x11c>)
 800569c:	1820      	adds	r0, r4, r0
 800569e:	a326      	add	r3, pc, #152	; (adr r3, 8005738 <lis2dh_attr_set+0x108>)
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f145 31ff 	adc.w	r1, r5, #4294967295	; 0xffffffff
 80056a8:	e7dd      	b.n	8005666 <lis2dh_attr_set+0x36>
	for (i = 0; i < LIS2DH_NUM_RANGES; i++) {
 80056aa:	2300      	movs	r3, #0
 80056ac:	e7e7      	b.n	800567e <lis2dh_attr_set+0x4e>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
 80056ae:	2301      	movs	r3, #1
 80056b0:	e7e5      	b.n	800567e <lis2dh_attr_set+0x4e>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e7e3      	b.n	800567e <lis2dh_attr_set+0x4e>
		return lis2dh_acc_odr_set(dev, val->val1);
 80056b6:	881b      	ldrh	r3, [r3, #0]
	if (freq == 0U) {
 80056b8:	b123      	cbz	r3, 80056c4 <lis2dh_attr_set+0x94>
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
 80056ba:	4614      	mov	r4, r2
		if (freq == lis2dh_odr_map[i]) {
 80056bc:	4a24      	ldr	r2, [pc, #144]	; (8005750 <lis2dh_attr_set+0x120>)
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
 80056be:	3401      	adds	r4, #1
 80056c0:	2c0b      	cmp	r4, #11
 80056c2:	d102      	bne.n	80056ca <lis2dh_attr_set+0x9a>
	return -EINVAL;
 80056c4:	f06f 0015 	mvn.w	r0, #21
 80056c8:	e7e5      	b.n	8005696 <lis2dh_attr_set+0x66>
		if (freq == lis2dh_odr_map[i]) {
 80056ca:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 80056ce:	4299      	cmp	r1, r3
 80056d0:	d1f5      	bne.n	80056be <lis2dh_attr_set+0x8e>
	status = lis2dh_reg_read_byte(dev, LIS2DH_REG_CTRL1, &value);
 80056d2:	f10d 020f 	add.w	r2, sp, #15
 80056d6:	2120      	movs	r1, #32
 80056d8:	68b0      	ldr	r0, [r6, #8]
 80056da:	f012 fd82 	bl	80181e2 <lis2dh_reg_read_byte.isra.1>
	if (status < 0) {
 80056de:	2800      	cmp	r0, #0
 80056e0:	dbd9      	blt.n	8005696 <lis2dh_attr_set+0x66>
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
 80056e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80056e6:	0719      	lsls	r1, r3, #28
			return i;
 80056e8:	4622      	mov	r2, r4
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
 80056ea:	d404      	bmi.n	80056f6 <lis2dh_attr_set+0xc6>
 80056ec:	2c08      	cmp	r4, #8
 80056ee:	d105      	bne.n	80056fc <lis2dh_attr_set+0xcc>
		return -ENOTSUP;
 80056f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80056f4:	e7cf      	b.n	8005696 <lis2dh_attr_set+0x66>
		odr--;
 80056f6:	2c0a      	cmp	r4, #10
 80056f8:	bf08      	it	eq
 80056fa:	2209      	moveq	r2, #9
				  (value & ~LIS2DH_ODR_MASK) |
 80056fc:	f003 030f 	and.w	r3, r3, #15
	return lis2dh_reg_write_byte(dev, LIS2DH_REG_CTRL1,
 8005700:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	2120      	movs	r1, #32
 8005708:	68b0      	ldr	r0, [r6, #8]
 800570a:	f012 fd56 	bl	80181ba <lis2dh_reg_write_byte.isra.3>
 800570e:	e7c2      	b.n	8005696 <lis2dh_attr_set+0x66>
		LOG_WRN("attr_set() not supported on this channel.");
 8005710:	4b10      	ldr	r3, [pc, #64]	; (8005754 <lis2dh_attr_set+0x124>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f013 0f06 	tst.w	r3, #6
 8005718:	d0ea      	beq.n	80056f0 <lis2dh_attr_set+0xc0>
 800571a:	2302      	movs	r3, #2
 800571c:	f04f 0100 	mov.w	r1, #0
 8005720:	f363 0107 	bfi	r1, r3, #0, #8
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
 8005724:	4a0c      	ldr	r2, [pc, #48]	; (8005758 <lis2dh_attr_set+0x128>)
 8005726:	4b0d      	ldr	r3, [pc, #52]	; (800575c <lis2dh_attr_set+0x12c>)
 8005728:	480d      	ldr	r0, [pc, #52]	; (8005760 <lis2dh_attr_set+0x130>)
 800572a:	1a9b      	subs	r3, r3, r2
 800572c:	08db      	lsrs	r3, r3, #3
 800572e:	f363 118f 	bfi	r1, r3, #6, #10
 8005732:	f00e fa66 	bl	8013c02 <log_0>
 8005736:	e7db      	b.n	80056f0 <lis2dh_attr_set+0xc0>
 8005738:	0095a33a 	.word	0x0095a33a
 800573c:	00000000 	.word	0x00000000
 8005740:	000f4240 	.word	0x000f4240
 8005744:	004ad19d 	.word	0x004ad19d
 8005748:	0801a2bc 	.word	0x0801a2bc
 800574c:	ffb52e63 	.word	0xffb52e63
 8005750:	0801a394 	.word	0x0801a394
 8005754:	20008fe4 	.word	0x20008fe4
 8005758:	08019248 	.word	0x08019248
 800575c:	08019270 	.word	0x08019270
 8005760:	0801d48c 	.word	0x0801d48c

08005764 <send_simple_coap_request.constprop.0>:
static int send_simple_coap_request(u8_t method,char** test_path,u8_t* sensor_data)
 8005764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005766:	4604      	mov	r4, r0
 8005768:	b08b      	sub	sp, #44	; 0x2c
	data = (u8_t *)k_malloc(MAX_COAP_MSG_LEN);
 800576a:	f44f 7080 	mov.w	r0, #256	; 0x100
static int send_simple_coap_request(u8_t method,char** test_path,u8_t* sensor_data)
 800576e:	460f      	mov	r7, r1
	data = (u8_t *)k_malloc(MAX_COAP_MSG_LEN);
 8005770:	f00c fc72 	bl	8012058 <k_malloc>
	if (!data) {
 8005774:	4605      	mov	r5, r0
 8005776:	2800      	cmp	r0, #0
 8005778:	d04b      	beq.n	8005812 <send_simple_coap_request.constprop.0+0xae>
	r = coap_packet_init(&request, data, MAX_COAP_MSG_LEN,
 800577a:	f002 ffef 	bl	800875c <coap_next_token>
 800577e:	4606      	mov	r6, r0
 8005780:	f003 f800 	bl	8008784 <coap_next_id>
 8005784:	2302      	movs	r3, #2
 8005786:	e9cd 6302 	strd	r6, r3, [sp, #8]
 800578a:	2208      	movs	r2, #8
 800578c:	2300      	movs	r3, #0
 800578e:	e9cd 3200 	strd	r3, r2, [sp]
 8005792:	9004      	str	r0, [sp, #16]
 8005794:	2301      	movs	r3, #1
 8005796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800579a:	4629      	mov	r1, r5
 800579c:	a806      	add	r0, sp, #24
 800579e:	f00f fb6c 	bl	8014e7a <coap_packet_init>
	if (r < 0) {
 80057a2:	2800      	cmp	r0, #0
 80057a4:	da10      	bge.n	80057c8 <send_simple_coap_request.constprop.0+0x64>
		printf("Failed to init CoAP message");
 80057a6:	481c      	ldr	r0, [pc, #112]	; (8005818 <send_simple_coap_request.constprop.0+0xb4>)
			printf("Not able to append payload");
 80057a8:	f7fd f9b2 	bl	8002b10 <iprintf>
	k_free(data);
 80057ac:	4628      	mov	r0, r5
 80057ae:	f012 feea 	bl	8018586 <k_free>
	return 0;
 80057b2:	2000      	movs	r0, #0
}
 80057b4:	b00b      	add	sp, #44	; 0x2c
 80057b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (p = test_path; p && *p; p++) {
 80057b8:	b934      	cbnz	r4, 80057c8 <send_simple_coap_request.constprop.0+0x64>
		r = coap_packet_append_payload_marker(&request);
 80057ba:	a806      	add	r0, sp, #24
 80057bc:	f00f fb9e 	bl	8014efc <coap_packet_append_payload_marker>
		if (r < 0) {
 80057c0:	2800      	cmp	r0, #0
 80057c2:	da12      	bge.n	80057ea <send_simple_coap_request.constprop.0+0x86>
			printf("Unable to append payload marker");
 80057c4:	4815      	ldr	r0, [pc, #84]	; (800581c <send_simple_coap_request.constprop.0+0xb8>)
 80057c6:	e7ef      	b.n	80057a8 <send_simple_coap_request.constprop.0+0x44>
	for (p = test_path; p && *p; p++) {
 80057c8:	f854 6b04 	ldr.w	r6, [r4], #4
 80057cc:	2e00      	cmp	r6, #0
 80057ce:	d0f4      	beq.n	80057ba <send_simple_coap_request.constprop.0+0x56>
					      *p, strlen(*p));
 80057d0:	4630      	mov	r0, r6
 80057d2:	f7ff f90d 	bl	80049f0 <strlen>
		r = coap_packet_append_option(&request, COAP_OPTION_URI_PATH,
 80057d6:	4632      	mov	r2, r6
 80057d8:	b283      	uxth	r3, r0
 80057da:	210b      	movs	r1, #11
 80057dc:	a806      	add	r0, sp, #24
 80057de:	f002 ff11 	bl	8008604 <coap_packet_append_option>
		if (r < 0) {
 80057e2:	2800      	cmp	r0, #0
 80057e4:	dae8      	bge.n	80057b8 <send_simple_coap_request.constprop.0+0x54>
			printf("Unable add option to request");
 80057e6:	480e      	ldr	r0, [pc, #56]	; (8005820 <send_simple_coap_request.constprop.0+0xbc>)
 80057e8:	e7de      	b.n	80057a8 <send_simple_coap_request.constprop.0+0x44>
		r = coap_packet_append_payload(&request, (u8_t *)sensor_data,
 80057ea:	221e      	movs	r2, #30
 80057ec:	4639      	mov	r1, r7
 80057ee:	a806      	add	r0, sp, #24
 80057f0:	f00f fb8e 	bl	8014f10 <coap_packet_append_payload>
		if (r < 0) {
 80057f4:	2800      	cmp	r0, #0
 80057f6:	da01      	bge.n	80057fc <send_simple_coap_request.constprop.0+0x98>
			printf("Not able to append payload");
 80057f8:	480a      	ldr	r0, [pc, #40]	; (8005824 <send_simple_coap_request.constprop.0+0xc0>)
 80057fa:	e7d5      	b.n	80057a8 <send_simple_coap_request.constprop.0+0x44>
	r = send(sock, request.data, request.offset, 0);
 80057fc:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <send_simple_coap_request.constprop.0+0xc4>)
 80057fe:	9906      	ldr	r1, [sp, #24]
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	f8bd 201c 	ldrh.w	r2, [sp, #28]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
 8005806:	2300      	movs	r3, #0
 8005808:	e9cd 3300 	strd	r3, r3, [sp]
 800580c:	f00f fcb4 	bl	8015178 <z_impl_zsock_sendto>
 8005810:	e7cc      	b.n	80057ac <send_simple_coap_request.constprop.0+0x48>
		return -ENOMEM;
 8005812:	f06f 000b 	mvn.w	r0, #11
 8005816:	e7cd      	b.n	80057b4 <send_simple_coap_request.constprop.0+0x50>
 8005818:	0801a576 	.word	0x0801a576
 800581c:	0801a5af 	.word	0x0801a5af
 8005820:	0801a592 	.word	0x0801a592
 8005824:	0801a5cf 	.word	0x0801a5cf
 8005828:	2000001c 	.word	0x2000001c

0800582c <floattoint>:
{
 800582c:	b508      	push	{r3, lr}
	return (int)(a+0.5)>=360?(int)(a+0.5)-360:(int)(a+0.5);
 800582e:	ee10 0a10 	vmov	r0, s0
 8005832:	f7fb fef5 	bl	8001620 <__aeabi_f2d>
 8005836:	2200      	movs	r2, #0
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <floattoint+0x24>)
 800583a:	f7fb fd93 	bl	8001364 <__adddf3>
 800583e:	f7fc f959 	bl	8001af4 <__aeabi_d2iz>
 8005842:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 8005846:	bfa8      	it	ge
 8005848:	f5a0 70b4 	subge.w	r0, r0, #360	; 0x168
}
 800584c:	bd08      	pop	{r3, pc}
 800584e:	bf00      	nop
 8005850:	3fe00000 	.word	0x3fe00000

08005854 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
 8005854:	2803      	cmp	r0, #3
{
 8005856:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
 8005858:	d906      	bls.n	8005868 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (fdtable[fd].obj == NULL) {
		errno = EBADF;
 800585a:	f010 f857 	bl	801590c <__errno>
 800585e:	2309      	movs	r3, #9
 8005860:	6003      	str	r3, [r0, #0]
 8005862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
 8005866:	bd08      	pop	{r3, pc}
	if (fdtable[fd].obj == NULL) {
 8005868:	4b03      	ldr	r3, [pc, #12]	; (8005878 <_check_fd+0x24>)
 800586a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0f3      	beq.n	800585a <_check_fd+0x6>
	return 0;
 8005872:	2000      	movs	r0, #0
 8005874:	e7f7      	b.n	8005866 <_check_fd+0x12>
 8005876:	bf00      	nop
 8005878:	20000020 	.word	0x20000020

0800587c <z_get_fd_obj_and_vtable>:

	return fd_entry->obj;
}

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4604      	mov	r4, r0
 8005880:	460d      	mov	r5, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
 8005882:	f7ff ffe7 	bl	8005854 <_check_fd>
 8005886:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
 8005888:	bfa1      	itttt	ge
 800588a:	4b05      	ldrge	r3, [pc, #20]	; (80058a0 <z_get_fd_obj_and_vtable+0x24>)
 800588c:	eb03 02c4 	addge.w	r2, r3, r4, lsl #3

	return fd_entry->obj;
 8005890:	f853 0034 	ldrge.w	r0, [r3, r4, lsl #3]
	*vtable = fd_entry->vtable;
 8005894:	6852      	ldrge	r2, [r2, #4]
 8005896:	bfac      	ite	ge
 8005898:	602a      	strge	r2, [r5, #0]
		return NULL;
 800589a:	2000      	movlt	r0, #0
}
 800589c:	bd38      	pop	{r3, r4, r5, pc}
 800589e:	bf00      	nop
 80058a0:	20000020 	.word	0x20000020

080058a4 <z_reserve_fd>:

int z_reserve_fd(void)
{
 80058a4:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 80058a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80058aa:	480d      	ldr	r0, [pc, #52]	; (80058e0 <z_reserve_fd+0x3c>)
 80058ac:	f00c fc94 	bl	80121d8 <z_impl_k_mutex_lock>
		if (fdtable[fd].obj == NULL) {
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <z_reserve_fd+0x40>)
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
 80058b2:	2400      	movs	r4, #0
		if (fdtable[fd].obj == NULL) {
 80058b4:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 80058b8:	b16a      	cbz	r2, 80058d6 <z_reserve_fd+0x32>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
 80058ba:	3401      	adds	r4, #1
 80058bc:	2c04      	cmp	r4, #4
 80058be:	d1f9      	bne.n	80058b4 <z_reserve_fd+0x10>
	errno = ENFILE;
 80058c0:	f010 f824 	bl	801590c <__errno>
 80058c4:	2317      	movs	r3, #23
 80058c6:	6003      	str	r3, [r0, #0]
	return -1;
 80058c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	z_impl_k_mutex_unlock(mutex);
 80058cc:	4804      	ldr	r0, [pc, #16]	; (80058e0 <z_reserve_fd+0x3c>)
 80058ce:	f00c fcf5 	bl	80122bc <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
 80058d2:	4620      	mov	r0, r4
 80058d4:	bd10      	pop	{r4, pc}
		fdtable[fd].obj = FD_OBJ_RESERVED;
 80058d6:	2201      	movs	r2, #1
 80058d8:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
 80058dc:	e7f6      	b.n	80058cc <z_reserve_fd+0x28>
 80058de:	bf00      	nop
 80058e0:	20009134 	.word	0x20009134
 80058e4:	20000020 	.word	0x20000020

080058e8 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = obj;
 80058e8:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <z_finalize_fd+0x10>)
 80058ea:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	fdtable[fd].vtable = vtable;
 80058ee:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80058f2:	605a      	str	r2, [r3, #4]
}
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000020 	.word	0x20000020

080058fc <z_free_fd>:

void z_free_fd(int fd)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = NULL;
 80058fc:	4b02      	ldr	r3, [pc, #8]	; (8005908 <z_free_fd+0xc>)
 80058fe:	2200      	movs	r2, #0
 8005900:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
}
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	20000020 	.word	0x20000020

0800590c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 800590c:	680b      	ldr	r3, [r1, #0]
 800590e:	3301      	adds	r3, #1
 8005910:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8005912:	4b01      	ldr	r3, [pc, #4]	; (8005918 <char_out+0xc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4718      	bx	r3
 8005918:	20008858 	.word	0x20008858

0800591c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
 800591c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005920:	b085      	sub	sp, #20
 8005922:	469b      	mov	fp, r3
 8005924:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005926:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80059b0 <_printk_dec_ulong+0x94>
 800592a:	2c01      	cmp	r4, #1
 800592c:	bfb8      	it	lt
 800592e:	2401      	movlt	r4, #1
 8005930:	2b01      	cmp	r3, #1
 8005932:	bf0c      	ite	eq
 8005934:	2330      	moveq	r3, #48	; 0x30
 8005936:	2320      	movne	r3, #32
 8005938:	4616      	mov	r6, r2
 800593a:	4682      	mov	sl, r0
 800593c:	4688      	mov	r8, r1
 800593e:	9302      	str	r3, [sp, #8]
 8005940:	2501      	movs	r5, #1
 8005942:	270a      	movs	r7, #10
 8005944:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
 8005946:	fbb6 f3f9 	udiv	r3, r6, r9
 800594a:	9301      	str	r3, [sp, #4]
 800594c:	b90a      	cbnz	r2, 8005952 <_printk_dec_ulong+0x36>
 800594e:	45b1      	cmp	r9, r6
 8005950:	d81d      	bhi.n	800598e <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
 8005952:	9b01      	ldr	r3, [sp, #4]
 8005954:	4641      	mov	r1, r8
 8005956:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800595a:	47d0      	blx	sl
			digits++;
 800595c:	3501      	adds	r5, #1
			found_largest_digit = 1;
 800595e:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
 8005960:	9b01      	ldr	r3, [sp, #4]
		remaining--;
 8005962:	3f01      	subs	r7, #1
	while (pos >= 10) {
 8005964:	2f01      	cmp	r7, #1
		remainder %= pos;
 8005966:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
 800596a:	f04f 030a 	mov.w	r3, #10
 800596e:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
 8005972:	d1e8      	bne.n	8005946 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
 8005974:	4641      	mov	r1, r8
 8005976:	f106 0030 	add.w	r0, r6, #48	; 0x30
 800597a:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
 800597c:	f1bb 0f03 	cmp.w	fp, #3
 8005980:	d102      	bne.n	8005988 <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
 8005982:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
 8005984:	2c00      	cmp	r4, #0
 8005986:	dc0e      	bgt.n	80059a6 <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
 8005988:	b005      	add	sp, #20
 800598a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
 800598e:	42bc      	cmp	r4, r7
 8005990:	dbe6      	blt.n	8005960 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
 8005992:	f1bb 0f02 	cmp.w	fp, #2
 8005996:	d8e3      	bhi.n	8005960 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8005998:	4641      	mov	r1, r8
 800599a:	9802      	ldr	r0, [sp, #8]
 800599c:	9203      	str	r2, [sp, #12]
			digits++;
 800599e:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 80059a0:	47d0      	blx	sl
			digits++;
 80059a2:	9a03      	ldr	r2, [sp, #12]
 80059a4:	e7dc      	b.n	8005960 <_printk_dec_ulong+0x44>
			out(' ', ctx);
 80059a6:	4641      	mov	r1, r8
 80059a8:	2020      	movs	r0, #32
 80059aa:	47d0      	blx	sl
 80059ac:	3c01      	subs	r4, #1
 80059ae:	e7e9      	b.n	8005984 <_printk_dec_ulong+0x68>
 80059b0:	3b9aca00 	.word	0x3b9aca00

080059b4 <__printk_hook_install>:
	_char_out = fn;
 80059b4:	4b01      	ldr	r3, [pc, #4]	; (80059bc <__printk_hook_install+0x8>)
 80059b6:	6018      	str	r0, [r3, #0]
}
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	20008858 	.word	0x20008858

080059c0 <vprintk>:
{
 80059c0:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
 80059c2:	2300      	movs	r3, #0
 80059c4:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4803      	ldr	r0, [pc, #12]	; (80059d8 <vprintk+0x18>)
 80059cc:	a901      	add	r1, sp, #4
 80059ce:	f00d fd87 	bl	80134e0 <z_vprintk>
}
 80059d2:	b003      	add	sp, #12
 80059d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80059d8:	0800590d 	.word	0x0800590d

080059dc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 80059dc:	b530      	push	{r4, r5, lr}
 80059de:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
 80059e0:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
 80059e4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 80059e6:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
 80059e8:	a901      	add	r1, sp, #4
 80059ea:	4805      	ldr	r0, [pc, #20]	; (8005a00 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
 80059ec:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
 80059ee:	f00d fd77 	bl	80134e0 <z_vprintk>

	if (ctx.count < ctx.max) {
 80059f2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 80059f6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 80059f8:	bfb8      	it	lt
 80059fa:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 80059fc:	b005      	add	sp, #20
 80059fe:	bd30      	pop	{r4, r5, pc}
 8005a00:	080134bb 	.word	0x080134bb

08005a04 <stm32f3_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8005a04:	f04f 0210 	mov.w	r2, #16
 8005a08:	f3ef 8311 	mrs	r3, BASEPRI
 8005a0c:	f382 8811 	msr	BASEPRI, r2
 8005a10:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 8 MHz from HSI */
	SystemCoreClock = 8000000;
 8005a1c:	4b02      	ldr	r3, [pc, #8]	; (8005a28 <stm32f3_init+0x24>)
 8005a1e:	4a03      	ldr	r2, [pc, #12]	; (8005a2c <stm32f3_init+0x28>)
 8005a20:	601a      	str	r2, [r3, #0]

	return 0;
}
 8005a22:	2000      	movs	r0, #0
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	20008e74 	.word	0x20008e74
 8005a2c:	007a1200 	.word	0x007a1200

08005a30 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
 8005a30:	070b      	lsls	r3, r1, #28
 8005a32:	d506      	bpl.n	8005a42 <foldcase+0x12>
 8005a34:	4b03      	ldr	r3, [pc, #12]	; (8005a44 <foldcase+0x14>)
 8005a36:	5cc3      	ldrb	r3, [r0, r3]
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	2b01      	cmp	r3, #1
        return tolower(ch);
 8005a3e:	bf08      	it	eq
 8005a40:	3020      	addeq	r0, #32
    return ch;
}
 8005a42:	4770      	bx	lr
 8005a44:	08019513 	.word	0x08019513

08005a48 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
 8005a48:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8005a4a:	2200      	movs	r2, #0
{
 8005a4c:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
 8005a4e:	490d      	ldr	r1, [pc, #52]	; (8005a84 <enable_logger+0x3c>)
 8005a50:	480d      	ldr	r0, [pc, #52]	; (8005a88 <enable_logger+0x40>)
 8005a52:	f013 f8aa 	bl	8018baa <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8005a56:	4d0d      	ldr	r5, [pc, #52]	; (8005a8c <enable_logger+0x44>)
 8005a58:	490d      	ldr	r1, [pc, #52]	; (8005a90 <enable_logger+0x48>)
 8005a5a:	2400      	movs	r4, #0
 8005a5c:	230e      	movs	r3, #14
 8005a5e:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8005a62:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8005a66:	e9cd 4400 	strd	r4, r4, [sp]
 8005a6a:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <enable_logger+0x4c>)
 8005a6c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005a70:	4628      	mov	r0, r5
 8005a72:	f00c ffeb 	bl	8012a4c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
 8005a76:	4908      	ldr	r1, [pc, #32]	; (8005a98 <enable_logger+0x50>)
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f012 ff9e 	bl	80189ba <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8005a7e:	4620      	mov	r0, r4
 8005a80:	b007      	add	sp, #28
 8005a82:	bd30      	pop	{r4, r5, pc}
 8005a84:	08005a9d 	.word	0x08005a9d
 8005a88:	20000054 	.word	0x20000054
 8005a8c:	2000009c 	.word	0x2000009c
 8005a90:	20001d48 	.word	0x20001d48
 8005a94:	0800609d 	.word	0x0800609d
 8005a98:	0801a9f4 	.word	0x0801a9f4

08005a9c <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
 8005a9c:	4801      	ldr	r0, [pc, #4]	; (8005aa4 <log_process_thread_timer_expiry_fn+0x8>)
 8005a9e:	f00c bf19 	b.w	80128d4 <z_impl_k_sem_give>
 8005aa2:	bf00      	nop
 8005aa4:	200090a4 	.word	0x200090a4

08005aa8 <log_core_init>:
{
 8005aa8:	b538      	push	{r3, r4, r5, lr}
		log_msg_pool_init();
 8005aaa:	f000 fb57 	bl	800615c <log_msg_pool_init>
		log_list_init(&list);
 8005aae:	4813      	ldr	r0, [pc, #76]	; (8005afc <log_core_init+0x54>)
 8005ab0:	4c13      	ldr	r4, [pc, #76]	; (8005b00 <log_core_init+0x58>)
 8005ab2:	f00e f87c 	bl	8013bae <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 8005ab6:	4913      	ldr	r1, [pc, #76]	; (8005b04 <log_core_init+0x5c>)
 8005ab8:	4813      	ldr	r0, [pc, #76]	; (8005b08 <log_core_init+0x60>)
 8005aba:	2304      	movs	r3, #4
 8005abc:	2234      	movs	r2, #52	; 0x34
 8005abe:	f012 fd3d 	bl	801853c <k_mem_slab_init>
		timestamp_func = k_uptime_get_32;
 8005ac2:	4b12      	ldr	r3, [pc, #72]	; (8005b0c <log_core_init+0x64>)
 8005ac4:	4a12      	ldr	r2, [pc, #72]	; (8005b10 <log_core_init+0x68>)
 8005ac6:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 8005ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005acc:	f000 fd7a 	bl	80065c4 <log_output_timestamp_freq_set>
 8005ad0:	4810      	ldr	r0, [pc, #64]	; (8005b14 <log_core_init+0x6c>)
 8005ad2:	4b11      	ldr	r3, [pc, #68]	; (8005b18 <log_core_init+0x70>)
 8005ad4:	1a1b      	subs	r3, r3, r0
 8005ad6:	08db      	lsrs	r3, r3, #3
		for (int i = 0; i < log_sources_count(); i++) {
 8005ad8:	2100      	movs	r1, #0
	return __log_const_start[source_id].level;
 8005ada:	3004      	adds	r0, #4
 8005adc:	4299      	cmp	r1, r3
 8005ade:	d100      	bne.n	8005ae2 <log_core_init+0x3a>
}
 8005ae0:	bd38      	pop	{r3, r4, r5, pc}
			LOG_FILTER_SLOT_SET(filters,
 8005ae2:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
 8005ae6:	6825      	ldr	r5, [r4, #0]
 8005ae8:	f002 0207 	and.w	r2, r2, #7
 8005aec:	f025 0507 	bic.w	r5, r5, #7
 8005af0:	432a      	orrs	r2, r5
 8005af2:	f844 2b04 	str.w	r2, [r4], #4
		for (int i = 0; i < log_sources_count(); i++) {
 8005af6:	3101      	adds	r1, #1
 8005af8:	e7f0      	b.n	8005adc <log_core_init+0x34>
 8005afa:	bf00      	nop
 8005afc:	2000004c 	.word	0x2000004c
 8005b00:	20008fd0 	.word	0x20008fd0
 8005b04:	20004718 	.word	0x20004718
 8005b08:	20000080 	.word	0x20000080
 8005b0c:	2000885c 	.word	0x2000885c
 8005b10:	08013bed 	.word	0x08013bed
 8005b14:	08019248 	.word	0x08019248
 8005b18:	08019348 	.word	0x08019348

08005b1c <dropped_notify>:
{
 8005b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005b1e:	4b0f      	ldr	r3, [pc, #60]	; (8005b5c <dropped_notify+0x40>)
 8005b20:	f3bf 8f5b 	dmb	ish
 8005b24:	2500      	movs	r5, #0
 8005b26:	e853 7f00 	ldrex	r7, [r3]
 8005b2a:	e843 5200 	strex	r2, r5, [r3]
 8005b2e:	2a00      	cmp	r2, #0
 8005b30:	d1f9      	bne.n	8005b26 <dropped_notify+0xa>
 8005b32:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 8005b36:	4c0a      	ldr	r4, [pc, #40]	; (8005b60 <dropped_notify+0x44>)
 8005b38:	4e0a      	ldr	r6, [pc, #40]	; (8005b64 <dropped_notify+0x48>)
 8005b3a:	1b36      	subs	r6, r6, r4
 8005b3c:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8005b3e:	42b5      	cmp	r5, r6
 8005b40:	db00      	blt.n	8005b44 <dropped_notify+0x28>
}
 8005b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8005b44:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8005b46:	795b      	ldrb	r3, [r3, #5]
 8005b48:	b12b      	cbz	r3, 8005b56 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	b113      	cbz	r3, 8005b56 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
 8005b50:	4639      	mov	r1, r7
 8005b52:	4620      	mov	r0, r4
 8005b54:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8005b56:	3501      	adds	r5, #1
 8005b58:	3410      	adds	r4, #16
 8005b5a:	e7f0      	b.n	8005b3e <dropped_notify+0x22>
 8005b5c:	20000044 	.word	0x20000044
 8005b60:	08019348 	.word	0x08019348
 8005b64:	08019358 	.word	0x08019358

08005b68 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8005b68:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <log_dropped+0x1c>)
 8005b6a:	f3bf 8f5b 	dmb	ish
 8005b6e:	e853 2f00 	ldrex	r2, [r3]
 8005b72:	3201      	adds	r2, #1
 8005b74:	e843 2100 	strex	r1, r2, [r3]
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	d1f8      	bne.n	8005b6e <log_dropped+0x6>
 8005b7c:	f3bf 8f5b 	dmb	ish
}
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20000044 	.word	0x20000044

08005b88 <log_source_name_get>:
	return ((u8_t *)data - (u8_t *)__log_const_start)/
 8005b88:	4a04      	ldr	r2, [pc, #16]	; (8005b9c <log_source_name_get+0x14>)
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <log_source_name_get+0x18>)
 8005b8c:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 8005b8e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 8005b92:	bf34      	ite	cc
 8005b94:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
 8005b98:	2000      	movcs	r0, #0
}
 8005b9a:	4770      	bx	lr
 8005b9c:	08019248 	.word	0x08019248
 8005ba0:	08019348 	.word	0x08019348

08005ba4 <z_impl_log_filter_set>:
{
 8005ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba8:	4615      	mov	r5, r2
 8005baa:	4698      	mov	r8, r3
	return ((u8_t *)data - (u8_t *)__log_const_start)/
 8005bac:	4a28      	ldr	r2, [pc, #160]	; (8005c50 <z_impl_log_filter_set+0xac>)
 8005bae:	4b29      	ldr	r3, [pc, #164]	; (8005c54 <z_impl_log_filter_set+0xb0>)
 8005bb0:	1ad2      	subs	r2, r2, r3
	assert(src_id < log_sources_count());
 8005bb2:	ebb5 0fd2 	cmp.w	r5, r2, lsr #3
{
 8005bb6:	4689      	mov	r9, r1
	assert(src_id < log_sources_count());
 8005bb8:	d306      	bcc.n	8005bc8 <z_impl_log_filter_set+0x24>
 8005bba:	4b27      	ldr	r3, [pc, #156]	; (8005c58 <z_impl_log_filter_set+0xb4>)
 8005bbc:	4a27      	ldr	r2, [pc, #156]	; (8005c5c <z_impl_log_filter_set+0xb8>)
 8005bbe:	4828      	ldr	r0, [pc, #160]	; (8005c60 <z_impl_log_filter_set+0xbc>)
 8005bc0:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 8005bc4:	f7fc f9d6 	bl	8001f74 <__assert_func>
		if (backend == NULL) {
 8005bc8:	b9b8      	cbnz	r0, 8005bfa <z_impl_log_filter_set+0x56>
	return __log_backends_end - __log_backends_start;
 8005bca:	4b26      	ldr	r3, [pc, #152]	; (8005c64 <z_impl_log_filter_set+0xc0>)
 8005bcc:	4f26      	ldr	r7, [pc, #152]	; (8005c68 <z_impl_log_filter_set+0xc4>)
 8005bce:	1aff      	subs	r7, r7, r3
 8005bd0:	113f      	asrs	r7, r7, #4
			for (int i = 0; i < log_backend_count_get(); i++) {
 8005bd2:	4606      	mov	r6, r0
			u32_t max = 0U;
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	469a      	mov	sl, r3
			for (int i = 0; i < log_backend_count_get(); i++) {
 8005bd8:	42be      	cmp	r6, r7
 8005bda:	db02      	blt.n	8005be2 <z_impl_log_filter_set+0x3e>
}
 8005bdc:	4620      	mov	r0, r4
 8005bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (z_syscall_trap()) {
		return (u32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&src_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, src_id, level);
 8005be2:	eb0a 1006 	add.w	r0, sl, r6, lsl #4
 8005be6:	4643      	mov	r3, r8
 8005be8:	462a      	mov	r2, r5
 8005bea:	4649      	mov	r1, r9
 8005bec:	f7ff ffda 	bl	8005ba4 <z_impl_log_filter_set>
				max = MAX(current, max);
 8005bf0:	4284      	cmp	r4, r0
 8005bf2:	bf38      	it	cc
 8005bf4:	4604      	movcc	r4, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
 8005bf6:	3601      	adds	r6, #1
 8005bf8:	e7ee      	b.n	8005bd8 <z_impl_log_filter_set+0x34>
	return __log_const_start[source_id].level;
 8005bfa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
			LOG_FILTER_SLOT_SET(filters,
 8005bfe:	491b      	ldr	r1, [pc, #108]	; (8005c6c <z_impl_log_filter_set+0xc8>)
		return log_compiled_level_get(src_id);
 8005c00:	791c      	ldrb	r4, [r3, #4]
	return backend->cb->id;
 8005c02:	6843      	ldr	r3, [r0, #4]
			LOG_FILTER_SLOT_SET(filters,
 8005c04:	791a      	ldrb	r2, [r3, #4]
 8005c06:	2307      	movs	r3, #7
 8005c08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005c0c:	fa03 f002 	lsl.w	r0, r3, r2
			level = MIN(level, max);
 8005c10:	4544      	cmp	r4, r8
			LOG_FILTER_SLOT_SET(filters,
 8005c12:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
			level = MIN(level, max);
 8005c16:	bf28      	it	cs
 8005c18:	4644      	movcs	r4, r8
			LOG_FILTER_SLOT_SET(filters,
 8005c1a:	ea23 0300 	bic.w	r3, r3, r0
 8005c1e:	f004 0007 	and.w	r0, r4, #7
 8005c22:	fa00 f202 	lsl.w	r2, r0, r2
 8005c26:	4313      	orrs	r3, r2
	u32_t max_filter = LOG_LEVEL_NONE;
 8005c28:	2000      	movs	r0, #0
			LOG_FILTER_SLOT_SET(filters,
 8005c2a:	2203      	movs	r2, #3
		u32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
 8005c2c:	fa23 f602 	lsr.w	r6, r3, r2
 8005c30:	f006 0607 	and.w	r6, r6, #7
 8005c34:	42b0      	cmp	r0, r6
 8005c36:	f102 0203 	add.w	r2, r2, #3
 8005c3a:	bf38      	it	cc
 8005c3c:	4630      	movcc	r0, r6
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
 8005c3e:	2a1e      	cmp	r2, #30
 8005c40:	d1f4      	bne.n	8005c2c <z_impl_log_filter_set+0x88>
			LOG_FILTER_SLOT_SET(filters,
 8005c42:	f023 0307 	bic.w	r3, r3, #7
 8005c46:	4303      	orrs	r3, r0
 8005c48:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
	return level;
 8005c4c:	e7c6      	b.n	8005bdc <z_impl_log_filter_set+0x38>
 8005c4e:	bf00      	nop
 8005c50:	08019348 	.word	0x08019348
 8005c54:	08019248 	.word	0x08019248
 8005c58:	0801a68f 	.word	0x0801a68f
 8005c5c:	0801a5f3 	.word	0x0801a5f3
 8005c60:	0801a665 	.word	0x0801a665
 8005c64:	08019348 	.word	0x08019348
 8005c68:	08019358 	.word	0x08019358
 8005c6c:	20008fd0 	.word	0x20008fd0

08005c70 <backend_filter_set>:
{
 8005c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((u8_t *)data - (u8_t *)__log_const_start)/
 8005c72:	4c09      	ldr	r4, [pc, #36]	; (8005c98 <backend_filter_set+0x28>)
 8005c74:	4b09      	ldr	r3, [pc, #36]	; (8005c9c <backend_filter_set+0x2c>)
 8005c76:	1ae4      	subs	r4, r4, r3
 8005c78:	4606      	mov	r6, r0
 8005c7a:	460f      	mov	r7, r1
 8005c7c:	08e4      	lsrs	r4, r4, #3
		for (int i = 0; i < log_sources_count(); i++) {
 8005c7e:	2500      	movs	r5, #0
 8005c80:	42a5      	cmp	r5, r4
 8005c82:	d100      	bne.n	8005c86 <backend_filter_set+0x16>
}
 8005c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c86:	2100      	movs	r1, #0
 8005c88:	462a      	mov	r2, r5
 8005c8a:	463b      	mov	r3, r7
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f7ff ff89 	bl	8005ba4 <z_impl_log_filter_set>
		for (int i = 0; i < log_sources_count(); i++) {
 8005c92:	3501      	adds	r5, #1
 8005c94:	e7f4      	b.n	8005c80 <backend_filter_set+0x10>
 8005c96:	bf00      	nop
 8005c98:	08019348 	.word	0x08019348
 8005c9c:	08019248 	.word	0x08019248

08005ca0 <log_backend_enable>:
{
 8005ca0:	b538      	push	{r3, r4, r5, lr}
	id += backend - log_backend_get(0);
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <log_backend_enable+0x34>)
 8005ca4:	1ac3      	subs	r3, r0, r3
{
 8005ca6:	460d      	mov	r5, r1
	id += backend - log_backend_get(0);
 8005ca8:	111b      	asrs	r3, r3, #4
	log_backend_id_set(backend, id);
 8005caa:	6841      	ldr	r1, [r0, #4]
{
 8005cac:	4604      	mov	r4, r0
	id += backend - log_backend_get(0);
 8005cae:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
 8005cb0:	710b      	strb	r3, [r1, #4]
	backend_filter_set(backend, level);
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	f7ff ffdc 	bl	8005c70 <backend_filter_set>
	log_backend_activate(backend, ctx);
 8005cb8:	6863      	ldr	r3, [r4, #4]
	if (!backend_attached) {
 8005cba:	4c07      	ldr	r4, [pc, #28]	; (8005cd8 <log_backend_enable+0x38>)
	backend->cb->ctx = ctx;
 8005cbc:	601d      	str	r5, [r3, #0]
	backend->cb->active = true;
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	715a      	strb	r2, [r3, #5]
 8005cc2:	7822      	ldrb	r2, [r4, #0]
 8005cc4:	b912      	cbnz	r2, 8005ccc <log_backend_enable+0x2c>
 8005cc6:	4805      	ldr	r0, [pc, #20]	; (8005cdc <log_backend_enable+0x3c>)
 8005cc8:	f00c fe04 	bl	80128d4 <z_impl_k_sem_give>
	backend_attached = true;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	7023      	strb	r3, [r4, #0]
}
 8005cd0:	bd38      	pop	{r3, r4, r5, pc}
 8005cd2:	bf00      	nop
 8005cd4:	08019348 	.word	0x08019348
 8005cd8:	20001a8a 	.word	0x20001a8a
 8005cdc:	200090a4 	.word	0x200090a4

08005ce0 <log_init>:
{
 8005ce0:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
 8005ce2:	4b15      	ldr	r3, [pc, #84]	; (8005d38 <log_init+0x58>)
 8005ce4:	4c15      	ldr	r4, [pc, #84]	; (8005d3c <log_init+0x5c>)
 8005ce6:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
 8005ce8:	2b90      	cmp	r3, #144	; 0x90
 8005cea:	dd06      	ble.n	8005cfa <log_init+0x1a>
 8005cec:	4b14      	ldr	r3, [pc, #80]	; (8005d40 <log_init+0x60>)
 8005cee:	4a15      	ldr	r2, [pc, #84]	; (8005d44 <log_init+0x64>)
 8005cf0:	4815      	ldr	r0, [pc, #84]	; (8005d48 <log_init+0x68>)
 8005cf2:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8005cf6:	f7fc f93d 	bl	8001f74 <__assert_func>
 8005cfa:	4a14      	ldr	r2, [pc, #80]	; (8005d4c <log_init+0x6c>)
 8005cfc:	f3bf 8f5b 	dmb	ish
 8005d00:	e852 6f00 	ldrex	r6, [r2]
 8005d04:	1c71      	adds	r1, r6, #1
 8005d06:	e842 1000 	strex	r0, r1, [r2]
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d1f8      	bne.n	8005d00 <log_init+0x20>
 8005d0e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8005d12:	b916      	cbnz	r6, 8005d1a <log_init+0x3a>
 8005d14:	111d      	asrs	r5, r3, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 8005d16:	42ae      	cmp	r6, r5
 8005d18:	db00      	blt.n	8005d1c <log_init+0x3c>
}
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
 8005d1c:	7b23      	ldrb	r3, [r4, #12]
 8005d1e:	b143      	cbz	r3, 8005d32 <log_init+0x52>
			if (backend->api->init != NULL) {
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	b103      	cbz	r3, 8005d28 <log_init+0x48>
				backend->api->init();
 8005d26:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
 8005d28:	2204      	movs	r2, #4
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f7ff ffb7 	bl	8005ca0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8005d32:	3601      	adds	r6, #1
 8005d34:	3410      	adds	r4, #16
 8005d36:	e7ee      	b.n	8005d16 <log_init+0x36>
 8005d38:	08019358 	.word	0x08019358
 8005d3c:	08019348 	.word	0x08019348
 8005d40:	0801a618 	.word	0x0801a618
 8005d44:	0801a5ea 	.word	0x0801a5ea
 8005d48:	0801a665 	.word	0x0801a665
 8005d4c:	20000048 	.word	0x20000048

08005d50 <log_filter_get>:
{
 8005d50:	b510      	push	{r4, lr}
 8005d52:	490e      	ldr	r1, [pc, #56]	; (8005d8c <log_filter_get+0x3c>)
 8005d54:	4c0e      	ldr	r4, [pc, #56]	; (8005d90 <log_filter_get+0x40>)
 8005d56:	1a64      	subs	r4, r4, r1
	assert(src_id < log_sources_count());
 8005d58:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
 8005d5c:	d306      	bcc.n	8005d6c <log_filter_get+0x1c>
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <log_filter_get+0x44>)
 8005d60:	4a0d      	ldr	r2, [pc, #52]	; (8005d98 <log_filter_get+0x48>)
 8005d62:	480e      	ldr	r0, [pc, #56]	; (8005d9c <log_filter_get+0x4c>)
 8005d64:	f240 3155 	movw	r1, #853	; 0x355
 8005d68:	f7fc f904 	bl	8001f74 <__assert_func>
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
 8005d6c:	b153      	cbz	r3, 8005d84 <log_filter_get+0x34>
	return backend->cb->id;
 8005d6e:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
 8005d70:	490b      	ldr	r1, [pc, #44]	; (8005da0 <log_filter_get+0x50>)
 8005d72:	7918      	ldrb	r0, [r3, #4]
 8005d74:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8005d78:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8005d7c:	40d8      	lsrs	r0, r3
 8005d7e:	f000 0007 	and.w	r0, r0, #7
}
 8005d82:	bd10      	pop	{r4, pc}
	return __log_const_start[source_id].level;
 8005d84:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
		return log_compiled_level_get(src_id);
 8005d88:	7908      	ldrb	r0, [r1, #4]
 8005d8a:	e7fa      	b.n	8005d82 <log_filter_get+0x32>
 8005d8c:	08019248 	.word	0x08019248
 8005d90:	08019348 	.word	0x08019348
 8005d94:	0801a68f 	.word	0x0801a68f
 8005d98:	0801a609 	.word	0x0801a609
 8005d9c:	0801a665 	.word	0x0801a665
 8005da0:	20008fd0 	.word	0x20008fd0

08005da4 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
 8005da4:	4b16      	ldr	r3, [pc, #88]	; (8005e00 <log_strdup+0x5c>)
 8005da6:	4298      	cmp	r0, r3
{
 8005da8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005daa:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 8005dac:	d302      	bcc.n	8005db4 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
 8005dae:	4b15      	ldr	r3, [pc, #84]	; (8005e04 <log_strdup+0x60>)
 8005db0:	4298      	cmp	r0, r3
 8005db2:	d31f      	bcc.n	8005df4 <log_strdup+0x50>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 8005db4:	2200      	movs	r2, #0
 8005db6:	a901      	add	r1, sp, #4
 8005db8:	4813      	ldr	r0, [pc, #76]	; (8005e08 <log_strdup+0x64>)
 8005dba:	f00c f867 	bl	8011e8c <k_mem_slab_alloc>
	if (err != 0) {
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	b9d8      	cbnz	r0, 8005dfa <log_strdup+0x56>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	9b01      	ldr	r3, [sp, #4]
 8005dc6:	f3bf 8f5b 	dmb	ish
 8005dca:	e853 1f00 	ldrex	r1, [r3]
 8005dce:	e843 2000 	strex	r0, r2, [r3]
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d1f9      	bne.n	8005dca <log_strdup+0x26>
 8005dd6:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
 8005dda:	9d01      	ldr	r5, [sp, #4]
 8005ddc:	1d2b      	adds	r3, r5, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 8005dde:	222d      	movs	r2, #45	; 0x2d
 8005de0:	4621      	mov	r1, r4
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fe fe1e 	bl	8004a24 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
 8005de8:	227e      	movs	r2, #126	; 0x7e
 8005dea:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 8005dee:	f885 6032 	strb.w	r6, [r5, #50]	; 0x32
	return dup->buf;
 8005df2:	4604      	mov	r4, r0
}
 8005df4:	4620      	mov	r0, r4
 8005df6:	b002      	add	sp, #8
 8005df8:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
 8005dfa:	4c04      	ldr	r4, [pc, #16]	; (8005e0c <log_strdup+0x68>)
 8005dfc:	e7fa      	b.n	8005df4 <log_strdup+0x50>
 8005dfe:	bf00      	nop
 8005e00:	08018e58 	.word	0x08018e58
 8005e04:	0801d870 	.word	0x0801d870
 8005e08:	20000080 	.word	0x20000080
 8005e0c:	0801a64b 	.word	0x0801a64b

08005e10 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
 8005e10:	b148      	cbz	r0, 8005e26 <log_is_strdup+0x16>
 8005e12:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <log_is_strdup+0x18>)
 8005e14:	4298      	cmp	r0, r3
 8005e16:	d305      	bcc.n	8005e24 <log_is_strdup+0x14>
 8005e18:	33d0      	adds	r3, #208	; 0xd0
 8005e1a:	4298      	cmp	r0, r3
 8005e1c:	bf2c      	ite	cs
 8005e1e:	2000      	movcs	r0, #0
 8005e20:	2001      	movcc	r0, #1
 8005e22:	4770      	bx	lr
 8005e24:	2000      	movs	r0, #0
}
 8005e26:	4770      	bx	lr
 8005e28:	20004718 	.word	0x20004718

08005e2c <z_impl_log_process>:
{
 8005e2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
 8005e30:	4b5d      	ldr	r3, [pc, #372]	; (8005fa8 <z_impl_log_process+0x17c>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
{
 8005e34:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 8005e36:	b903      	cbnz	r3, 8005e3a <z_impl_log_process+0xe>
 8005e38:	b360      	cbz	r0, 8005e94 <z_impl_log_process+0x68>
	__asm__ volatile(
 8005e3a:	f04f 0310 	mov.w	r3, #16
 8005e3e:	f3ef 8611 	mrs	r6, BASEPRI
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
 8005e4a:	4858      	ldr	r0, [pc, #352]	; (8005fac <z_impl_log_process+0x180>)
 8005e4c:	f00d febf 	bl	8013bce <log_list_head_get>
 8005e50:	4605      	mov	r5, r0
	__asm__ volatile(
 8005e52:	f386 8811 	msr	BASEPRI, r6
 8005e56:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
 8005e5a:	b178      	cbz	r0, 8005e7c <z_impl_log_process+0x50>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8005e5c:	f3bf 8f5b 	dmb	ish
 8005e60:	4b53      	ldr	r3, [pc, #332]	; (8005fb0 <z_impl_log_process+0x184>)
 8005e62:	e853 2f00 	ldrex	r2, [r3]
 8005e66:	3a01      	subs	r2, #1
 8005e68:	e843 2100 	strex	r1, r2, [r3]
 8005e6c:	2900      	cmp	r1, #0
 8005e6e:	d1f8      	bne.n	8005e62 <z_impl_log_process+0x36>
 8005e70:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
 8005e74:	b18c      	cbz	r4, 8005e9a <z_impl_log_process+0x6e>
	log_msg_put(msg);
 8005e76:	4628      	mov	r0, r5
 8005e78:	f00d ffa1 	bl	8013dbe <log_msg_put>
	if (!bypass && dropped_cnt) {
 8005e7c:	b924      	cbnz	r4, 8005e88 <z_impl_log_process+0x5c>
 8005e7e:	4b4d      	ldr	r3, [pc, #308]	; (8005fb4 <z_impl_log_process+0x188>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	b10b      	cbz	r3, 8005e88 <z_impl_log_process+0x5c>
		dropped_notify();
 8005e84:	f7ff fe4a 	bl	8005b1c <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
 8005e88:	4848      	ldr	r0, [pc, #288]	; (8005fac <z_impl_log_process+0x180>)
 8005e8a:	f00d fe9e 	bl	8013bca <log_list_head_peek>
 8005e8e:	1c04      	adds	r4, r0, #0
 8005e90:	bf18      	it	ne
 8005e92:	2401      	movne	r4, #1
}
 8005e94:	4620      	mov	r0, r4
 8005e96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
 8005e9a:	4b47      	ldr	r3, [pc, #284]	; (8005fb8 <z_impl_log_process+0x18c>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
 8005e9e:	b9eb      	cbnz	r3, 8005edc <z_impl_log_process+0xb0>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8005ea0:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
 8005ea2:	07da      	lsls	r2, r3, #31
 8005ea4:	d41a      	bmi.n	8005edc <z_impl_log_process+0xb0>
	msg_str = log_msg_str_get(msg);
 8005ea6:	f00d ff9d 	bl	8013de4 <log_msg_str_get>
 8005eaa:	4681      	mov	r9, r0
	mask = count_s(msg_str, log_msg_nargs_get(msg));
 8005eac:	4628      	mov	r0, r5
 8005eae:	f00d ff66 	bl	8013d7e <log_msg_nargs_get>
		} else if (arm && isalpha((int)curr)) {
 8005eb2:	f8df c128 	ldr.w	ip, [pc, #296]	; 8005fdc <z_impl_log_process+0x1b0>
	bool arm = false;
 8005eb6:	4622      	mov	r2, r4
	mask = count_s(msg_str, log_msg_nargs_get(msg));
 8005eb8:	464f      	mov	r7, r9
	u32_t mask = 0;
 8005eba:	4626      	mov	r6, r4
	u32_t arg = 0;
 8005ebc:	4623      	mov	r3, r4
				mask |= BIT(arg);
 8005ebe:	f04f 0e01 	mov.w	lr, #1
	while ((curr = *str++) && arg < nargs) {
 8005ec2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005ec6:	b109      	cbz	r1, 8005ecc <z_impl_log_process+0xa0>
 8005ec8:	4298      	cmp	r0, r3
 8005eca:	d80f      	bhi.n	8005eec <z_impl_log_process+0xc0>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
 8005ecc:	4b3b      	ldr	r3, [pc, #236]	; (8005fbc <z_impl_log_process+0x190>)
				LOG_ERR(ERR_MSG, idx, msg_str);
 8005ece:	4a3c      	ldr	r2, [pc, #240]	; (8005fc0 <z_impl_log_process+0x194>)
 8005ed0:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8005fe0 <z_impl_log_process+0x1b4>
 8005ed4:	1a9b      	subs	r3, r3, r2
 8005ed6:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
 8005eda:	b9de      	cbnz	r6, 8005f14 <z_impl_log_process+0xe8>
	return __log_backends_end - __log_backends_start;
 8005edc:	4e39      	ldr	r6, [pc, #228]	; (8005fc4 <z_impl_log_process+0x198>)
 8005ede:	4b3a      	ldr	r3, [pc, #232]	; (8005fc8 <z_impl_log_process+0x19c>)
 8005ee0:	1b9b      	subs	r3, r3, r6
 8005ee2:	ea4f 1923 	mov.w	r9, r3, asr #4
 8005ee6:	f04f 0800 	mov.w	r8, #0
 8005eea:	e059      	b.n	8005fa0 <z_impl_log_process+0x174>
		if (curr == '%') {
 8005eec:	2925      	cmp	r1, #37	; 0x25
 8005eee:	d102      	bne.n	8005ef6 <z_impl_log_process+0xca>
			arm = !arm;
 8005ef0:	f082 0201 	eor.w	r2, r2, #1
 8005ef4:	e7e5      	b.n	8005ec2 <z_impl_log_process+0x96>
		} else if (arm && isalpha((int)curr)) {
 8005ef6:	2a00      	cmp	r2, #0
 8005ef8:	d0e3      	beq.n	8005ec2 <z_impl_log_process+0x96>
 8005efa:	f811 a00c 	ldrb.w	sl, [r1, ip]
 8005efe:	f01a 0f03 	tst.w	sl, #3
 8005f02:	d0de      	beq.n	8005ec2 <z_impl_log_process+0x96>
			if (curr == 's') {
 8005f04:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
 8005f06:	bf04      	itt	eq
 8005f08:	fa0e f203 	lsleq.w	r2, lr, r3
 8005f0c:	4316      	orreq	r6, r2
			arg++;
 8005f0e:	3301      	adds	r3, #1
			arm = false;
 8005f10:	2200      	movs	r2, #0
 8005f12:	e7d6      	b.n	8005ec2 <z_impl_log_process+0x96>
		idx = 31 - __builtin_clz(mask);
 8005f14:	fab6 f786 	clz	r7, r6
 8005f18:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
 8005f1c:	4639      	mov	r1, r7
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f00d ff30 	bl	8013d84 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
 8005f24:	4b29      	ldr	r3, [pc, #164]	; (8005fcc <z_impl_log_process+0x1a0>)
 8005f26:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
 8005f28:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 8005f2a:	d302      	bcc.n	8005f32 <z_impl_log_process+0x106>
		if (!is_rodata(str) && !log_is_strdup(str) &&
 8005f2c:	4b28      	ldr	r3, [pc, #160]	; (8005fd0 <z_impl_log_process+0x1a4>)
 8005f2e:	4298      	cmp	r0, r3
 8005f30:	d318      	bcc.n	8005f64 <z_impl_log_process+0x138>
 8005f32:	4610      	mov	r0, r2
 8005f34:	f7ff ff6c 	bl	8005e10 <log_is_strdup>
 8005f38:	b9a0      	cbnz	r0, 8005f64 <z_impl_log_process+0x138>
 8005f3a:	4b26      	ldr	r3, [pc, #152]	; (8005fd4 <z_impl_log_process+0x1a8>)
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d011      	beq.n	8005f64 <z_impl_log_process+0x138>
				LOG_ERR(ERR_MSG, idx, msg_str);
 8005f40:	f8db 3000 	ldr.w	r3, [fp]
 8005f44:	075b      	lsls	r3, r3, #29
 8005f46:	d00d      	beq.n	8005f64 <z_impl_log_process+0x138>
 8005f48:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
 8005f4c:	f043 0301 	orr.w	r3, r3, #1
 8005f50:	f363 0807 	bfi	r8, r3, #0, #8
 8005f54:	f36a 188f 	bfi	r8, sl, #6, #10
 8005f58:	4643      	mov	r3, r8
 8005f5a:	464a      	mov	r2, r9
 8005f5c:	4639      	mov	r1, r7
 8005f5e:	481e      	ldr	r0, [pc, #120]	; (8005fd8 <z_impl_log_process+0x1ac>)
 8005f60:	f00d fe70 	bl	8013c44 <log_2>
		mask &= ~BIT(idx);
 8005f64:	2301      	movs	r3, #1
 8005f66:	fa03 f707 	lsl.w	r7, r3, r7
 8005f6a:	ea26 0607 	bic.w	r6, r6, r7
 8005f6e:	e7b4      	b.n	8005eda <z_impl_log_process+0xae>
	return backend->cb->active;
 8005f70:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
 8005f72:	795b      	ldrb	r3, [r3, #5]
 8005f74:	b18b      	cbz	r3, 8005f9a <z_impl_log_process+0x16e>
	return msg->hdr.ids.domain_id;
 8005f76:	7aaf      	ldrb	r7, [r5, #10]
	return msg->hdr.ids.source_id;
 8005f78:	896a      	ldrh	r2, [r5, #10]
		backend_level = log_filter_get(backend,
 8005f7a:	f3c7 01c2 	ubfx	r1, r7, #3, #3
 8005f7e:	2301      	movs	r3, #1
 8005f80:	0992      	lsrs	r2, r2, #6
 8005f82:	4630      	mov	r0, r6
 8005f84:	f7ff fee4 	bl	8005d50 <log_filter_get>
	return msg->hdr.ids.level;
 8005f88:	f007 0707 	and.w	r7, r7, #7
			if (log_backend_is_active(backend) &&
 8005f8c:	42b8      	cmp	r0, r7
 8005f8e:	d304      	bcc.n	8005f9a <z_impl_log_process+0x16e>
	backend->api->put(backend, msg);
 8005f90:	6833      	ldr	r3, [r6, #0]
 8005f92:	4629      	mov	r1, r5
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4630      	mov	r0, r6
 8005f98:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
 8005f9a:	f108 0801 	add.w	r8, r8, #1
 8005f9e:	3610      	adds	r6, #16
 8005fa0:	45c8      	cmp	r8, r9
 8005fa2:	dbe5      	blt.n	8005f70 <z_impl_log_process+0x144>
 8005fa4:	e767      	b.n	8005e76 <z_impl_log_process+0x4a>
 8005fa6:	bf00      	nop
 8005fa8:	20001a8a 	.word	0x20001a8a
 8005fac:	2000004c 	.word	0x2000004c
 8005fb0:	20000040 	.word	0x20000040
 8005fb4:	20000044 	.word	0x20000044
 8005fb8:	20001a8b 	.word	0x20001a8b
 8005fbc:	08019278 	.word	0x08019278
 8005fc0:	08019248 	.word	0x08019248
 8005fc4:	08019348 	.word	0x08019348
 8005fc8:	08019358 	.word	0x08019358
 8005fcc:	08018e58 	.word	0x08018e58
 8005fd0:	0801d870 	.word	0x0801d870
 8005fd4:	0801a64b 	.word	0x0801a64b
 8005fd8:	0801a6ac 	.word	0x0801a6ac
 8005fdc:	08019513 	.word	0x08019513
 8005fe0:	20008fe8 	.word	0x20008fe8

08005fe4 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
 8005fe4:	4b26      	ldr	r3, [pc, #152]	; (8006080 <msg_finalize+0x9c>)
{
 8005fe6:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
 8005fe8:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
 8005fea:	8141      	strh	r1, [r0, #10]
{
 8005fec:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
 8005fee:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8005ff0:	4c24      	ldr	r4, [pc, #144]	; (8006084 <msg_finalize+0xa0>)
 8005ff2:	60e8      	str	r0, [r5, #12]
 8005ff4:	f3bf 8f5b 	dmb	ish
 8005ff8:	e854 3f00 	ldrex	r3, [r4]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	e844 3200 	strex	r2, r3, [r4]
 8006002:	2a00      	cmp	r2, #0
 8006004:	d1f8      	bne.n	8005ff8 <msg_finalize+0x14>
 8006006:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
 800600a:	f04f 0310 	mov.w	r3, #16
 800600e:	f3ef 8611 	mrs	r6, BASEPRI
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 800601a:	481b      	ldr	r0, [pc, #108]	; (8006088 <msg_finalize+0xa4>)
 800601c:	4629      	mov	r1, r5
 800601e:	f00d fdca 	bl	8013bb6 <log_list_add_tail>
	__asm__ volatile(
 8006022:	f386 8811 	msr	BASEPRI, r6
 8006026:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
 800602a:	4b18      	ldr	r3, [pc, #96]	; (800608c <msg_finalize+0xa8>)
 800602c:	781a      	ldrb	r2, [r3, #0]
 800602e:	b17a      	cbz	r2, 8006050 <msg_finalize+0x6c>
	__asm__ volatile(
 8006030:	f04f 0310 	mov.w	r3, #16
 8006034:	f3ef 8411 	mrs	r4, BASEPRI
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
	return z_impl_log_process(bypass);
 8006040:	2000      	movs	r0, #0
 8006042:	f7ff fef3 	bl	8005e2c <z_impl_log_process>
	__asm__ volatile(
 8006046:	f384 8811 	msr	BASEPRI, r4
 800604a:	f3bf 8f6f 	isb	sy
}
 800604e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 8006050:	490f      	ldr	r1, [pc, #60]	; (8006090 <msg_finalize+0xac>)
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	6809      	ldr	r1, [r1, #0]
 8006056:	2900      	cmp	r1, #0
 8006058:	d0f9      	beq.n	800604e <msg_finalize+0x6a>
 800605a:	2b01      	cmp	r3, #1
 800605c:	d106      	bne.n	800606c <msg_finalize+0x88>
	z_impl_k_timer_start(timer, duration, period);
 800605e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006062:	480c      	ldr	r0, [pc, #48]	; (8006094 <msg_finalize+0xb0>)
}
 8006064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006068:	f00c bf3e 	b.w	8012ee8 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 800606c:	2b0a      	cmp	r3, #10
 800606e:	d1ee      	bne.n	800604e <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
 8006070:	4808      	ldr	r0, [pc, #32]	; (8006094 <msg_finalize+0xb0>)
 8006072:	f012 fda6 	bl	8018bc2 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8006076:	4808      	ldr	r0, [pc, #32]	; (8006098 <msg_finalize+0xb4>)
}
 8006078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800607c:	f00c bc2a 	b.w	80128d4 <z_impl_k_sem_give>
 8006080:	2000885c 	.word	0x2000885c
 8006084:	20000040 	.word	0x20000040
 8006088:	2000004c 	.word	0x2000004c
 800608c:	20001a8b 	.word	0x20001a8b
 8006090:	20000100 	.word	0x20000100
 8006094:	20000054 	.word	0x20000054
 8006098:	200090a4 	.word	0x200090a4

0800609c <log_process_thread_func>:
{
 800609c:	b508      	push	{r3, lr}
	log_init();
 800609e:	f7ff fe1f 	bl	8005ce0 <log_init>
	return z_impl_k_current_get();
 80060a2:	f00c fc11 	bl	80128c8 <z_impl_k_current_get>
	proc_tid = process_tid;
 80060a6:	4b0b      	ldr	r3, [pc, #44]	; (80060d4 <log_process_thread_func+0x38>)
 80060a8:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 80060aa:	b130      	cbz	r0, 80060ba <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 80060ac:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <log_process_thread_func+0x3c>)
	    process_tid &&
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b09      	cmp	r3, #9
 80060b2:	dd02      	ble.n	80060ba <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
 80060b4:	4809      	ldr	r0, [pc, #36]	; (80060dc <log_process_thread_func+0x40>)
 80060b6:	f00c fc0d 	bl	80128d4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
 80060ba:	4c08      	ldr	r4, [pc, #32]	; (80060dc <log_process_thread_func+0x40>)
 80060bc:	2000      	movs	r0, #0
 80060be:	f7ff feb5 	bl	8005e2c <z_impl_log_process>
		if (log_process(false) == false) {
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d1fa      	bne.n	80060bc <log_process_thread_func+0x20>
 80060c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80060ca:	4620      	mov	r0, r4
 80060cc:	f00c fc2e 	bl	801292c <z_impl_k_sem_take>
 80060d0:	e7f4      	b.n	80060bc <log_process_thread_func+0x20>
 80060d2:	bf00      	nop
 80060d4:	20000100 	.word	0x20000100
 80060d8:	20000040 	.word	0x20000040
 80060dc:	200090a4 	.word	0x200090a4

080060e0 <z_impl_log_panic>:
{
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 80060e2:	4f0e      	ldr	r7, [pc, #56]	; (800611c <z_impl_log_panic+0x3c>)
 80060e4:	783d      	ldrb	r5, [r7, #0]
 80060e6:	b975      	cbnz	r5, 8006106 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
 80060e8:	4c0d      	ldr	r4, [pc, #52]	; (8006120 <z_impl_log_panic+0x40>)
 80060ea:	4e0e      	ldr	r6, [pc, #56]	; (8006124 <z_impl_log_panic+0x44>)
	log_init();
 80060ec:	f7ff fdf8 	bl	8005ce0 <log_init>
 80060f0:	1b36      	subs	r6, r6, r4
 80060f2:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 80060f4:	42b5      	cmp	r5, r6
 80060f6:	db07      	blt.n	8006108 <z_impl_log_panic+0x28>
 80060f8:	2000      	movs	r0, #0
 80060fa:	f7ff fe97 	bl	8005e2c <z_impl_log_process>
		while (log_process(false) == true) {
 80060fe:	2800      	cmp	r0, #0
 8006100:	d1fa      	bne.n	80060f8 <z_impl_log_panic+0x18>
	panic_mode = true;
 8006102:	2301      	movs	r3, #1
 8006104:	703b      	strb	r3, [r7, #0]
}
 8006106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 8006108:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 800610a:	795b      	ldrb	r3, [r3, #5]
 800610c:	b11b      	cbz	r3, 8006116 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	4620      	mov	r0, r4
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8006116:	3501      	adds	r5, #1
 8006118:	3410      	adds	r4, #16
 800611a:	e7eb      	b.n	80060f4 <z_impl_log_panic+0x14>
 800611c:	20001a8b 	.word	0x20001a8b
 8006120:	08019348 	.word	0x08019348
 8006124:	08019358 	.word	0x08019358

08006128 <log_free>:
{
 8006128:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 800612a:	3804      	subs	r0, #4
 800612c:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800612e:	f3bf 8f5b 	dmb	ish
 8006132:	e850 3f00 	ldrex	r3, [r0]
 8006136:	1e5a      	subs	r2, r3, #1
 8006138:	e840 2100 	strex	r1, r2, [r0]
 800613c:	2900      	cmp	r1, #0
 800613e:	d1f8      	bne.n	8006132 <log_free+0xa>
 8006140:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
 8006144:	2b01      	cmp	r3, #1
 8006146:	d103      	bne.n	8006150 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 8006148:	a901      	add	r1, sp, #4
 800614a:	4803      	ldr	r0, [pc, #12]	; (8006158 <log_free+0x30>)
 800614c:	f00b feca 	bl	8011ee4 <k_mem_slab_free>
}
 8006150:	b003      	add	sp, #12
 8006152:	f85d fb04 	ldr.w	pc, [sp], #4
 8006156:	bf00      	nop
 8006158:	20000080 	.word	0x20000080

0800615c <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 800615c:	2320      	movs	r3, #32
 800615e:	461a      	mov	r2, r3
 8006160:	4901      	ldr	r1, [pc, #4]	; (8006168 <log_msg_pool_init+0xc>)
 8006162:	4802      	ldr	r0, [pc, #8]	; (800616c <log_msg_pool_init+0x10>)
 8006164:	f012 b9ea 	b.w	801853c <k_mem_slab_init>
 8006168:	200047e8 	.word	0x200047e8
 800616c:	20000104 	.word	0x20000104

08006170 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
 8006170:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
 8006172:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
 8006174:	4d09      	ldr	r5, [pc, #36]	; (800619c <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	2001      	movs	r0, #1
 800617a:	f7ff fe57 	bl	8005e2c <z_impl_log_process>
 800617e:	4604      	mov	r4, r0
			log_dropped();
 8006180:	f7ff fcf2 	bl	8005b68 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 8006184:	2200      	movs	r2, #0
 8006186:	a901      	add	r1, sp, #4
 8006188:	4628      	mov	r0, r5
 800618a:	f00b fe7f 	bl	8011e8c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 800618e:	b108      	cbz	r0, 8006194 <log_msg_no_space_handle+0x24>
 8006190:	2c00      	cmp	r4, #0
 8006192:	d1f1      	bne.n	8006178 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
 8006194:	9801      	ldr	r0, [sp, #4]
 8006196:	b003      	add	sp, #12
 8006198:	bd30      	pop	{r4, r5, pc}
 800619a:	bf00      	nop
 800619c:	20000104 	.word	0x20000104

080061a0 <log_msg_chunk_alloc>:
{
 80061a0:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
 80061a2:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 80061a4:	a901      	add	r1, sp, #4
 80061a6:	4806      	ldr	r0, [pc, #24]	; (80061c0 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
 80061a8:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 80061aa:	f00b fe6f 	bl	8011e8c <k_mem_slab_alloc>
	if (err != 0) {
 80061ae:	b110      	cbz	r0, 80061b6 <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
 80061b0:	f7ff ffde 	bl	8006170 <log_msg_no_space_handle>
 80061b4:	9001      	str	r0, [sp, #4]
}
 80061b6:	9801      	ldr	r0, [sp, #4]
 80061b8:	b003      	add	sp, #12
 80061ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80061be:	bf00      	nop
 80061c0:	20000104 	.word	0x20000104

080061c4 <msg_free>:
{
 80061c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 80061c6:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
 80061c8:	7a45      	ldrb	r5, [r0, #9]
{
 80061ca:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
 80061cc:	f014 0401 	ands.w	r4, r4, #1
	u32_t nargs = msg->hdr.params.std.nargs;
 80061d0:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
 80061d4:	d00e      	beq.n	80061f4 <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
 80061d6:	9b01      	ldr	r3, [sp, #4]
 80061d8:	7a1a      	ldrb	r2, [r3, #8]
 80061da:	0792      	lsls	r2, r2, #30
 80061dc:	d504      	bpl.n	80061e8 <msg_free+0x24>
		cont_free(msg->payload.ext.next);
 80061de:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 80061e0:	4c10      	ldr	r4, [pc, #64]	; (8006224 <msg_free+0x60>)
 80061e2:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
 80061e4:	9b03      	ldr	r3, [sp, #12]
 80061e6:	b9b3      	cbnz	r3, 8006216 <msg_free+0x52>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 80061e8:	a901      	add	r1, sp, #4
 80061ea:	480e      	ldr	r0, [pc, #56]	; (8006224 <msg_free+0x60>)
 80061ec:	f00b fe7a 	bl	8011ee4 <k_mem_slab_free>
}
 80061f0:	b004      	add	sp, #16
 80061f2:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
 80061f4:	2d00      	cmp	r5, #0
 80061f6:	d0ee      	beq.n	80061d6 <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
 80061f8:	42a5      	cmp	r5, r4
 80061fa:	9801      	ldr	r0, [sp, #4]
 80061fc:	d9eb      	bls.n	80061d6 <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
 80061fe:	4621      	mov	r1, r4
 8006200:	f00d fdc0 	bl	8013d84 <log_msg_arg_get>
 8006204:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
 8006206:	f7ff fe03 	bl	8005e10 <log_is_strdup>
 800620a:	b110      	cbz	r0, 8006212 <msg_free+0x4e>
				log_free(buf);
 800620c:	4630      	mov	r0, r6
 800620e:	f7ff ff8b 	bl	8006128 <log_free>
		for (i = 0; i < nargs; i++) {
 8006212:	3401      	adds	r4, #1
 8006214:	e7f0      	b.n	80061f8 <msg_free+0x34>
		next = cont->next;
 8006216:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8006218:	a903      	add	r1, sp, #12
 800621a:	4620      	mov	r0, r4
 800621c:	f00b fe62 	bl	8011ee4 <k_mem_slab_free>
		cont = next;
 8006220:	9503      	str	r5, [sp, #12]
 8006222:	e7df      	b.n	80061e4 <msg_free+0x20>
 8006224:	20000104 	.word	0x20000104

08006228 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
 8006228:	b40e      	push	{r1, r2, r3}
 800622a:	b503      	push	{r0, r1, lr}
 800622c:	ab03      	add	r3, sp, #12
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
 800622e:	4601      	mov	r1, r0
{
 8006230:	f853 2b04 	ldr.w	r2, [r3], #4
	z_vprintk(out_func, (void *)log_output, fmt, args);
 8006234:	4804      	ldr	r0, [pc, #16]	; (8006248 <print_formatted+0x20>)
	va_start(args, fmt);
 8006236:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
 8006238:	f00d f952 	bl	80134e0 <z_vprintk>
#endif
	va_end(args);

	return length;
}
 800623c:	2000      	movs	r0, #0
 800623e:	b002      	add	sp, #8
 8006240:	f85d eb04 	ldr.w	lr, [sp], #4
 8006244:	b003      	add	sp, #12
 8006246:	4770      	bx	lr
 8006248:	0801418d 	.word	0x0801418d

0800624c <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
 800624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006250:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
 8006252:	f011 0402 	ands.w	r4, r1, #2
{
 8006256:	4606      	mov	r6, r0
 8006258:	4690      	mov	r8, r2
 800625a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 800625e:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8006262:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
 8006266:	d007      	beq.n	8006278 <prefix_print+0x2c>
	if (!format) {
 8006268:	f011 0f44 	tst.w	r1, #68	; 0x44
 800626c:	d137      	bne.n	80062de <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
 800626e:	461a      	mov	r2, r3
 8006270:	4932      	ldr	r1, [pc, #200]	; (800633c <prefix_print+0xf0>)
 8006272:	f7ff ffd9 	bl	8006228 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
 8006276:	4604      	mov	r4, r0
	if (color) {
 8006278:	f1b9 0f00 	cmp.w	r9, #0
 800627c:	d00a      	beq.n	8006294 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
 800627e:	4b30      	ldr	r3, [pc, #192]	; (8006340 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
 8006280:	4930      	ldr	r1, [pc, #192]	; (8006344 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
 8006282:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
 8006286:	4b30      	ldr	r3, [pc, #192]	; (8006348 <prefix_print+0xfc>)
 8006288:	4630      	mov	r0, r6
 800628a:	2a00      	cmp	r2, #0
 800628c:	bf08      	it	eq
 800628e:	461a      	moveq	r2, r3
 8006290:	f7ff ffca 	bl	8006228 <print_formatted>
	if (level_on) {
 8006294:	b13d      	cbz	r5, 80062a6 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
 8006296:	4b2d      	ldr	r3, [pc, #180]	; (800634c <prefix_print+0x100>)
 8006298:	492d      	ldr	r1, [pc, #180]	; (8006350 <prefix_print+0x104>)
 800629a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
 800629e:	4630      	mov	r0, r6
 80062a0:	f7ff ffc2 	bl	8006228 <print_formatted>
 80062a4:	4605      	mov	r5, r0
	total += print_formatted(log_output,
 80062a6:	f1b8 0f00 	cmp.w	r8, #0
 80062aa:	d044      	beq.n	8006336 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 80062ac:	2301      	movs	r3, #1
 80062ae:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
 80062b2:	4b28      	ldr	r3, [pc, #160]	; (8006354 <prefix_print+0x108>)
 80062b4:	f017 0f10 	tst.w	r7, #16
 80062b8:	4f27      	ldr	r7, [pc, #156]	; (8006358 <prefix_print+0x10c>)
 80062ba:	bf18      	it	ne
 80062bc:	461f      	movne	r7, r3
 80062be:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80062c2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80062c6:	f7ff fc5f 	bl	8005b88 <log_source_name_get>
 80062ca:	4639      	mov	r1, r7
 80062cc:	4602      	mov	r2, r0
 80062ce:	4630      	mov	r0, r6
 80062d0:	f7ff ffaa 	bl	8006228 <print_formatted>
 80062d4:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
 80062d6:	4420      	add	r0, r4
 80062d8:	b005      	add	sp, #20
 80062da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
 80062de:	4a1f      	ldr	r2, [pc, #124]	; (800635c <prefix_print+0x110>)
 80062e0:	6811      	ldr	r1, [r2, #0]
 80062e2:	b331      	cbz	r1, 8006332 <prefix_print+0xe6>
		timestamp /= timestamp_div;
 80062e4:	4a1e      	ldr	r2, [pc, #120]	; (8006360 <prefix_print+0x114>)
 80062e6:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 80062ea:	6814      	ldr	r4, [r2, #0]
 80062ec:	fbb3 f3f4 	udiv	r3, r3, r4
		ms = (remainder * 1000U) / freq;
 80062f0:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
 80062f4:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
 80062f8:	fbb4 f2fe 	udiv	r2, r4, lr
 80062fc:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
 8006300:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
 8006304:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
 8006308:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800630c:	fbb4 fbf1 	udiv	fp, r4, r1
 8006310:	fb01 441b 	mls	r4, r1, fp, r4
		mins = seconds / 60U;
 8006314:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8006318:	fb0c f404 	mul.w	r4, ip, r4
 800631c:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
 8006320:	e9cd b101 	strd	fp, r1, [sp, #4]
 8006324:	fb0a e113 	mls	r1, sl, r3, lr
 8006328:	9100      	str	r1, [sp, #0]
 800632a:	490e      	ldr	r1, [pc, #56]	; (8006364 <prefix_print+0x118>)
 800632c:	f7ff ff7c 	bl	8006228 <print_formatted>
 8006330:	e7a1      	b.n	8006276 <prefix_print+0x2a>
		length = 0;
 8006332:	4608      	mov	r0, r1
 8006334:	e79f      	b.n	8006276 <prefix_print+0x2a>
	total += print_formatted(log_output,
 8006336:	4f08      	ldr	r7, [pc, #32]	; (8006358 <prefix_print+0x10c>)
 8006338:	e7c1      	b.n	80062be <prefix_print+0x72>
 800633a:	bf00      	nop
 800633c:	0801a717 	.word	0x0801a717
 8006340:	08019614 	.word	0x08019614
 8006344:	0801d406 	.word	0x0801d406
 8006348:	0801a709 	.word	0x0801a709
 800634c:	08019628 	.word	0x08019628
 8006350:	0801a73c 	.word	0x0801a73c
 8006354:	0801a713 	.word	0x0801a713
 8006358:	0801a70e 	.word	0x0801a70e
 800635c:	20000120 	.word	0x20000120
 8006360:	20000124 	.word	0x20000124
 8006364:	0801a720 	.word	0x0801a720

08006368 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	460c      	mov	r4, r1
	if (color) {
 800636c:	07e1      	lsls	r1, r4, #31
{
 800636e:	4605      	mov	r5, r0
	if (color) {
 8006370:	d503      	bpl.n	800637a <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
 8006372:	4a08      	ldr	r2, [pc, #32]	; (8006394 <postfix_print+0x2c>)
 8006374:	4908      	ldr	r1, [pc, #32]	; (8006398 <postfix_print+0x30>)
 8006376:	f7ff ff57 	bl	8006228 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 800637a:	06e2      	lsls	r2, r4, #27
 800637c:	d408      	bmi.n	8006390 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 800637e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
 8006380:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
 8006382:	bf4c      	ite	mi
 8006384:	4905      	ldrmi	r1, [pc, #20]	; (800639c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
 8006386:	4906      	ldrpl	r1, [pc, #24]	; (80063a0 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
 8006388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
 800638c:	f7ff bf4c 	b.w	8006228 <print_formatted>
}
 8006390:	bd38      	pop	{r3, r4, r5, pc}
 8006392:	bf00      	nop
 8006394:	0801a709 	.word	0x0801a709
 8006398:	0801d406 	.word	0x0801d406
 800639c:	0801a4e1 	.word	0x0801a4e1
 80063a0:	0801a791 	.word	0x0801a791

080063a4 <hexdump_line_print>:
{
 80063a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a8:	4698      	mov	r8, r3
 80063aa:	9b08      	ldr	r3, [sp, #32]
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80063ac:	06dd      	lsls	r5, r3, #27
{
 80063ae:	4604      	mov	r4, r0
 80063b0:	460e      	mov	r6, r1
 80063b2:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80063b4:	d405      	bmi.n	80063c2 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80063b6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
 80063b8:	bf4c      	ite	mi
 80063ba:	492a      	ldrmi	r1, [pc, #168]	; (8006464 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
 80063bc:	492a      	ldrpl	r1, [pc, #168]	; (8006468 <hexdump_line_print+0xc4>)
 80063be:	f7ff ff33 	bl	8006228 <print_formatted>
		print_formatted(log_output, " ");
 80063c2:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8006470 <hexdump_line_print+0xcc>
{
 80063c6:	2500      	movs	r5, #0
	for (int i = 0; i < prefix_offset; i++) {
 80063c8:	4545      	cmp	r5, r8
 80063ca:	db2d      	blt.n	8006428 <hexdump_line_print+0x84>
			print_formatted(log_output, "   ");
 80063cc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8006474 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
 80063d0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8006478 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
 80063d4:	f8df a098 	ldr.w	sl, [pc, #152]	; 8006470 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80063d8:	2500      	movs	r5, #0
		if (i < length) {
 80063da:	42af      	cmp	r7, r5
 80063dc:	d931      	bls.n	8006442 <hexdump_line_print+0x9e>
			print_formatted(log_output, "%02x ", data[i]);
 80063de:	5d72      	ldrb	r2, [r6, r5]
 80063e0:	4649      	mov	r1, r9
 80063e2:	4620      	mov	r0, r4
 80063e4:	f7ff ff20 	bl	8006228 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80063e8:	3501      	adds	r5, #1
 80063ea:	2d10      	cmp	r5, #16
 80063ec:	d122      	bne.n	8006434 <hexdump_line_print+0x90>
	print_formatted(log_output, "|");
 80063ee:	491f      	ldr	r1, [pc, #124]	; (800646c <hexdump_line_print+0xc8>)
			print_formatted(log_output, " ");
 80063f0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8006470 <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
 80063f4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800647c <hexdump_line_print+0xd8>
			print_formatted(log_output, "%c",
 80063f8:	f8df a084 	ldr.w	sl, [pc, #132]	; 8006480 <hexdump_line_print+0xdc>
	print_formatted(log_output, "|");
 80063fc:	4620      	mov	r0, r4
 80063fe:	f7ff ff13 	bl	8006228 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8006402:	2500      	movs	r5, #0
		if (i < length) {
 8006404:	42af      	cmp	r7, r5
 8006406:	d928      	bls.n	800645a <hexdump_line_print+0xb6>
			char c = (char)data[i];
 8006408:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
 800640a:	f812 3009 	ldrb.w	r3, [r2, r9]
 800640e:	f013 0f97 	tst.w	r3, #151	; 0x97
 8006412:	bf08      	it	eq
 8006414:	222e      	moveq	r2, #46	; 0x2e
 8006416:	4651      	mov	r1, sl
 8006418:	4620      	mov	r0, r4
 800641a:	f7ff ff05 	bl	8006228 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800641e:	3501      	adds	r5, #1
 8006420:	2d10      	cmp	r5, #16
 8006422:	d113      	bne.n	800644c <hexdump_line_print+0xa8>
}
 8006424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
 8006428:	4649      	mov	r1, r9
 800642a:	4620      	mov	r0, r4
 800642c:	f7ff fefc 	bl	8006228 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8006430:	3501      	adds	r5, #1
 8006432:	e7c9      	b.n	80063c8 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
 8006434:	076a      	lsls	r2, r5, #29
 8006436:	d1d0      	bne.n	80063da <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
 8006438:	4651      	mov	r1, sl
 800643a:	4620      	mov	r0, r4
 800643c:	f7ff fef4 	bl	8006228 <print_formatted>
 8006440:	e7cb      	b.n	80063da <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
 8006442:	4641      	mov	r1, r8
 8006444:	4620      	mov	r0, r4
 8006446:	f7ff feef 	bl	8006228 <print_formatted>
 800644a:	e7cd      	b.n	80063e8 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
 800644c:	076b      	lsls	r3, r5, #29
 800644e:	d1d9      	bne.n	8006404 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
 8006450:	4641      	mov	r1, r8
 8006452:	4620      	mov	r0, r4
 8006454:	f7ff fee8 	bl	8006228 <print_formatted>
 8006458:	e7d4      	b.n	8006404 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
 800645a:	4641      	mov	r1, r8
 800645c:	4620      	mov	r0, r4
 800645e:	f7ff fee3 	bl	8006228 <print_formatted>
 8006462:	e7dc      	b.n	800641e <hexdump_line_print+0x7a>
 8006464:	0801a4e1 	.word	0x0801a4e1
 8006468:	0801a791 	.word	0x0801a791
 800646c:	0801a6e8 	.word	0x0801a6e8
 8006470:	0801c82e 	.word	0x0801c82e
 8006474:	0801c82c 	.word	0x0801c82c
 8006478:	0801a6e2 	.word	0x0801a6e2
 800647c:	08019513 	.word	0x08019513
 8006480:	0801abbd 	.word	0x0801abbd

08006484 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
 8006484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
 8006488:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
 800648a:	f013 0407 	ands.w	r4, r3, #7
{
 800648e:	4617      	mov	r7, r2
 8006490:	b08a      	sub	sp, #40	; 0x28
 8006492:	4605      	mov	r5, r0
 8006494:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8006496:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
 8006498:	d01c      	beq.n	80064d4 <log_output_msg_process+0x50>
	return msg->hdr.ids.source_id;
 800649a:	8949      	ldrh	r1, [r1, #10]
 800649c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80064a0:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 80064a2:	43d2      	mvns	r2, r2
 80064a4:	9102      	str	r1, [sp, #8]
 80064a6:	e9cd 4300 	strd	r4, r3, [sp]
 80064aa:	f002 0201 	and.w	r2, r2, #1
 80064ae:	68f3      	ldr	r3, [r6, #12]
 80064b0:	4639      	mov	r1, r7
 80064b2:	f7ff fecb 	bl	800624c <prefix_print>
 80064b6:	4681      	mov	r9, r0
 80064b8:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
 80064ba:	07da      	lsls	r2, r3, #31
 80064bc:	d40c      	bmi.n	80064d8 <log_output_msg_process+0x54>
		std_print(msg, log_output);
 80064be:	4629      	mov	r1, r5
 80064c0:	4630      	mov	r0, r6
 80064c2:	f00d fcf9 	bl	8013eb8 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
 80064c6:	b34c      	cbz	r4, 800651c <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
 80064c8:	4622      	mov	r2, r4
 80064ca:	4639      	mov	r1, r7
 80064cc:	4628      	mov	r0, r5
 80064ce:	f7ff ff4b 	bl	8006368 <postfix_print>
 80064d2:	e023      	b.n	800651c <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
 80064d4:	46a1      	mov	r9, r4
 80064d6:	e7ef      	b.n	80064b8 <log_output_msg_process+0x34>
	} else if (raw_string) {
 80064d8:	bb34      	cbnz	r4, 8006528 <log_output_msg_process+0xa4>
	size_t offset = 0;
 80064da:	4627      	mov	r7, r4
		length = log_output->size;
 80064dc:	68eb      	ldr	r3, [r5, #12]
 80064de:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
 80064e0:	aa06      	add	r2, sp, #24
 80064e2:	463b      	mov	r3, r7
 80064e4:	68a9      	ldr	r1, [r5, #8]
 80064e6:	4630      	mov	r0, r6
 80064e8:	f00d fcd2 	bl	8013e90 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
 80064ec:	9a06      	ldr	r2, [sp, #24]
 80064ee:	686b      	ldr	r3, [r5, #4]
 80064f0:	601a      	str	r2, [r3, #0]
		if (length != 0) {
 80064f2:	b13a      	cbz	r2, 8006504 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
 80064f4:	68ab      	ldr	r3, [r5, #8]
 80064f6:	4413      	add	r3, r2
 80064f8:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 80064fc:	f1a4 030a 	sub.w	r3, r4, #10
 8006500:	425c      	negs	r4, r3
 8006502:	415c      	adcs	r4, r3
		log_output_flush(log_output);
 8006504:	4628      	mov	r0, r5
 8006506:	f00d fe34 	bl	8014172 <log_output_flush>
		offset += length;
 800650a:	9b06      	ldr	r3, [sp, #24]
 800650c:	441f      	add	r7, r3
	} while (length > 0);
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e4      	bne.n	80064dc <log_output_msg_process+0x58>
	if (eol) {
 8006512:	b11c      	cbz	r4, 800651c <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
 8006514:	4914      	ldr	r1, [pc, #80]	; (8006568 <log_output_msg_process+0xe4>)
 8006516:	4628      	mov	r0, r5
 8006518:	f7ff fe86 	bl	8006228 <print_formatted>
	}

	log_output_flush(log_output);
 800651c:	4628      	mov	r0, r5
 800651e:	f00d fe28 	bl	8014172 <log_output_flush>
}
 8006522:	b00a      	add	sp, #40	; 0x28
 8006524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
 8006528:	4630      	mov	r0, r6
 800652a:	f00d fc5b 	bl	8013de4 <log_msg_str_get>
 800652e:	490f      	ldr	r1, [pc, #60]	; (800656c <log_output_msg_process+0xe8>)
 8006530:	4602      	mov	r2, r0
 8006532:	4628      	mov	r0, r5
 8006534:	f7ff fe78 	bl	8006228 <print_formatted>
	u32_t offset = 0U;
 8006538:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
 800653c:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 8006540:	aa05      	add	r2, sp, #20
 8006542:	4643      	mov	r3, r8
 8006544:	a906      	add	r1, sp, #24
 8006546:	4630      	mov	r0, r6
		length = sizeof(buf);
 8006548:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 800654c:	f00d fca0 	bl	8013e90 <log_msg_hexdump_data_get>
		if (length) {
 8006550:	9a05      	ldr	r2, [sp, #20]
 8006552:	2a00      	cmp	r2, #0
 8006554:	d0b8      	beq.n	80064c8 <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
 8006556:	464b      	mov	r3, r9
 8006558:	9700      	str	r7, [sp, #0]
 800655a:	a906      	add	r1, sp, #24
 800655c:	4628      	mov	r0, r5
 800655e:	f7ff ff21 	bl	80063a4 <hexdump_line_print>
			offset += length;
 8006562:	9b05      	ldr	r3, [sp, #20]
 8006564:	4498      	add	r8, r3
 8006566:	e7eb      	b.n	8006540 <log_output_msg_process+0xbc>
 8006568:	0801a6ea 	.word	0x0801a6ea
 800656c:	0801d406 	.word	0x0801d406

08006570 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
 8006570:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
 8006572:	e9d0 4300 	ldrd	r4, r3, [r0]
 8006576:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
 8006578:	4a0f      	ldr	r2, [pc, #60]	; (80065b8 <log_output_dropped_process+0x48>)
 800657a:	f242 730f 	movw	r3, #9999	; 0x270f
 800657e:	428b      	cmp	r3, r1
 8006580:	bf28      	it	cs
 8006582:	460b      	movcs	r3, r1
 8006584:	4668      	mov	r0, sp
 8006586:	2105      	movs	r1, #5
 8006588:	f7fc fb03 	bl	8002b92 <sniprintf>

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
 800658c:	462b      	mov	r3, r5
	len = snprintf(buf, sizeof(buf), "%d", cnt);
 800658e:	4606      	mov	r6, r0
	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
 8006590:	2204      	movs	r2, #4
 8006592:	4620      	mov	r0, r4
 8006594:	4909      	ldr	r1, [pc, #36]	; (80065bc <log_output_dropped_process+0x4c>)
 8006596:	f00d fc82 	bl	8013e9e <buffer_write>
	buffer_write(outf, buf, len, dev);
 800659a:	462b      	mov	r3, r5
 800659c:	4632      	mov	r2, r6
 800659e:	4669      	mov	r1, sp
 80065a0:	4620      	mov	r0, r4
 80065a2:	f00d fc7c 	bl	8013e9e <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
 80065a6:	462b      	mov	r3, r5
 80065a8:	2217      	movs	r2, #23
 80065aa:	4905      	ldr	r1, [pc, #20]	; (80065c0 <log_output_dropped_process+0x50>)
 80065ac:	4620      	mov	r0, r4
 80065ae:	f00d fc76 	bl	8013e9e <buffer_write>
}
 80065b2:	b002      	add	sp, #8
 80065b4:	bd70      	pop	{r4, r5, r6, pc}
 80065b6:	bf00      	nop
 80065b8:	0801a43f 	.word	0x0801a43f
 80065bc:	0801a704 	.word	0x0801a704
 80065c0:	0801a6ec 	.word	0x0801a6ec

080065c4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
 80065c4:	4a08      	ldr	r2, [pc, #32]	; (80065e8 <log_output_timestamp_freq_set+0x24>)
{
 80065c6:	b510      	push	{r4, lr}
	timestamp_div = 1U;
 80065c8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 80065ca:	4c08      	ldr	r4, [pc, #32]	; (80065ec <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
 80065cc:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 80065ce:	2100      	movs	r1, #0
 80065d0:	42a0      	cmp	r0, r4
 80065d2:	d804      	bhi.n	80065de <log_output_timestamp_freq_set+0x1a>
 80065d4:	b101      	cbz	r1, 80065d8 <log_output_timestamp_freq_set+0x14>
 80065d6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 80065d8:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <log_output_timestamp_freq_set+0x2c>)
 80065da:	6018      	str	r0, [r3, #0]
}
 80065dc:	bd10      	pop	{r4, pc}
		frequency /= 2U;
 80065de:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	2101      	movs	r1, #1
 80065e4:	e7f4      	b.n	80065d0 <log_output_timestamp_freq_set+0xc>
 80065e6:	bf00      	nop
 80065e8:	20000124 	.word	0x20000124
 80065ec:	000f4240 	.word	0x000f4240
 80065f0:	20000120 	.word	0x20000120

080065f4 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
 80065f4:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
 80065f6:	2804      	cmp	r0, #4
	entry->handler = NULL;
 80065f8:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
 80065fa:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
 80065fc:	bf98      	it	ls
 80065fe:	4b04      	ldrls	r3, [pc, #16]	; (8006610 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
 8006600:	4a04      	ldr	r2, [pc, #16]	; (8006614 <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
 8006602:	bf98      	it	ls
 8006604:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
 8006608:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
 800660a:	600b      	str	r3, [r1, #0]
}
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	0801967c 	.word	0x0801967c
 8006614:	08019658 	.word	0x08019658

08006618 <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
 8006618:	2200      	movs	r2, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
 800661a:	4b08      	ldr	r3, [pc, #32]	; (800663c <backend_name_get+0x24>)
	entry->syntax  = NULL;
 800661c:	600a      	str	r2, [r1, #0]
	entry->handler = NULL;
 800661e:	60ca      	str	r2, [r1, #12]
	entry->help  = NULL;
 8006620:	604a      	str	r2, [r1, #4]
	entry->subcmd = &sub_log_backend;
 8006622:	608b      	str	r3, [r1, #8]
	return __log_backends_end - __log_backends_start;
 8006624:	4a06      	ldr	r2, [pc, #24]	; (8006640 <backend_name_get+0x28>)
 8006626:	4b07      	ldr	r3, [pc, #28]	; (8006644 <backend_name_get+0x2c>)
 8006628:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
 800662a:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
 800662e:	bf3e      	ittt	cc
 8006630:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
 8006634:	689b      	ldrcc	r3, [r3, #8]
 8006636:	600b      	strcc	r3, [r1, #0]
	}
}
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	080197bc 	.word	0x080197bc
 8006640:	08019358 	.word	0x08019358
 8006644:	08019348 	.word	0x08019348

08006648 <cmd_log_backends_list>:
{
 8006648:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800664c:	4c11      	ldr	r4, [pc, #68]	; (8006694 <cmd_log_backends_list+0x4c>)
 800664e:	4d12      	ldr	r5, [pc, #72]	; (8006698 <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
 8006650:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800669c <cmd_log_backends_list+0x54>
 8006654:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80066a0 <cmd_log_backends_list+0x58>
 8006658:	f8df a048 	ldr.w	sl, [pc, #72]	; 80066a4 <cmd_log_backends_list+0x5c>
 800665c:	1b2d      	subs	r5, r5, r4
{
 800665e:	4607      	mov	r7, r0
 8006660:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < backend_count; i++) {
 8006662:	2600      	movs	r6, #0
 8006664:	42ae      	cmp	r6, r5
 8006666:	db03      	blt.n	8006670 <cmd_log_backends_list+0x28>
}
 8006668:	2000      	movs	r0, #0
 800666a:	b002      	add	sp, #8
 800666c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
 8006670:	6862      	ldr	r2, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
 8006672:	7953      	ldrb	r3, [r2, #5]
 8006674:	7912      	ldrb	r2, [r2, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	bf14      	ite	ne
 800667a:	4643      	movne	r3, r8
 800667c:	464b      	moveq	r3, r9
 800667e:	e9cd 3200 	strd	r3, r2, [sp]
 8006682:	2100      	movs	r1, #0
 8006684:	68a3      	ldr	r3, [r4, #8]
 8006686:	4652      	mov	r2, sl
 8006688:	4638      	mov	r0, r7
 800668a:	f00d fe73 	bl	8014374 <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
 800668e:	3601      	adds	r6, #1
 8006690:	3410      	adds	r4, #16
 8006692:	e7e7      	b.n	8006664 <cmd_log_backends_list+0x1c>
 8006694:	08019348 	.word	0x08019348
 8006698:	08019358 	.word	0x08019358
 800669c:	0801a762 	.word	0x0801a762
 80066a0:	0801a76a 	.word	0x0801a76a
 80066a4:	0801a773 	.word	0x0801a773

080066a8 <log_status>:
{
 80066a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ac:	4b21      	ldr	r3, [pc, #132]	; (8006734 <log_status+0x8c>)
 80066ae:	4d22      	ldr	r5, [pc, #136]	; (8006738 <log_status+0x90>)
 80066b0:	1aed      	subs	r5, r5, r3
	return backend->cb->active;
 80066b2:	684b      	ldr	r3, [r1, #4]
	if (!log_backend_is_active(backend)) {
 80066b4:	795b      	ldrb	r3, [r3, #5]
{
 80066b6:	4606      	mov	r6, r0
 80066b8:	460f      	mov	r7, r1
 80066ba:	08ed      	lsrs	r5, r5, #3
	if (!log_backend_is_active(backend)) {
 80066bc:	b91b      	cbnz	r3, 80066c6 <log_status+0x1e>
		shell_warn(shell, "Logs are halted!");
 80066be:	4a1f      	ldr	r2, [pc, #124]	; (800673c <log_status+0x94>)
 80066c0:	2104      	movs	r1, #4
 80066c2:	f00d fe57 	bl	8014374 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
 80066c6:	4b1e      	ldr	r3, [pc, #120]	; (8006740 <log_status+0x98>)
 80066c8:	4a1e      	ldr	r2, [pc, #120]	; (8006744 <log_status+0x9c>)
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
 80066ca:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800674c <log_status+0xa4>
 80066ce:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8006750 <log_status+0xa8>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
 80066d2:	2100      	movs	r1, #0
 80066d4:	4630      	mov	r0, r6
 80066d6:	f00d fe4d 	bl	8014374 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
 80066da:	4a1b      	ldr	r2, [pc, #108]	; (8006748 <log_status+0xa0>)
 80066dc:	2100      	movs	r1, #0
 80066de:	4630      	mov	r0, r6
 80066e0:	f00d fe48 	bl	8014374 <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
 80066e4:	2400      	movs	r4, #0
 80066e6:	42ac      	cmp	r4, r5
 80066e8:	d103      	bne.n	80066f2 <log_status+0x4a>
}
 80066ea:	2000      	movs	r0, #0
 80066ec:	b003      	add	sp, #12
 80066ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
 80066f2:	4622      	mov	r2, r4
 80066f4:	2301      	movs	r3, #1
 80066f6:	2100      	movs	r1, #0
 80066f8:	4638      	mov	r0, r7
 80066fa:	f7ff fb29 	bl	8005d50 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
 80066fe:	2300      	movs	r3, #0
 8006700:	4622      	mov	r2, r4
 8006702:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
 8006704:	4682      	mov	sl, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
 8006706:	4638      	mov	r0, r7
 8006708:	f7ff fb22 	bl	8005d50 <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
 800670c:	4621      	mov	r1, r4
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
 800670e:	4683      	mov	fp, r0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
 8006710:	2000      	movs	r0, #0
 8006712:	f7ff fa39 	bl	8005b88 <log_source_name_get>
 8006716:	f858 302b 	ldr.w	r3, [r8, fp, lsl #2]
 800671a:	9301      	str	r3, [sp, #4]
 800671c:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	464a      	mov	r2, r9
 8006724:	4603      	mov	r3, r0
 8006726:	2100      	movs	r1, #0
 8006728:	4630      	mov	r0, r6
 800672a:	f00d fe23 	bl	8014374 <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
 800672e:	3401      	adds	r4, #1
 8006730:	e7d9      	b.n	80066e6 <log_status+0x3e>
 8006732:	bf00      	nop
 8006734:	08019248 	.word	0x08019248
 8006738:	08019348 	.word	0x08019348
 800673c:	0801a7ef 	.word	0x0801a7ef
 8006740:	0801a801 	.word	0x0801a801
 8006744:	0801a80d 	.word	0x0801a80d
 8006748:	0801a82b 	.word	0x0801a82b
 800674c:	08019668 	.word	0x08019668
 8006750:	0801a868 	.word	0x0801a868

08006754 <module_name_get>:
{
 8006754:	b510      	push	{r4, lr}
	entry->handler = NULL;
 8006756:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
 8006758:	4a05      	ldr	r2, [pc, #20]	; (8006770 <module_name_get+0x1c>)
	entry->handler = NULL;
 800675a:	60cb      	str	r3, [r1, #12]
{
 800675c:	460c      	mov	r4, r1
	entry->help  = NULL;
 800675e:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
 8006760:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
 8006762:	4601      	mov	r1, r0
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff fa0f 	bl	8005b88 <log_source_name_get>
 800676a:	6020      	str	r0, [r4, #0]
}
 800676c:	bd10      	pop	{r4, pc}
 800676e:	bf00      	nop
 8006770:	08019658 	.word	0x08019658

08006774 <shell_backend_cmd_execute>:
{
 8006774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
 8006778:	f852 7c04 	ldr.w	r7, [r2, #-4]
	return __log_backends_end - __log_backends_start;
 800677c:	4c19      	ldr	r4, [pc, #100]	; (80067e4 <shell_backend_cmd_execute+0x70>)
{
 800677e:	b085      	sub	sp, #20
 8006780:	4680      	mov	r8, r0
	size_t slen = strlen(name);
 8006782:	4638      	mov	r0, r7
{
 8006784:	4691      	mov	r9, r2
 8006786:	9302      	str	r3, [sp, #8]
 8006788:	468b      	mov	fp, r1
	size_t slen = strlen(name);
 800678a:	f7fe f931 	bl	80049f0 <strlen>
 800678e:	4a16      	ldr	r2, [pc, #88]	; (80067e8 <shell_backend_cmd_execute+0x74>)
 8006790:	1b12      	subs	r2, r2, r4
 8006792:	1112      	asrs	r2, r2, #4
 8006794:	4603      	mov	r3, r0
 8006796:	9201      	str	r2, [sp, #4]
	for (int i = 0; i < log_backend_count_get(); i++) {
 8006798:	2500      	movs	r5, #0
 800679a:	46a2      	mov	sl, r4
 800679c:	9a01      	ldr	r2, [sp, #4]
 800679e:	4295      	cmp	r5, r2
 80067a0:	db08      	blt.n	80067b4 <shell_backend_cmd_execute+0x40>
		shell_error(shell, "Invalid backend: %s", name);
 80067a2:	463b      	mov	r3, r7
 80067a4:	4a11      	ldr	r2, [pc, #68]	; (80067ec <shell_backend_cmd_execute+0x78>)
 80067a6:	2102      	movs	r1, #2
 80067a8:	4640      	mov	r0, r8
 80067aa:	f00d fde3 	bl	8014374 <shell_fprintf>
		return -ENOEXEC;
 80067ae:	f06f 0607 	mvn.w	r6, #7
 80067b2:	e012      	b.n	80067da <shell_backend_cmd_execute+0x66>
		if (strncmp(name, backend->name, slen) == 0) {
 80067b4:	68a1      	ldr	r1, [r4, #8]
 80067b6:	9303      	str	r3, [sp, #12]
 80067b8:	461a      	mov	r2, r3
 80067ba:	4638      	mov	r0, r7
 80067bc:	f7fe f920 	bl	8004a00 <strncmp>
 80067c0:	3410      	adds	r4, #16
 80067c2:	4606      	mov	r6, r0
 80067c4:	b110      	cbz	r0, 80067cc <shell_backend_cmd_execute+0x58>
	for (int i = 0; i < log_backend_count_get(); i++) {
 80067c6:	3501      	adds	r5, #1
 80067c8:	9b03      	ldr	r3, [sp, #12]
 80067ca:	e7e7      	b.n	800679c <shell_backend_cmd_execute+0x28>
		func(shell, backend, argc, argv);
 80067cc:	464b      	mov	r3, r9
 80067ce:	465a      	mov	r2, fp
 80067d0:	eb0a 1105 	add.w	r1, sl, r5, lsl #4
 80067d4:	4640      	mov	r0, r8
 80067d6:	9c02      	ldr	r4, [sp, #8]
 80067d8:	47a0      	blx	r4
}
 80067da:	4630      	mov	r0, r6
 80067dc:	b005      	add	sp, #20
 80067de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e2:	bf00      	nop
 80067e4:	08019348 	.word	0x08019348
 80067e8:	08019358 	.word	0x08019358
 80067ec:	0801a87c 	.word	0x0801a87c

080067f0 <cmd_log_backend_status>:
{
 80067f0:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
 80067f2:	4b02      	ldr	r3, [pc, #8]	; (80067fc <cmd_log_backend_status+0xc>)
 80067f4:	f7ff ffbe 	bl	8006774 <shell_backend_cmd_execute>
}
 80067f8:	2000      	movs	r0, #0
 80067fa:	bd08      	pop	{r3, pc}
 80067fc:	080066a9 	.word	0x080066a9

08006800 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
 8006800:	4b01      	ldr	r3, [pc, #4]	; (8006808 <cmd_log_backend_halt+0x8>)
 8006802:	f7ff bfb7 	b.w	8006774 <shell_backend_cmd_execute>
 8006806:	bf00      	nop
 8006808:	080141af 	.word	0x080141af

0800680c <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
 800680c:	4b01      	ldr	r3, [pc, #4]	; (8006814 <cmd_log_backend_go+0x8>)
 800680e:	f7ff bfb1 	b.w	8006774 <shell_backend_cmd_execute>
 8006812:	bf00      	nop
 8006814:	080141b7 	.word	0x080141b7

08006818 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
 8006818:	4b01      	ldr	r3, [pc, #4]	; (8006820 <cmd_log_backend_enable+0x8>)
 800681a:	f7ff bfab 	b.w	8006774 <shell_backend_cmd_execute>
 800681e:	bf00      	nop
 8006820:	08006921 	.word	0x08006921

08006824 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
 8006824:	4b01      	ldr	r3, [pc, #4]	; (800682c <cmd_log_backend_disable+0x8>)
 8006826:	f7ff bfa5 	b.w	8006774 <shell_backend_cmd_execute>
 800682a:	bf00      	nop
 800682c:	08014233 	.word	0x08014233

08006830 <shell_state_precheck>:
	if (shell->log_backend->control_block->state
 8006830:	69c3      	ldr	r3, [r0, #28]
 8006832:	68db      	ldr	r3, [r3, #12]
{
 8006834:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
 8006836:	791c      	ldrb	r4, [r3, #4]
 8006838:	b92c      	cbnz	r4, 8006846 <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
 800683a:	4a04      	ldr	r2, [pc, #16]	; (800684c <shell_state_precheck+0x1c>)
 800683c:	2102      	movs	r1, #2
 800683e:	f00d fd99 	bl	8014374 <shell_fprintf>
 8006842:	4620      	mov	r0, r4
}
 8006844:	bd10      	pop	{r4, pc}
	return true;
 8006846:	2001      	movs	r0, #1
 8006848:	e7fc      	b.n	8006844 <shell_state_precheck+0x14>
 800684a:	bf00      	nop
 800684c:	0801a891 	.word	0x0801a891

08006850 <filters_set>:
{
 8006850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006854:	461f      	mov	r7, r3
 8006856:	4d2c      	ldr	r5, [pc, #176]	; (8006908 <filters_set+0xb8>)
 8006858:	4b2c      	ldr	r3, [pc, #176]	; (800690c <filters_set+0xbc>)
 800685a:	1aed      	subs	r5, r5, r3
	int cnt = all ? log_sources_count() : argc;
 800685c:	1e16      	subs	r6, r2, #0
{
 800685e:	b085      	sub	sp, #20
 8006860:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	int cnt = all ? log_sources_count() : argc;
 8006864:	bf14      	ite	ne
 8006866:	4633      	movne	r3, r6
 8006868:	462b      	moveq	r3, r5
 800686a:	9303      	str	r3, [sp, #12]
	if (!backend->cb->active) {
 800686c:	684b      	ldr	r3, [r1, #4]
 800686e:	795b      	ldrb	r3, [r3, #5]
{
 8006870:	4680      	mov	r8, r0
 8006872:	4689      	mov	r9, r1
	if (!backend->cb->active) {
 8006874:	b91b      	cbnz	r3, 800687e <filters_set+0x2e>
		shell_warn(shell, "Backend not active.");
 8006876:	4a26      	ldr	r2, [pc, #152]	; (8006910 <filters_set+0xc0>)
 8006878:	2104      	movs	r1, #4
 800687a:	f00d fd7b 	bl	8014374 <shell_fprintf>
				shell_warn(shell, "%s: level set to %s.",
 800687e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800691c <filters_set+0xcc>
	for (i = 0U; i < modules_cnt; i++) {
 8006882:	2400      	movs	r4, #0
	for (i = 0; i < cnt; i++) {
 8006884:	9b03      	ldr	r3, [sp, #12]
 8006886:	429c      	cmp	r4, r3
 8006888:	db02      	blt.n	8006890 <filters_set+0x40>
}
 800688a:	b005      	add	sp, #20
 800688c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
 8006890:	b3be      	cbz	r6, 8006902 <filters_set+0xb2>
 8006892:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8006896:	9302      	str	r3, [sp, #8]
	for (i = 0U; i < modules_cnt; i++) {
 8006898:	f04f 0b00 	mov.w	fp, #0
 800689c:	455d      	cmp	r5, fp
 800689e:	d107      	bne.n	80068b0 <filters_set+0x60>
			shell_error(shell, "%s: unknown source name.", argv[i]);
 80068a0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 80068a4:	4a1b      	ldr	r2, [pc, #108]	; (8006914 <filters_set+0xc4>)
 80068a6:	2102      	movs	r1, #2
 80068a8:	4640      	mov	r0, r8
 80068aa:	f00d fd63 	bl	8014374 <shell_fprintf>
 80068ae:	e020      	b.n	80068f2 <filters_set+0xa2>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
 80068b0:	4659      	mov	r1, fp
 80068b2:	2000      	movs	r0, #0
 80068b4:	f7ff f968 	bl	8005b88 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
 80068b8:	2240      	movs	r2, #64	; 0x40
 80068ba:	9902      	ldr	r1, [sp, #8]
 80068bc:	f7fe f8a0 	bl	8004a00 <strncmp>
 80068c0:	b9c8      	cbnz	r0, 80068f6 <filters_set+0xa6>
			return i;
 80068c2:	465a      	mov	r2, fp
	return z_impl_log_filter_set(backend, domain_id, src_id, level);
 80068c4:	2100      	movs	r1, #0
 80068c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068c8:	4648      	mov	r0, r9
 80068ca:	f7ff f96b 	bl	8005ba4 <z_impl_log_filter_set>
			if (set_lvl != level) {
 80068ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068d0:	4283      	cmp	r3, r0
 80068d2:	4683      	mov	fp, r0
 80068d4:	d00d      	beq.n	80068f2 <filters_set+0xa2>
						CONFIG_LOG_DOMAIN_ID, i) :
 80068d6:	b98e      	cbnz	r6, 80068fc <filters_set+0xac>
					log_source_name_get(
 80068d8:	4621      	mov	r1, r4
 80068da:	4630      	mov	r0, r6
 80068dc:	f7ff f954 	bl	8005b88 <log_source_name_get>
 80068e0:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
 80068e2:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
 80068e6:	9200      	str	r2, [sp, #0]
 80068e8:	2104      	movs	r1, #4
 80068ea:	4a0b      	ldr	r2, [pc, #44]	; (8006918 <filters_set+0xc8>)
 80068ec:	4640      	mov	r0, r8
 80068ee:	f00d fd41 	bl	8014374 <shell_fprintf>
	for (i = 0; i < cnt; i++) {
 80068f2:	3401      	adds	r4, #1
 80068f4:	e7c6      	b.n	8006884 <filters_set+0x34>
	for (i = 0U; i < modules_cnt; i++) {
 80068f6:	f10b 0b01 	add.w	fp, fp, #1
 80068fa:	e7cf      	b.n	800689c <filters_set+0x4c>
						CONFIG_LOG_DOMAIN_ID, i) :
 80068fc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8006900:	e7ef      	b.n	80068e2 <filters_set+0x92>
 8006902:	4622      	mov	r2, r4
 8006904:	e7de      	b.n	80068c4 <filters_set+0x74>
 8006906:	bf00      	nop
 8006908:	08019348 	.word	0x08019348
 800690c:	08019248 	.word	0x08019248
 8006910:	0801a794 	.word	0x0801a794
 8006914:	0801a7bf 	.word	0x0801a7bf
 8006918:	0801a7a9 	.word	0x0801a7a9
 800691c:	08019668 	.word	0x08019668

08006920 <log_enable>:
{
 8006920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	severity_level = severity_level_get(argv[1]);
 8006924:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8006928:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800697c <log_enable+0x5c>
{
 800692c:	4607      	mov	r7, r0
 800692e:	4689      	mov	r9, r1
 8006930:	4692      	mov	sl, r2
 8006932:	461e      	mov	r6, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
 8006934:	2400      	movs	r4, #0
		if (strncmp(str, severity_lvls[i], 4) == 0) {
 8006936:	2204      	movs	r2, #4
 8006938:	f858 1b04 	ldr.w	r1, [r8], #4
 800693c:	4658      	mov	r0, fp
 800693e:	f7fe f85f 	bl	8004a00 <strncmp>
 8006942:	4605      	mov	r5, r0
 8006944:	b170      	cbz	r0, 8006964 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
 8006946:	3401      	adds	r4, #1
 8006948:	2c05      	cmp	r4, #5
 800694a:	d1f4      	bne.n	8006936 <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
 800694c:	6873      	ldr	r3, [r6, #4]
 800694e:	4a0a      	ldr	r2, [pc, #40]	; (8006978 <log_enable+0x58>)
 8006950:	2102      	movs	r1, #2
 8006952:	4638      	mov	r0, r7
 8006954:	f00d fd0e 	bl	8014374 <shell_fprintf>
 8006958:	f06f 0507 	mvn.w	r5, #7
}
 800695c:	4628      	mov	r0, r5
 800695e:	b003      	add	sp, #12
 8006960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
 8006964:	9400      	str	r4, [sp, #0]
 8006966:	f106 0308 	add.w	r3, r6, #8
 800696a:	f1aa 0202 	sub.w	r2, sl, #2
 800696e:	4649      	mov	r1, r9
 8006970:	4638      	mov	r0, r7
 8006972:	f7ff ff6d 	bl	8006850 <filters_set>
	return 0;
 8006976:	e7f1      	b.n	800695c <log_enable+0x3c>
 8006978:	0801a7d9 	.word	0x0801a7d9
 800697c:	08019668 	.word	0x08019668

08006980 <cmd_device_list>:
	return 0;
}

static int cmd_device_list(const struct shell *shell,
			      size_t argc, char **argv)
{
 8006980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct device *info;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
 8006982:	4a0b      	ldr	r2, [pc, #44]	; (80069b0 <cmd_device_list+0x30>)
	for (info = __device_init_start; info != __device_init_end; info++) {
 8006984:	4c0b      	ldr	r4, [pc, #44]	; (80069b4 <cmd_device_list+0x34>)
 8006986:	4d0c      	ldr	r5, [pc, #48]	; (80069b8 <cmd_device_list+0x38>)
		if (info->driver_api != NULL) {
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 8006988:	4f0c      	ldr	r7, [pc, #48]	; (80069bc <cmd_device_list+0x3c>)
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
 800698a:	2100      	movs	r1, #0
{
 800698c:	4606      	mov	r6, r0
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
 800698e:	f00d fcf1 	bl	8014374 <shell_fprintf>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8006992:	42ac      	cmp	r4, r5
 8006994:	d101      	bne.n	800699a <cmd_device_list+0x1a>
					info->config->name);
		}
	}

	return 0;
}
 8006996:	2000      	movs	r0, #0
 8006998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (info->driver_api != NULL) {
 800699a:	6863      	ldr	r3, [r4, #4]
 800699c:	b133      	cbz	r3, 80069ac <cmd_device_list+0x2c>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	463a      	mov	r2, r7
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2100      	movs	r1, #0
 80069a6:	4630      	mov	r0, r6
 80069a8:	f00d fce4 	bl	8014374 <shell_fprintf>
	for (info = __device_init_start; info != __device_init_end; info++) {
 80069ac:	340c      	adds	r4, #12
 80069ae:	e7f0      	b.n	8006992 <cmd_device_list+0x12>
 80069b0:	0801aa88 	.word	0x0801aa88
 80069b4:	20008e80 	.word	0x20008e80
 80069b8:	20008fd0 	.word	0x20008fd0
 80069bc:	0801aa92 	.word	0x0801aa92

080069c0 <device_get_config_level>:
{
 80069c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
 80069c2:	4b0c      	ldr	r3, [pc, #48]	; (80069f4 <device_get_config_level+0x34>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 80069c4:	4f0c      	ldr	r7, [pc, #48]	; (80069f8 <device_get_config_level+0x38>)
	for (info = config_levels[level]; info < config_levels[level+1];
 80069c6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 80069ca:	3101      	adds	r1, #1
{
 80069cc:	4606      	mov	r6, r0
	for (info = config_levels[level]; info < config_levels[level+1];
 80069ce:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
	bool devices = false;
 80069d2:	2000      	movs	r0, #0
	for (info = config_levels[level]; info < config_levels[level+1];
 80069d4:	42a5      	cmp	r5, r4
 80069d6:	d800      	bhi.n	80069da <device_get_config_level+0x1a>
}
 80069d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (info->driver_api != NULL) {
 80069da:	6863      	ldr	r3, [r4, #4]
 80069dc:	b13b      	cbz	r3, 80069ee <device_get_config_level+0x2e>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	4630      	mov	r0, r6
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	463a      	mov	r2, r7
 80069e6:	2100      	movs	r1, #0
 80069e8:	f00d fcc4 	bl	8014374 <shell_fprintf>
			devices = true;
 80069ec:	2001      	movs	r0, #1
								info++) {
 80069ee:	340c      	adds	r4, #12
 80069f0:	e7f0      	b.n	80069d4 <device_get_config_level+0x14>
 80069f2:	bf00      	nop
 80069f4:	080197e0 	.word	0x080197e0
 80069f8:	0801aa92 	.word	0x0801aa92

080069fc <cmd_device_levels>:
{
 80069fc:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
 80069fe:	4a1f      	ldr	r2, [pc, #124]	; (8006a7c <cmd_device_levels+0x80>)
{
 8006a00:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
 8006a02:	2100      	movs	r1, #0
 8006a04:	f00d fcb6 	bl	8014374 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
 8006a08:	2102      	movs	r1, #2
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f7ff ffd8 	bl	80069c0 <device_get_config_level>
	if (ret == false) {
 8006a10:	4601      	mov	r1, r0
 8006a12:	b918      	cbnz	r0, 8006a1c <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8006a14:	4a1a      	ldr	r2, [pc, #104]	; (8006a80 <cmd_device_levels+0x84>)
 8006a16:	4620      	mov	r0, r4
 8006a18:	f00d fcac 	bl	8014374 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
 8006a1c:	4a19      	ldr	r2, [pc, #100]	; (8006a84 <cmd_device_levels+0x88>)
 8006a1e:	2100      	movs	r1, #0
 8006a20:	4620      	mov	r0, r4
 8006a22:	f00d fca7 	bl	8014374 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
 8006a26:	2103      	movs	r1, #3
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f7ff ffc9 	bl	80069c0 <device_get_config_level>
	if (ret == false) {
 8006a2e:	4601      	mov	r1, r0
 8006a30:	b918      	cbnz	r0, 8006a3a <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8006a32:	4a13      	ldr	r2, [pc, #76]	; (8006a80 <cmd_device_levels+0x84>)
 8006a34:	4620      	mov	r0, r4
 8006a36:	f00d fc9d 	bl	8014374 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
 8006a3a:	4a13      	ldr	r2, [pc, #76]	; (8006a88 <cmd_device_levels+0x8c>)
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f00d fc98 	bl	8014374 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
 8006a44:	2100      	movs	r1, #0
 8006a46:	4620      	mov	r0, r4
 8006a48:	f7ff ffba 	bl	80069c0 <device_get_config_level>
	if (ret == false) {
 8006a4c:	4601      	mov	r1, r0
 8006a4e:	b918      	cbnz	r0, 8006a58 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8006a50:	4a0b      	ldr	r2, [pc, #44]	; (8006a80 <cmd_device_levels+0x84>)
 8006a52:	4620      	mov	r0, r4
 8006a54:	f00d fc8e 	bl	8014374 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
 8006a58:	4a0c      	ldr	r2, [pc, #48]	; (8006a8c <cmd_device_levels+0x90>)
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f00d fc89 	bl	8014374 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
 8006a62:	2101      	movs	r1, #1
 8006a64:	4620      	mov	r0, r4
 8006a66:	f7ff ffab 	bl	80069c0 <device_get_config_level>
	if (ret == false) {
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	b918      	cbnz	r0, 8006a76 <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8006a6e:	4a04      	ldr	r2, [pc, #16]	; (8006a80 <cmd_device_levels+0x84>)
 8006a70:	4620      	mov	r0, r4
 8006a72:	f00d fc7f 	bl	8014374 <shell_fprintf>
}
 8006a76:	2000      	movs	r0, #0
 8006a78:	bd10      	pop	{r4, pc}
 8006a7a:	bf00      	nop
 8006a7c:	0801aa46 	.word	0x0801aa46
 8006a80:	0801aa54 	.word	0x0801aa54
 8006a84:	0801aa5c 	.word	0x0801aa5c
 8006a88:	0801aa6a 	.word	0x0801aa6a
 8006a8c:	0801aa79 	.word	0x0801aa79

08006a90 <history_handle>:

	shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
 8006a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (flag_history_exit_get(shell)) {
 8006a92:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
}

static inline bool flag_history_exit_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.history_exit == 1 ? true : false;
 8006a94:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 8006a98:	0652      	lsls	r2, r2, #25
{
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	460d      	mov	r5, r1
	if (flag_history_exit_get(shell)) {
 8006a9e:	d508      	bpl.n	8006ab2 <history_handle+0x22>
}

static inline void flag_history_exit_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 8006aa0:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 8006aa4:	68c0      	ldr	r0, [r0, #12]
 8006aa6:	f36f 1286 	bfc	r2, #6, #1
 8006aaa:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
		flag_history_exit_set(shell, false);
		shell_history_mode_exit(shell->history);
 8006aae:	f00d ff74 	bl	801499a <shell_history_mode_exit>
	}

	/* Backup command if history is entered */
	if (!shell_history_active(shell->history)) {
 8006ab2:	68e3      	ldr	r3, [r4, #12]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	b963      	cbnz	r3, 8006ad2 <history_handle+0x42>
		if (up) {
 8006ab8:	b39d      	cbz	r5, 8006b22 <history_handle+0x92>
			u16_t cmd_len = shell_strlen(shell->ctx->cmd_buff);
 8006aba:	68a0      	ldr	r0, [r4, #8]
 8006abc:	3038      	adds	r0, #56	; 0x38
 8006abe:	f00d fc03 	bl	80142c8 <shell_strlen>

			if (cmd_len) {
 8006ac2:	68a3      	ldr	r3, [r4, #8]
 8006ac4:	b378      	cbz	r0, 8006b26 <history_handle+0x96>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 8006ac6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006aca:	f503 709c 	add.w	r0, r3, #312	; 0x138
 8006ace:	f7fd ff87 	bl	80049e0 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = shell_history_get(shell->history, up,
					 shell->ctx->cmd_buff, &len);
 8006ad2:	68a2      	ldr	r2, [r4, #8]
	history_mode = shell_history_get(shell->history, up,
 8006ad4:	68e0      	ldr	r0, [r4, #12]
 8006ad6:	f10d 0306 	add.w	r3, sp, #6
 8006ada:	3238      	adds	r2, #56	; 0x38
 8006adc:	4629      	mov	r1, r5
 8006ade:	f00d ff5f 	bl	80149a0 <shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
 8006ae2:	b958      	cbnz	r0, 8006afc <history_handle+0x6c>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
 8006ae4:	68a0      	ldr	r0, [r4, #8]
 8006ae6:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8006aea:	3038      	adds	r0, #56	; 0x38
 8006aec:	f7fd ff78 	bl	80049e0 <strcpy>
		len = shell_strlen(shell->ctx->cmd_buff);
 8006af0:	68a0      	ldr	r0, [r4, #8]
 8006af2:	3038      	adds	r0, #56	; 0x38
 8006af4:	f00d fbe8 	bl	80142c8 <shell_strlen>
 8006af8:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	shell_op_cursor_home_move(shell);
 8006afc:	4620      	mov	r0, r4
 8006afe:	f00d fd8f 	bl	8014620 <shell_op_cursor_home_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 8006b02:	4a0a      	ldr	r2, [pc, #40]	; (8006b2c <history_handle+0x9c>)
 8006b04:	490a      	ldr	r1, [pc, #40]	; (8006b30 <history_handle+0xa0>)
 8006b06:	6960      	ldr	r0, [r4, #20]
 8006b08:	f00d fbe4 	bl	80142d4 <shell_raw_fprintf>
	clear_eos(shell);
	shell_print_cmd(shell);
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f000 ffe9 	bl	8007ae4 <shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
 8006b12:	68a3      	ldr	r3, [r4, #8]
 8006b14:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006b18:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = len;
 8006b1a:	865a      	strh	r2, [r3, #50]	; 0x32
	shell_op_cond_next_line(shell);
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f000 ff6b 	bl	80079f8 <shell_op_cond_next_line>
}
 8006b22:	b003      	add	sp, #12
 8006b24:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
 8006b26:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
 8006b2a:	e7d2      	b.n	8006ad2 <history_handle+0x42>
 8006b2c:	0801aae7 	.word	0x0801aae7
 8006b30:	0801d406 	.word	0x0801d406

08006b34 <execute>:
/* Function is analyzing the command buffer to find matching commands. Next, it
 * invokes the  last recognized command which has a handler and passes the rest
 * of command buffer as arguments.
 */
static int execute(const struct shell *shell)
{
 8006b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b38:	b09d      	sub	sp, #116	; 0x74
 8006b3a:	4604      	mov	r4, r0
	struct shell_static_entry d_entry; /* Memory for dynamic commands. */
	char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *p_static_entry = NULL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9303      	str	r3, [sp, #12]
	bool wildcard_found = false;
	size_t cmd_idx = 0;
	size_t argc;
	char quote;

	shell_op_cursor_end_move(shell);
 8006b40:	f00d fd74 	bl	801462c <shell_op_cursor_end_move>
	if (!shell_cursor_in_empty_line(shell)) {
 8006b44:	4620      	mov	r0, r4
 8006b46:	f00d fd33 	bl	80145b0 <shell_cursor_in_empty_line>
 8006b4a:	b918      	cbnz	r0, 8006b54 <execute+0x20>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8006b4c:	498c      	ldr	r1, [pc, #560]	; (8006d80 <execute+0x24c>)
 8006b4e:	6960      	ldr	r0, [r4, #20]
 8006b50:	f00d fbc0 	bl	80142d4 <shell_raw_fprintf>
__ssp_bos_icheck3(memset, void *, int)
 8006b54:	68a0      	ldr	r0, [r4, #8]
 8006b56:	2214      	movs	r2, #20
 8006b58:	2100      	movs	r1, #0
 8006b5a:	3008      	adds	r0, #8
 8006b5c:	f7fd ff07 	bl	800496e <memset>
		cursor_next_line_move(shell);
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));

	shell_cmd_trim(shell);
 8006b60:	4620      	mov	r0, r4
 8006b62:	f000 feeb 	bl	800793c <shell_cmd_trim>

	history_put(shell, shell->ctx->cmd_buff,
 8006b66:	68a1      	ldr	r1, [r4, #8]
	shell_history_put(shell->history, line, length);
 8006b68:	68e0      	ldr	r0, [r4, #12]
 8006b6a:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
 8006b6c:	3138      	adds	r1, #56	; 0x38
 8006b6e:	f00d ff4e 	bl	8014a0e <shell_history_put>
		    shell->ctx->cmd_buff_len);

	if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
		shell_wildcard_prepare(shell);
 8006b72:	4620      	mov	r0, r4
 8006b74:	f00e f8e9 	bl	8014d4a <shell_wildcard_prepare>
	}

	/* create argument list */
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
 8006b78:	68a2      	ldr	r2, [r4, #8]
 8006b7a:	230c      	movs	r3, #12
 8006b7c:	3238      	adds	r2, #56	; 0x38
 8006b7e:	a90f      	add	r1, sp, #60	; 0x3c
 8006b80:	a804      	add	r0, sp, #16
 8006b82:	f000 fdb5 	bl	80076f0 <shell_make_argv>
				CONFIG_SHELL_ARGC_MAX);

	if (!argc) {
 8006b86:	9a04      	ldr	r2, [sp, #16]
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
 8006b88:	4603      	mov	r3, r0
	if (!argc) {
 8006b8a:	b92a      	cbnz	r2, 8006b98 <execute+0x64>

	if (quote != 0) {
		shell_internal_fprintf(shell, SHELL_ERROR,
				       "not terminated: %c\n",
				       quote);
		return -ENOEXEC;
 8006b8c:	f06f 0507 	mvn.w	r5, #7
	}

	/* Executing the deepest found handler. */
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
 8006b90:	4628      	mov	r0, r5
 8006b92:	b01d      	add	sp, #116	; 0x74
 8006b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (quote != 0) {
 8006b98:	b128      	cbz	r0, 8006ba6 <execute+0x72>
		shell_internal_fprintf(shell, SHELL_ERROR,
 8006b9a:	4a7a      	ldr	r2, [pc, #488]	; (8006d84 <execute+0x250>)
 8006b9c:	2102      	movs	r1, #2
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f00d fdd8 	bl	8014754 <shell_internal_fprintf>
 8006ba4:	e7f2      	b.n	8006b8c <execute+0x58>
	help_entry.help = NULL;
 8006ba6:	4605      	mov	r5, r0
	size_t cmd_idx = 0;
 8006ba8:	4607      	mov	r7, r0
	bool wildcard_found = false;
 8006baa:	4681      	mov	r9, r0
	size_t cmd_with_handler_lvl = 0;
 8006bac:	4682      	mov	sl, r0
	size_t cmd_lvl = SHELL_CMD_ROOT_LVL;
 8006bae:	4606      	mov	r6, r0
	const struct shell_cmd_entry *p_cmd = NULL;
 8006bb0:	4683      	mov	fp, r0
 8006bb2:	e03e      	b.n	8006c32 <execute+0xfe>
		     !strcmp(argv[cmd_lvl], "--help"))) {
 8006bb4:	4974      	ldr	r1, [pc, #464]	; (8006d88 <execute+0x254>)
 8006bb6:	f858 0c34 	ldr.w	r0, [r8, #-52]
 8006bba:	f7fd ff07 	bl	80049cc <strcmp>
		    (!strcmp(argv[cmd_lvl], "-h") ||
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d045      	beq.n	8006c4e <execute+0x11a>
			status = shell_wildcard_process(shell, p_cmd,
 8006bc2:	f858 2c34 	ldr.w	r2, [r8, #-52]
 8006bc6:	4659      	mov	r1, fp
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f001 fbe5 	bl	8008398 <shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
 8006bce:	2802      	cmp	r0, #2
 8006bd0:	d128      	bne.n	8006c24 <execute+0xf0>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
 8006bd2:	f1b9 0f00 	cmp.w	r9, #0
 8006bd6:	d009      	beq.n	8006bec <execute+0xb8>
		shell_wildcard_finalize(shell);
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f00e f8d8 	bl	8014d8e <shell_wildcard_finalize>
				      shell->ctx->cmd_buff,
 8006bde:	68a2      	ldr	r2, [r4, #8]
		(void)shell_make_argv(&argc, &argv[0],
 8006be0:	230c      	movs	r3, #12
 8006be2:	3238      	adds	r2, #56	; 0x38
 8006be4:	a90f      	add	r1, sp, #60	; 0x3c
 8006be6:	a804      	add	r0, sp, #16
 8006be8:	f000 fd82 	bl	80076f0 <shell_make_argv>
	if (shell->ctx->active_cmd.handler == NULL) {
 8006bec:	68a0      	ldr	r0, [r4, #8]
 8006bee:	6943      	ldr	r3, [r0, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f040 808f 	bne.w	8006d14 <execute+0x1e0>
			if (help_entry->help == NULL) {
 8006bf6:	2d00      	cmp	r5, #0
 8006bf8:	d0c8      	beq.n	8006b8c <execute+0x58>
			if (help_entry->help != shell->ctx->active_cmd.help) {
 8006bfa:	68c3      	ldr	r3, [r0, #12]
 8006bfc:	429d      	cmp	r5, r3
 8006bfe:	d00c      	beq.n	8006c1a <execute+0xe6>
				shell->ctx->active_cmd = *help_entry;
 8006c00:	950b      	str	r5, [sp, #44]	; 0x2c
 8006c02:	f100 0508 	add.w	r5, r0, #8
 8006c06:	e003      	b.n	8006c10 <execute+0xdc>
				shell->ctx->active_cmd = help_entry;
 8006c08:	68a3      	ldr	r3, [r4, #8]
 8006c0a:	950b      	str	r5, [sp, #44]	; 0x2c
 8006c0c:	f103 0508 	add.w	r5, r3, #8
				shell->ctx->active_cmd = *help_entry;
 8006c10:	ae0a      	add	r6, sp, #40	; 0x28
 8006c12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c16:	6833      	ldr	r3, [r6, #0]
 8006c18:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f00d fb67 	bl	80142ee <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
 8006c20:	2501      	movs	r5, #1
 8006c22:	e7b5      	b.n	8006b90 <execute+0x5c>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
 8006c24:	2803      	cmp	r0, #3
 8006c26:	d01a      	beq.n	8006c5e <execute+0x12a>
				++cmd_lvl;
 8006c28:	3601      	adds	r6, #1
				continue;
 8006c2a:	46b8      	mov	r8, r7
				wildcard_found = true;
 8006c2c:	f04f 0901 	mov.w	r9, #1
 8006c30:	4647      	mov	r7, r8
		if (cmd_lvl >= argc) {
 8006c32:	9b04      	ldr	r3, [sp, #16]
 8006c34:	42b3      	cmp	r3, r6
 8006c36:	d9cc      	bls.n	8006bd2 <execute+0x9e>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
 8006c38:	b18e      	cbz	r6, 8006c5e <execute+0x12a>
		    (!strcmp(argv[cmd_lvl], "-h") ||
 8006c3a:	ab1c      	add	r3, sp, #112	; 0x70
 8006c3c:	eb03 0886 	add.w	r8, r3, r6, lsl #2
 8006c40:	4952      	ldr	r1, [pc, #328]	; (8006d8c <execute+0x258>)
 8006c42:	f858 0c34 	ldr.w	r0, [r8, #-52]
 8006c46:	f7fd fec1 	bl	80049cc <strcmp>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d1b2      	bne.n	8006bb4 <execute+0x80>
			if (help_entry.help) {
 8006c4e:	2d00      	cmp	r5, #0
 8006c50:	d1da      	bne.n	8006c08 <execute+0xd4>
			shell_internal_fprintf(shell, SHELL_ERROR,
 8006c52:	4a4f      	ldr	r2, [pc, #316]	; (8006d90 <execute+0x25c>)
					shell_internal_fprintf(shell,
 8006c54:	2102      	movs	r1, #2
 8006c56:	4620      	mov	r0, r4
 8006c58:	f00d fd7c 	bl	8014754 <shell_internal_fprintf>
					return -ENOEXEC;
 8006c5c:	e796      	b.n	8006b8c <execute+0x58>
		shell_cmd_get(shell, p_cmd, cmd_lvl, cmd_idx++, &p_static_entry,
 8006c5e:	ab05      	add	r3, sp, #20
 8006c60:	9301      	str	r3, [sp, #4]
 8006c62:	ab03      	add	r3, sp, #12
 8006c64:	f107 0801 	add.w	r8, r7, #1
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	4632      	mov	r2, r6
 8006c6c:	463b      	mov	r3, r7
 8006c6e:	4659      	mov	r1, fp
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fe03 	bl	800787c <shell_cmd_get>
		if ((cmd_idx == 0) || (p_static_entry == NULL)) {
 8006c76:	f1b8 0f00 	cmp.w	r8, #0
 8006c7a:	d001      	beq.n	8006c80 <execute+0x14c>
 8006c7c:	9b03      	ldr	r3, [sp, #12]
 8006c7e:	b983      	cbnz	r3, 8006ca2 <execute+0x16e>
			if (cmd_lvl == 0 &&
 8006c80:	2e00      	cmp	r6, #0
 8006c82:	d1a6      	bne.n	8006bd2 <execute+0x9e>

void shell_cmd_trim(const struct shell *shell);

static inline bool shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
 8006c84:	68a3      	ldr	r3, [r4, #8]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	b113      	cbz	r3, 8006c90 <execute+0x15c>
				(!shell_in_select_mode(shell) ||
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1a0      	bne.n	8006bd2 <execute+0x9e>
				shell_internal_fprintf(shell, SHELL_ERROR,
 8006c90:	4b40      	ldr	r3, [pc, #256]	; (8006d94 <execute+0x260>)
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	4a40      	ldr	r2, [pc, #256]	; (8006d98 <execute+0x264>)
 8006c96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c98:	2102      	movs	r1, #2
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f00d fd5a 	bl	8014754 <shell_internal_fprintf>
				return -ENOEXEC;
 8006ca0:	e774      	b.n	8006b8c <execute+0x58>
		if (strcmp(argv[cmd_lvl], p_static_entry->syntax) == 0) {
 8006ca2:	6819      	ldr	r1, [r3, #0]
 8006ca4:	ab1c      	add	r3, sp, #112	; 0x70
 8006ca6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8006caa:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8006cae:	f7fd fe8d 	bl	80049cc <strcmp>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d1bc      	bne.n	8006c30 <execute+0xfc>
			if (p_static_entry->handler != NULL) {
 8006cb6:	9f03      	ldr	r7, [sp, #12]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	b1bb      	cbz	r3, 8006cec <execute+0x1b8>
				if (IS_ENABLED(CONFIG_SHELL_WILDCARD) &&
 8006cbc:	f1b9 0f00 	cmp.w	r9, #0
 8006cc0:	d007      	beq.n	8006cd2 <execute+0x19e>
					shell_op_cursor_end_move(shell);
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f00d fcb2 	bl	801462c <shell_op_cursor_end_move>
					shell_op_cond_next_line(shell);
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f000 fe95 	bl	80079f8 <shell_op_cond_next_line>
					shell_internal_fprintf(shell,
 8006cce:	4a33      	ldr	r2, [pc, #204]	; (8006d9c <execute+0x268>)
 8006cd0:	e7c0      	b.n	8006c54 <execute+0x120>
				shell->ctx->active_cmd = *p_static_entry;
 8006cd2:	68a3      	ldr	r3, [r4, #8]
 8006cd4:	46be      	mov	lr, r7
 8006cd6:	f103 0c08 	add.w	ip, r3, #8
 8006cda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006cde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006ce2:	f8de 3000 	ldr.w	r3, [lr]
 8006ce6:	f8cc 3000 	str.w	r3, [ip]
 8006cea:	46b2      	mov	sl, r6
			if (p_static_entry->help != NULL) {
 8006cec:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8006cf0:	f1bc 0f00 	cmp.w	ip, #0
 8006cf4:	d008      	beq.n	8006d08 <execute+0x1d4>
				help_entry = *p_static_entry;
 8006cf6:	46be      	mov	lr, r7
 8006cf8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006cfc:	ad0a      	add	r5, sp, #40	; 0x28
 8006cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d00:	f8de 3000 	ldr.w	r3, [lr]
 8006d04:	602b      	str	r3, [r5, #0]
 8006d06:	4665      	mov	r5, ip
			cmd_lvl++;
 8006d08:	3601      	adds	r6, #1
			p_cmd = p_static_entry->subcmd;
 8006d0a:	f8d7 b008 	ldr.w	fp, [r7, #8]
			cmd_idx = 0;
 8006d0e:	f04f 0800 	mov.w	r8, #0
 8006d12:	e78d      	b.n	8006c30 <execute+0xfc>
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
 8006d14:	9d04      	ldr	r5, [sp, #16]
	if (shell->ctx->active_cmd.args.mandatory) {
 8006d16:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
 8006d18:	eba5 050a 	sub.w	r5, r5, sl
	if (shell->ctx->active_cmd.args.mandatory) {
 8006d1c:	b18b      	cbz	r3, 8006d42 <execute+0x20e>
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
 8006d1e:	429d      	cmp	r5, r3
		u8_t opt = shell->ctx->active_cmd.args.optional;
 8006d20:	7e42      	ldrb	r2, [r0, #25]
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
 8006d22:	d302      	bcc.n	8006d2a <execute+0x1f6>
 8006d24:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
 8006d26:	429d      	cmp	r5, r3
 8006d28:	d90b      	bls.n	8006d42 <execute+0x20e>
		shell_internal_fprintf(shell, SHELL_ERROR,
 8006d2a:	6883      	ldr	r3, [r0, #8]
 8006d2c:	4a1c      	ldr	r2, [pc, #112]	; (8006da0 <execute+0x26c>)
 8006d2e:	2102      	movs	r1, #2
 8006d30:	4620      	mov	r0, r4
 8006d32:	f00d fd0f 	bl	8014754 <shell_internal_fprintf>
			shell_internal_help_print(shell);
 8006d36:	4620      	mov	r0, r4
 8006d38:	f00d fad9 	bl	80142ee <shell_internal_help_print>
		return -EINVAL;
 8006d3c:	f06f 0515 	mvn.w	r5, #21
 8006d40:	e726      	b.n	8006b90 <execute+0x5c>
	z_impl_k_mutex_unlock(mutex);
 8006d42:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
 8006d46:	f00b fab9 	bl	80122bc <z_impl_k_mutex_unlock>
		flag_cmd_ctx_set(shell, 1);
 8006d4a:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1 ? true : false;
}

static inline void flag_cmd_ctx_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.cmd_ctx = val ? 1 : 0;
 8006d4c:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 8006d50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d54:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
		ret_val = shell->ctx->active_cmd.handler(shell, argc, argv);
 8006d58:	aa0f      	add	r2, sp, #60	; 0x3c
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006d62:	4620      	mov	r0, r4
 8006d64:	4798      	blx	r3
 8006d66:	4605      	mov	r5, r0
		flag_cmd_ctx_set(shell, 0);
 8006d68:	68a0      	ldr	r0, [r4, #8]
 8006d6a:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8006d6e:	f36f 13c7 	bfc	r3, #7, #1
 8006d72:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8006d76:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
 8006d7a:	f00d fad5 	bl	8014328 <k_mutex_lock.constprop.35>
 8006d7e:	e707      	b.n	8006b90 <execute+0x5c>
 8006d80:	0801a4e1 	.word	0x0801a4e1
 8006d84:	0801aaf4 	.word	0x0801aaf4
 8006d88:	0801ab0b 	.word	0x0801ab0b
 8006d8c:	0801ab08 	.word	0x0801ab08
 8006d90:	0801ab12 	.word	0x0801ab12
 8006d94:	0801ab30 	.word	0x0801ab30
 8006d98:	0801c779 	.word	0x0801c779
 8006d9c:	0801ab44 	.word	0x0801ab44
 8006da0:	0801ab73 	.word	0x0801ab73

08006da4 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
 8006da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8006da8:	6883      	ldr	r3, [r0, #8]
 8006daa:	f3bf 8f5b 	dmb	ish
 8006dae:	b0ad      	sub	sp, #180	; 0xb4
 8006db0:	4604      	mov	r4, r0
 8006db2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006db6:	e853 2f00 	ldrex	r2, [r3]
 8006dba:	f042 0208 	orr.w	r2, r2, #8
 8006dbe:	e843 2100 	strex	r1, r2, [r3]
 8006dc2:	2900      	cmp	r1, #0
 8006dc4:	d1f7      	bne.n	8006db6 <shell_process+0x12>
 8006dc6:	f3bf 8f5b 	dmb	ish
	internal.flags.processing = 1U;

	(void)atomic_or((atomic_t *)&shell->ctx->internal.value,
			internal.value);

	switch (shell->ctx->state) {
 8006dca:	68a3      	ldr	r3, [r4, #8]
 8006dcc:	791b      	ldrb	r3, [r3, #4]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	f040 837d 	bne.w	80074ce <shell_process+0x72a>
	size_t count = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	930b      	str	r3, [sp, #44]	; 0x2c
		(void)shell->iface->api->read(shell->iface, &data,
 8006dd8:	6860      	ldr	r0, [r4, #4]
 8006dda:	6803      	ldr	r3, [r0, #0]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	691d      	ldr	r5, [r3, #16]
 8006de0:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
 8006de4:	ab0b      	add	r3, sp, #44	; 0x2c
 8006de6:	47a8      	blx	r5
		if (count == 0) {
 8006de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 836f 	beq.w	80074ce <shell_process+0x72a>
		if (ascii_filter(data) != 0) {
 8006df0:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
	return (u8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
 8006df4:	060d      	lsls	r5, r1, #24
 8006df6:	d4ef      	bmi.n	8006dd8 <shell_process+0x34>
		switch (shell->ctx->receive_state) {
 8006df8:	68a0      	ldr	r0, [r4, #8]
 8006dfa:	7943      	ldrb	r3, [r0, #5]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	f200 8364 	bhi.w	80074ca <shell_process+0x726>
 8006e02:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006e06:	0003      	.short	0x0003
 8006e08:	02f902d4 	.word	0x02f902d4
	if ((data != '\r') && (data != '\n')) {
 8006e0c:	290d      	cmp	r1, #13
 8006e0e:	d01c      	beq.n	8006e4a <shell_process+0xa6>
 8006e10:	290a      	cmp	r1, #10
 8006e12:	d01a      	beq.n	8006e4a <shell_process+0xa6>
	return shell->ctx->internal.flags.last_nl;
}

static inline void flag_last_nl_set(const struct shell *shell, u8_t val)
{
	shell->ctx->internal.flags.last_nl = val;
 8006e14:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8006e18:	f36f 230f 	bfc	r3, #8, #8
 8006e1c:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
			switch (data) {
 8006e20:	2909      	cmp	r1, #9
 8006e22:	d056      	beq.n	8006ed2 <shell_process+0x12e>
 8006e24:	d83b      	bhi.n	8006e9e <shell_process+0xfa>
 8006e26:	2900      	cmp	r1, #0
 8006e28:	d0d6      	beq.n	8006dd8 <shell_process+0x34>
 8006e2a:	2908      	cmp	r1, #8
 8006e2c:	f000 8222 	beq.w	8007274 <shell_process+0x4d0>
				if (isprint((int) data)) {
 8006e30:	4b97      	ldr	r3, [pc, #604]	; (8007090 <shell_process+0x2ec>)
 8006e32:	5ccb      	ldrb	r3, [r1, r3]
 8006e34:	f013 0f97 	tst.w	r3, #151	; 0x97
 8006e38:	f000 822b 	beq.w	8007292 <shell_process+0x4ee>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 8006e3c:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8006e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e44:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
 8006e48:	e118      	b.n	800707c <shell_process+0x2d8>
	return shell->ctx->internal.flags.last_nl;
 8006e4a:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
	if ((flag_last_nl_get(shell) == 0U) ||
 8006e4e:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8006e52:	d005      	beq.n	8006e60 <shell_process+0xbc>
 8006e54:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
 8006e58:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006e5c:	4299      	cmp	r1, r3
 8006e5e:	d1df      	bne.n	8006e20 <shell_process+0x7c>
	shell->ctx->internal.flags.last_nl = val;
 8006e60:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8006e64:	f361 230f 	bfi	r3, r1, #8, #8
 8006e68:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
				if (!shell->ctx->cmd_buff_len &&
 8006e6c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8006e6e:	b993      	cbnz	r3, 8006e96 <shell_process+0xf2>
 8006e70:	69c2      	ldr	r2, [r0, #28]
 8006e72:	b982      	cbnz	r2, 8006e96 <shell_process+0xf2>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 8006e74:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8006e78:	f362 1386 	bfi	r3, r2, #6, #1
 8006e7c:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	shell_history_mode_exit(shell->history);
 8006e80:	68e0      	ldr	r0, [r4, #12]
 8006e82:	f00d fd8a 	bl	801499a <shell_history_mode_exit>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8006e86:	4983      	ldr	r1, [pc, #524]	; (8007094 <shell_process+0x2f0>)
 8006e88:	6960      	ldr	r0, [r4, #20]
 8006e8a:	f00d fa23 	bl	80142d4 <shell_raw_fprintf>
		state_set(shell, SHELL_STATE_ACTIVE);
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f00d fa36 	bl	8014300 <state_set.constprop.31>
		break;
 8006e94:	e7a0      	b.n	8006dd8 <shell_process+0x34>
					(void)execute(shell);
 8006e96:	4620      	mov	r0, r4
 8006e98:	f7ff fe4c 	bl	8006b34 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
 8006e9c:	e7f7      	b.n	8006e8e <shell_process+0xea>
 8006e9e:	291b      	cmp	r1, #27
 8006ea0:	d014      	beq.n	8006ecc <shell_process+0x128>
 8006ea2:	297f      	cmp	r1, #127	; 0x7f
 8006ea4:	d1c4      	bne.n	8006e30 <shell_process+0x8c>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 8006ea6:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
 8006eaa:	075f      	lsls	r7, r3, #29
 8006eac:	d594      	bpl.n	8006dd8 <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 8006eae:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8006eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb6:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	return shell->ctx->internal.flags.mode_delete == 1 ? true : false;
 8006eba:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
					if (flag_mode_delete_get(shell)) {
 8006ebe:	069e      	lsls	r6, r3, #26
 8006ec0:	f100 81e3 	bmi.w	800728a <shell_process+0x4e6>
		shell_op_char_delete(shell);
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f00d fc86 	bl	80147d6 <shell_op_char_delete>
		break;
 8006eca:	e785      	b.n	8006dd8 <shell_process+0x34>
	shell->ctx->receive_state = state;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	7143      	strb	r3, [r0, #5]
 8006ed0:	e782      	b.n	8006dd8 <shell_process+0x34>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 8006ed2:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
 8006ed6:	f3c3 0980 	ubfx	r9, r3, #2, #1
				if (flag_echo_get(shell)) {
 8006eda:	f1b9 0f00 	cmp.w	r9, #0
 8006ede:	f43f af7b 	beq.w	8006dd8 <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 8006ee2:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8006ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eea:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	if (compl_space == 0U) {
 8006eee:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8006ef0:	2bff      	cmp	r3, #255	; 0xff
 8006ef2:	f43f af71 	beq.w	8006dd8 <shell_process+0x34>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8006ef6:	8e82      	ldrh	r2, [r0, #52]	; 0x34
 8006ef8:	f100 0138 	add.w	r1, r0, #56	; 0x38
 8006efc:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8006f00:	f7fd fd0d 	bl	800491e <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
 8006f04:	68a2      	ldr	r2, [r4, #8]
 8006f06:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 8006f08:	4413      	add	r3, r2
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	f883 1138 	strb.w	r1, [r3, #312]	; 0x138
	(void)shell_make_argv(argc, *argv, shell->ctx->temp_buff,
 8006f10:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8006f14:	a91f      	add	r1, sp, #124	; 0x7c
 8006f16:	230c      	movs	r3, #12
 8006f18:	a80d      	add	r0, sp, #52	; 0x34
 8006f1a:	f000 fbe9 	bl	80076f0 <shell_make_argv>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
 8006f1e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f20:	b151      	cbz	r1, 8006f38 <shell_process+0x194>
	int space = isspace((int)shell->ctx->cmd_buff[
 8006f22:	68a3      	ldr	r3, [r4, #8]
 8006f24:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8006f26:	4413      	add	r3, r2
 8006f28:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8006f2c:	4b58      	ldr	r3, [pc, #352]	; (8007090 <shell_process+0x2ec>)
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
 8006f2e:	5cd3      	ldrb	r3, [r2, r3]
 8006f30:	0718      	lsls	r0, r3, #28
 8006f32:	d44c      	bmi.n	8006fce <shell_process+0x22a>
 8006f34:	2901      	cmp	r1, #1
 8006f36:	d149      	bne.n	8006fcc <shell_process+0x228>
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
 8006f38:	2500      	movs	r5, #0
 8006f3a:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
 8006f3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f3e:	aa2c      	add	r2, sp, #176	; 0xb0
 8006f40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
 8006f44:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
 8006f46:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
 8006f4a:	4650      	mov	r0, sl
 8006f4c:	f00d f9bc 	bl	80142c8 <shell_strlen>
	size_t idx = 0;
 8006f50:	46b0      	mov	r8, r6
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
 8006f52:	9004      	str	r0, [sp, #16]
	*longest = 0U;
 8006f54:	9605      	str	r6, [sp, #20]
	size_t first = 0;
 8006f56:	9603      	str	r6, [sp, #12]
	bool found = false;
 8006f58:	46b3      	mov	fp, r6
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 8006f5a:	af1a      	add	r7, sp, #104	; 0x68
 8006f5c:	2d00      	cmp	r5, #0
 8006f5e:	d043      	beq.n	8006fe8 <shell_process+0x244>
 8006f60:	68a9      	ldr	r1, [r5, #8]
 8006f62:	1c2b      	adds	r3, r5, #0
 8006f64:	bf18      	it	ne
 8006f66:	2301      	movne	r3, #1
 8006f68:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8006f6c:	ab15      	add	r3, sp, #84	; 0x54
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	9a02      	ldr	r2, [sp, #8]
 8006f72:	4643      	mov	r3, r8
 8006f74:	4620      	mov	r0, r4
 8006f76:	f000 fc81 	bl	800787c <shell_cmd_get>
		if (!candidate) {
 8006f7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d037      	beq.n	8006ff0 <shell_process+0x24c>
	return entry->syntax &&
 8006f80:	6818      	ldr	r0, [r3, #0]
		(entry->handler == NULL) && (entry->subcmd == NULL);
 8006f82:	2800      	cmp	r0, #0
 8006f84:	d032      	beq.n	8006fec <shell_process+0x248>
	return entry->syntax &&
 8006f86:	68da      	ldr	r2, [r3, #12]
 8006f88:	2a00      	cmp	r2, #0
 8006f8a:	d12f      	bne.n	8006fec <shell_process+0x248>
		(entry->handler == NULL) && (entry->subcmd == NULL);
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	fab3 f383 	clz	r3, r3
 8006f92:	095b      	lsrs	r3, r3, #5
	return (strncmp(candidate, str, len) == 0) ? true : false;
 8006f94:	9a04      	ldr	r2, [sp, #16]
 8006f96:	9302      	str	r3, [sp, #8]
 8006f98:	4651      	mov	r1, sl
 8006f9a:	f7fd fd31 	bl	8004a00 <strncmp>
		if (!is_empty && is_candidate) {
 8006f9e:	9b02      	ldr	r3, [sp, #8]
 8006fa0:	4303      	orrs	r3, r0
 8006fa2:	d110      	bne.n	8006fc6 <shell_process+0x222>
			size_t slen = strlen(candidate->syntax);
 8006fa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fa6:	6818      	ldr	r0, [r3, #0]
 8006fa8:	f7fd fd22 	bl	80049f0 <strlen>
			*longest = (slen > *longest) ? slen : *longest;
 8006fac:	9b05      	ldr	r3, [sp, #20]
 8006fae:	4283      	cmp	r3, r0
 8006fb0:	bf38      	it	cc
 8006fb2:	4603      	movcc	r3, r0
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	9305      	str	r3, [sp, #20]
			(*cnt)++;
 8006fb8:	3601      	adds	r6, #1
			if (!found) {
 8006fba:	f1bb 0f00 	cmp.w	fp, #0
 8006fbe:	d102      	bne.n	8006fc6 <shell_process+0x222>
				*first_idx = idx;
 8006fc0:	f8cd 800c 	str.w	r8, [sp, #12]
			found = true;
 8006fc4:	46cb      	mov	fp, r9
		idx++;
 8006fc6:	f108 0801 	add.w	r8, r8, #1
 8006fca:	e7c7      	b.n	8006f5c <shell_process+0x1b8>
	search_argc = space ? *argc : *argc - 1;
 8006fcc:	3901      	subs	r1, #1
	*cmd = shell_get_last_command(shell, search_argc, *argv,
 8006fce:	2300      	movs	r3, #0
 8006fd0:	9301      	str	r3, [sp, #4]
 8006fd2:	ab10      	add	r3, sp, #64	; 0x40
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	aa1f      	add	r2, sp, #124	; 0x7c
 8006fd8:	ab0c      	add	r3, sp, #48	; 0x30
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f00d fa7c 	bl	80144d8 <shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d1aa      	bne.n	8006f3c <shell_process+0x198>
 8006fe6:	e6f7      	b.n	8006dd8 <shell_process+0x34>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 8006fe8:	4629      	mov	r1, r5
 8006fea:	e7ba      	b.n	8006f62 <shell_process+0x1be>
		(entry->handler == NULL) && (entry->subcmd == NULL);
 8006fec:	2300      	movs	r3, #0
 8006fee:	e7d1      	b.n	8006f94 <shell_process+0x1f0>
	if (cnt == 1) {
 8006ff0:	2e01      	cmp	r6, #1
 8006ff2:	d151      	bne.n	8007098 <shell_process+0x2f4>
		autocomplete(shell, cmd, argv[arg_idx], first);
 8006ff4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ff6:	aa2c      	add	r2, sp, #176	; 0xb0
 8006ff8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	u16_t arg_len = shell_strlen(arg);
 8006ffc:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8007000:	f00d f962 	bl	80142c8 <shell_strlen>
 8007004:	4606      	mov	r6, r0
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 8007006:	b105      	cbz	r5, 800700a <shell_process+0x266>
 8007008:	68ad      	ldr	r5, [r5, #8]
 800700a:	68a3      	ldr	r3, [r4, #8]
 800700c:	3308      	adds	r3, #8
 800700e:	e9cd 7300 	strd	r7, r3, [sp]
 8007012:	4629      	mov	r1, r5
 8007014:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007018:	4620      	mov	r0, r4
 800701a:	f000 fc2f 	bl	800787c <shell_cmd_get>
	cmd_len = shell_strlen(match->syntax);
 800701e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	f00d f951 	bl	80142c8 <shell_strlen>
	if (cmd_len != arg_len) {
 8007026:	4286      	cmp	r6, r0
 8007028:	d007      	beq.n	800703a <shell_process+0x296>
					   match->syntax + arg_len,
 800702a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
		shell_op_completion_insert(shell,
 800702c:	6819      	ldr	r1, [r3, #0]
 800702e:	1b82      	subs	r2, r0, r6
 8007030:	b292      	uxth	r2, r2
 8007032:	4431      	add	r1, r6
 8007034:	4620      	mov	r0, r4
 8007036:	f00d fbcc 	bl	80147d2 <shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
 800703a:	68a3      	ldr	r3, [r4, #8]
 800703c:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800703e:	441a      	add	r2, r3
 8007040:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
 8007044:	4a12      	ldr	r2, [pc, #72]	; (8007090 <shell_process+0x2ec>)
 8007046:	5c8a      	ldrb	r2, [r1, r2]
 8007048:	f012 0208 	ands.w	r2, r2, #8
 800704c:	d11a      	bne.n	8007084 <shell_process+0x2e0>
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
 800704e:	f8d3 1258 	ldr.w	r1, [r3, #600]	; 0x258
		if (flag_insert_mode_get(shell)) {
 8007052:	07c9      	lsls	r1, r1, #31
 8007054:	d511      	bpl.n	800707a <shell_process+0x2d6>
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
 8007056:	f8b3 1258 	ldrh.w	r1, [r3, #600]	; 0x258
 800705a:	f362 0100 	bfi	r1, r2, #0, #1
 800705e:	f8a3 1258 	strh.w	r1, [r3, #600]	; 0x258
			shell_op_char_insert(shell, ' ');
 8007062:	4620      	mov	r0, r4
 8007064:	2120      	movs	r1, #32
 8007066:	f000 fe0d 	bl	8007c84 <shell_op_char_insert>
			flag_insert_mode_set(shell, true);
 800706a:	68a2      	ldr	r2, [r4, #8]
 800706c:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 8007070:	f043 0301 	orr.w	r3, r3, #1
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 8007074:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
 8007078:	e6ae      	b.n	8006dd8 <shell_process+0x34>
			shell_op_char_insert(shell, ' ');
 800707a:	2120      	movs	r1, #32
					shell_op_char_insert(shell, data);
 800707c:	4620      	mov	r0, r4
 800707e:	f000 fe01 	bl	8007c84 <shell_op_char_insert>
 8007082:	e6a9      	b.n	8006dd8 <shell_process+0x34>
		shell_op_cursor_move(shell, 1);
 8007084:	2101      	movs	r1, #1
 8007086:	4620      	mov	r0, r4
 8007088:	f00d faa6 	bl	80145d8 <shell_op_cursor_move>
 800708c:	e6a4      	b.n	8006dd8 <shell_process+0x34>
 800708e:	bf00      	nop
 8007090:	08019513 	.word	0x08019513
 8007094:	0801a4e1 	.word	0x0801a4e1
 8007098:	9306      	str	r3, [sp, #24]
	} else if (cnt > 1) {
 800709a:	f67f ae9d 	bls.w	8006dd8 <shell_process+0x34>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
 800709e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	longest_option += shell_strlen(tab);
 80070a0:	f8df 8350 	ldr.w	r8, [pc, #848]	; 80073f4 <shell_process+0x650>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
 80070a4:	ab2c      	add	r3, sp, #176	; 0xb0
 80070a6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80070aa:	f852 3c34 	ldr.w	r3, [r2, #-52]
 80070ae:	9304      	str	r3, [sp, #16]
	size_t str_len = shell_strlen(str);
 80070b0:	4618      	mov	r0, r3
 80070b2:	f00d f909 	bl	80142c8 <shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
 80070b6:	68a2      	ldr	r2, [r4, #8]
 80070b8:	9b06      	ldr	r3, [sp, #24]
 80070ba:	f8dd 900c 	ldr.w	r9, [sp, #12]
	size_t str_len = shell_strlen(str);
 80070be:	9008      	str	r0, [sp, #32]
		shell->ctx->vt100_ctx.printed_cmd = 0;
 80070c0:	8613      	strh	r3, [r2, #48]	; 0x30
 80070c2:	9606      	str	r6, [sp, #24]
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 80070c4:	2d00      	cmp	r5, #0
 80070c6:	f000 8084 	beq.w	80071d2 <shell_process+0x42e>
 80070ca:	68a9      	ldr	r1, [r5, #8]
 80070cc:	68a3      	ldr	r3, [r4, #8]
 80070ce:	9a02      	ldr	r2, [sp, #8]
 80070d0:	3308      	adds	r3, #8
 80070d2:	9301      	str	r3, [sp, #4]
 80070d4:	ab1a      	add	r3, sp, #104	; 0x68
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	4620      	mov	r0, r4
 80070da:	464b      	mov	r3, r9
 80070dc:	f000 fbce 	bl	800787c <shell_cmd_get>
		is_empty = is_empty_cmd(match);
 80070e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
	return entry->syntax &&
 80070e2:	6818      	ldr	r0, [r3, #0]
		idx++;
 80070e4:	f109 0901 	add.w	r9, r9, #1
		(entry->handler == NULL) && (entry->subcmd == NULL);
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d174      	bne.n	80071d6 <shell_process+0x432>
		tab_item_print(shell, match->syntax, longest);
 80070ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80070ee:	f8d3 a000 	ldr.w	sl, [r3]
	if (option == NULL) {
 80070f2:	f1ba 0f00 	cmp.w	sl, #0
 80070f6:	d17f      	bne.n	80071f8 <shell_process+0x454>
		shell->ctx->vt100_ctx.printed_cmd = 0;
 80070f8:	68a3      	ldr	r3, [r4, #8]
 80070fa:	f8a3 a030 	strh.w	sl, [r3, #48]	; 0x30
	while (cnt) {
 80070fe:	9b06      	ldr	r3, [sp, #24]
 8007100:	3b01      	subs	r3, #1
 8007102:	9306      	str	r3, [sp, #24]
 8007104:	d1de      	bne.n	80070c4 <shell_process+0x320>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8007106:	49b5      	ldr	r1, [pc, #724]	; (80073dc <shell_process+0x638>)
 8007108:	6960      	ldr	r0, [r4, #20]
 800710a:	f00d f8e3 	bl	80142d4 <shell_raw_fprintf>
	shell_print_prompt_and_cmd(shell);
 800710e:	4620      	mov	r0, r4
 8007110:	f000 fdea 	bl	8007ce8 <shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
 8007114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007116:	aa2c      	add	r2, sp, #176	; 0xb0
 8007118:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	u16_t arg_len = shell_strlen(arg);
 800711c:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8007120:	f00d f8d2 	bl	80142c8 <shell_strlen>
	size_t idx = first + 1;
 8007124:	9b03      	ldr	r3, [sp, #12]
	u16_t arg_len = shell_strlen(arg);
 8007126:	4680      	mov	r8, r0
	size_t idx = first + 1;
 8007128:	f103 0901 	add.w	r9, r3, #1
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 800712c:	2d00      	cmp	r5, #0
 800712e:	f000 809b 	beq.w	8007268 <shell_process+0x4c4>
 8007132:	68a9      	ldr	r1, [r5, #8]
 8007134:	ab15      	add	r3, sp, #84	; 0x54
 8007136:	9301      	str	r3, [sp, #4]
 8007138:	ab0e      	add	r3, sp, #56	; 0x38
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	4620      	mov	r0, r4
 800713e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007142:	f000 fb9b 	bl	800787c <shell_cmd_get>
	strncpy(shell->ctx->temp_buff, match->syntax,
 8007146:	9f0e      	ldr	r7, [sp, #56]	; 0x38
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 8007148:	68a0      	ldr	r0, [r4, #8]
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	22ff      	movs	r2, #255	; 0xff
 800714e:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8007152:	f7fd fc67 	bl	8004a24 <strncpy>
	*str = match->syntax;
 8007156:	f8d7 a000 	ldr.w	sl, [r7]
	u16_t common = UINT16_MAX;
 800715a:	f64f 77ff 	movw	r7, #65535	; 0xffff
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 800715e:	2d00      	cmp	r5, #0
 8007160:	f000 8086 	beq.w	8007270 <shell_process+0x4cc>
 8007164:	68a9      	ldr	r1, [r5, #8]
 8007166:	9a02      	ldr	r2, [sp, #8]
 8007168:	ab1a      	add	r3, sp, #104	; 0x68
 800716a:	9301      	str	r3, [sp, #4]
 800716c:	ab0f      	add	r3, sp, #60	; 0x3c
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	4620      	mov	r0, r4
 8007172:	464b      	mov	r3, r9
 8007174:	f000 fb82 	bl	800787c <shell_cmd_get>
		if (match2 == NULL) {
 8007178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 800717a:	f109 0b01 	add.w	fp, r9, #1
		if (match2 == NULL) {
 800717e:	b1e3      	cbz	r3, 80071ba <shell_process+0x416>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
 8007180:	6818      	ldr	r0, [r3, #0]
static size_t str_common(const char *s1, const char *s2, size_t n)
 8007182:	68a3      	ldr	r3, [r4, #8]
	size_t common = 0;
 8007184:	2200      	movs	r2, #0
 8007186:	f503 739c 	add.w	r3, r3, #312	; 0x138
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 800718a:	f813 cb01 	ldrb.w	ip, [r3], #1
 800718e:	5c81      	ldrb	r1, [r0, r2]
 8007190:	4561      	cmp	r1, ip
 8007192:	d105      	bne.n	80071a0 <shell_process+0x3fc>
 8007194:	b121      	cbz	r1, 80071a0 <shell_process+0x3fc>
		common++;
 8007196:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8007198:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800719c:	428a      	cmp	r2, r1
 800719e:	d1f4      	bne.n	800718a <shell_process+0x3e6>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
 80071a0:	f1b8 0f00 	cmp.w	r8, #0
 80071a4:	d001      	beq.n	80071aa <shell_process+0x406>
 80071a6:	4542      	cmp	r2, r8
 80071a8:	db60      	blt.n	800726c <shell_process+0x4c8>
			common = (curr_common < common) ? curr_common : common;
 80071aa:	4297      	cmp	r7, r2
			--cnt;
 80071ac:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
 80071b0:	bfa8      	it	ge
 80071b2:	4617      	movge	r7, r2
	while (cnt > 1) {
 80071b4:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
 80071b6:	b2bf      	uxth	r7, r7
	while (cnt > 1) {
 80071b8:	d158      	bne.n	800726c <shell_process+0x4c8>
	if (common) {
 80071ba:	2f00      	cmp	r7, #0
 80071bc:	f43f ae0c 	beq.w	8006dd8 <shell_process+0x34>
		shell_op_completion_insert(shell, &completion[arg_len],
 80071c0:	eba7 0208 	sub.w	r2, r7, r8
 80071c4:	b292      	uxth	r2, r2
 80071c6:	eb0a 0108 	add.w	r1, sl, r8
 80071ca:	4620      	mov	r0, r4
 80071cc:	f00d fb01 	bl	80147d2 <shell_op_completion_insert>
 80071d0:	e602      	b.n	8006dd8 <shell_process+0x34>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 80071d2:	4629      	mov	r1, r5
 80071d4:	e77a      	b.n	80070cc <shell_process+0x328>
	return entry->syntax &&
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	b91a      	cbnz	r2, 80071e2 <shell_process+0x43e>
		(entry->handler == NULL) && (entry->subcmd == NULL);
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f43f af71 	beq.w	80070c4 <shell_process+0x320>
		if (is_empty || (str && match->syntax &&
 80071e2:	9b04      	ldr	r3, [sp, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d081      	beq.n	80070ec <shell_process+0x348>
	return (strncmp(candidate, str, len) == 0) ? true : false;
 80071e8:	9a08      	ldr	r2, [sp, #32]
 80071ea:	9904      	ldr	r1, [sp, #16]
 80071ec:	f7fd fc08 	bl	8004a00 <strncmp>
		if (is_empty || (str && match->syntax &&
 80071f0:	2800      	cmp	r0, #0
 80071f2:	f43f af7b 	beq.w	80070ec <shell_process+0x348>
 80071f6:	e765      	b.n	80070c4 <shell_process+0x320>
	longest_option += shell_strlen(tab);
 80071f8:	4640      	mov	r0, r8
 80071fa:	f00d f865 	bl	80142c8 <shell_strlen>
 80071fe:	9b05      	ldr	r3, [sp, #20]
 8007200:	4418      	add	r0, r3
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 8007202:	68a3      	ldr	r3, [r4, #8]
	longest_option += shell_strlen(tab);
 8007204:	fa1f fb80 	uxth.w	fp, r0
			- shell_strlen(tab)) / longest_option;
 8007208:	4640      	mov	r0, r8
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 800720a:	8d5f      	ldrh	r7, [r3, #42]	; 0x2a
			- shell_strlen(tab)) / longest_option;
 800720c:	f00d f85c 	bl	80142c8 <shell_strlen>
 8007210:	9009      	str	r0, [sp, #36]	; 0x24
	diff = longest_option - shell_strlen(option);
 8007212:	4650      	mov	r0, sl
 8007214:	f00d f858 	bl	80142c8 <shell_strlen>
 8007218:	ebab 0000 	sub.w	r0, fp, r0
 800721c:	b283      	uxth	r3, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 800721e:	68a1      	ldr	r1, [r4, #8]
	diff = longest_option - shell_strlen(option);
 8007220:	9307      	str	r3, [sp, #28]
			- shell_strlen(tab)) / longest_option;
 8007222:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8007224:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
			- shell_strlen(tab)) / longest_option;
 8007226:	1aff      	subs	r7, r7, r3
 8007228:	fb97 fbfb 	sdiv	fp, r7, fp
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 800722c:	fa1f fb8b 	uxth.w	fp, fp
 8007230:	1c50      	adds	r0, r2, #1
 8007232:	fbb2 f3fb 	udiv	r3, r2, fp
 8007236:	fb0b 2213 	mls	r2, fp, r3, r2
 800723a:	b292      	uxth	r2, r2
 800723c:	8608      	strh	r0, [r1, #48]	; 0x30
 800723e:	b962      	cbnz	r2, 800725a <shell_process+0x4b6>
		shell_internal_fprintf(shell, SHELL_OPTION, "\n%s%s", tab,
 8007240:	f8cd a000 	str.w	sl, [sp]
 8007244:	4643      	mov	r3, r8
 8007246:	4a66      	ldr	r2, [pc, #408]	; (80073e0 <shell_process+0x63c>)
 8007248:	2107      	movs	r1, #7
 800724a:	4620      	mov	r0, r4
 800724c:	f00d fa82 	bl	8014754 <shell_internal_fprintf>
	shell_op_cursor_horiz_move(shell, diff);
 8007250:	9907      	ldr	r1, [sp, #28]
 8007252:	4620      	mov	r0, r4
 8007254:	f000 fbc0 	bl	80079d8 <shell_op_cursor_horiz_move>
 8007258:	e751      	b.n	80070fe <shell_process+0x35a>
		shell_internal_fprintf(shell, SHELL_OPTION, "%s", option);
 800725a:	4653      	mov	r3, sl
 800725c:	4a61      	ldr	r2, [pc, #388]	; (80073e4 <shell_process+0x640>)
 800725e:	2107      	movs	r1, #7
 8007260:	4620      	mov	r0, r4
 8007262:	f00d fa77 	bl	8014754 <shell_internal_fprintf>
 8007266:	e7f3      	b.n	8007250 <shell_process+0x4ac>
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 8007268:	4629      	mov	r1, r5
 800726a:	e763      	b.n	8007134 <shell_process+0x390>
 800726c:	46d9      	mov	r9, fp
 800726e:	e776      	b.n	800715e <shell_process+0x3ba>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
 8007270:	4629      	mov	r1, r5
 8007272:	e778      	b.n	8007166 <shell_process+0x3c2>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 8007274:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
 8007278:	075b      	lsls	r3, r3, #29
 800727a:	f57f adad 	bpl.w	8006dd8 <shell_process+0x34>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 800727e:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8007282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007286:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
						shell_op_char_backspace(shell);
 800728a:	4620      	mov	r0, r4
 800728c:	f00d fabe 	bl	801480c <shell_op_char_backspace>
 8007290:	e5a2      	b.n	8006dd8 <shell_process+0x34>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 8007292:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				} else if (flag_echo_get(shell)) {
 8007296:	075d      	lsls	r5, r3, #29
 8007298:	f57f ad9e 	bpl.w	8006dd8 <shell_process+0x34>
	switch (data) {
 800729c:	3901      	subs	r1, #1
 800729e:	2916      	cmp	r1, #22
 80072a0:	f63f ad9a 	bhi.w	8006dd8 <shell_process+0x34>
 80072a4:	a301      	add	r3, pc, #4	; (adr r3, 80072ac <shell_process+0x508>)
 80072a6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80072aa:	bf00      	nop
 80072ac:	08007495 	.word	0x08007495
 80072b0:	08007309 	.word	0x08007309
 80072b4:	08007311 	.word	0x08007311
 80072b8:	08006ec5 	.word	0x08006ec5
 80072bc:	08007489 	.word	0x08007489
 80072c0:	08007337 	.word	0x08007337
 80072c4:	08006dd9 	.word	0x08006dd9
 80072c8:	08006dd9 	.word	0x08006dd9
 80072cc:	08006dd9 	.word	0x08006dd9
 80072d0:	08006dd9 	.word	0x08006dd9
 80072d4:	0800733f 	.word	0x0800733f
 80072d8:	08007347 	.word	0x08007347
 80072dc:	08006dd9 	.word	0x08006dd9
 80072e0:	08007363 	.word	0x08007363
 80072e4:	08006dd9 	.word	0x08006dd9
 80072e8:	0800736d 	.word	0x0800736d
 80072ec:	08006dd9 	.word	0x08006dd9
 80072f0:	08006dd9 	.word	0x08006dd9
 80072f4:	08006dd9 	.word	0x08006dd9
 80072f8:	08006dd9 	.word	0x08006dd9
 80072fc:	08007371 	.word	0x08007371
 8007300:	08006dd9 	.word	0x08006dd9
 8007304:	0800739d 	.word	0x0800739d
		shell_op_left_arrow(shell);
 8007308:	4620      	mov	r0, r4
 800730a:	f00d f996 	bl	801463a <shell_op_left_arrow>
		break;
 800730e:	e563      	b.n	8006dd8 <shell_process+0x34>
		shell_op_cursor_end_move(shell);
 8007310:	4620      	mov	r0, r4
 8007312:	f00d f98b 	bl	801462c <shell_op_cursor_end_move>
		if (!shell_cursor_in_empty_line(shell)) {
 8007316:	4620      	mov	r0, r4
 8007318:	f00d f94a 	bl	80145b0 <shell_cursor_in_empty_line>
 800731c:	b918      	cbnz	r0, 8007326 <shell_process+0x582>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 800731e:	492f      	ldr	r1, [pc, #188]	; (80073dc <shell_process+0x638>)
 8007320:	6960      	ldr	r0, [r4, #20]
 8007322:	f00c ffd7 	bl	80142d4 <shell_raw_fprintf>
		flag_history_exit_set(shell, true);
 8007326:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 8007328:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 800732c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007330:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
 8007334:	e5ab      	b.n	8006e8e <shell_process+0xea>
		shell_op_right_arrow(shell);
 8007336:	4620      	mov	r0, r4
 8007338:	f00d f987 	bl	801464a <shell_op_right_arrow>
		break;
 800733c:	e54c      	b.n	8006dd8 <shell_process+0x34>
		shell_op_delete_from_cursor(shell);
 800733e:	4620      	mov	r0, r4
 8007340:	f00d f98c 	bl	801465c <shell_op_delete_from_cursor>
		break;
 8007344:	e548      	b.n	8006dd8 <shell_process+0x34>
		SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 8007346:	6960      	ldr	r0, [r4, #20]
 8007348:	4a27      	ldr	r2, [pc, #156]	; (80073e8 <shell_process+0x644>)
 800734a:	4926      	ldr	r1, [pc, #152]	; (80073e4 <shell_process+0x640>)
 800734c:	f00c ffc2 	bl	80142d4 <shell_raw_fprintf>
		SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
 8007350:	6960      	ldr	r0, [r4, #20]
 8007352:	4a26      	ldr	r2, [pc, #152]	; (80073ec <shell_process+0x648>)
 8007354:	4923      	ldr	r1, [pc, #140]	; (80073e4 <shell_process+0x640>)
 8007356:	f00c ffbd 	bl	80142d4 <shell_raw_fprintf>
		shell_print_prompt_and_cmd(shell);
 800735a:	4620      	mov	r0, r4
 800735c:	f000 fcc4 	bl	8007ce8 <shell_print_prompt_and_cmd>
		break;
 8007360:	e53a      	b.n	8006dd8 <shell_process+0x34>
		history_handle(shell, false);
 8007362:	2100      	movs	r1, #0
		history_handle(shell, true);
 8007364:	4620      	mov	r0, r4
 8007366:	f7ff fb93 	bl	8006a90 <history_handle>
		break;
 800736a:	e535      	b.n	8006dd8 <shell_process+0x34>
		history_handle(shell, true);
 800736c:	2101      	movs	r1, #1
 800736e:	e7f9      	b.n	8007364 <shell_process+0x5c0>
		shell_op_cursor_home_move(shell);
 8007370:	4620      	mov	r0, r4
 8007372:	f00d f955 	bl	8014620 <shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
 8007376:	68a3      	ldr	r3, [r4, #8]
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 8007378:	491a      	ldr	r1, [pc, #104]	; (80073e4 <shell_process+0x640>)
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
 8007380:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
 8007382:	865a      	strh	r2, [r3, #50]	; 0x32
		flag_history_exit_set(shell, true);
 8007384:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 8007386:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 800738a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800738e:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 8007392:	6960      	ldr	r0, [r4, #20]
 8007394:	4a16      	ldr	r2, [pc, #88]	; (80073f0 <shell_process+0x64c>)
 8007396:	f00c ff9d 	bl	80142d4 <shell_raw_fprintf>
 800739a:	e51d      	b.n	8006dd8 <shell_process+0x34>
		shell_op_word_remove(shell);
 800739c:	4620      	mov	r0, r4
 800739e:	f000 fbf3 	bl	8007b88 <shell_op_word_remove>
		flag_history_exit_set(shell, true);
 80073a2:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
 80073a4:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 80073a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ac:	e662      	b.n	8007074 <shell_process+0x2d0>
			if (data == '[') {
 80073ae:	295b      	cmp	r1, #91	; 0x5b
 80073b0:	d101      	bne.n	80073b6 <shell_process+0x612>
	shell->ctx->receive_state = state;
 80073b2:	2302      	movs	r3, #2
 80073b4:	e58b      	b.n	8006ece <shell_process+0x12a>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80073b6:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
			} else if (flag_echo_get(shell)) {
 80073ba:	0758      	lsls	r0, r3, #29
 80073bc:	d506      	bpl.n	80073cc <shell_process+0x628>
	if (data == SHELL_VT100_ASCII_ALT_B) {
 80073be:	2962      	cmp	r1, #98	; 0x62
 80073c0:	d108      	bne.n	80073d4 <shell_process+0x630>
		shell_op_cursor_word_move(shell, -1);
 80073c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		shell_op_cursor_word_move(shell, 1);
 80073c6:	4620      	mov	r0, r4
 80073c8:	f000 fb54 	bl	8007a74 <shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
 80073cc:	68a3      	ldr	r3, [r4, #8]
 80073ce:	2200      	movs	r2, #0
 80073d0:	715a      	strb	r2, [r3, #5]
 80073d2:	e501      	b.n	8006dd8 <shell_process+0x34>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
 80073d4:	2966      	cmp	r1, #102	; 0x66
 80073d6:	d1f9      	bne.n	80073cc <shell_process+0x628>
		shell_op_cursor_word_move(shell, 1);
 80073d8:	2101      	movs	r1, #1
 80073da:	e7f4      	b.n	80073c6 <shell_process+0x622>
 80073dc:	0801a4e1 	.word	0x0801a4e1
 80073e0:	0801ab8e 	.word	0x0801ab8e
 80073e4:	0801d406 	.word	0x0801d406
 80073e8:	0801aaeb 	.word	0x0801aaeb
 80073ec:	0801aaef 	.word	0x0801aaef
 80073f0:	0801aae7 	.word	0x0801aae7
 80073f4:	0801c82d 	.word	0x0801c82d
	shell->ctx->receive_state = state;
 80073f8:	2300      	movs	r3, #0
 80073fa:	7143      	strb	r3, [r0, #5]
 80073fc:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
			if (!flag_echo_get(shell)) {
 8007400:	075a      	lsls	r2, r3, #29
 8007402:	f57f ace9 	bpl.w	8006dd8 <shell_process+0x34>
			switch (data) {
 8007406:	3931      	subs	r1, #49	; 0x31
 8007408:	291b      	cmp	r1, #27
 800740a:	f63f ace5 	bhi.w	8006dd8 <shell_process+0x34>
 800740e:	a301      	add	r3, pc, #4	; (adr r3, 8007414 <shell_process+0x670>)
 8007410:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8007414:	08007491 	.word	0x08007491
 8007418:	0800749d 	.word	0x0800749d
 800741c:	080074bb 	.word	0x080074bb
 8007420:	08007485 	.word	0x08007485
 8007424:	08006dd9 	.word	0x08006dd9
 8007428:	08006dd9 	.word	0x08006dd9
 800742c:	08006dd9 	.word	0x08006dd9
 8007430:	08006dd9 	.word	0x08006dd9
 8007434:	08006dd9 	.word	0x08006dd9
 8007438:	08006dd9 	.word	0x08006dd9
 800743c:	08006dd9 	.word	0x08006dd9
 8007440:	08006dd9 	.word	0x08006dd9
 8007444:	08006dd9 	.word	0x08006dd9
 8007448:	08006dd9 	.word	0x08006dd9
 800744c:	08006dd9 	.word	0x08006dd9
 8007450:	08006dd9 	.word	0x08006dd9
 8007454:	0800736d 	.word	0x0800736d
 8007458:	08007363 	.word	0x08007363
 800745c:	08007337 	.word	0x08007337
 8007460:	08007309 	.word	0x08007309
 8007464:	08006dd9 	.word	0x08006dd9
 8007468:	08007489 	.word	0x08007489
 800746c:	08006dd9 	.word	0x08006dd9
 8007470:	08007495 	.word	0x08007495
 8007474:	08006dd9 	.word	0x08006dd9
 8007478:	08006dd9 	.word	0x08006dd9
 800747c:	08006dd9 	.word	0x08006dd9
 8007480:	080074a1 	.word	0x080074a1
	shell->ctx->receive_state = state;
 8007484:	2303      	movs	r3, #3
 8007486:	7143      	strb	r3, [r0, #5]
		shell_op_cursor_end_move(shell);
 8007488:	4620      	mov	r0, r4
 800748a:	f00d f8cf 	bl	801462c <shell_op_cursor_end_move>
		break;
 800748e:	e4a3      	b.n	8006dd8 <shell_process+0x34>
	shell->ctx->receive_state = state;
 8007490:	2303      	movs	r3, #3
 8007492:	7143      	strb	r3, [r0, #5]
		shell_op_cursor_home_move(shell);
 8007494:	4620      	mov	r0, r4
 8007496:	f00d f8c3 	bl	8014620 <shell_op_cursor_home_move>
		break;
 800749a:	e49d      	b.n	8006dd8 <shell_process+0x34>
	shell->ctx->receive_state = state;
 800749c:	2303      	movs	r3, #3
 800749e:	7143      	strb	r3, [r0, #5]
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
 80074a0:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
 80074a4:	f8b0 2258 	ldrh.w	r2, [r0, #600]	; 0x258
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
 80074a8:	f003 0301 	and.w	r3, r3, #1
				flag_insert_mode_set(shell, !status);
 80074ac:	f083 0301 	eor.w	r3, r3, #1
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
 80074b0:	f363 0200 	bfi	r2, r3, #0, #1
 80074b4:	f8a0 2258 	strh.w	r2, [r0, #600]	; 0x258
 80074b8:	e48e      	b.n	8006dd8 <shell_process+0x34>
	shell->ctx->receive_state = state;
 80074ba:	2303      	movs	r3, #3
 80074bc:	7143      	strb	r3, [r0, #5]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80074be:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
 80074c2:	075b      	lsls	r3, r3, #29
 80074c4:	f57f ac88 	bpl.w	8006dd8 <shell_process+0x34>
 80074c8:	e4fc      	b.n	8006ec4 <shell_process+0x120>
	shell->ctx->receive_state = state;
 80074ca:	2300      	movs	r3, #0
 80074cc:	e4ff      	b.n	8006ece <shell_process+0x12a>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80074ce:	68a3      	ldr	r3, [r4, #8]
 80074d0:	f3bf 8f5b 	dmb	ish
 80074d4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80074d8:	e853 2f00 	ldrex	r2, [r3]
 80074dc:	f022 0208 	bic.w	r2, r2, #8
 80074e0:	e843 2100 	strex	r1, r2, [r3]
 80074e4:	2900      	cmp	r1, #0
 80074e6:	d1f7      	bne.n	80074d8 <shell_process+0x734>
 80074e8:	f3bf 8f5b 	dmb	ish

	internal.value = 0xFFFFFFFF;
	internal.flags.processing = 0U;
	(void)atomic_and((atomic_t *)&shell->ctx->internal.value,
			 internal.value);
}
 80074ec:	b02d      	add	sp, #180	; 0xb4
 80074ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f2:	bf00      	nop

080074f4 <shell_init>:
{
 80074f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074f8:	4604      	mov	r4, r0
	int err = shell->iface->api->init(shell->iface, p_config,
 80074fa:	6840      	ldr	r0, [r0, #4]
 80074fc:	4a37      	ldr	r2, [pc, #220]	; (80075dc <shell_init+0xe8>)
{
 80074fe:	461f      	mov	r7, r3
	int err = shell->iface->api->init(shell->iface, p_config,
 8007500:	6803      	ldr	r3, [r0, #0]
{
 8007502:	b086      	sub	sp, #24
	int err = shell->iface->api->init(shell->iface, p_config,
 8007504:	681d      	ldr	r5, [r3, #0]
 8007506:	4623      	mov	r3, r4
 8007508:	47a8      	blx	r5
	if (err != 0) {
 800750a:	4606      	mov	r6, r0
 800750c:	2800      	cmp	r0, #0
 800750e:	d161      	bne.n	80075d4 <shell_init+0xe0>
__ssp_bos_icheck3(memset, void *, int)
 8007510:	4601      	mov	r1, r0
 8007512:	f44f 7241 	mov.w	r2, #772	; 0x304
 8007516:	68a0      	ldr	r0, [r4, #8]
 8007518:	f7fd fa29 	bl	800496e <memset>
	shell->ctx->prompt = shell->default_prompt;
 800751c:	68a3      	ldr	r3, [r4, #8]
 800751e:	6822      	ldr	r2, [r4, #0]
	shell_history_init(shell->history);
 8007520:	68e0      	ldr	r0, [r4, #12]
	shell->ctx->prompt = shell->default_prompt;
 8007522:	601a      	str	r2, [r3, #0]
	shell_history_init(shell->history);
 8007524:	f00d fadd 	bl	8014ae2 <shell_history_init>
	k_mutex_init(&shell->ctx->wr_mtx);
 8007528:	68a0      	ldr	r0, [r4, #8]
 800752a:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
	z_impl_k_mutex_init(mutex);
 800752e:	f011 f849 	bl	80185c4 <z_impl_k_mutex_init>
 8007532:	f44f 7827 	mov.w	r8, #668	; 0x29c
 8007536:	f44f 7517 	mov.w	r5, #604	; 0x25c
		k_poll_signal_init(&shell->ctx->signals[i]);
 800753a:	68a0      	ldr	r0, [r4, #8]
 800753c:	4428      	add	r0, r5
		arch_syscall_invoke1(*(uintptr_t *)&signal, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(signal);
 800753e:	f011 fc67 	bl	8018e10 <z_impl_k_poll_signal_init>
		k_poll_event_init(&shell->ctx->events[i],
 8007542:	68a0      	ldr	r0, [r4, #8]
 8007544:	2200      	movs	r2, #0
 8007546:	1943      	adds	r3, r0, r5
 8007548:	2101      	movs	r1, #1
 800754a:	4440      	add	r0, r8
 800754c:	3510      	adds	r5, #16
 800754e:	f00b fce3 	bl	8012f18 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
 8007552:	f5b5 7f27 	cmp.w	r5, #668	; 0x29c
 8007556:	f108 0814 	add.w	r8, r8, #20
 800755a:	d1ee      	bne.n	800753a <shell_init+0x46>
		shell->stats->log_lost_cnt = 0;
 800755c:	69a3      	ldr	r3, [r4, #24]
 800755e:	2500      	movs	r5, #0
 8007560:	601d      	str	r5, [r3, #0]
	flag_tx_rdy_set(shell, true);
 8007562:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
 8007564:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	f042 0210 	orr.w	r2, r2, #16
 800756e:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->internal.flags.echo = val ? 1 : 0;
 8007572:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 8007576:	f042 0204 	orr.w	r2, r2, #4
 800757a:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
 800757e:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 8007582:	f042 0220 	orr.w	r2, r2, #32
 8007586:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->state = SHELL_STATE_INITIALIZED;
 800758a:	2201      	movs	r2, #1
 800758c:	711a      	strb	r2, [r3, #4]
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
 800758e:	4a14      	ldr	r2, [pc, #80]	; (80075e0 <shell_init+0xec>)
 8007590:	629a      	str	r2, [r3, #40]	; 0x28
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
 8007592:	f00c fe99 	bl	80142c8 <shell_strlen>
 8007596:	68a3      	ldr	r3, [r4, #8]
 8007598:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	flag_use_colors_set(shell, IS_ENABLED(CONFIG_SHELL_VT100_COLORS));
 800759c:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
 800759e:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 80075a2:	f043 0302 	orr.w	r3, r3, #2
 80075a6:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
	k_tid_t tid = k_thread_create(shell->thread,
 80075aa:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80075ae:	230e      	movs	r3, #14
 80075b0:	9303      	str	r3, [sp, #12]
 80075b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075b4:	9400      	str	r4, [sp, #0]
 80075b6:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80075ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80075be:	4b09      	ldr	r3, [pc, #36]	; (80075e4 <shell_init+0xf0>)
 80075c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075c4:	f00b fa42 	bl	8012a4c <z_impl_k_thread_create>
	shell->ctx->tid = tid;
 80075c8:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
 80075ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
 80075cc:	f8c3 0300 	str.w	r0, [r3, #768]	; 0x300
	return z_impl_k_thread_name_set(thread_id, value);
 80075d0:	f011 f9f3 	bl	80189ba <z_impl_k_thread_name_set>
}
 80075d4:	4630      	mov	r0, r6
 80075d6:	b006      	add	sp, #24
 80075d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075dc:	08014315 	.word	0x08014315
 80075e0:	00500018 	.word	0x00500018
 80075e4:	08007619 	.word	0x08007619

080075e8 <shell_start>:
	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
 80075e8:	6883      	ldr	r3, [r0, #8]
 80075ea:	791b      	ldrb	r3, [r3, #4]
 80075ec:	2b01      	cmp	r3, #1
{
 80075ee:	b510      	push	{r4, lr}
 80075f0:	4604      	mov	r4, r0
	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
 80075f2:	d10b      	bne.n	800760c <shell_start+0x24>
		shell_vt100_color_set(shell, SHELL_NORMAL);
 80075f4:	2100      	movs	r1, #0
 80075f6:	f000 fa7d 	bl	8007af4 <shell_vt100_color_set>
	shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
 80075fa:	4906      	ldr	r1, [pc, #24]	; (8007614 <shell_start+0x2c>)
 80075fc:	6960      	ldr	r0, [r4, #20]
 80075fe:	f00c fe69 	bl	80142d4 <shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
 8007602:	4620      	mov	r0, r4
 8007604:	f00c fe7c 	bl	8014300 <state_set.constprop.31>
	return 0;
 8007608:	2000      	movs	r0, #0
}
 800760a:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 800760c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007610:	e7fb      	b.n	800760a <shell_start+0x22>
 8007612:	bf00      	nop
 8007614:	0801a4e0 	.word	0x0801a4e0

08007618 <shell_thread>:
{
 8007618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800761c:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
 800761e:	6840      	ldr	r0, [r0, #4]
 8007620:	6803      	ldr	r3, [r0, #0]
{
 8007622:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	2100      	movs	r1, #0
{
 8007628:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
 800762a:	4798      	blx	r3
	if (err != 0) {
 800762c:	2800      	cmp	r0, #0
 800762e:	d140      	bne.n	80076b2 <shell_thread+0x9a>
	if (log_backend && IS_ENABLED(CONFIG_SHELL_LOG_BACKEND)) {
 8007630:	b126      	cbz	r6, 800763c <shell_thread+0x24>
		shell_log_backend_enable(shell->log_backend, (void *)shell,
 8007632:	462a      	mov	r2, r5
 8007634:	4621      	mov	r1, r4
 8007636:	69e0      	ldr	r0, [r4, #28]
 8007638:	f00d fadf 	bl	8014bfa <shell_log_backend_enable>
	err = shell_start(shell);
 800763c:	4620      	mov	r0, r4
 800763e:	f7ff ffd3 	bl	80075e8 <shell_start>
	if (err != 0) {
 8007642:	2800      	cmp	r0, #0
 8007644:	d135      	bne.n	80076b2 <shell_thread+0x9a>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
 8007646:	4f1c      	ldr	r7, [pc, #112]	; (80076b8 <shell_thread+0xa0>)
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
 8007648:	4e1c      	ldr	r6, [pc, #112]	; (80076bc <shell_thread+0xa4>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
 800764a:	4d1d      	ldr	r5, [pc, #116]	; (80076c0 <shell_thread+0xa8>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
 800764c:	68a0      	ldr	r0, [r4, #8]
 800764e:	f500 7027 	add.w	r0, r0, #668	; 0x29c
	return z_impl_k_poll(events, num_events, timeout);
 8007652:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007656:	2103      	movs	r1, #3
 8007658:	f00b fc72 	bl	8012f40 <z_impl_k_poll>
 800765c:	4680      	mov	r8, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 800765e:	68a0      	ldr	r0, [r4, #8]
 8007660:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
 8007664:	f00c fe60 	bl	8014328 <k_mutex_lock.constprop.35>
		if (err != 0) {
 8007668:	f1b8 0f00 	cmp.w	r8, #0
 800766c:	d007      	beq.n	800767e <shell_thread+0x66>
			shell_internal_fprintf(shell, SHELL_ERROR,
 800766e:	4643      	mov	r3, r8
 8007670:	4620      	mov	r0, r4
 8007672:	4a14      	ldr	r2, [pc, #80]	; (80076c4 <shell_thread+0xac>)
 8007674:	2102      	movs	r1, #2
}
 8007676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			shell_internal_fprintf(shell, SHELL_ERROR,
 800767a:	f00d b86b 	b.w	8014754 <shell_internal_fprintf>
		if (shell->iface->api->update) {
 800767e:	6860      	ldr	r0, [r4, #4]
 8007680:	6803      	ldr	r3, [r0, #0]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	b103      	cbz	r3, 8007688 <shell_thread+0x70>
			shell->iface->api->update(shell->iface);
 8007686:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
 8007688:	463a      	mov	r2, r7
 800768a:	4620      	mov	r0, r4
 800768c:	2102      	movs	r1, #2
 800768e:	f00c fdeb 	bl	8014268 <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
 8007692:	4632      	mov	r2, r6
 8007694:	4620      	mov	r0, r4
 8007696:	2100      	movs	r1, #0
 8007698:	f00c fde6 	bl	8014268 <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
 800769c:	4620      	mov	r0, r4
 800769e:	462a      	mov	r2, r5
 80076a0:	2101      	movs	r1, #1
 80076a2:	f00c fde1 	bl	8014268 <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
 80076a6:	68a0      	ldr	r0, [r4, #8]
 80076a8:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
	z_impl_k_mutex_unlock(mutex);
 80076ac:	f00a fe06 	bl	80122bc <z_impl_k_mutex_unlock>
 80076b0:	e7cc      	b.n	800764c <shell_thread+0x34>
}
 80076b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076b6:	bf00      	nop
 80076b8:	08014293 	.word	0x08014293
 80076bc:	08006da5 	.word	0x08006da5
 80076c0:	08014331 	.word	0x08014331
 80076c4:	0801ab94 	.word	0x0801ab94

080076c8 <shell_fprintf_fmt>:
	return 0;
}

void shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
		       const char *fmt, va_list args)
{
 80076c8:	b510      	push	{r4, lr}
 80076ca:	4604      	mov	r4, r0
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX)
	(void)z_prf(out_func, (void *)sh_fprintf, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)sh_fprintf, fmt, args);
 80076cc:	4613      	mov	r3, r2
 80076ce:	460a      	mov	r2, r1
 80076d0:	4601      	mov	r1, r0
 80076d2:	4806      	ldr	r0, [pc, #24]	; (80076ec <shell_fprintf_fmt+0x24>)
 80076d4:	f00b ff04 	bl	80134e0 <z_vprintk>
#endif

	if (sh_fprintf->ctrl_blk->autoflush) {
 80076d8:	6923      	ldr	r3, [r4, #16]
 80076da:	791b      	ldrb	r3, [r3, #4]
 80076dc:	b123      	cbz	r3, 80076e8 <shell_fprintf_fmt+0x20>
		shell_fprintf_buffer_flush(sh_fprintf);
 80076de:	4620      	mov	r0, r4
	}
}
 80076e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_fprintf_buffer_flush(sh_fprintf);
 80076e4:	f00c be73 	b.w	80143ce <shell_fprintf_buffer_flush>
}
 80076e8:	bd10      	pop	{r4, pc}
 80076ea:	bf00      	nop
 80076ec:	080143e7 	.word	0x080143e7

080076f0 <shell_make_argv>:
	return quote;
}


char shell_make_argv(size_t *argc, char **argv, char *cmd, u8_t max_argc)
{
 80076f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	4698      	mov	r8, r3
		c = *cmd;
		if (c == '\0') {
			break;
		}

		if (isspace((int) c)) {
 80076f6:	4f60      	ldr	r7, [pc, #384]	; (8007878 <shell_make_argv+0x188>)
	*argc = 0;
 80076f8:	2300      	movs	r3, #0
{
 80076fa:	4605      	mov	r5, r0
 80076fc:	460e      	mov	r6, r1
 80076fe:	4614      	mov	r4, r2
	*argc = 0;
 8007700:	6003      	str	r3, [r0, #0]
	char quote = 0;
 8007702:	469a      	mov	sl, r3
	char quote = 0;
 8007704:	4699      	mov	r9, r3
		c = *cmd;
 8007706:	7823      	ldrb	r3, [r4, #0]
		if (c == '\0') {
 8007708:	b143      	cbz	r3, 800771c <shell_make_argv+0x2c>
		if (isspace((int) c)) {
 800770a:	5ddb      	ldrb	r3, [r3, r7]
 800770c:	f013 0308 	ands.w	r3, r3, #8
 8007710:	d00c      	beq.n	800772c <shell_make_argv+0x3c>
			*cmd++ = '\0';
 8007712:	f804 9b01 	strb.w	r9, [r4], #1
			continue;
		}

		argv[(*argc)++] = cmd;
		quote = make_argv(&cmd, c);
	} while (*argc < max_argc);
 8007716:	682b      	ldr	r3, [r5, #0]
 8007718:	4543      	cmp	r3, r8
 800771a:	d3f4      	bcc.n	8007706 <shell_make_argv+0x16>

	argv[*argc] = 0;
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	2200      	movs	r2, #0

	return quote;
}
 8007720:	4650      	mov	r0, sl
	argv[*argc] = 0;
 8007722:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
}
 8007726:	b003      	add	sp, #12
 8007728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		argv[(*argc)++] = cmd;
 800772c:	682a      	ldr	r2, [r5, #0]
 800772e:	1c51      	adds	r1, r2, #1
 8007730:	6029      	str	r1, [r5, #0]
 8007732:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	char quote = 0;
 8007736:	469a      	mov	sl, r3
		c = *cmd;
 8007738:	f894 b000 	ldrb.w	fp, [r4]
		if (c == '\0') {
 800773c:	f1bb 0f00 	cmp.w	fp, #0
 8007740:	d0e9      	beq.n	8007716 <shell_make_argv+0x26>
		if (!quote) {
 8007742:	f1ba 0f00 	cmp.w	sl, #0
 8007746:	f040 8083 	bne.w	8007850 <shell_make_argv+0x160>
			switch (c) {
 800774a:	f1bb 0f27 	cmp.w	fp, #39	; 0x27
 800774e:	d006      	beq.n	800775e <shell_make_argv+0x6e>
 8007750:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
 8007754:	f000 8084 	beq.w	8007860 <shell_make_argv+0x170>
 8007758:	f1bb 0f22 	cmp.w	fp, #34	; 0x22
 800775c:	d171      	bne.n	8007842 <shell_make_argv+0x152>
				memmove(cmd, cmd + 1,
 800775e:	4620      	mov	r0, r4
 8007760:	f00c fe5d 	bl	801441e <shell_strlen>
__ssp_bos_icheck3(memmove, void *, const void *)
 8007764:	1c61      	adds	r1, r4, #1
 8007766:	4602      	mov	r2, r0
 8007768:	4620      	mov	r0, r4
 800776a:	f7fd f8e6 	bl	800493a <memmove>
 800776e:	46da      	mov	sl, fp
 8007770:	e7e2      	b.n	8007738 <shell_make_argv+0x48>
			memmove(cmd, cmd + 1, shell_strlen(cmd));
 8007772:	4620      	mov	r0, r4
 8007774:	f00c fe53 	bl	801441e <shell_strlen>
 8007778:	1c61      	adds	r1, r4, #1
 800777a:	4602      	mov	r2, r0
 800777c:	4620      	mov	r0, r4
 800777e:	f7fd f8dc 	bl	800493a <memmove>
			quote = 0;
 8007782:	f04f 0a00 	mov.w	sl, #0
 8007786:	e7d7      	b.n	8007738 <shell_make_argv+0x48>
			if (t == '0') {
 8007788:	2930      	cmp	r1, #48	; 0x30
 800778a:	d126      	bne.n	80077da <shell_make_argv+0xea>
				u8_t v = 0U;
 800778c:	f04f 0b00 	mov.w	fp, #0
			if (t == '0') {
 8007790:	2302      	movs	r3, #2
					t = *(cmd + i);
 8007792:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
 8007794:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8007798:	fa5f fc80 	uxtb.w	ip, r0
 800779c:	f1bc 0f07 	cmp.w	ip, #7
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	d818      	bhi.n	80077d6 <shell_make_argv+0xe6>
						v = (v << 3) | (t - '0');
 80077a4:	3301      	adds	r3, #1
 80077a6:	ea40 0bcb 	orr.w	fp, r0, fp, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
 80077aa:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
 80077ac:	fa5f fb8b 	uxtb.w	fp, fp
				for (i = 2U; i < (2 + 3); i++) {
 80077b0:	d1ef      	bne.n	8007792 <shell_make_argv+0xa2>
 80077b2:	461a      	mov	r2, r3
					memmove(cmd, cmd + (i - 1),
 80077b4:	1e51      	subs	r1, r2, #1
 80077b6:	4421      	add	r1, r4
 80077b8:	4620      	mov	r0, r4
 80077ba:	9201      	str	r2, [sp, #4]
 80077bc:	9100      	str	r1, [sp, #0]
 80077be:	f00c fe2e 	bl	801441e <shell_strlen>
 80077c2:	9a01      	ldr	r2, [sp, #4]
 80077c4:	3002      	adds	r0, #2
 80077c6:	1a82      	subs	r2, r0, r2
 80077c8:	4620      	mov	r0, r4
 80077ca:	9900      	ldr	r1, [sp, #0]
 80077cc:	f7fd f8b5 	bl	800493a <memmove>
					*cmd++ = v;
 80077d0:	f804 bb01 	strb.w	fp, [r4], #1
					continue;
 80077d4:	e7b0      	b.n	8007738 <shell_make_argv+0x48>
				if (i > 2) {
 80077d6:	2a02      	cmp	r2, #2
 80077d8:	d1ec      	bne.n	80077b4 <shell_make_argv+0xc4>
			if (t == 'x') {
 80077da:	2978      	cmp	r1, #120	; 0x78
 80077dc:	d136      	bne.n	800784c <shell_make_argv+0x15c>
				u8_t v = 0U;
 80077de:	f04f 0b00 	mov.w	fp, #0
			if (t == 'x') {
 80077e2:	2202      	movs	r2, #2
					t = *(cmd + i);
 80077e4:	5ca3      	ldrb	r3, [r4, r2]
					if (t >= '0' && t <= '9') {
 80077e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80077ea:	fa5f fc81 	uxtb.w	ip, r1
 80077ee:	f1bc 0f09 	cmp.w	ip, #9
 80077f2:	b2d0      	uxtb	r0, r2
 80077f4:	d813      	bhi.n	800781e <shell_make_argv+0x12e>
						v = (v << 4) | (t - '0');
 80077f6:	ea41 130b 	orr.w	r3, r1, fp, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
 80077fa:	2a03      	cmp	r2, #3
						v = (v << 4) | (t - 'A' + 10);
 80077fc:	fa5f fb83 	uxtb.w	fp, r3
				for (i = 2U; i < (2 + 2); i++) {
 8007800:	d10b      	bne.n	800781a <shell_make_argv+0x12a>
 8007802:	2304      	movs	r3, #4
					memmove(cmd, cmd + (i - 1),
 8007804:	1e59      	subs	r1, r3, #1
 8007806:	4421      	add	r1, r4
 8007808:	4620      	mov	r0, r4
 800780a:	9301      	str	r3, [sp, #4]
 800780c:	9100      	str	r1, [sp, #0]
 800780e:	f00c fe06 	bl	801441e <shell_strlen>
 8007812:	9b01      	ldr	r3, [sp, #4]
 8007814:	1c82      	adds	r2, r0, #2
 8007816:	1ad2      	subs	r2, r2, r3
 8007818:	e7d6      	b.n	80077c8 <shell_make_argv+0xd8>
				for (i = 2U; i < (2 + 2); i++) {
 800781a:	2203      	movs	r2, #3
 800781c:	e7e2      	b.n	80077e4 <shell_make_argv+0xf4>
					} else if ((t >= 'a') &&
 800781e:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8007822:	2905      	cmp	r1, #5
 8007824:	d803      	bhi.n	800782e <shell_make_argv+0x13e>
						v = (v << 4) | (t - 'a' + 10);
 8007826:	3b57      	subs	r3, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
 8007828:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
 800782c:	e7e5      	b.n	80077fa <shell_make_argv+0x10a>
					} else if ((t >= 'A') && (t <= 'F')) {
 800782e:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 8007832:	2905      	cmp	r1, #5
 8007834:	d801      	bhi.n	800783a <shell_make_argv+0x14a>
						v = (v << 4) | (t - 'A' + 10);
 8007836:	3b37      	subs	r3, #55	; 0x37
 8007838:	e7f6      	b.n	8007828 <shell_make_argv+0x138>
				if (i > 2) {
 800783a:	2802      	cmp	r0, #2
 800783c:	d006      	beq.n	800784c <shell_make_argv+0x15c>
 800783e:	2303      	movs	r3, #3
 8007840:	e7e0      	b.n	8007804 <shell_make_argv+0x114>
		if (!quote && isspace((int) c)) {
 8007842:	f817 300b 	ldrb.w	r3, [r7, fp]
 8007846:	071b      	lsls	r3, r3, #28
 8007848:	f53f af65 	bmi.w	8007716 <shell_make_argv+0x26>
		cmd += 1;
 800784c:	3401      	adds	r4, #1
 800784e:	e773      	b.n	8007738 <shell_make_argv+0x48>
		if (quote == c) {
 8007850:	45d3      	cmp	fp, sl
 8007852:	d08e      	beq.n	8007772 <shell_make_argv+0x82>
		if (quote && c == '\\') {
 8007854:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
 8007858:	d1f8      	bne.n	800784c <shell_make_argv+0x15c>
 800785a:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
 800785c:	458a      	cmp	sl, r1
 800785e:	d193      	bne.n	8007788 <shell_make_argv+0x98>
				memmove(cmd, cmd + 1,
 8007860:	4620      	mov	r0, r4
 8007862:	f00c fddc 	bl	801441e <shell_strlen>
 8007866:	f104 0b01 	add.w	fp, r4, #1
 800786a:	4602      	mov	r2, r0
 800786c:	4659      	mov	r1, fp
 800786e:	4620      	mov	r0, r4
 8007870:	f7fd f863 	bl	800493a <memmove>
 8007874:	465c      	mov	r4, fp
 8007876:	e75f      	b.n	8007738 <shell_make_argv+0x48>
 8007878:	08019513 	.word	0x08019513

0800787c <shell_cmd_get>:

void shell_cmd_get(const struct shell *shell,
		   const struct shell_cmd_entry *command, size_t lvl,
		   size_t idx, const struct shell_static_entry **entry,
		   struct shell_static_entry *d_entry)
{
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	e9dd 4604 	ldrd	r4, r6, [sp, #16]
	__ASSERT_NO_MSG(entry != NULL);
	__ASSERT_NO_MSG(d_entry != NULL);

	*entry = NULL;
 8007882:	2000      	movs	r0, #0
 8007884:	6020      	str	r0, [r4, #0]

	if (lvl == SHELL_CMD_ROOT_LVL) {
 8007886:	b952      	cbnz	r2, 800789e <shell_cmd_get+0x22>
	return ((u8_t *)__shell_root_cmds_end -
 8007888:	480f      	ldr	r0, [pc, #60]	; (80078c8 <shell_cmd_get+0x4c>)
 800788a:	4a10      	ldr	r2, [pc, #64]	; (80078cc <shell_cmd_get+0x50>)
 800788c:	1a12      	subs	r2, r2, r0
			const struct shell_static_entry *ptr =
						       shell->ctx->selected_cmd;
			if (ptr->subcmd->u.entry[idx].syntax != NULL) {
				*entry = &ptr->subcmd->u.entry[idx];
			}
		} else if (idx < shell_root_cmd_count()) {
 800788e:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8007892:	d203      	bcs.n	800789c <shell_cmd_get+0x20>
			const struct shell_cmd_entry *cmd;

			cmd = shell_root_cmd_get(idx);
			*entry = cmd->u.entry;
 8007894:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	6023      	str	r3, [r4, #0]
	} else {
		if (command->u.entry[idx].syntax != NULL) {
			*entry = &command->u.entry[idx];
		}
	}
}
 800789c:	bd70      	pop	{r4, r5, r6, pc}
	if (command == NULL) {
 800789e:	2900      	cmp	r1, #0
 80078a0:	d0fc      	beq.n	800789c <shell_cmd_get+0x20>
	if (command->is_dynamic) {
 80078a2:	780a      	ldrb	r2, [r1, #0]
 80078a4:	684d      	ldr	r5, [r1, #4]
 80078a6:	b13a      	cbz	r2, 80078b8 <shell_cmd_get+0x3c>
		command->u.dynamic_get(idx, d_entry);
 80078a8:	4618      	mov	r0, r3
 80078aa:	4631      	mov	r1, r6
 80078ac:	47a8      	blx	r5
		if (d_entry->syntax != NULL) {
 80078ae:	6833      	ldr	r3, [r6, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d0f3      	beq.n	800789c <shell_cmd_get+0x20>
			*entry = d_entry;
 80078b4:	6026      	str	r6, [r4, #0]
 80078b6:	e7f1      	b.n	800789c <shell_cmd_get+0x20>
		if (command->u.entry[idx].syntax != NULL) {
 80078b8:	2214      	movs	r2, #20
 80078ba:	4353      	muls	r3, r2
 80078bc:	18ea      	adds	r2, r5, r3
 80078be:	58eb      	ldr	r3, [r5, r3]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d0eb      	beq.n	800789c <shell_cmd_get+0x20>
			*entry = &command->u.entry[idx];
 80078c4:	6022      	str	r2, [r4, #0]
 80078c6:	e7e9      	b.n	800789c <shell_cmd_get+0x20>
 80078c8:	08019358 	.word	0x08019358
 80078cc:	080193a0 	.word	0x080193a0

080078d0 <shell_spaces_trim>:

	return 0;
}

void shell_spaces_trim(char *str)
{
 80078d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d4:	4607      	mov	r7, r0
	u16_t len = shell_strlen(str);
 80078d6:	f00c fda2 	bl	801441e <shell_strlen>
 80078da:	4606      	mov	r6, r0
	u16_t shift = 0U;

	if (!str) {
 80078dc:	bb3f      	cbnz	r7, 800792e <shell_spaces_trim+0x5e>

				break;
			}
		}
	}
}
 80078de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
 80078e2:	b144      	cbz	r4, 80078f6 <shell_spaces_trim+0x26>
					memmove(&str[i + 1],
 80078e4:	1c72      	adds	r2, r6, #1
 80078e6:	3001      	adds	r0, #1
 80078e8:	1b12      	subs	r2, r2, r4
 80078ea:	4438      	add	r0, r7
 80078ec:	f7fd f825 	bl	800493a <memmove>
					len -= shift;
 80078f0:	1b36      	subs	r6, r6, r4
 80078f2:	b2b6      	uxth	r6, r6
					shift = 0U;
 80078f4:	4644      	mov	r4, r8
	for (u16_t i = 0; i < len - 1; i++) {
 80078f6:	1e73      	subs	r3, r6, #1
 80078f8:	429d      	cmp	r5, r3
 80078fa:	daf0      	bge.n	80078de <shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
 80078fc:	4628      	mov	r0, r5
 80078fe:	3501      	adds	r5, #1
 8007900:	5c3b      	ldrb	r3, [r7, r0]
 8007902:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007906:	071b      	lsls	r3, r3, #28
 8007908:	b2ad      	uxth	r5, r5
 800790a:	d5f4      	bpl.n	80078f6 <shell_spaces_trim+0x26>
			for (u16_t j = i + 1; j < len; j++) {
 800790c:	462b      	mov	r3, r5
 800790e:	b29a      	uxth	r2, r3
 8007910:	4296      	cmp	r6, r2
 8007912:	d9f0      	bls.n	80078f6 <shell_spaces_trim+0x26>
				if (isspace((int)str[j])) {
 8007914:	5cfa      	ldrb	r2, [r7, r3]
 8007916:	f819 2002 	ldrb.w	r2, [r9, r2]
 800791a:	f012 0808 	ands.w	r8, r2, #8
 800791e:	eb07 0103 	add.w	r1, r7, r3
 8007922:	f103 0301 	add.w	r3, r3, #1
 8007926:	d0dc      	beq.n	80078e2 <shell_spaces_trim+0x12>
					shift++;
 8007928:	3401      	adds	r4, #1
 800792a:	b2a4      	uxth	r4, r4
					continue;
 800792c:	e7ef      	b.n	800790e <shell_spaces_trim+0x3e>
	for (u16_t i = 0; i < len - 1; i++) {
 800792e:	2500      	movs	r5, #0
	u16_t shift = 0U;
 8007930:	462c      	mov	r4, r5
		if (isspace((int)str[i])) {
 8007932:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8007938 <shell_spaces_trim+0x68>
 8007936:	e7de      	b.n	80078f6 <shell_spaces_trim+0x26>
 8007938:	08019513 	.word	0x08019513

0800793c <shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void shell_cmd_trim(const struct shell *shell)
{
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
 800793e:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
 8007940:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
{
 8007944:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
 8007946:	b953      	cbnz	r3, 800795e <shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
 8007948:	68ab      	ldr	r3, [r5, #8]
 800794a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800794c:	869a      	strh	r2, [r3, #52]	; 0x34
}
 800794e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
 8007950:	3a01      	subs	r2, #1
 8007952:	b292      	uxth	r2, r2
 8007954:	8662      	strh	r2, [r4, #50]	; 0x32
		if (*buff_len == 0U) {
 8007956:	b932      	cbnz	r2, 8007966 <shell_cmd_trim+0x2a>
			buff[0] = '\0';
 8007958:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
			return;
 800795c:	e7f4      	b.n	8007948 <shell_cmd_trim+0xc>
	while (isspace((int) buff[*buff_len - 1U])) {
 800795e:	4911      	ldr	r1, [pc, #68]	; (80079a4 <shell_cmd_trim+0x68>)
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
 8007960:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8007964:	460e      	mov	r6, r1
	while (isspace((int) buff[*buff_len - 1U])) {
 8007966:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8007968:	1883      	adds	r3, r0, r2
 800796a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800796e:	5c5b      	ldrb	r3, [r3, r1]
 8007970:	f013 0308 	ands.w	r3, r3, #8
 8007974:	d1ec      	bne.n	8007950 <shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
 8007976:	5483      	strb	r3, [r0, r2]
	while (isspace((int) buff[i++])) {
 8007978:	b29f      	uxth	r7, r3
 800797a:	19c1      	adds	r1, r0, r7
 800797c:	f810 c007 	ldrb.w	ip, [r0, r7]
 8007980:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8007984:	f01c 0f08 	tst.w	ip, #8
 8007988:	f103 0301 	add.w	r3, r3, #1
 800798c:	d1f4      	bne.n	8007978 <shell_cmd_trim+0x3c>
	if (--i > 0) {
 800798e:	2f00      	cmp	r7, #0
 8007990:	d0da      	beq.n	8007948 <shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
 8007992:	8e66      	ldrh	r6, [r4, #50]	; 0x32
 8007994:	1c73      	adds	r3, r6, #1
 8007996:	1bda      	subs	r2, r3, r7
		*buff_len = *buff_len - i;
 8007998:	1bf6      	subs	r6, r6, r7
 800799a:	f7fc ffce 	bl	800493a <memmove>
 800799e:	8666      	strh	r6, [r4, #50]	; 0x32
 80079a0:	e7d2      	b.n	8007948 <shell_cmd_trim+0xc>
 80079a2:	bf00      	nop
 80079a4:	08019513 	.word	0x08019513

080079a8 <clear_eos.isra.6>:
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
 80079a8:	4a01      	ldr	r2, [pc, #4]	; (80079b0 <clear_eos.isra.6+0x8>)
 80079aa:	4902      	ldr	r1, [pc, #8]	; (80079b4 <clear_eos.isra.6+0xc>)
 80079ac:	f00c bddf 	b.w	801456e <shell_raw_fprintf>
 80079b0:	0801abab 	.word	0x0801abab
 80079b4:	0801d406 	.word	0x0801d406

080079b8 <shell_op_cursor_vert_move>:
#include <ctype.h>
#include "shell_ops.h"

void shell_op_cursor_vert_move(const struct shell *shell, s32_t delta)
{
	if (delta != 0) {
 80079b8:	b159      	cbz	r1, 80079d2 <shell_op_cursor_vert_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
 80079ba:	2900      	cmp	r1, #0
 80079bc:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 80079c0:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 80079c4:	bfcc      	ite	gt
 80079c6:	2341      	movgt	r3, #65	; 0x41
 80079c8:	2342      	movle	r3, #66	; 0x42
 80079ca:	4902      	ldr	r1, [pc, #8]	; (80079d4 <shell_op_cursor_vert_move+0x1c>)
 80079cc:	6940      	ldr	r0, [r0, #20]
 80079ce:	f00c bdce 	b.w	801456e <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'A' : 'B');
	}
}
 80079d2:	4770      	bx	lr
 80079d4:	0801abb9 	.word	0x0801abb9

080079d8 <shell_op_cursor_horiz_move>:

void shell_op_cursor_horiz_move(const struct shell *shell, s32_t delta)
{
	if (delta != 0) {
 80079d8:	b159      	cbz	r1, 80079f2 <shell_op_cursor_horiz_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
 80079da:	2900      	cmp	r1, #0
 80079dc:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 80079e0:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 80079e4:	bfcc      	ite	gt
 80079e6:	2343      	movgt	r3, #67	; 0x43
 80079e8:	2344      	movle	r3, #68	; 0x44
 80079ea:	4902      	ldr	r1, [pc, #8]	; (80079f4 <shell_op_cursor_horiz_move+0x1c>)
 80079ec:	6940      	ldr	r0, [r0, #20]
 80079ee:	f00c bdbe 	b.w	801456e <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'C' : 'D');
	}
}
 80079f2:	4770      	bx	lr
 80079f4:	0801abb9 	.word	0x0801abb9

080079f8 <shell_op_cond_next_line>:
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
}

void shell_op_cond_next_line(const struct shell *shell)
{
 80079f8:	b510      	push	{r4, lr}
 80079fa:	4604      	mov	r4, r0
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
 80079fc:	f00c fdd8 	bl	80145b0 <shell_cursor_in_empty_line>
 8007a00:	b128      	cbz	r0, 8007a0e <shell_op_cond_next_line+0x16>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8007a02:	6960      	ldr	r0, [r4, #20]
 8007a04:	4905      	ldr	r1, [pc, #20]	; (8007a1c <shell_op_cond_next_line+0x24>)
		cursor_next_line_move(shell);
	}
}
 8007a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a0a:	f00c bdb0 	b.w	801456e <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
 8007a0e:	f104 0008 	add.w	r0, r4, #8
 8007a12:	f00c fdb9 	bl	8014588 <full_line_cmd.isra.8>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d1f3      	bne.n	8007a02 <shell_op_cond_next_line+0xa>
}
 8007a1a:	bd10      	pop	{r4, pc}
 8007a1c:	0801a4e1 	.word	0x0801a4e1

08007a20 <shell_op_cursor_position_synchronize>:

void shell_op_cursor_position_synchronize(const struct shell *shell)
{
 8007a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 8007a24:	4606      	mov	r6, r0
{
 8007a26:	4605      	mov	r5, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 8007a28:	f856 4f08 	ldr.w	r4, [r6, #8]!
	bool last_line;

	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 8007a2c:	f104 0020 	add.w	r0, r4, #32
 8007a30:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8007a32:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8007a34:	f00c fd13 	bl	801445e <shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
 8007a38:	4630      	mov	r0, r6
	last_line = (cons->cur_y == cons->cur_y_end);
 8007a3a:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
 8007a3e:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
 8007a40:	f00c fda2 	bl	8014588 <full_line_cmd.isra.8>
 8007a44:	b118      	cbz	r0, 8007a4e <shell_op_cursor_position_synchronize+0x2e>
 8007a46:	490a      	ldr	r1, [pc, #40]	; (8007a70 <shell_op_cursor_position_synchronize+0x50>)
 8007a48:	6968      	ldr	r0, [r5, #20]
 8007a4a:	f00c fd90 	bl	801456e <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	if (last_line) {
 8007a4e:	45b8      	cmp	r8, r7
 8007a50:	d107      	bne.n	8007a62 <shell_op_cursor_position_synchronize+0x42>
		shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		shell_op_cursor_horiz_move(shell, cons->cur_x -
 8007a52:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
 8007a54:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		shell_op_cursor_horiz_move(shell, cons->cur_x -
 8007a56:	4628      	mov	r0, r5
 8007a58:	1ac9      	subs	r1, r1, r3
	}
}
 8007a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		shell_op_cursor_horiz_move(shell, cons->cur_x -
 8007a5e:	f7ff bfbb 	b.w	80079d8 <shell_op_cursor_horiz_move>
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
 8007a62:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8007a64:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8007a66:	4628      	mov	r0, r5
 8007a68:	1ac9      	subs	r1, r1, r3
 8007a6a:	f7ff ffa5 	bl	80079b8 <shell_op_cursor_vert_move>
 8007a6e:	e7f0      	b.n	8007a52 <shell_op_cursor_position_synchronize+0x32>
 8007a70:	0801a4e1 	.word	0x0801a4e1

08007a74 <shell_op_cursor_word_move>:

	return ret;
}

void shell_op_cursor_word_move(const struct shell *shell, s16_t val)
{
 8007a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	s16_t shift;
	s16_t sign;

	if (val < 0) {
 8007a78:	1e0c      	subs	r4, r1, #0
{
 8007a7a:	4606      	mov	r6, r0
	if (val < 0) {
 8007a7c:	da2e      	bge.n	8007adc <shell_op_cursor_word_move+0x68>
		val = -val;
 8007a7e:	4264      	negs	r4, r4
 8007a80:	b224      	sxth	r4, r4
		sign = -1;
 8007a82:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007a86:	b2af      	uxth	r7, r5
		if (isalnum((int)str[idx]) != 0) {
 8007a88:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8007ae0 <shell_op_cursor_word_move+0x6c>
 8007a8c:	e01c      	b.n	8007ac8 <shell_op_cursor_word_move+0x54>
	} else {
		sign = 1;
	}

	while (val--) {
		shift = shift_calc(shell->ctx->cmd_buff,
 8007a8e:	68b3      	ldr	r3, [r6, #8]
 8007a90:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8007a92:	f8b3 e032 	ldrh.w	lr, [r3, #50]	; 0x32
 8007a96:	f103 0c38 	add.w	ip, r3, #56	; 0x38
	bool found = false;
 8007a9a:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
 8007a9c:	4613      	mov	r3, r2
		idx = pos + ret * sign;
 8007a9e:	1a99      	subs	r1, r3, r2
 8007aa0:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
 8007aa2:	b913      	cbnz	r3, 8007aaa <shell_op_cursor_word_move+0x36>
 8007aa4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007aa8:	d00b      	beq.n	8007ac2 <shell_op_cursor_word_move+0x4e>
 8007aaa:	459e      	cmp	lr, r3
 8007aac:	d101      	bne.n	8007ab2 <shell_op_cursor_word_move+0x3e>
		    ((idx == len) && (sign > 0))) {
 8007aae:	2d01      	cmp	r5, #1
 8007ab0:	d007      	beq.n	8007ac2 <shell_op_cursor_word_move+0x4e>
		if (isalnum((int)str[idx]) != 0) {
 8007ab2:	f81c 9003 	ldrb.w	r9, [ip, r3]
 8007ab6:	f819 9008 	ldrb.w	r9, [r9, r8]
 8007aba:	f019 0f07 	tst.w	r9, #7
 8007abe:	d109      	bne.n	8007ad4 <shell_op_cursor_word_move+0x60>
			if (found) {
 8007ac0:	b148      	cbz	r0, 8007ad6 <shell_op_cursor_word_move+0x62>
				   shell->ctx->cmd_buff_pos,
				   shell->ctx->cmd_buff_len, sign);
		shell_op_cursor_move(shell, sign * shift);
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	f00c fd88 	bl	80145d8 <shell_op_cursor_move>
	while (val--) {
 8007ac8:	3c01      	subs	r4, #1
 8007aca:	b224      	sxth	r4, r4
 8007acc:	1c63      	adds	r3, r4, #1
 8007ace:	d1de      	bne.n	8007a8e <shell_op_cursor_word_move+0x1a>
	}
}
 8007ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
 8007ad4:	2001      	movs	r0, #1
		ret++;
 8007ad6:	443b      	add	r3, r7
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	e7e0      	b.n	8007a9e <shell_op_cursor_word_move+0x2a>
		sign = 1;
 8007adc:	2501      	movs	r5, #1
 8007ade:	e7d2      	b.n	8007a86 <shell_op_cursor_word_move+0x12>
 8007ae0:	08019513 	.word	0x08019513

08007ae4 <shell_print_cmd>:
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void shell_print_cmd(const struct shell *shell)
{
	shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
 8007ae4:	6882      	ldr	r2, [r0, #8]
 8007ae6:	4902      	ldr	r1, [pc, #8]	; (8007af0 <shell_print_cmd+0xc>)
 8007ae8:	6940      	ldr	r0, [r0, #20]
 8007aea:	3238      	adds	r2, #56	; 0x38
 8007aec:	f00c bd3f 	b.w	801456e <shell_raw_fprintf>
 8007af0:	0801d406 	.word	0x0801d406

08007af4 <shell_vt100_color_set>:

void shell_vt100_color_set(const struct shell *shell,
			   enum shell_vt100_color color)
{

	if (shell->ctx->vt100_ctx.col.col == color) {
 8007af4:	6883      	ldr	r3, [r0, #8]
{
 8007af6:	b507      	push	{r0, r1, r2, lr}
	if (shell->ctx->vt100_ctx.col.col == color) {
 8007af8:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8007afc:	428a      	cmp	r2, r1
 8007afe:	d012      	beq.n	8007b26 <shell_vt100_color_set+0x32>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
 8007b00:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
 8007b04:	6940      	ldr	r0, [r0, #20]
 8007b06:	b189      	cbz	r1, 8007b2c <shell_vt100_color_set+0x38>

		u8_t cmd[] = SHELL_VT100_COLOR(color - 1);
 8007b08:	4b09      	ldr	r3, [pc, #36]	; (8007b30 <shell_vt100_color_set+0x3c>)
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	2333      	movs	r3, #51	; 0x33
 8007b0e:	f88d 3004 	strb.w	r3, [sp, #4]
 8007b12:	312f      	adds	r1, #47	; 0x2f
 8007b14:	236d      	movs	r3, #109	; 0x6d
 8007b16:	f88d 1005 	strb.w	r1, [sp, #5]
 8007b1a:	f8ad 3006 	strh.w	r3, [sp, #6]

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8007b1e:	466a      	mov	r2, sp
	} else {
		static const u8_t cmd[] = SHELL_VT100_MODESOFF;

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8007b20:	4904      	ldr	r1, [pc, #16]	; (8007b34 <shell_vt100_color_set+0x40>)
 8007b22:	f00c fd24 	bl	801456e <shell_raw_fprintf>
	}
}
 8007b26:	b003      	add	sp, #12
 8007b28:	f85d fb04 	ldr.w	pc, [sp], #4
		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8007b2c:	4a02      	ldr	r2, [pc, #8]	; (8007b38 <shell_vt100_color_set+0x44>)
 8007b2e:	e7f7      	b.n	8007b20 <shell_vt100_color_set+0x2c>
 8007b30:	3b315b1b 	.word	0x3b315b1b
 8007b34:	0801d406 	.word	0x0801d406
 8007b38:	0801abb5 	.word	0x0801abb5

08007b3c <shell_vt100_colors_restore>:

void shell_vt100_colors_restore(const struct shell *shell,
				       const struct shell_vt100_colors *color)
{
 8007b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b3e:	460d      	mov	r5, r1
	shell_vt100_color_set(shell, color->col);
 8007b40:	7809      	ldrb	r1, [r1, #0]
{
 8007b42:	4604      	mov	r4, r0
	shell_vt100_color_set(shell, color->col);
 8007b44:	f7ff ffd6 	bl	8007af4 <shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
 8007b48:	786b      	ldrb	r3, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
 8007b4a:	b1cb      	cbz	r3, 8007b80 <shell_vt100_colors_restore+0x44>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
 8007b4c:	68a2      	ldr	r2, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
 8007b4e:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
 8007b52:	4299      	cmp	r1, r3
 8007b54:	d014      	beq.n	8007b80 <shell_vt100_colors_restore+0x44>
	u8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
 8007b56:	f645 311b 	movw	r1, #23323	; 0x5b1b
 8007b5a:	f8ad 1000 	strh.w	r1, [sp]
 8007b5e:	2134      	movs	r1, #52	; 0x34
 8007b60:	f88d 1002 	strb.w	r1, [sp, #2]
 8007b64:	f103 012f 	add.w	r1, r3, #47	; 0x2f
 8007b68:	f88d 1003 	strb.w	r1, [sp, #3]
 8007b6c:	216d      	movs	r1, #109	; 0x6d
 8007b6e:	f8ad 1004 	strh.w	r1, [sp, #4]
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
 8007b72:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
 8007b76:	4903      	ldr	r1, [pc, #12]	; (8007b84 <shell_vt100_colors_restore+0x48>)
 8007b78:	6960      	ldr	r0, [r4, #20]
 8007b7a:	466a      	mov	r2, sp
 8007b7c:	f00c fcf7 	bl	801456e <shell_raw_fprintf>
}
 8007b80:	b003      	add	sp, #12
 8007b82:	bd30      	pop	{r4, r5, pc}
 8007b84:	0801d406 	.word	0x0801d406

08007b88 <shell_op_word_remove>:
{
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 8007b8a:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
 8007b8c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
 8007b8e:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
 8007b90:	2a00      	cmp	r2, #0
 8007b92:	d046      	beq.n	8007c22 <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 8007b94:	8e98      	ldrh	r0, [r3, #52]	; 0x34
	if ((shell->ctx->cmd_buff_len == 0) ||
 8007b96:	2800      	cmp	r0, #0
 8007b98:	d043      	beq.n	8007c22 <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 8007b9a:	3037      	adds	r0, #55	; 0x37
 8007b9c:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
 8007b9e:	f103 0638 	add.w	r6, r3, #56	; 0x38
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
 8007ba6:	42b3      	cmp	r3, r6
 8007ba8:	b2a4      	uxth	r4, r4
 8007baa:	4619      	mov	r1, r3
 8007bac:	d30d      	bcc.n	8007bca <shell_op_word_remove+0x42>
 8007bae:	f811 7901 	ldrb.w	r7, [r1], #-1
 8007bb2:	2f20      	cmp	r7, #32
 8007bb4:	d033      	beq.n	8007c1e <shell_op_word_remove+0x96>
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
 8007bba:	7808      	ldrb	r0, [r1, #0]
 8007bbc:	2820      	cmp	r0, #32
 8007bbe:	d004      	beq.n	8007bca <shell_op_word_remove+0x42>
		++chars_to_delete;
 8007bc0:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
 8007bc2:	429e      	cmp	r6, r3
		++chars_to_delete;
 8007bc4:	b2a4      	uxth	r4, r4
		--str;
 8007bc6:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
 8007bc8:	d9f5      	bls.n	8007bb6 <shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
 8007bca:	1c63      	adds	r3, r4, #1
 8007bcc:	1c4e      	adds	r6, r1, #1
 8007bce:	1b12      	subs	r2, r2, r4
 8007bd0:	4419      	add	r1, r3
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f7fc feb1 	bl	800493a <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
 8007bd8:	68a9      	ldr	r1, [r5, #8]
 8007bda:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
 8007bdc:	1b12      	subs	r2, r2, r4
 8007bde:	b292      	uxth	r2, r2
 8007be0:	864a      	strh	r2, [r1, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 8007be2:	440a      	add	r2, r1
 8007be4:	2700      	movs	r7, #0
	shell_op_cursor_move(shell, -chars_to_delete);
 8007be6:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 8007be8:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
	shell_op_cursor_move(shell, -chars_to_delete);
 8007bec:	4628      	mov	r0, r5
 8007bee:	b209      	sxth	r1, r1
 8007bf0:	f00c fcf2 	bl	80145d8 <shell_op_cursor_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
 8007bf4:	6968      	ldr	r0, [r5, #20]
 8007bf6:	4a0b      	ldr	r2, [pc, #44]	; (8007c24 <shell_op_word_remove+0x9c>)
 8007bf8:	490b      	ldr	r1, [pc, #44]	; (8007c28 <shell_op_word_remove+0xa0>)
 8007bfa:	f00c fcb8 	bl	801456e <shell_raw_fprintf>
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
 8007bfe:	4639      	mov	r1, r7
 8007c00:	4633      	mov	r3, r6
 8007c02:	4a09      	ldr	r2, [pc, #36]	; (8007c28 <shell_op_word_remove+0xa0>)
 8007c04:	4628      	mov	r0, r5
 8007c06:	f00c fda5 	bl	8014754 <shell_internal_fprintf>
	clear_eos(shell);
 8007c0a:	6968      	ldr	r0, [r5, #20]
 8007c0c:	f7ff fecc 	bl	80079a8 <clear_eos.isra.6>
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
 8007c10:	6968      	ldr	r0, [r5, #20]
 8007c12:	4a06      	ldr	r2, [pc, #24]	; (8007c2c <shell_op_word_remove+0xa4>)
 8007c14:	4904      	ldr	r1, [pc, #16]	; (8007c28 <shell_op_word_remove+0xa0>)
}
 8007c16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c1a:	f00c bca8 	b.w	801456e <shell_raw_fprintf>
 8007c1e:	460b      	mov	r3, r1
 8007c20:	e7c0      	b.n	8007ba4 <shell_op_word_remove+0x1c>
 8007c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c24:	0801abaf 	.word	0x0801abaf
 8007c28:	0801d406 	.word	0x0801d406
 8007c2c:	0801abb2 	.word	0x0801abb2

08007c30 <reprint_from_cursor>:
{
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	4604      	mov	r4, r0
 8007c34:	460d      	mov	r5, r1
	if (data_removed) {
 8007c36:	4616      	mov	r6, r2
 8007c38:	b112      	cbz	r2, 8007c40 <reprint_from_cursor+0x10>
		clear_eos(shell);
 8007c3a:	6940      	ldr	r0, [r0, #20]
 8007c3c:	f7ff feb4 	bl	80079a8 <clear_eos.isra.6>
		      &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 8007c40:	68a2      	ldr	r2, [r4, #8]
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s",
 8007c42:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 8007c44:	3338      	adds	r3, #56	; 0x38
 8007c46:	4413      	add	r3, r2
 8007c48:	4620      	mov	r0, r4
 8007c4a:	4a0c      	ldr	r2, [pc, #48]	; (8007c7c <reprint_from_cursor+0x4c>)
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	f00c fd81 	bl	8014754 <shell_internal_fprintf>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
 8007c52:	4620      	mov	r0, r4
 8007c54:	f850 3f08 	ldr.w	r3, [r0, #8]!
 8007c58:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007c5a:	869a      	strh	r2, [r3, #52]	; 0x34
	if (full_line_cmd(shell)) {
 8007c5c:	f00c fc94 	bl	8014588 <full_line_cmd.isra.8>
 8007c60:	b128      	cbz	r0, 8007c6e <reprint_from_cursor+0x3e>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
 8007c62:	b106      	cbz	r6, 8007c66 <reprint_from_cursor+0x36>
 8007c64:	b11d      	cbz	r5, 8007c6e <reprint_from_cursor+0x3e>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8007c66:	4906      	ldr	r1, [pc, #24]	; (8007c80 <reprint_from_cursor+0x50>)
 8007c68:	6960      	ldr	r0, [r4, #20]
 8007c6a:	f00c fc80 	bl	801456e <shell_raw_fprintf>
	shell_op_cursor_move(shell, -diff);
 8007c6e:	4269      	negs	r1, r5
 8007c70:	4620      	mov	r0, r4
 8007c72:	b209      	sxth	r1, r1
}
 8007c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_op_cursor_move(shell, -diff);
 8007c78:	f00c bcae 	b.w	80145d8 <shell_op_cursor_move>
 8007c7c:	0801d406 	.word	0x0801d406
 8007c80:	0801a4e1 	.word	0x0801a4e1

08007c84 <shell_op_char_insert>:
{
 8007c84:	b513      	push	{r0, r1, r4, lr}
	if (shell->ctx->internal.flags.insert_mode &&
 8007c86:	6883      	ldr	r3, [r0, #8]
{
 8007c88:	f88d 1007 	strb.w	r1, [sp, #7]
	if (shell->ctx->internal.flags.insert_mode &&
 8007c8c:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 8007c90:	07d2      	lsls	r2, r2, #31
{
 8007c92:	4604      	mov	r4, r0
	if (shell->ctx->internal.flags.insert_mode &&
 8007c94:	d51d      	bpl.n	8007cd2 <shell_op_char_insert+0x4e>
		(shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
 8007c96:	8e99      	ldrh	r1, [r3, #52]	; 0x34
	if (shell->ctx->internal.flags.insert_mode &&
 8007c98:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007c9a:	428a      	cmp	r2, r1
 8007c9c:	d019      	beq.n	8007cd2 <shell_op_char_insert+0x4e>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
 8007c9e:	1c48      	adds	r0, r1, #1
 8007ca0:	8698      	strh	r0, [r3, #52]	; 0x34
 8007ca2:	440b      	add	r3, r1
		char_replace(shell, data);
 8007ca4:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
 8007ca8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
 8007cac:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 8007cae:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8007cb2:	075b      	lsls	r3, r3, #29
 8007cb4:	d50b      	bpl.n	8007cce <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
 8007cb6:	6960      	ldr	r0, [r4, #20]
 8007cb8:	4909      	ldr	r1, [pc, #36]	; (8007ce0 <shell_op_char_insert+0x5c>)
 8007cba:	f00c fc58 	bl	801456e <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell)) {
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f00c fc76 	bl	80145b0 <shell_cursor_in_empty_line>
 8007cc4:	b118      	cbz	r0, 8007cce <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8007cc6:	4907      	ldr	r1, [pc, #28]	; (8007ce4 <shell_op_char_insert+0x60>)
 8007cc8:	6960      	ldr	r0, [r4, #20]
 8007cca:	f00c fc50 	bl	801456e <shell_raw_fprintf>
}
 8007cce:	b002      	add	sp, #8
 8007cd0:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f10d 0107 	add.w	r1, sp, #7
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f00c fd48 	bl	801476e <data_insert>
}
 8007cde:	e7f6      	b.n	8007cce <shell_op_char_insert+0x4a>
 8007ce0:	0801abbd 	.word	0x0801abbd
 8007ce4:	0801a4e1 	.word	0x0801a4e1

08007ce8 <shell_print_prompt_and_cmd>:
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
 8007ce8:	6883      	ldr	r3, [r0, #8]
 8007cea:	4a0a      	ldr	r2, [pc, #40]	; (8007d14 <shell_print_prompt_and_cmd+0x2c>)
 8007cec:	681b      	ldr	r3, [r3, #0]
{
 8007cee:	b510      	push	{r4, lr}
 8007cf0:	4604      	mov	r4, r0
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
 8007cf2:	2103      	movs	r1, #3
 8007cf4:	f00c fd2e 	bl	8014754 <shell_internal_fprintf>
	if (flag_echo_get(shell)) {
 8007cf8:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 8007cfa:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8007cfe:	075b      	lsls	r3, r3, #29
 8007d00:	d507      	bpl.n	8007d12 <shell_print_prompt_and_cmd+0x2a>
		shell_print_cmd(shell);
 8007d02:	4620      	mov	r0, r4
 8007d04:	f7ff feee 	bl	8007ae4 <shell_print_cmd>
		shell_op_cursor_position_synchronize(shell);
 8007d08:	4620      	mov	r0, r4
}
 8007d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_op_cursor_position_synchronize(shell);
 8007d0e:	f7ff be87 	b.w	8007a20 <shell_op_cursor_position_synchronize>
}
 8007d12:	bd10      	pop	{r4, pc}
 8007d14:	0801d406 	.word	0x0801d406

08007d18 <init>:
static int init(const struct shell_transport *transport,
		const void *config,
		shell_transport_handler_t evt_handler,
		void *context)
{
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 8007d18:	6840      	ldr	r0, [r0, #4]
{
 8007d1a:	b510      	push	{r4, lr}
 8007d1c:	460c      	mov	r4, r1

	sh_uart->ctrl_blk->dev = (struct device *)config;
 8007d1e:	6801      	ldr	r1, [r0, #0]
	sh_uart->ctrl_blk->handler = evt_handler;
	sh_uart->ctrl_blk->context = context;
 8007d20:	608b      	str	r3, [r1, #8]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
 8007d22:	6863      	ldr	r3, [r4, #4]
	sh_uart->ctrl_blk->handler = evt_handler;
 8007d24:	e9c1 4200 	strd	r4, r2, [r1]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 8007d28:	b12b      	cbz	r3, 8007d36 <init+0x1e>
 8007d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d2c:	b11b      	cbz	r3, 8007d36 <init+0x1e>
		api->irq_callback_set(dev, cb, user_data);
 8007d2e:	4602      	mov	r2, r0
 8007d30:	4904      	ldr	r1, [pc, #16]	; (8007d44 <init+0x2c>)
 8007d32:	4620      	mov	r0, r4
 8007d34:	4798      	blx	r3
	if (api->irq_rx_enable) {
 8007d36:	6863      	ldr	r3, [r4, #4]
 8007d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3a:	b10b      	cbz	r3, 8007d40 <init+0x28>
		api->irq_rx_enable(dev);
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	4798      	blx	r3
		k_timer_user_data_set(sh_uart->timer, (void *)sh_uart);
		k_timer_start(sh_uart->timer, RX_POLL_PERIOD, RX_POLL_PERIOD);
	}

	return 0;
}
 8007d40:	2000      	movs	r0, #0
 8007d42:	bd10      	pop	{r4, pc}
 8007d44:	08007d71 	.word	0x08007d71

08007d48 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(struct device *arg)
{
 8007d48:	b507      	push	{r0, r1, r2, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8007d4a:	4807      	ldr	r0, [pc, #28]	; (8007d68 <enable_shell_uart+0x20>)
 8007d4c:	f009 fef4 	bl	8011b38 <z_impl_device_get_binding>
	bool log_backend = CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > 0;
	u32_t level =
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;

	shell_init(&shell_uart, dev, true, log_backend, level);
 8007d50:	2304      	movs	r3, #4
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	2301      	movs	r3, #1
 8007d56:	4601      	mov	r1, r0
 8007d58:	461a      	mov	r2, r3
 8007d5a:	4804      	ldr	r0, [pc, #16]	; (8007d6c <enable_shell_uart+0x24>)
 8007d5c:	f7ff fbca 	bl	80074f4 <shell_init>

	return 0;
}
 8007d60:	2000      	movs	r0, #0
 8007d62:	b003      	add	sp, #12
 8007d64:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d68:	0801abc0 	.word	0x0801abc0
 8007d6c:	08019848 	.word	0x08019848

08007d70 <uart_callback>:
{
 8007d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct device *dev = sh_uart->ctrl_blk->dev;
 8007d74:	6803      	ldr	r3, [r0, #0]
{
 8007d76:	b085      	sub	sp, #20
 8007d78:	4604      	mov	r4, r0
	struct device *dev = sh_uart->ctrl_blk->dev;
 8007d7a:	681d      	ldr	r5, [r3, #0]
	if (api->irq_update) {
 8007d7c:	686b      	ldr	r3, [r5, #4]
 8007d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d80:	b10b      	cbz	r3, 8007d86 <uart_callback+0x16>
		return api->irq_update(dev);
 8007d82:	4628      	mov	r0, r5
 8007d84:	4798      	blx	r3
	if (api->irq_rx_ready) {
 8007d86:	686b      	ldr	r3, [r5, #4]
 8007d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d030      	beq.n	8007df0 <uart_callback+0x80>
		return api->irq_rx_ready(dev);
 8007d8e:	4628      	mov	r0, r5
 8007d90:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d02c      	beq.n	8007df0 <uart_callback+0x80>
 8007d96:	4e3c      	ldr	r6, [pc, #240]	; (8007e88 <uart_callback+0x118>)
			LOG_WRN("RX ring buffer full.");
 8007d98:	4b3c      	ldr	r3, [pc, #240]	; (8007e8c <uart_callback+0x11c>)
 8007d9a:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8007e90 <uart_callback+0x120>
 8007d9e:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8007e94 <uart_callback+0x124>
 8007da2:	1af6      	subs	r6, r6, r3
 8007da4:	f3c6 06c9 	ubfx	r6, r6, #3, #10
	bool new_data = false;
 8007da8:	2700      	movs	r7, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
 8007daa:	68e0      	ldr	r0, [r4, #12]
 8007dac:	a903      	add	r1, sp, #12
 8007dae:	6902      	ldr	r2, [r0, #16]
 8007db0:	f00b fd2c 	bl	801380c <ring_buf_put_claim>
		if (len > 0) {
 8007db4:	4680      	mov	r8, r0
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d03f      	beq.n	8007e3a <uart_callback+0xca>
			rd_len = uart_fifo_read(sh_uart->ctrl_blk->dev,
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	6818      	ldr	r0, [r3, #0]
	if (api->fifo_read) {
 8007dbe:	6843      	ldr	r3, [r0, #4]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d037      	beq.n	8007e36 <uart_callback+0xc6>
		return api->fifo_read(dev, rx_data, size);
 8007dc6:	4642      	mov	r2, r8
 8007dc8:	9903      	ldr	r1, [sp, #12]
 8007dca:	4798      	blx	r3
				new_data = true;
 8007dcc:	1e03      	subs	r3, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
 8007dce:	4619      	mov	r1, r3
 8007dd0:	68e0      	ldr	r0, [r4, #12]
 8007dd2:	9301      	str	r3, [sp, #4]
				new_data = true;
 8007dd4:	bf18      	it	ne
 8007dd6:	2701      	movne	r7, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
 8007dd8:	f00b fd34 	bl	8013844 <ring_buf_put_finish>
			__ASSERT_NO_MSG(err == 0);
 8007ddc:	9b01      	ldr	r3, [sp, #4]
	} while (rd_len && (rd_len == len));
 8007dde:	b10b      	cbz	r3, 8007de4 <uart_callback+0x74>
 8007de0:	4598      	cmp	r8, r3
 8007de2:	d0e2      	beq.n	8007daa <uart_callback+0x3a>
	if (new_data) {
 8007de4:	b127      	cbz	r7, 8007df0 <uart_callback+0x80>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	2000      	movs	r0, #0
 8007dea:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8007dee:	4790      	blx	r2
	if (api->irq_tx_ready) {
 8007df0:	686b      	ldr	r3, [r5, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	b1e3      	cbz	r3, 8007e30 <uart_callback+0xc0>
		return api->irq_tx_ready(dev);
 8007df6:	4628      	mov	r0, r5
 8007df8:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
 8007dfa:	b1c8      	cbz	r0, 8007e30 <uart_callback+0xc0>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
 8007dfc:	68a0      	ldr	r0, [r4, #8]
	struct device *dev = sh_uart->ctrl_blk->dev;
 8007dfe:	6823      	ldr	r3, [r4, #0]
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
 8007e00:	6902      	ldr	r2, [r0, #16]
	struct device *dev = sh_uart->ctrl_blk->dev;
 8007e02:	681e      	ldr	r6, [r3, #0]
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
 8007e04:	a903      	add	r1, sp, #12
 8007e06:	f00b fd4f 	bl	80138a8 <ring_buf_get_claim>
	if (len) {
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d034      	beq.n	8007e7a <uart_callback+0x10a>
	if (api->fifo_fill) {
 8007e10:	6873      	ldr	r3, [r6, #4]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	b37b      	cbz	r3, 8007e76 <uart_callback+0x106>
		return api->fifo_fill(dev, tx_data, size);
 8007e16:	4602      	mov	r2, r0
 8007e18:	9903      	ldr	r1, [sp, #12]
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	4798      	blx	r3
 8007e1e:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
 8007e20:	68a0      	ldr	r0, [r4, #8]
 8007e22:	f00b fd62 	bl	80138ea <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	2001      	movs	r0, #1
 8007e2a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8007e2e:	4790      	blx	r2
}
 8007e30:	b005      	add	sp, #20
 8007e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return 0;
 8007e36:	4618      	mov	r0, r3
 8007e38:	e7c8      	b.n	8007dcc <uart_callback+0x5c>
			LOG_WRN("RX ring buffer full.");
 8007e3a:	f8da 3000 	ldr.w	r3, [sl]
 8007e3e:	f013 0f06 	tst.w	r3, #6
 8007e42:	d00b      	beq.n	8007e5c <uart_callback+0xec>
 8007e44:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
 8007e48:	f043 0302 	orr.w	r3, r3, #2
 8007e4c:	f363 0907 	bfi	r9, r3, #0, #8
 8007e50:	f366 198f 	bfi	r9, r6, #6, #10
 8007e54:	4649      	mov	r1, r9
 8007e56:	4658      	mov	r0, fp
 8007e58:	f00b fed3 	bl	8013c02 <log_0>
			rd_len = uart_fifo_read(sh_uart->ctrl_blk->dev,
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	6818      	ldr	r0, [r3, #0]
	if (api->fifo_read) {
 8007e60:	6843      	ldr	r3, [r0, #4]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	b12b      	cbz	r3, 8007e72 <uart_callback+0x102>
		return api->fifo_read(dev, rx_data, size);
 8007e66:	2201      	movs	r2, #1
 8007e68:	f10d 010b 	add.w	r1, sp, #11
 8007e6c:	4798      	blx	r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	e7b5      	b.n	8007dde <uart_callback+0x6e>
	return 0;
 8007e72:	4618      	mov	r0, r3
 8007e74:	e7fb      	b.n	8007e6e <uart_callback+0xfe>
	return 0;
 8007e76:	4619      	mov	r1, r3
 8007e78:	e7d2      	b.n	8007e20 <uart_callback+0xb0>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	f00c fcd7 	bl	801482e <z_impl_uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	60dd      	str	r5, [r3, #12]
 8007e84:	e7cf      	b.n	8007e26 <uart_callback+0xb6>
 8007e86:	bf00      	nop
 8007e88:	08019330 	.word	0x08019330
 8007e8c:	08019248 	.word	0x08019248
 8007e90:	20009044 	.word	0x20009044
 8007e94:	0801abf4 	.word	0x0801abf4

08007e98 <formatted_text_print.constprop.2>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
 8007e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9c:	4605      	mov	r5, r0
 8007e9e:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
 8007ea0:	460f      	mov	r7, r1
 8007ea2:	2900      	cmp	r1, #0
 8007ea4:	d06b      	beq.n	8007f7e <formatted_text_print.constprop.2+0xe6>
		shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
 8007ea6:	4b37      	ldr	r3, [pc, #220]	; (8007f84 <formatted_text_print.constprop.2+0xec>)
	if (str == NULL) {
 8007ea8:	2400      	movs	r4, #0
 8007eaa:	469a      	mov	sl, r3
	while (isspace((int) *(str + offset))) {
 8007eac:	5d3a      	ldrb	r2, [r7, r4]
 8007eae:	5cd2      	ldrb	r2, [r2, r3]
 8007eb0:	0712      	lsls	r2, r2, #28
 8007eb2:	d420      	bmi.n	8007ef6 <formatted_text_print.constprop.2+0x5e>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
 8007eb4:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8007f88 <formatted_text_print.constprop.2+0xf0>
	return str == NULL ? 0U : (u16_t)strlen(str);
 8007eb8:	4638      	mov	r0, r7
 8007eba:	f7fc fd99 	bl	80049f0 <strlen>
		size_t idx = 0;

		length = shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 8007ebe:	68ab      	ldr	r3, [r5, #8]
 8007ec0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
		length = shell_strlen(str) - offset;
 8007ec2:	b280      	uxth	r0, r0
 8007ec4:	1b00      	subs	r0, r0, r4
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 8007ec6:	eba2 0308 	sub.w	r3, r2, r8
		if (length <=
 8007eca:	4298      	cmp	r0, r3
 8007ecc:	eb07 0904 	add.w	r9, r7, r4
 8007ed0:	d913      	bls.n	8007efa <formatted_text_print.constprop.2+0x62>
 8007ed2:	4649      	mov	r1, r9
		size_t idx = 0;
 8007ed4:	2600      	movs	r6, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
 8007ed6:	f811 0b01 	ldrb.w	r0, [r1], #1
 8007eda:	f81a c000 	ldrb.w	ip, [sl, r0]
 8007ede:	f01c 0f08 	tst.w	ip, #8
 8007ee2:	d002      	beq.n	8007eea <formatted_text_print.constprop.2+0x52>
				length = idx;
				if (*(str + offset + idx) == '\n') {
 8007ee4:	280a      	cmp	r0, #10
 8007ee6:	d031      	beq.n	8007f4c <formatted_text_print.constprop.2+0xb4>
 8007ee8:	4633      	mov	r3, r6
					break;
				}
			}

			if ((idx + terminal_offset) >=
 8007eea:	eb08 0006 	add.w	r0, r8, r6
 8007eee:	4282      	cmp	r2, r0
 8007ef0:	d92b      	bls.n	8007f4a <formatted_text_print.constprop.2+0xb2>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
 8007ef2:	3601      	adds	r6, #1
 8007ef4:	e7ef      	b.n	8007ed6 <formatted_text_print.constprop.2+0x3e>
		++offset;
 8007ef6:	3401      	adds	r4, #1
 8007ef8:	e7d8      	b.n	8007eac <formatted_text_print.constprop.2+0x14>
 8007efa:	464b      	mov	r3, r9
			for (idx = 0; idx < length; idx++) {
 8007efc:	2600      	movs	r6, #0
 8007efe:	42b0      	cmp	r0, r6
 8007f00:	d017      	beq.n	8007f32 <formatted_text_print.constprop.2+0x9a>
				if (*(str + offset + idx) == '\n') {
 8007f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f06:	2a0a      	cmp	r2, #10
 8007f08:	eb04 0a06 	add.w	sl, r4, r6
 8007f0c:	d11b      	bne.n	8007f46 <formatted_text_print.constprop.2+0xae>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
 8007f0e:	6968      	ldr	r0, [r5, #20]
 8007f10:	f00c fa5d 	bl	80143ce <shell_fprintf_buffer_flush>
					shell_write(shell, str + offset, idx);
 8007f14:	4632      	mov	r2, r6
 8007f16:	4649      	mov	r1, r9
 8007f18:	4628      	mov	r0, r5
 8007f1a:	f00c fbc3 	bl	80146a4 <shell_write>
 8007f1e:	491a      	ldr	r1, [pc, #104]	; (8007f88 <formatted_text_print.constprop.2+0xf0>)
 8007f20:	6968      	ldr	r0, [r5, #20]
 8007f22:	f00c fcd4 	bl	80148ce <shell_raw_fprintf>
					shell_op_cursor_horiz_move(shell,
 8007f26:	4641      	mov	r1, r8
 8007f28:	4628      	mov	r0, r5
					offset += idx + 1;
 8007f2a:	f10a 0401 	add.w	r4, sl, #1
					shell_op_cursor_horiz_move(shell,
 8007f2e:	f7ff fd53 	bl	80079d8 <shell_op_cursor_horiz_move>
			shell_raw_fprintf(shell->fprintf_ctx, str + offset);
 8007f32:	1939      	adds	r1, r7, r4
 8007f34:	6968      	ldr	r0, [r5, #20]
 8007f36:	f00c fcca 	bl	80148ce <shell_raw_fprintf>
 8007f3a:	6968      	ldr	r0, [r5, #20]
 8007f3c:	4912      	ldr	r1, [pc, #72]	; (8007f88 <formatted_text_print.constprop.2+0xf0>)
		cursor_next_line_move(shell);
		shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	cursor_next_line_move(shell);
}
 8007f3e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f42:	f00c bcc4 	b.w	80148ce <shell_raw_fprintf>
			for (idx = 0; idx < length; idx++) {
 8007f46:	3601      	adds	r6, #1
 8007f48:	e7d9      	b.n	8007efe <formatted_text_print.constprop.2+0x66>
			if ((idx + terminal_offset) >=
 8007f4a:	461e      	mov	r6, r3
 8007f4c:	6968      	ldr	r0, [r5, #20]
 8007f4e:	f00c fa3e 	bl	80143ce <shell_fprintf_buffer_flush>
		shell_write(shell, str + offset, length);
 8007f52:	4632      	mov	r2, r6
 8007f54:	4649      	mov	r1, r9
 8007f56:	4628      	mov	r0, r5
 8007f58:	f00c fba4 	bl	80146a4 <shell_write>
		offset += length;
 8007f5c:	4434      	add	r4, r6
		while (isspace((int) (*(str + offset)))) {
 8007f5e:	5d3b      	ldrb	r3, [r7, r4]
 8007f60:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8007f64:	071b      	lsls	r3, r3, #28
 8007f66:	d408      	bmi.n	8007f7a <formatted_text_print.constprop.2+0xe2>
 8007f68:	4659      	mov	r1, fp
 8007f6a:	6968      	ldr	r0, [r5, #20]
 8007f6c:	f00c fcaf 	bl	80148ce <shell_raw_fprintf>
		shell_op_cursor_horiz_move(shell, terminal_offset);
 8007f70:	4641      	mov	r1, r8
 8007f72:	4628      	mov	r0, r5
 8007f74:	f7ff fd30 	bl	80079d8 <shell_op_cursor_horiz_move>
 8007f78:	e79e      	b.n	8007eb8 <formatted_text_print.constprop.2+0x20>
			++offset;
 8007f7a:	3401      	adds	r4, #1
 8007f7c:	e7ef      	b.n	8007f5e <formatted_text_print.constprop.2+0xc6>
}
 8007f7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f82:	bf00      	nop
 8007f84:	08019513 	.word	0x08019513
 8007f88:	0801a4e1 	.word	0x0801a4e1

08007f8c <shell_help_subcmd_print>:

/* Function is printing command help, its subcommands name and subcommands
 * help string.
 */
void shell_help_subcmd_print(const struct shell *shell)
{
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry static_entry;
	u16_t longest_syntax = 0U;
	size_t cmd_idx = 0;

	/* Checking if there are any subcommands available. */
	if (!shell->ctx->active_cmd.subcmd) {
 8007f90:	6882      	ldr	r2, [r0, #8]
{
 8007f92:	b08f      	sub	sp, #60	; 0x3c
	if (!shell->ctx->active_cmd.subcmd) {
 8007f94:	6912      	ldr	r2, [r2, #16]
	const struct shell_static_entry *entry = NULL;
 8007f96:	2300      	movs	r3, #0
{
 8007f98:	4604      	mov	r4, r0
	const struct shell_static_entry *entry = NULL;
 8007f9a:	9308      	str	r3, [sp, #32]
	if (!shell->ctx->active_cmd.subcmd) {
 8007f9c:	2a00      	cmp	r2, #0
 8007f9e:	d063      	beq.n	8008068 <shell_help_subcmd_print+0xdc>
	size_t cmd_idx = 0;
 8007fa0:	4698      	mov	r8, r3
	u16_t longest_syntax = 0U;
 8007fa2:	461d      	mov	r5, r3
		return;
	}

	/* Searching for the longest subcommand to print. */
	do {
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
 8007fa4:	ae09      	add	r6, sp, #36	; 0x24
 8007fa6:	af08      	add	r7, sp, #32
 8007fa8:	e9cd 7600 	strd	r7, r6, [sp]
 8007fac:	68a1      	ldr	r1, [r4, #8]
 8007fae:	4643      	mov	r3, r8
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	6909      	ldr	r1, [r1, #16]
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f7ff fc61 	bl	800787c <shell_cmd_get>
			      !SHELL_CMD_ROOT_LVL,
			      cmd_idx++, &entry, &static_entry);

		if (!entry) {
 8007fba:	9b08      	ldr	r3, [sp, #32]
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
 8007fbc:	f108 0901 	add.w	r9, r8, #1
		if (!entry) {
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d04e      	beq.n	8008062 <shell_help_subcmd_print+0xd6>
			break;
		}

		u16_t len = shell_strlen(entry->syntax);
 8007fc4:	6818      	ldr	r0, [r3, #0]
	return str == NULL ? 0U : (u16_t)strlen(str);
 8007fc6:	b110      	cbz	r0, 8007fce <shell_help_subcmd_print+0x42>
 8007fc8:	f7fc fd12 	bl	80049f0 <strlen>
 8007fcc:	b280      	uxth	r0, r0

		longest_syntax = longest_syntax > len ? longest_syntax : len;
 8007fce:	4285      	cmp	r5, r0
 8007fd0:	bf38      	it	cc
 8007fd2:	4605      	movcc	r5, r0
	} while (cmd_idx != 0); /* too many commands */
 8007fd4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007fd8:	d141      	bne.n	800805e <shell_help_subcmd_print+0xd2>

	if (cmd_idx == 1) {
		return;
	}

	shell_internal_fprintf(shell, SHELL_NORMAL, "Subcommands:\n");
 8007fda:	4a2e      	ldr	r2, [pc, #184]	; (8008094 <shell_help_subcmd_print+0x108>)
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8007fdc:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80080a4 <shell_help_subcmd_print+0x118>
	shell_internal_fprintf(shell, SHELL_NORMAL, "Subcommands:\n");
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f00c fbb6 	bl	8014754 <shell_internal_fprintf>

	/* Printing subcommands and help string (if exists). */
	cmd_idx = 0;
 8007fe8:	2300      	movs	r3, #0

	while (true) {
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
 8007fea:	e9cd 7600 	strd	r7, r6, [sp]
 8007fee:	68a1      	ldr	r1, [r4, #8]
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	9203      	str	r2, [sp, #12]
 8007ff4:	6909      	ldr	r1, [r1, #16]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f7ff fc3f 	bl	800787c <shell_cmd_get>
			      !SHELL_CMD_ROOT_LVL,
			      cmd_idx++, &entry, &static_entry);

		if (entry == NULL) {
 8007ffe:	9a08      	ldr	r2, [sp, #32]
 8008000:	b392      	cbz	r2, 8008068 <shell_help_subcmd_print+0xdc>
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8008002:	4640      	mov	r0, r8
			break;
		}

		help_item_print(shell, entry->syntax, longest_syntax,
 8008004:	e9d2 9a00 	ldrd	r9, sl, [r2]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8008008:	f7fc fcf2 	bl	80049f0 <strlen>
 800800c:	4683      	mov	fp, r0
	if (item_name == NULL) {
 800800e:	f1b9 0f00 	cmp.w	r9, #0
 8008012:	d022      	beq.n	800805a <shell_help_subcmd_print+0xce>
		u16_t tmp = item_name_width - strlen(item_name);
 8008014:	4648      	mov	r0, r9
 8008016:	f7fc fceb 	bl	80049f0 <strlen>
 800801a:	1a28      	subs	r0, r5, r0
 800801c:	b283      	uxth	r3, r0
		char space = ' ';
 800801e:	2220      	movs	r2, #32
		u16_t tmp = item_name_width - strlen(item_name);
 8008020:	9304      	str	r3, [sp, #16]
		char space = ' ';
 8008022:	f88d 201f 	strb.w	r2, [sp, #31]
		shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
 8008026:	4643      	mov	r3, r8
 8008028:	f8cd 9000 	str.w	r9, [sp]
 800802c:	4a1a      	ldr	r2, [pc, #104]	; (8008098 <shell_help_subcmd_print+0x10c>)
 800802e:	2100      	movs	r1, #0
 8008030:	4620      	mov	r0, r4
 8008032:	f00c fb8f 	bl	8014754 <shell_internal_fprintf>
 8008036:	2300      	movs	r3, #0
		for (u16_t i = 0; i < tmp; i++) {
 8008038:	9904      	ldr	r1, [sp, #16]
 800803a:	b29a      	uxth	r2, r3
 800803c:	428a      	cmp	r2, r1
 800803e:	d316      	bcc.n	800806e <shell_help_subcmd_print+0xe2>
		shell_internal_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
 8008040:	4643      	mov	r3, r8
 8008042:	4a16      	ldr	r2, [pc, #88]	; (800809c <shell_help_subcmd_print+0x110>)
 8008044:	2100      	movs	r1, #0
 8008046:	4620      	mov	r0, r4
 8008048:	f00c fb84 	bl	8014754 <shell_internal_fprintf>
	if (item_help == NULL) {
 800804c:	f1ba 0f00 	cmp.w	sl, #0
 8008050:	d117      	bne.n	8008082 <shell_help_subcmd_print+0xf6>
 8008052:	4913      	ldr	r1, [pc, #76]	; (80080a0 <shell_help_subcmd_print+0x114>)
 8008054:	6960      	ldr	r0, [r4, #20]
 8008056:	f00c fc3a 	bl	80148ce <shell_raw_fprintf>
 800805a:	9b03      	ldr	r3, [sp, #12]
 800805c:	e7c5      	b.n	8007fea <shell_help_subcmd_print+0x5e>
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
 800805e:	46c8      	mov	r8, r9
 8008060:	e7a2      	b.n	8007fa8 <shell_help_subcmd_print+0x1c>
	if (cmd_idx == 1) {
 8008062:	f1b9 0f01 	cmp.w	r9, #1
 8008066:	d1b8      	bne.n	8007fda <shell_help_subcmd_print+0x4e>
				entry->help);
	}
}
 8008068:	b00f      	add	sp, #60	; 0x3c
 800806a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			shell_write(shell, &space, 1);
 800806e:	2201      	movs	r2, #1
 8008070:	f10d 011f 	add.w	r1, sp, #31
 8008074:	4620      	mov	r0, r4
 8008076:	9305      	str	r3, [sp, #20]
 8008078:	f00c fb14 	bl	80146a4 <shell_write>
 800807c:	9b05      	ldr	r3, [sp, #20]
 800807e:	3301      	adds	r3, #1
 8008080:	e7da      	b.n	8008038 <shell_help_subcmd_print+0xac>
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8008082:	1c6a      	adds	r2, r5, #1
 8008084:	eb02 024b 	add.w	r2, r2, fp, lsl #1
	formatted_text_print(shell, item_help, offset, false);
 8008088:	b292      	uxth	r2, r2
 800808a:	4651      	mov	r1, sl
 800808c:	4620      	mov	r0, r4
 800808e:	f7ff ff03 	bl	8007e98 <formatted_text_print.constprop.2>
 8008092:	e7e2      	b.n	800805a <shell_help_subcmd_print+0xce>
 8008094:	0801ac0d 	.word	0x0801ac0d
 8008098:	0801ab8f 	.word	0x0801ab8f
 800809c:	0801ac1b 	.word	0x0801ac1b
 80080a0:	0801a4e1 	.word	0x0801a4e1
 80080a4:	0801ac1f 	.word	0x0801ac1f

080080a8 <shell_help_cmd_print>:

void shell_help_cmd_print(const struct shell *shell)
{
	static const char cmd_sep[] = " - ";	/* commands separator */

	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
 80080a8:	6883      	ldr	r3, [r0, #8]
{
 80080aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080ac:	4605      	mov	r5, r0
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
 80080ae:	6898      	ldr	r0, [r3, #8]
 80080b0:	b1c8      	cbz	r0, 80080e6 <shell_help_cmd_print+0x3e>
 80080b2:	f7fc fc9d 	bl	80049f0 <strlen>
 80080b6:	b284      	uxth	r4, r0
 80080b8:	4e0c      	ldr	r6, [pc, #48]	; (80080ec <shell_help_cmd_print+0x44>)
 80080ba:	4630      	mov	r0, r6
 80080bc:	f7fc fc98 	bl	80049f0 <strlen>
							  shell_strlen(cmd_sep);

	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
 80080c0:	68ab      	ldr	r3, [r5, #8]
 80080c2:	9600      	str	r6, [sp, #0]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
 80080c4:	4404      	add	r4, r0
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	4a09      	ldr	r2, [pc, #36]	; (80080f0 <shell_help_cmd_print+0x48>)
 80080ca:	4628      	mov	r0, r5
 80080cc:	2100      	movs	r1, #0
 80080ce:	f00c fb41 	bl	8014754 <shell_internal_fprintf>
			       shell->ctx->active_cmd.syntax, cmd_sep);

	formatted_text_print(shell, shell->ctx->active_cmd.help,
 80080d2:	68ab      	ldr	r3, [r5, #8]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
 80080d4:	b2a4      	uxth	r4, r4
	formatted_text_print(shell, shell->ctx->active_cmd.help,
 80080d6:	68d9      	ldr	r1, [r3, #12]
 80080d8:	4622      	mov	r2, r4
 80080da:	4628      	mov	r0, r5
			     field_width, false);
}
 80080dc:	b002      	add	sp, #8
 80080de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	formatted_text_print(shell, shell->ctx->active_cmd.help,
 80080e2:	f7ff bed9 	b.w	8007e98 <formatted_text_print.constprop.2>
 80080e6:	4604      	mov	r4, r0
 80080e8:	e7e6      	b.n	80080b8 <shell_help_cmd_print+0x10>
 80080ea:	bf00      	nop
 80080ec:	0801ac09 	.word	0x0801ac09
 80080f0:	0801ab8f 	.word	0x0801ab8f

080080f4 <cmd_clear>:
	cursor_restore(shell);
	return ret_val;
}

static int cmd_clear(const struct shell *shell, size_t argc, char **argv)
{
 80080f4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 80080f6:	4d07      	ldr	r5, [pc, #28]	; (8008114 <cmd_clear+0x20>)
 80080f8:	4a07      	ldr	r2, [pc, #28]	; (8008118 <cmd_clear+0x24>)
{
 80080fa:	4604      	mov	r4, r0
	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 80080fc:	4629      	mov	r1, r5
 80080fe:	6940      	ldr	r0, [r0, #20]
 8008100:	f00c fc2c 	bl	801495c <shell_raw_fprintf>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
 8008104:	6960      	ldr	r0, [r4, #20]
 8008106:	4a05      	ldr	r2, [pc, #20]	; (800811c <cmd_clear+0x28>)
 8008108:	4629      	mov	r1, r5
 800810a:	f00c fc27 	bl	801495c <shell_raw_fprintf>

	return 0;
}
 800810e:	2000      	movs	r0, #0
 8008110:	bd38      	pop	{r3, r4, r5, pc}
 8008112:	bf00      	nop
 8008114:	0801d406 	.word	0x0801d406
 8008118:	0801ac28 	.word	0x0801ac28
 800811c:	0801ac2c 	.word	0x0801ac2c

08008120 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
 8008120:	b510      	push	{r4, lr}
 8008122:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
 8008124:	4a04      	ldr	r2, [pc, #16]	; (8008138 <cmd_resize_default+0x18>)
 8008126:	4905      	ldr	r1, [pc, #20]	; (800813c <cmd_resize_default+0x1c>)
 8008128:	6940      	ldr	r0, [r0, #20]
 800812a:	f00c fc17 	bl	801495c <shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid =  SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
 800812e:	68a3      	ldr	r3, [r4, #8]
 8008130:	4a03      	ldr	r2, [pc, #12]	; (8008140 <cmd_resize_default+0x20>)
 8008132:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
 8008134:	2000      	movs	r0, #0
 8008136:	bd10      	pop	{r4, pc}
 8008138:	0801ac31 	.word	0x0801ac31
 800813c:	0801d406 	.word	0x0801d406
 8008140:	00500018 	.word	0x00500018

08008144 <cmd_shell_stats_show>:
{
 8008144:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %u", shell->stats->log_lost_cnt);
 8008146:	6983      	ldr	r3, [r0, #24]
 8008148:	4a03      	ldr	r2, [pc, #12]	; (8008158 <cmd_shell_stats_show+0x14>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2100      	movs	r1, #0
 800814e:	f00c f911 	bl	8014374 <shell_fprintf>
}
 8008152:	2000      	movs	r0, #0
 8008154:	bd08      	pop	{r3, pc}
 8008156:	bf00      	nop
 8008158:	0801ae6a 	.word	0x0801ae6a

0800815c <cmd_help>:
{
 800815c:	b510      	push	{r4, lr}
	shell_print(shell,
 800815e:	4a06      	ldr	r2, [pc, #24]	; (8008178 <cmd_help+0x1c>)
{
 8008160:	4604      	mov	r4, r0
	shell_print(shell,
 8008162:	2100      	movs	r1, #0
 8008164:	f00c f906 	bl	8014374 <shell_fprintf>
	shell_print(shell,
 8008168:	4620      	mov	r0, r4
 800816a:	4a04      	ldr	r2, [pc, #16]	; (800817c <cmd_help+0x20>)
 800816c:	2100      	movs	r1, #0
 800816e:	f00c f901 	bl	8014374 <shell_fprintf>
}
 8008172:	2000      	movs	r0, #0
 8008174:	bd10      	pop	{r4, pc}
 8008176:	bf00      	nop
 8008178:	0801ac6f 	.word	0x0801ac6f
 800817c:	0801ad5e 	.word	0x0801ad5e

08008180 <cmd_history>:
{
 8008180:	b5f0      	push	{r4, r5, r6, r7, lr}
			shell_print(shell, "[%3d] %s",
 8008182:	4f10      	ldr	r7, [pc, #64]	; (80081c4 <cmd_history+0x44>)
{
 8008184:	b085      	sub	sp, #20
 8008186:	4604      	mov	r4, r0
	size_t i = 0;
 8008188:	2500      	movs	r5, #0
				  shell->ctx->temp_buff, &len);
 800818a:	68a2      	ldr	r2, [r4, #8]
		shell_history_get(shell->history, true,
 800818c:	68e0      	ldr	r0, [r4, #12]
 800818e:	f10d 030e 	add.w	r3, sp, #14
 8008192:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8008196:	2101      	movs	r1, #1
 8008198:	f00c fc02 	bl	80149a0 <shell_history_get>
		if (len) {
 800819c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80081a0:	68a3      	ldr	r3, [r4, #8]
 80081a2:	b158      	cbz	r0, 80081bc <cmd_history+0x3c>
			shell_print(shell, "[%3d] %s",
 80081a4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	1c6e      	adds	r6, r5, #1
 80081ac:	462b      	mov	r3, r5
 80081ae:	463a      	mov	r2, r7
 80081b0:	2100      	movs	r1, #0
 80081b2:	4620      	mov	r0, r4
 80081b4:	f00c f8de 	bl	8014374 <shell_fprintf>
 80081b8:	4635      	mov	r5, r6
		shell_history_get(shell->history, true,
 80081ba:	e7e6      	b.n	800818a <cmd_history+0xa>
	shell->ctx->temp_buff[0] = '\0';
 80081bc:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
}
 80081c0:	b005      	add	sp, #20
 80081c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081c4:	0801ae26 	.word	0x0801ae26

080081c8 <cmd_echo>:
	if (argc == 2) {
 80081c8:	2902      	cmp	r1, #2
{
 80081ca:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
 80081cc:	d10c      	bne.n	80081e8 <cmd_echo+0x20>
		shell_error(shell, "%s:%s%s", argv[0],
 80081ce:	6853      	ldr	r3, [r2, #4]
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <cmd_echo+0x40>)
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	6813      	ldr	r3, [r2, #0]
 80081d8:	4a0c      	ldr	r2, [pc, #48]	; (800820c <cmd_echo+0x44>)
 80081da:	f00c f8cb 	bl	8014374 <shell_fprintf>
 80081de:	f06f 0015 	mvn.w	r0, #21
}
 80081e2:	b003      	add	sp, #12
 80081e4:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_print(shell, "Echo status: %s",
 80081e8:	6883      	ldr	r3, [r0, #8]
 80081ea:	4a09      	ldr	r2, [pc, #36]	; (8008210 <cmd_echo+0x48>)
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80081ec:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 80081f0:	f013 0f04 	tst.w	r3, #4
 80081f4:	f04f 0100 	mov.w	r1, #0
 80081f8:	4b06      	ldr	r3, [pc, #24]	; (8008214 <cmd_echo+0x4c>)
 80081fa:	bf18      	it	ne
 80081fc:	4613      	movne	r3, r2
 80081fe:	4a06      	ldr	r2, [pc, #24]	; (8008218 <cmd_echo+0x50>)
 8008200:	f00c f8b8 	bl	8014374 <shell_fprintf>
	return 0;
 8008204:	2000      	movs	r0, #0
 8008206:	e7ec      	b.n	80081e2 <cmd_echo+0x1a>
 8008208:	0801ac44 	.word	0x0801ac44
 800820c:	0801ac3b 	.word	0x0801ac3b
 8008210:	0801c36a 	.word	0x0801c36a
 8008214:	0801ac37 	.word	0x0801ac37
 8008218:	0801ac59 	.word	0x0801ac59

0800821c <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
 800821c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
 800821e:	2901      	cmp	r1, #1
{
 8008220:	b085      	sub	sp, #20
 8008222:	4605      	mov	r5, r0
	if (argc != 1) {
 8008224:	d00d      	beq.n	8008242 <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
 8008226:	6853      	ldr	r3, [r2, #4]
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	4b53      	ldr	r3, [pc, #332]	; (8008378 <cmd_resize+0x15c>)
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	6813      	ldr	r3, [r2, #0]
 8008230:	4a52      	ldr	r2, [pc, #328]	; (800837c <cmd_resize+0x160>)
 8008232:	2102      	movs	r1, #2
 8008234:	f00c f89e 	bl	8014374 <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
 8008238:	f06f 0415 	mvn.w	r4, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
 800823c:	4620      	mov	r0, r4
 800823e:	b005      	add	sp, #20
 8008240:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
 8008242:	4a4f      	ldr	r2, [pc, #316]	; (8008380 <cmd_resize+0x164>)
 8008244:	494f      	ldr	r1, [pc, #316]	; (8008384 <cmd_resize+0x168>)
 8008246:	6940      	ldr	r0, [r0, #20]
 8008248:	f00c fb88 	bl	801495c <shell_raw_fprintf>
	shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
 800824c:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
 8008250:	4628      	mov	r0, r5
 8008252:	f7ff fbb1 	bl	80079b8 <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
 8008256:	21fa      	movs	r1, #250	; 0xfa
 8008258:	4628      	mov	r0, r5
 800825a:	f7ff fbbd 	bl	80079d8 <shell_op_cursor_horiz_move>
__ssp_bos_icheck3(memset, void *, int)
 800825e:	68a8      	ldr	r0, [r5, #8]
	char c = 0;
 8008260:	2400      	movs	r4, #0
 8008262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008266:	4621      	mov	r1, r4
 8008268:	f500 709c 	add.w	r0, r0, #312	; 0x138
 800826c:	f88d 400b 	strb.w	r4, [sp, #11]
 8008270:	f7fc fb7d 	bl	800496e <memset>
	shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
 8008274:	4944      	ldr	r1, [pc, #272]	; (8008388 <cmd_resize+0x16c>)
 8008276:	6968      	ldr	r0, [r5, #20]
 8008278:	f00c fb70 	bl	801495c <shell_raw_fprintf>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
 800827c:	6968      	ldr	r0, [r5, #20]
 800827e:	f00c f8a6 	bl	80143ce <shell_fprintf_buffer_flush>
 8008282:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
 8008286:	6868      	ldr	r0, [r5, #4]
 8008288:	6803      	ldr	r3, [r0, #0]
 800828a:	2201      	movs	r2, #1
 800828c:	691f      	ldr	r7, [r3, #16]
 800828e:	f10d 010b 	add.w	r1, sp, #11
 8008292:	ab03      	add	r3, sp, #12
 8008294:	47b8      	blx	r7
			if (cnt == 0) {
 8008296:	9b03      	ldr	r3, [sp, #12]
 8008298:	b953      	cbnz	r3, 80082b0 <cmd_resize+0x94>
	z_impl_k_busy_wait(usec_to_wait);
 800829a:	3e01      	subs	r6, #1
 800829c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082a0:	b2b6      	uxth	r6, r6
 80082a2:	f00a fb81 	bl	80129a8 <z_impl_k_busy_wait>
	for (u16_t i = 0; i < 1000; i++) {
 80082a6:	2e00      	cmp	r6, #0
 80082a8:	d1ed      	bne.n	8008286 <cmd_resize+0x6a>
		ret_val = -ENOTSUP;
 80082aa:	f06f 0485 	mvn.w	r4, #133	; 0x85
 80082ae:	e031      	b.n	8008314 <cmd_resize+0xf8>
			if ((c != SHELL_VT100_ASCII_ESC) &&
 80082b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80082b4:	68aa      	ldr	r2, [r5, #8]
 80082b6:	2b1b      	cmp	r3, #27
 80082b8:	d053      	beq.n	8008362 <cmd_resize+0x146>
 80082ba:	f892 1138 	ldrb.w	r1, [r2, #312]	; 0x138
 80082be:	291b      	cmp	r1, #27
 80082c0:	d1e1      	bne.n	8008286 <cmd_resize+0x6a>
			if (c == 'R') { /* End of response from the terminal. */
 80082c2:	2b52      	cmp	r3, #82	; 0x52
 80082c4:	d14d      	bne.n	8008362 <cmd_resize+0x146>
				shell->ctx->temp_buff[buff_idx] = '\0';
 80082c6:	4414      	add	r4, r2
 80082c8:	2300      	movs	r3, #0
 80082ca:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
				if (shell->ctx->temp_buff[1] != '[') {
 80082ce:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
 80082d2:	295b      	cmp	r1, #91	; 0x5b
 80082d4:	d14d      	bne.n	8008372 <cmd_resize+0x156>
 80082d6:	f502 709d 	add.w	r0, r2, #314	; 0x13a
	*y = 0U;
 80082da:	461f      	mov	r7, r3
				buff_idx = 2U;
 80082dc:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
 80082de:	f810 1b01 	ldrb.w	r1, [r0], #1
 80082e2:	3601      	adds	r6, #1
 80082e4:	293b      	cmp	r1, #59	; 0x3b
 80082e6:	b2b6      	uxth	r6, r6
 80082e8:	d126      	bne.n	8008338 <cmd_resize+0x11c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 80082ea:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80082ee:	d0dc      	beq.n	80082aa <cmd_resize+0x8e>
 80082f0:	f506 709c 	add.w	r0, r6, #312	; 0x138
 80082f4:	4410      	add	r0, r2
	*x = 0U;
 80082f6:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
 80082f8:	f810 4b01 	ldrb.w	r4, [r0], #1
 80082fc:	bb34      	cbnz	r4, 800834c <cmd_resize+0x130>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
 80082fe:	2bfa      	cmp	r3, #250	; 0xfa
 8008300:	bf28      	it	cs
 8008302:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 8008304:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
 8008306:	8553      	strh	r3, [r2, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 8008308:	463b      	mov	r3, r7
 800830a:	bf28      	it	cs
 800830c:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
 800830e:	f882 4138 	strb.w	r4, [r2, #312]	; 0x138
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 8008312:	8513      	strh	r3, [r2, #40]	; 0x28
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
 8008314:	4a1d      	ldr	r2, [pc, #116]	; (800838c <cmd_resize+0x170>)
 8008316:	491b      	ldr	r1, [pc, #108]	; (8008384 <cmd_resize+0x168>)
 8008318:	6968      	ldr	r0, [r5, #20]
 800831a:	f00c fb1f 	bl	801495c <shell_raw_fprintf>
	if (err != 0) {
 800831e:	2c00      	cmp	r4, #0
 8008320:	d08c      	beq.n	800823c <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
 8008322:	68ab      	ldr	r3, [r5, #8]
 8008324:	4a1a      	ldr	r2, [pc, #104]	; (8008390 <cmd_resize+0x174>)
 8008326:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
 8008328:	2104      	movs	r1, #4
 800832a:	4a1a      	ldr	r2, [pc, #104]	; (8008394 <cmd_resize+0x178>)
 800832c:	4628      	mov	r0, r5
 800832e:	f00c f821 	bl	8014374 <shell_fprintf>
 8008332:	f06f 0407 	mvn.w	r4, #7
 8008336:	e781      	b.n	800823c <cmd_resize+0x20>
					*y = *y * 10U +
 8008338:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 800833c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008340:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
 8008342:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
 8008346:	b29f      	uxth	r7, r3
					if (buff_idx >=
 8008348:	d1c9      	bne.n	80082de <cmd_resize+0xc2>
 800834a:	e7ae      	b.n	80082aa <cmd_resize+0x8e>
					*x = *x * 10U +
 800834c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
 8008350:	3601      	adds	r6, #1
					*x = *x * 10U +
 8008352:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
 8008356:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
 8008358:	3c30      	subs	r4, #48	; 0x30
					if (buff_idx >=
 800835a:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
 800835c:	b2a3      	uxth	r3, r4
					if (buff_idx >=
 800835e:	d9cb      	bls.n	80082f8 <cmd_resize+0xdc>
 8008360:	e7a3      	b.n	80082aa <cmd_resize+0x8e>
			shell->ctx->temp_buff[buff_idx] = c;
 8008362:	1911      	adds	r1, r2, r4
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
 8008364:	3401      	adds	r4, #1
 8008366:	b2a4      	uxth	r4, r4
 8008368:	2c09      	cmp	r4, #9
			shell->ctx->temp_buff[buff_idx] = c;
 800836a:	f881 3138 	strb.w	r3, [r1, #312]	; 0x138
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
 800836e:	d98a      	bls.n	8008286 <cmd_resize+0x6a>
				shell->ctx->temp_buff[0] = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	f882 3138 	strb.w	r3, [r2, #312]	; 0x138
				return -ENOMEM;
 8008376:	e798      	b.n	80082aa <cmd_resize+0x8e>
 8008378:	0801ac44 	.word	0x0801ac44
 800837c:	0801ac3b 	.word	0x0801ac3b
 8008380:	0801ac22 	.word	0x0801ac22
 8008384:	0801d406 	.word	0x0801d406
 8008388:	0801ac6a 	.word	0x0801ac6a
 800838c:	0801ac25 	.word	0x0801ac25
 8008390:	00500018 	.word	0x00500018
 8008394:	0801ae30 	.word	0x0801ae30

08008398 <shell_wildcard_process>:


enum shell_wildcard_status shell_wildcard_process(const struct shell *shell,
					      const struct shell_cmd_entry *cmd,
					      const char *pattern)
{
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	4682      	mov	sl, r0
 800839e:	b089      	sub	sp, #36	; 0x24
 80083a0:	4616      	mov	r6, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
 80083a2:	468b      	mov	fp, r1
 80083a4:	b921      	cbnz	r1, 80083b0 <shell_wildcard_process+0x18>
		return ret_val;
 80083a6:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
 80083a8:	4620      	mov	r0, r4
 80083aa:	b009      	add	sp, #36	; 0x24
 80083ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!shell_wildcard_character_exist(pattern)) {
 80083b0:	4610      	mov	r0, r2
 80083b2:	f00c fcb6 	bl	8014d22 <shell_wildcard_character_exist>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d0f5      	beq.n	80083a6 <shell_wildcard_process+0xe>
 80083ba:	2500      	movs	r5, #0
	size_t cnt = 0;
 80083bc:	9501      	str	r5, [sp, #4]
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
 80083be:	2402      	movs	r4, #2
	if (cmd->is_dynamic) {
 80083c0:	f89b 2000 	ldrb.w	r2, [fp]
 80083c4:	f8db 3004 	ldr.w	r3, [fp, #4]
 80083c8:	4268      	negs	r0, r5
 80083ca:	b18a      	cbz	r2, 80083f0 <shell_wildcard_process+0x58>
		cmd->u.dynamic_get(idx, d_entry);
 80083cc:	a903      	add	r1, sp, #12
 80083ce:	4798      	blx	r3
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
 80083d0:	9b03      	ldr	r3, [sp, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d15b      	bne.n	800848e <shell_wildcard_process+0xf6>
	if (cnt > 0) {
 80083d6:	9b01      	ldr	r3, [sp, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d0e5      	beq.n	80083a8 <shell_wildcard_process+0x10>
		shell_pattern_remove(shell->ctx->temp_buff,
 80083dc:	f8da 0008 	ldr.w	r0, [sl, #8]
 80083e0:	4632      	mov	r2, r6
 80083e2:	f100 0136 	add.w	r1, r0, #54	; 0x36
 80083e6:	f500 709c 	add.w	r0, r0, #312	; 0x138
 80083ea:	f00c f84e 	bl	801448a <shell_pattern_remove>
	return ret_val;
 80083ee:	e7db      	b.n	80083a8 <shell_wildcard_process+0x10>
		*entry = (cmd->u.entry[idx].syntax != NULL) ?
 80083f0:	f06f 0213 	mvn.w	r2, #19
 80083f4:	436a      	muls	r2, r5
 80083f6:	eb03 0802 	add.w	r8, r3, r2
				&cmd->u.entry[idx] : NULL;
 80083fa:	589b      	ldr	r3, [r3, r2]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0ea      	beq.n	80083d6 <shell_wildcard_process+0x3e>
		if (fnmatch(pattern, p_static_entry->syntax, 0) == 0) {
 8008400:	2200      	movs	r2, #0
 8008402:	f8d8 1000 	ldr.w	r1, [r8]
 8008406:	4630      	mov	r0, r6
 8008408:	f00b fbce 	bl	8013ba8 <fnmatch>
 800840c:	bb80      	cbnz	r0, 8008470 <shell_wildcard_process+0xd8>
			ret_val = command_add(shell->ctx->temp_buff,
 800840e:	f8d8 9000 	ldr.w	r9, [r8]
 8008412:	f8da 7008 	ldr.w	r7, [sl, #8]
	return str == NULL ? 0U : (u16_t)strlen(str);
 8008416:	f1b9 0f00 	cmp.w	r9, #0
 800841a:	d02c      	beq.n	8008476 <shell_wildcard_process+0xde>
 800841c:	4648      	mov	r0, r9
 800841e:	f7fc fae7 	bl	80049f0 <strlen>
 8008422:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
 8008424:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008426:	3301      	adds	r3, #1
 8008428:	4423      	add	r3, r4
 800842a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800842e:	dc24      	bgt.n	800847a <shell_wildcard_process+0xe2>
	completion_addr = strstr(buff, pattern);
 8008430:	4631      	mov	r1, r6
 8008432:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8008436:	f7fc fb1c 	bl	8004a72 <strstr>
	if (!completion_addr) {
 800843a:	4680      	mov	r8, r0
 800843c:	b328      	cbz	r0, 800848a <shell_wildcard_process+0xf2>
 800843e:	f7fc fad7 	bl	80049f0 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
 8008442:	b282      	uxth	r2, r0
 8008444:	1c60      	adds	r0, r4, #1
__ssp_bos_icheck3(memmove, void *, const void *)
 8008446:	3201      	adds	r2, #1
 8008448:	4641      	mov	r1, r8
 800844a:	4440      	add	r0, r8
 800844c:	f7fc fa75 	bl	800493a <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8008450:	4622      	mov	r2, r4
 8008452:	4649      	mov	r1, r9
 8008454:	4640      	mov	r0, r8
 8008456:	f7fc fa62 	bl	800491e <memcpy>
	completion_addr[cmd_len] = ' ';
 800845a:	2320      	movs	r3, #32
 800845c:	f808 3004 	strb.w	r3, [r8, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
 8008460:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008462:	441c      	add	r4, r3
			cnt++;
 8008464:	9b01      	ldr	r3, [sp, #4]
	*buff_len += cmd_len + 1; /* + 1 for space */
 8008466:	3401      	adds	r4, #1
			cnt++;
 8008468:	3301      	adds	r3, #1
	*buff_len += cmd_len + 1; /* + 1 for space */
 800846a:	86fc      	strh	r4, [r7, #54]	; 0x36
			cnt++;
 800846c:	9301      	str	r3, [sp, #4]
			ret_val = command_add(shell->ctx->temp_buff,
 800846e:	2400      	movs	r4, #0
	} while (cmd_idx);
 8008470:	3d01      	subs	r5, #1
 8008472:	d1a5      	bne.n	80083c0 <shell_wildcard_process+0x28>
 8008474:	e7af      	b.n	80083d6 <shell_wildcard_process+0x3e>
 8008476:	464c      	mov	r4, r9
 8008478:	e7d4      	b.n	8008424 <shell_wildcard_process+0x8c>
				shell_internal_fprintf(shell,
 800847a:	4633      	mov	r3, r6
 800847c:	4a05      	ldr	r2, [pc, #20]	; (8008494 <shell_wildcard_process+0xfc>)
 800847e:	2104      	movs	r1, #4
 8008480:	4650      	mov	r0, sl
 8008482:	f00c f967 	bl	8014754 <shell_internal_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
 8008486:	2401      	movs	r4, #1
 8008488:	e7a5      	b.n	80083d6 <shell_wildcard_process+0x3e>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
 800848a:	2402      	movs	r4, #2
 800848c:	e7a3      	b.n	80083d6 <shell_wildcard_process+0x3e>
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
 800848e:	f10d 080c 	add.w	r8, sp, #12
 8008492:	e7b5      	b.n	8008400 <shell_wildcard_process+0x68>
 8008494:	0801b247 	.word	0x0801b247

08008498 <parse_option>:
}

static int parse_option(u8_t *data, u16_t offset, u16_t *pos,
			u16_t max_len, u16_t *opt_delta, u16_t *opt_len,
			struct coap_option *option)
{
 8008498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max_len - offset < 1) {
 800849c:	1a5f      	subs	r7, r3, r1
{
 800849e:	b086      	sub	sp, #24
	if (max_len - offset < 1) {
 80084a0:	2f00      	cmp	r7, #0
{
 80084a2:	4681      	mov	r9, r0
 80084a4:	4616      	mov	r6, r2
 80084a6:	461d      	mov	r5, r3
 80084a8:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
 80084ac:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	if (max_len - offset < 1) {
 80084b0:	dd13      	ble.n	80084da <parse_option+0x42>
	*value = data[offset++];
 80084b2:	f101 0c01 	add.w	ip, r1, #1
 80084b6:	fa1f fc8c 	uxth.w	ip, ip
 80084ba:	5c47      	ldrb	r7, [r0, r1]
	*pos = offset;
 80084bc:	f8a2 c000 	strh.w	ip, [r2]
	u16_t len;
	u8_t opt;
	int r;

	r = read_u8(data, offset, pos, max_len, &opt);
	if (r < 0) {
 80084c0:	ebb3 010c 	subs.w	r1, r3, ip
 80084c4:	d442      	bmi.n	800854c <parse_option+0xb4>
		return r;
	}

	*opt_len += 1U;
 80084c6:	f8b4 c000 	ldrh.w	ip, [r4]

	/* This indicates that options have ended */
	if (opt == COAP_MARKER) {
 80084ca:	2fff      	cmp	r7, #255	; 0xff
	*opt_len += 1U;
 80084cc:	f10c 0c01 	add.w	ip, ip, #1
 80084d0:	f8a4 c000 	strh.w	ip, [r4]
	if (opt == COAP_MARKER) {
 80084d4:	d104      	bne.n	80084e0 <parse_option+0x48>
		/* packet w/ marker but no payload is malformed */
		return r > 0 ? 0 : -EINVAL;
 80084d6:	2900      	cmp	r1, #0
 80084d8:	d137      	bne.n	800854a <parse_option+0xb2>
		 * CONFIG_COAP_EXTENDED_OPTIONS_LEN_VALUE=<size>
		 */
		if (len > sizeof(option->value)) {
			NET_ERR("%u is > sizeof(coap_option->value)(%zu)!",
				len, sizeof(option->value));
			return -EINVAL;
 80084da:	f06f 0115 	mvn.w	r1, #21
 80084de:	e035      	b.n	800854c <parse_option+0xb4>
	return (opt & 0xF0) >> 4;
 80084e0:	ea4f 1c17 	mov.w	ip, r7, lsr #4
	delta = option_header_get_delta(opt);
 80084e4:	fa1f fe8c 	uxth.w	lr, ip
	len = option_header_get_len(opt);
 80084e8:	f007 070f 	and.w	r7, r7, #15
	delta = option_header_get_delta(opt);
 80084ec:	f8ad e014 	strh.w	lr, [sp, #20]
	len = option_header_get_len(opt);
 80084f0:	f8ad 7016 	strh.w	r7, [sp, #22]
	if (r == 0 && delta > COAP_OPTION_NO_EXT) {
 80084f4:	bb71      	cbnz	r1, 8008554 <parse_option+0xbc>
 80084f6:	f1bc 0f0c 	cmp.w	ip, #12
 80084fa:	d8ee      	bhi.n	80084da <parse_option+0x42>
	if (len > COAP_OPTION_NO_EXT) {
 80084fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8008500:	2b0c      	cmp	r3, #12
 8008502:	d913      	bls.n	800852c <parse_option+0x94>
		r = decode_delta(data, *pos, pos, max_len,
 8008504:	f10d 0212 	add.w	r2, sp, #18
 8008508:	9202      	str	r2, [sp, #8]
 800850a:	f10d 0216 	add.w	r2, sp, #22
 800850e:	e9cd 3200 	strd	r3, r2, [sp]
 8008512:	8831      	ldrh	r1, [r6, #0]
 8008514:	462b      	mov	r3, r5
 8008516:	4632      	mov	r2, r6
 8008518:	4648      	mov	r0, r9
 800851a:	f00c fc69 	bl	8014df0 <decode_delta>
		if (r < 0) {
 800851e:	1e01      	subs	r1, r0, #0
 8008520:	dbdb      	blt.n	80084da <parse_option+0x42>
		*opt_len += hdr_len;
 8008522:	8823      	ldrh	r3, [r4, #0]
 8008524:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8008528:	4413      	add	r3, r2
 800852a:	8023      	strh	r3, [r4, #0]
	*opt_delta += delta;
 800852c:	f8ba 3000 	ldrh.w	r3, [sl]
 8008530:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	*opt_len += len;
 8008534:	f8bd 7016 	ldrh.w	r7, [sp, #22]
	*opt_delta += delta;
 8008538:	4413      	add	r3, r2
 800853a:	f8aa 3000 	strh.w	r3, [sl]
	*opt_len += len;
 800853e:	8823      	ldrh	r3, [r4, #0]
 8008540:	443b      	add	r3, r7
 8008542:	8023      	strh	r3, [r4, #0]
	if (r == 0) {
 8008544:	b9f9      	cbnz	r1, 8008586 <parse_option+0xee>
		if (len == 0U) {
 8008546:	2f00      	cmp	r7, #0
 8008548:	d1c7      	bne.n	80084da <parse_option+0x42>
			return r;
 800854a:	2100      	movs	r1, #0
		*pos += len;
		r = max_len - *pos;
	}

	return r;
}
 800854c:	4608      	mov	r0, r1
 800854e:	b006      	add	sp, #24
 8008550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (delta > COAP_OPTION_NO_EXT) {
 8008554:	f1bc 0f0c 	cmp.w	ip, #12
 8008558:	d9d0      	bls.n	80084fc <parse_option+0x64>
		r = decode_delta(data, *pos, pos, max_len,
 800855a:	f10d 0112 	add.w	r1, sp, #18
 800855e:	9102      	str	r1, [sp, #8]
 8008560:	a905      	add	r1, sp, #20
 8008562:	e9cd e100 	strd	lr, r1, [sp]
 8008566:	8811      	ldrh	r1, [r2, #0]
 8008568:	f00c fc42 	bl	8014df0 <decode_delta>
		if ((r < 0) || (r == 0 && len > COAP_OPTION_NO_EXT)) {
 800856c:	1e01      	subs	r1, r0, #0
 800856e:	dbb4      	blt.n	80084da <parse_option+0x42>
 8008570:	d103      	bne.n	800857a <parse_option+0xe2>
 8008572:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8008576:	2b0c      	cmp	r3, #12
 8008578:	d8af      	bhi.n	80084da <parse_option+0x42>
		*opt_len += hdr_len;
 800857a:	8823      	ldrh	r3, [r4, #0]
 800857c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8008580:	4413      	add	r3, r2
 8008582:	8023      	strh	r3, [r4, #0]
 8008584:	e7ba      	b.n	80084fc <parse_option+0x64>
	if (option) {
 8008586:	f1b8 0f00 	cmp.w	r8, #0
 800858a:	d02d      	beq.n	80085e8 <parse_option+0x150>
		if (len > sizeof(option->value)) {
 800858c:	2f0c      	cmp	r7, #12
 800858e:	d914      	bls.n	80085ba <parse_option+0x122>
			NET_ERR("%u is > sizeof(coap_option->value)(%zu)!",
 8008590:	4b18      	ldr	r3, [pc, #96]	; (80085f4 <parse_option+0x15c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	075b      	lsls	r3, r3, #29
 8008596:	d0a0      	beq.n	80084da <parse_option+0x42>
 8008598:	2201      	movs	r2, #1
 800859a:	f04f 0300 	mov.w	r3, #0
 800859e:	f362 0307 	bfi	r3, r2, #0, #8
 80085a2:	4915      	ldr	r1, [pc, #84]	; (80085f8 <parse_option+0x160>)
 80085a4:	4a15      	ldr	r2, [pc, #84]	; (80085fc <parse_option+0x164>)
 80085a6:	4816      	ldr	r0, [pc, #88]	; (8008600 <parse_option+0x168>)
 80085a8:	1a52      	subs	r2, r2, r1
 80085aa:	08d2      	lsrs	r2, r2, #3
 80085ac:	f362 138f 	bfi	r3, r2, #6, #10
 80085b0:	4639      	mov	r1, r7
 80085b2:	220c      	movs	r2, #12
 80085b4:	f00b fb46 	bl	8013c44 <log_2>
 80085b8:	e78f      	b.n	80084da <parse_option+0x42>
		option->delta = *opt_delta;
 80085ba:	f8ba 3000 	ldrh.w	r3, [sl]
 80085be:	f8a8 3000 	strh.w	r3, [r8]
		option->len = len;
 80085c2:	f888 7002 	strb.w	r7, [r8, #2]
		r = read(data, *pos, pos, max_len, len, &option->value[0]);
 80085c6:	8834      	ldrh	r4, [r6, #0]
	if (max_len - offset < len) {
 80085c8:	1b2b      	subs	r3, r5, r4
 80085ca:	42bb      	cmp	r3, r7
		r = read(data, *pos, pos, max_len, len, &option->value[0]);
 80085cc:	f108 0003 	add.w	r0, r8, #3
	if (max_len - offset < len) {
 80085d0:	db83      	blt.n	80084da <parse_option+0x42>
 80085d2:	eb09 0104 	add.w	r1, r9, r4
 80085d6:	463a      	mov	r2, r7
 80085d8:	f7fc f9a1 	bl	800491e <memcpy>
	offset += len;
 80085dc:	1939      	adds	r1, r7, r4
 80085de:	b289      	uxth	r1, r1
	*pos = offset;
 80085e0:	8031      	strh	r1, [r6, #0]
		if (r < 0) {
 80085e2:	1a69      	subs	r1, r5, r1
 80085e4:	d5b2      	bpl.n	800854c <parse_option+0xb4>
 80085e6:	e778      	b.n	80084da <parse_option+0x42>
		*pos += len;
 80085e8:	8831      	ldrh	r1, [r6, #0]
 80085ea:	4439      	add	r1, r7
 80085ec:	b289      	uxth	r1, r1
 80085ee:	8031      	strh	r1, [r6, #0]
		r = max_len - *pos;
 80085f0:	1a69      	subs	r1, r5, r1
 80085f2:	e7ab      	b.n	800854c <parse_option+0xb4>
 80085f4:	20008ff0 	.word	0x20008ff0
 80085f8:	08019248 	.word	0x08019248
 80085fc:	08019288 	.word	0x08019288
 8008600:	0801b2be 	.word	0x0801b2be

08008604 <coap_packet_append_option>:
{
 8008604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008608:	460f      	mov	r7, r1
 800860a:	4692      	mov	sl, r2
 800860c:	461c      	mov	r4, r3
	if (!cpkt) {
 800860e:	4606      	mov	r6, r0
 8008610:	b918      	cbnz	r0, 800861a <coap_packet_append_option+0x16>
 8008612:	f06f 0015 	mvn.w	r0, #21
}
 8008616:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (len && !value) {
 800861a:	b10b      	cbz	r3, 8008620 <coap_packet_append_option+0x1c>
 800861c:	2a00      	cmp	r2, #0
 800861e:	d0f8      	beq.n	8008612 <coap_packet_append_option+0xe>
	if (code < cpkt->delta) {
 8008620:	89b3      	ldrh	r3, [r6, #12]
 8008622:	42bb      	cmp	r3, r7
 8008624:	d912      	bls.n	800864c <coap_packet_append_option+0x48>
		NET_ERR("Options should be in ascending order");
 8008626:	4b49      	ldr	r3, [pc, #292]	; (800874c <coap_packet_append_option+0x148>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	0758      	lsls	r0, r3, #29
 800862c:	d0f1      	beq.n	8008612 <coap_packet_append_option+0xe>
 800862e:	2301      	movs	r3, #1
 8008630:	f04f 0100 	mov.w	r1, #0
 8008634:	f363 0107 	bfi	r1, r3, #0, #8
 8008638:	4a45      	ldr	r2, [pc, #276]	; (8008750 <coap_packet_append_option+0x14c>)
 800863a:	4b46      	ldr	r3, [pc, #280]	; (8008754 <coap_packet_append_option+0x150>)
 800863c:	4846      	ldr	r0, [pc, #280]	; (8008758 <coap_packet_append_option+0x154>)
 800863e:	1a9b      	subs	r3, r3, r2
 8008640:	08db      	lsrs	r3, r3, #3
 8008642:	f363 118f 	bfi	r1, r3, #6, #10
 8008646:	f00b fadc 	bl	8013c02 <log_0>
 800864a:	e7e2      	b.n	8008612 <coap_packet_append_option+0xe>
	if (cpkt->opt_len) {
 800864c:	8972      	ldrh	r2, [r6, #10]
 800864e:	b11a      	cbz	r2, 8008658 <coap_packet_append_option+0x54>
		code = (code == cpkt->delta) ? 0 : code - cpkt->delta;
 8008650:	42bb      	cmp	r3, r7
 8008652:	d022      	beq.n	800869a <coap_packet_append_option+0x96>
 8008654:	1aff      	subs	r7, r7, r3
 8008656:	b2bf      	uxth	r7, r7
	if (num < COAP_OPTION_EXT_13) {
 8008658:	2f0c      	cmp	r7, #12
 800865a:	d820      	bhi.n	800869e <coap_packet_append_option+0x9a>
		*ext = 0U;
 800865c:	f04f 0b00 	mov.w	fp, #0
		*opt = num;
 8008660:	b2fb      	uxtb	r3, r7
		return 0;
 8008662:	46d9      	mov	r9, fp
	if (num < COAP_OPTION_EXT_13) {
 8008664:	2c0c      	cmp	r4, #12
 8008666:	d830      	bhi.n	80086ca <coap_packet_append_option+0xc6>
		*ext = 0U;
 8008668:	2500      	movs	r5, #0
		*opt = num;
 800866a:	b2e1      	uxtb	r1, r4
		return 0;
 800866c:	46a8      	mov	r8, r5
	*opt |= (len & 0xF);
 800866e:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
	res = append_u8(cpkt, opt);
 8008672:	b2c9      	uxtb	r1, r1
 8008674:	4630      	mov	r0, r6
 8008676:	f00c fb97 	bl	8014da8 <append_u8>
	if (!res) {
 800867a:	2800      	cmp	r0, #0
 800867c:	d0c9      	beq.n	8008612 <coap_packet_append_option+0xe>
	if (delta_size == 1U) {
 800867e:	f1b9 0f01 	cmp.w	r9, #1
 8008682:	d134      	bne.n	80086ee <coap_packet_append_option+0xea>
		res = append_u8(cpkt, (u8_t)delta_ext);
 8008684:	fa5f f18b 	uxtb.w	r1, fp
 8008688:	4630      	mov	r0, r6
 800868a:	f00c fb8d 	bl	8014da8 <append_u8>
		if (!res) {
 800868e:	2800      	cmp	r0, #0
 8008690:	d0bf      	beq.n	8008612 <coap_packet_append_option+0xe>
	if (len_size == 1U) {
 8008692:	f1b8 0f01 	cmp.w	r8, #1
 8008696:	d13d      	bne.n	8008714 <coap_packet_append_option+0x110>
 8008698:	e035      	b.n	8008706 <coap_packet_append_option+0x102>
		code = (code == cpkt->delta) ? 0 : code - cpkt->delta;
 800869a:	2700      	movs	r7, #0
 800869c:	e7de      	b.n	800865c <coap_packet_append_option+0x58>
	} else if (num < COAP_OPTION_EXT_269) {
 800869e:	f5b7 7f86 	cmp.w	r7, #268	; 0x10c
 80086a2:	fa0f fb87 	sxth.w	fp, r7
 80086a6:	d807      	bhi.n	80086b8 <coap_packet_append_option+0xb4>
		*ext = num - COAP_OPTION_EXT_13;
 80086a8:	f1ab 0b0d 	sub.w	fp, fp, #13
 80086ac:	fa1f fb8b 	uxth.w	fp, fp
		*opt = COAP_OPTION_EXT_13;
 80086b0:	230d      	movs	r3, #13
		return 1;
 80086b2:	f04f 0901 	mov.w	r9, #1
 80086b6:	e7d5      	b.n	8008664 <coap_packet_append_option+0x60>
	*ext = num - COAP_OPTION_EXT_269;
 80086b8:	f46f 7186 	mvn.w	r1, #268	; 0x10c
 80086bc:	448b      	add	fp, r1
 80086be:	fa1f fb8b 	uxth.w	fp, fp
	*opt = COAP_OPTION_EXT_14;
 80086c2:	230e      	movs	r3, #14
	return 2;
 80086c4:	f04f 0902 	mov.w	r9, #2
 80086c8:	e7cc      	b.n	8008664 <coap_packet_append_option+0x60>
	} else if (num < COAP_OPTION_EXT_269) {
 80086ca:	f5b4 7f86 	cmp.w	r4, #268	; 0x10c
 80086ce:	b225      	sxth	r5, r4
 80086d0:	d805      	bhi.n	80086de <coap_packet_append_option+0xda>
		*ext = num - COAP_OPTION_EXT_13;
 80086d2:	3d0d      	subs	r5, #13
 80086d4:	b2ad      	uxth	r5, r5
		*opt = COAP_OPTION_EXT_13;
 80086d6:	210d      	movs	r1, #13
		return 1;
 80086d8:	f04f 0801 	mov.w	r8, #1
 80086dc:	e7c7      	b.n	800866e <coap_packet_append_option+0x6a>
	*ext = num - COAP_OPTION_EXT_269;
 80086de:	f46f 7286 	mvn.w	r2, #268	; 0x10c
 80086e2:	4415      	add	r5, r2
 80086e4:	b2ad      	uxth	r5, r5
	*opt = COAP_OPTION_EXT_14;
 80086e6:	210e      	movs	r1, #14
	return 2;
 80086e8:	f04f 0802 	mov.w	r8, #2
 80086ec:	e7bf      	b.n	800866e <coap_packet_append_option+0x6a>
	} else if (delta_size == 2U) {
 80086ee:	f1b9 0f02 	cmp.w	r9, #2
 80086f2:	d1ce      	bne.n	8008692 <coap_packet_append_option+0x8e>
		res = append_be16(cpkt, delta_ext);
 80086f4:	4659      	mov	r1, fp
 80086f6:	4630      	mov	r0, r6
 80086f8:	f00c fb65 	bl	8014dc6 <append_be16>
		if (!res) {
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d088      	beq.n	8008612 <coap_packet_append_option+0xe>
	if (len_size == 1U) {
 8008700:	f1b8 0f01 	cmp.w	r8, #1
 8008704:	d112      	bne.n	800872c <coap_packet_append_option+0x128>
		res = append_u8(cpkt, (u8_t)len_ext);
 8008706:	b2e9      	uxtb	r1, r5
 8008708:	4630      	mov	r0, r6
 800870a:	f00c fb4d 	bl	8014da8 <append_u8>
		if (!res) {
 800870e:	2800      	cmp	r0, #0
 8008710:	f43f af7f 	beq.w	8008612 <coap_packet_append_option+0xe>
	if (len && value) {
 8008714:	b97c      	cbnz	r4, 8008736 <coap_packet_append_option+0x132>
	return  (1 + delta_size + len_size + len);
 8008716:	3401      	adds	r4, #1
	cpkt->opt_len += r;
 8008718:	8973      	ldrh	r3, [r6, #10]
	return  (1 + delta_size + len_size + len);
 800871a:	444c      	add	r4, r9
 800871c:	4444      	add	r4, r8
	cpkt->opt_len += r;
 800871e:	441c      	add	r4, r3
	cpkt->delta += code;
 8008720:	89b3      	ldrh	r3, [r6, #12]
	cpkt->opt_len += r;
 8008722:	8174      	strh	r4, [r6, #10]
	cpkt->delta += code;
 8008724:	441f      	add	r7, r3
 8008726:	81b7      	strh	r7, [r6, #12]
	return 0;
 8008728:	2000      	movs	r0, #0
 800872a:	e774      	b.n	8008616 <coap_packet_append_option+0x12>
		res = append_be16(cpkt, len_ext);
 800872c:	4629      	mov	r1, r5
 800872e:	4630      	mov	r0, r6
 8008730:	f00c fb49 	bl	8014dc6 <append_be16>
 8008734:	e7eb      	b.n	800870e <coap_packet_append_option+0x10a>
	if (len && value) {
 8008736:	f1ba 0f00 	cmp.w	sl, #0
 800873a:	d0ec      	beq.n	8008716 <coap_packet_append_option+0x112>
	if (!cpkt || !data) {
 800873c:	4622      	mov	r2, r4
 800873e:	4651      	mov	r1, sl
 8008740:	4630      	mov	r0, r6
 8008742:	f00c fb87 	bl	8014e54 <append.part.8>
		if (!res) {
 8008746:	2800      	cmp	r0, #0
 8008748:	d1e5      	bne.n	8008716 <coap_packet_append_option+0x112>
 800874a:	e762      	b.n	8008612 <coap_packet_append_option+0xe>
 800874c:	20008ff0 	.word	0x20008ff0
 8008750:	08019248 	.word	0x08019248
 8008754:	08019288 	.word	0x08019288
 8008758:	0801b299 	.word	0x0801b299

0800875c <coap_next_token>:
{
 800875c:	b510      	push	{r4, lr}
	rand[0] = sys_rand32_get();
 800875e:	f007 fd5b 	bl	8010218 <sys_rand32_get>
 8008762:	4c03      	ldr	r4, [pc, #12]	; (8008770 <coap_next_token+0x14>)
 8008764:	6020      	str	r0, [r4, #0]
	rand[1] = sys_rand32_get();
 8008766:	f007 fd57 	bl	8010218 <sys_rand32_get>
 800876a:	6060      	str	r0, [r4, #4]
}
 800876c:	4620      	mov	r0, r4
 800876e:	bd10      	pop	{r4, pc}
 8008770:	200004c4 	.word	0x200004c4

08008774 <net_coap_init>:
 * use and should therefore not be exposed to applications.
 *
 * @return N/A
 */
void net_coap_init(void)
{
 8008774:	b508      	push	{r3, lr}
	/* Initialize message_id to a random number */
	message_id = (u16_t)sys_rand32_get();
 8008776:	f007 fd4f 	bl	8010218 <sys_rand32_get>
 800877a:	4b01      	ldr	r3, [pc, #4]	; (8008780 <net_coap_init+0xc>)
 800877c:	8018      	strh	r0, [r3, #0]
}
 800877e:	bd08      	pop	{r3, pc}
 8008780:	200019a8 	.word	0x200019a8

08008784 <coap_next_id>:

u16_t coap_next_id(void)
{
	return message_id++;
 8008784:	4b02      	ldr	r3, [pc, #8]	; (8008790 <coap_next_id+0xc>)
 8008786:	8818      	ldrh	r0, [r3, #0]
 8008788:	1c42      	adds	r2, r0, #1
 800878a:	801a      	strh	r2, [r3, #0]
}
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	200019a8 	.word	0x200019a8

08008794 <zsock_accepted_cb>:
#include <syscalls/zsock_shutdown_mrsh.c>
#endif /* CONFIG_USERSPACE */

static void zsock_accepted_cb(struct net_context *new_ctx,
			      struct sockaddr *addr, socklen_t addrlen,
			      int status, void *user_data) {
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	9d04      	ldr	r5, [sp, #16]
 8008798:	4604      	mov	r4, r0
	struct net_context *parent = user_data;

	NET_DBG("parent=%p, ctx=%p, st=%d", parent, new_ctx, status);

	if (status == 0) {
 800879a:	461a      	mov	r2, r3
 800879c:	b96b      	cbnz	r3, 80087ba <zsock_accepted_cb+0x26>
		/* This just installs a callback, so cannot fail. */
		(void)net_context_recv(new_ctx, zsock_received_cb, K_NO_WAIT,
 800879e:	4907      	ldr	r1, [pc, #28]	; (80087bc <zsock_accepted_cb+0x28>)
 80087a0:	f004 f81e 	bl	800c7e0 <net_context_recv>
	z_impl_k_queue_init(queue);
 80087a4:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80087a8:	f00f ff6f 	bl	801868a <z_impl_k_queue_init>
				       NULL);
		k_fifo_init(&new_ctx->recv_q);

		k_fifo_put(&parent->accept_q, new_ctx);
 80087ac:	4621      	mov	r1, r4
 80087ae:	f105 006c 	add.w	r0, r5, #108	; 0x6c
	}
}
 80087b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_fifo_put(&parent->accept_q, new_ctx);
 80087b6:	f00f bf85 	b.w	80186c4 <k_queue_append>
}
 80087ba:	bd38      	pop	{r3, r4, r5, pc}
 80087bc:	0801505d 	.word	0x0801505d

080087c0 <zsock_socket_internal>:
{
 80087c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087c2:	4607      	mov	r7, r0
 80087c4:	460e      	mov	r6, r1
 80087c6:	4614      	mov	r4, r2
	int fd = z_reserve_fd();
 80087c8:	f7fd f86c 	bl	80058a4 <z_reserve_fd>
	if (fd < 0) {
 80087cc:	1e05      	subs	r5, r0, #0
 80087ce:	db17      	blt.n	8008800 <zsock_socket_internal+0x40>
	if (proto == 0) {
 80087d0:	b93c      	cbnz	r4, 80087e2 <zsock_socket_internal+0x22>
		if (family == AF_INET || family == AF_INET6) {
 80087d2:	1e7b      	subs	r3, r7, #1
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d804      	bhi.n	80087e2 <zsock_socket_internal+0x22>
			if (type == SOCK_DGRAM) {
 80087d8:	2e02      	cmp	r6, #2
 80087da:	d014      	beq.n	8008806 <zsock_socket_internal+0x46>
			} else if (type == SOCK_STREAM) {
 80087dc:	2e01      	cmp	r6, #1
				proto = IPPROTO_TCP;
 80087de:	bf08      	it	eq
 80087e0:	2406      	moveq	r4, #6
	res = net_context_get(family, type, proto, &ctx);
 80087e2:	b2f1      	uxtb	r1, r6
 80087e4:	ab01      	add	r3, sp, #4
 80087e6:	b2a2      	uxth	r2, r4
 80087e8:	b2b8      	uxth	r0, r7
 80087ea:	f003 fe91 	bl	800c510 <net_context_get>
	if (res < 0) {
 80087ee:	1e06      	subs	r6, r0, #0
 80087f0:	da0b      	bge.n	800880a <zsock_socket_internal+0x4a>
		z_free_fd(fd);
 80087f2:	4628      	mov	r0, r5
 80087f4:	f7fd f882 	bl	80058fc <z_free_fd>
		errno = -res;
 80087f8:	f00d f888 	bl	801590c <__errno>
 80087fc:	4276      	negs	r6, r6
 80087fe:	6006      	str	r6, [r0, #0]
		return -1;
 8008800:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008804:	e012      	b.n	800882c <zsock_socket_internal+0x6c>
				proto = IPPROTO_UDP;
 8008806:	2411      	movs	r4, #17
 8008808:	e7eb      	b.n	80087e2 <zsock_socket_internal+0x22>
	ctx->user_data = NULL;
 800880a:	9801      	ldr	r0, [sp, #4]
 800880c:	2300      	movs	r3, #0
 800880e:	6003      	str	r3, [r0, #0]
	ctx->socket_data = NULL;
 8008810:	6683      	str	r3, [r0, #104]	; 0x68
 8008812:	306c      	adds	r0, #108	; 0x6c
 8008814:	f00f ff39 	bl	801868a <z_impl_k_queue_init>
	if (proto == IPPROTO_TCP) {
 8008818:	2c06      	cmp	r4, #6
 800881a:	d102      	bne.n	8008822 <zsock_socket_internal+0x62>
		net_context_ref(ctx);
 800881c:	9801      	ldr	r0, [sp, #4]
 800881e:	f00d fd6d 	bl	80162fc <net_context_ref>
	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
 8008822:	4a04      	ldr	r2, [pc, #16]	; (8008834 <zsock_socket_internal+0x74>)
 8008824:	9901      	ldr	r1, [sp, #4]
 8008826:	4628      	mov	r0, r5
 8008828:	f7fd f85e 	bl	80058e8 <z_finalize_fd>
}
 800882c:	4628      	mov	r0, r5
 800882e:	b003      	add	sp, #12
 8008830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008832:	bf00      	nop
 8008834:	08019af0 	.word	0x08019af0

08008838 <z_impl_zsock_socket>:
{
 8008838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
 800883c:	4c10      	ldr	r4, [pc, #64]	; (8008880 <z_impl_zsock_socket+0x48>)
 800883e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8008884 <z_impl_zsock_socket+0x4c>
{
 8008842:	4605      	mov	r5, r0
 8008844:	460e      	mov	r6, r1
 8008846:	4617      	mov	r7, r2
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
 8008848:	4544      	cmp	r4, r8
 800884a:	d306      	bcc.n	800885a <z_impl_zsock_socket+0x22>
	return zsock_socket_internal(family, type, proto);
 800884c:	463a      	mov	r2, r7
 800884e:	4631      	mov	r1, r6
 8008850:	4628      	mov	r0, r5
}
 8008852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return zsock_socket_internal(family, type, proto);
 8008856:	f7ff bfb3 	b.w	80087c0 <zsock_socket_internal>
		if (sock_family->family != family &&
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	42ab      	cmp	r3, r5
 800885e:	d000      	beq.n	8008862 <z_impl_zsock_socket+0x2a>
 8008860:	b963      	cbnz	r3, 800887c <z_impl_zsock_socket+0x44>
		if (!sock_family->is_supported(family, type, proto)) {
 8008862:	6863      	ldr	r3, [r4, #4]
 8008864:	463a      	mov	r2, r7
 8008866:	4631      	mov	r1, r6
 8008868:	4628      	mov	r0, r5
 800886a:	4798      	blx	r3
 800886c:	b130      	cbz	r0, 800887c <z_impl_zsock_socket+0x44>
		return sock_family->handler(family, type, proto);
 800886e:	68a3      	ldr	r3, [r4, #8]
 8008870:	463a      	mov	r2, r7
 8008872:	4631      	mov	r1, r6
 8008874:	4628      	mov	r0, r5
}
 8008876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
 800887a:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
 800887c:	340c      	adds	r4, #12
 800887e:	e7e3      	b.n	8008848 <z_impl_zsock_socket+0x10>
 8008880:	08019248 	.word	0x08019248
 8008884:	08019248 	.word	0x08019248

08008888 <zsock_bind_ctx>:
	k_fifo_put(&ctx->recv_q, pkt);
}

int zsock_bind_ctx(struct net_context *ctx, const struct sockaddr *addr,
		   socklen_t addrlen)
{
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4604      	mov	r4, r0
	SET_ERRNO(net_context_bind(ctx, addr, addrlen));
 800888c:	f003 ff1e 	bl	800c6cc <net_context_bind>
 8008890:	1e05      	subs	r5, r0, #0
 8008892:	da06      	bge.n	80088a2 <zsock_bind_ctx+0x1a>
 8008894:	f00d f83a 	bl	801590c <__errno>
 8008898:	426d      	negs	r5, r5
 800889a:	6005      	str	r5, [r0, #0]
	/* For DGRAM socket, we expect to receive packets after call to
	 * bind(), but for STREAM socket, next expected operation is
	 * listen(), which doesn't work if recv callback is set.
	 */
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
 800889c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088a0:	e006      	b.n	80088b0 <zsock_bind_ctx+0x28>
static inline
enum net_sock_type net_context_get_type(struct net_context *context)
{
	NET_ASSERT(context);

	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
 80088a2:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 80088a6:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d001      	beq.n	80088b2 <zsock_bind_ctx+0x2a>
					   ctx->user_data));
	}

	return 0;
 80088ae:	2000      	movs	r0, #0
}
 80088b0:	bd38      	pop	{r3, r4, r5, pc}
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	4905      	ldr	r1, [pc, #20]	; (80088cc <zsock_bind_ctx+0x44>)
 80088b6:	4620      	mov	r0, r4
 80088b8:	2200      	movs	r2, #0
 80088ba:	f003 ff91 	bl	800c7e0 <net_context_recv>
 80088be:	1e04      	subs	r4, r0, #0
 80088c0:	daf5      	bge.n	80088ae <zsock_bind_ctx+0x26>
 80088c2:	f00d f823 	bl	801590c <__errno>
 80088c6:	4264      	negs	r4, r4
 80088c8:	6004      	str	r4, [r0, #0]
 80088ca:	e7e7      	b.n	800889c <zsock_bind_ctx+0x14>
 80088cc:	0801505d 	.word	0x0801505d

080088d0 <zsock_connect_ctx>:
#include <syscalls/zsock_bind_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_connect_ctx(struct net_context *ctx, const struct sockaddr *addr,
		      socklen_t addrlen)
{
 80088d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb,
					   K_NO_WAIT, ctx->user_data));
		return 0;
	}
#endif
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
 80088d2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80088d6:	2400      	movs	r4, #0
 80088d8:	e9cd 3400 	strd	r3, r4, [sp]
 80088dc:	4623      	mov	r3, r4
{
 80088de:	4606      	mov	r6, r0
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
 80088e0:	f00d fe6e 	bl	80165c0 <net_context_connect>
 80088e4:	1e05      	subs	r5, r0, #0
 80088e6:	da07      	bge.n	80088f8 <zsock_connect_ctx+0x28>
			      K_MSEC(CONFIG_NET_SOCKETS_CONNECT_TIMEOUT),
			      NULL));
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
 80088e8:	f00d f810 	bl	801590c <__errno>
 80088ec:	426d      	negs	r5, r5
 80088ee:	6005      	str	r5, [r0, #0]
 80088f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
				   ctx->user_data));

	return 0;
}
 80088f4:	b002      	add	sp, #8
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
 80088f8:	6833      	ldr	r3, [r6, #0]
 80088fa:	4904      	ldr	r1, [pc, #16]	; (800890c <zsock_connect_ctx+0x3c>)
 80088fc:	4622      	mov	r2, r4
 80088fe:	4630      	mov	r0, r6
 8008900:	f003 ff6e 	bl	800c7e0 <net_context_recv>
 8008904:	1e05      	subs	r5, r0, #0
 8008906:	dbef      	blt.n	80088e8 <zsock_connect_ctx+0x18>
	return 0;
 8008908:	4620      	mov	r0, r4
 800890a:	e7f3      	b.n	80088f4 <zsock_connect_ctx+0x24>
 800890c:	0801505d 	.word	0x0801505d

08008910 <zsock_listen_ctx>:
}
#include <syscalls/zsock_connect_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_listen_ctx(struct net_context *ctx, int backlog)
{
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4605      	mov	r5, r0
	SET_ERRNO(net_context_listen(ctx, backlog));
 8008914:	f00d fd55 	bl	80163c2 <net_context_listen>
 8008918:	1e04      	subs	r4, r0, #0
 800891a:	da06      	bge.n	800892a <zsock_listen_ctx+0x1a>
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
 800891c:	f00c fff6 	bl	801590c <__errno>
 8008920:	4264      	negs	r4, r4
 8008922:	6004      	str	r4, [r0, #0]
 8008924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

	return 0;
}
 8008928:	bd38      	pop	{r3, r4, r5, pc}
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
 800892a:	462b      	mov	r3, r5
 800892c:	2200      	movs	r2, #0
 800892e:	4904      	ldr	r1, [pc, #16]	; (8008940 <zsock_listen_ctx+0x30>)
 8008930:	4628      	mov	r0, r5
 8008932:	f00d feb1 	bl	8016698 <net_context_accept>
 8008936:	1e04      	subs	r4, r0, #0
 8008938:	dbf0      	blt.n	800891c <zsock_listen_ctx+0xc>
	return 0;
 800893a:	2000      	movs	r0, #0
 800893c:	e7f4      	b.n	8008928 <zsock_listen_ctx+0x18>
 800893e:	bf00      	nop
 8008940:	08008795 	.word	0x08008795

08008944 <zsock_accept_ctx>:
#include <syscalls/zsock_listen_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_accept_ctx(struct net_context *parent, struct sockaddr *addr,
		     socklen_t *addrlen)
{
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	4604      	mov	r4, r0
 8008948:	460f      	mov	r7, r1
 800894a:	4616      	mov	r6, r2
	s32_t timeout = K_FOREVER;
	struct net_context *ctx;
	struct net_pkt *last_pkt;
	int fd;

	fd = z_reserve_fd();
 800894c:	f7fc ffaa 	bl	80058a4 <z_reserve_fd>
	if (fd < 0) {
 8008950:	1e05      	subs	r5, r0, #0
 8008952:	db0e      	blt.n	8008972 <zsock_accept_ctx+0x2e>
		return -1;
	}

	if (sock_is_nonblock(parent)) {
 8008954:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8008956:	f081 0102 	eor.w	r1, r1, #2
 800895a:	f341 0140 	sbfx	r1, r1, #1, #1
	return z_impl_k_queue_get(queue, timeout);
 800895e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8008962:	f00f feb9 	bl	80186d8 <z_impl_k_queue_get>
		timeout = K_NO_WAIT;
	}

	ctx = k_fifo_get(&parent->accept_q, timeout);
	if (ctx == NULL) {
 8008966:	4604      	mov	r4, r0
 8008968:	b930      	cbnz	r0, 8008978 <zsock_accept_ctx+0x34>
		errno = EAGAIN;
 800896a:	f00c ffcf 	bl	801590c <__errno>
 800896e:	230b      	movs	r3, #11
		if (ctx->remote.sa_family == AF_INET) {
			*addrlen = sizeof(struct sockaddr_in);
		} else if (ctx->remote.sa_family == AF_INET6) {
			*addrlen = sizeof(struct sockaddr_in6);
		} else {
			errno = ENOTSUP;
 8008970:	6003      	str	r3, [r0, #0]
		return -1;
 8008972:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008976:	e030      	b.n	80089da <zsock_accept_ctx+0x96>
 */
__syscall void *k_queue_peek_tail(struct k_queue *queue);

static inline void *z_impl_k_queue_peek_tail(struct k_queue *queue)
{
	return z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
 8008978:	2100      	movs	r1, #0
 800897a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800897c:	f00f fe79 	bl	8018672 <z_queue_node_peek>
	if (last_pkt) {
 8008980:	b158      	cbz	r0, 800899a <zsock_accept_ctx+0x56>
}

#if defined(CONFIG_NET_SOCKETS)
static inline u8_t net_pkt_eof(struct net_pkt *pkt)
{
	return pkt->sent_or_eof;
 8008982:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
		if (net_pkt_eof(last_pkt)) {
 8008986:	0799      	lsls	r1, r3, #30
 8008988:	d507      	bpl.n	800899a <zsock_accept_ctx+0x56>
static inline void sock_set_flag(struct net_context *ctx, uintptr_t mask,
				 uintptr_t flag)
{
	uintptr_t val = POINTER_TO_UINT(ctx->socket_data);

	val = (val & ~mask) | flag;
 800898a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800898c:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
 8008990:	66a3      	str	r3, [r4, #104]	; 0x68
		errno = ECONNABORTED;
 8008992:	f00c ffbb 	bl	801590c <__errno>
 8008996:	2371      	movs	r3, #113	; 0x71
 8008998:	e7ea      	b.n	8008970 <zsock_accept_ctx+0x2c>
	if (net_context_is_closing(ctx)) {
 800899a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 800899e:	055a      	lsls	r2, r3, #21
 80089a0:	d4f7      	bmi.n	8008992 <zsock_accept_ctx+0x4e>
		context->flags &= ~NET_CONTEXT_ACCEPTING_SOCK;
 80089a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089a6:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
	if (addr != NULL && addrlen != NULL) {
 80089aa:	b177      	cbz	r7, 80089ca <zsock_accept_ctx+0x86>
 80089ac:	b16e      	cbz	r6, 80089ca <zsock_accept_ctx+0x86>
		int len = MIN(*addrlen, sizeof(ctx->remote));
 80089ae:	6832      	ldr	r2, [r6, #0]
 80089b0:	2a18      	cmp	r2, #24
 80089b2:	bf28      	it	cs
 80089b4:	2218      	movcs	r2, #24
 80089b6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80089ba:	4638      	mov	r0, r7
 80089bc:	f7fb ffaf 	bl	800491e <memcpy>
		if (ctx->remote.sa_family == AF_INET) {
 80089c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d10b      	bne.n	80089de <zsock_accept_ctx+0x9a>
			*addrlen = sizeof(struct sockaddr_in);
 80089c6:	2308      	movs	r3, #8
			*addrlen = sizeof(struct sockaddr_in6);
 80089c8:	6033      	str	r3, [r6, #0]
	 * connection, but it must not dispose of the context behind
	 * the application back. Likewise, when application "closes"
	 * context, it's not disposed of immediately - there's yet
	 * closing handshake for stack to perform.
	 */
	net_context_ref(ctx);
 80089ca:	4620      	mov	r0, r4
 80089cc:	f00d fc96 	bl	80162fc <net_context_ref>

	NET_DBG("accept: ctx=%p, fd=%d", ctx, fd);

	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
 80089d0:	4a07      	ldr	r2, [pc, #28]	; (80089f0 <zsock_accept_ctx+0xac>)
 80089d2:	4621      	mov	r1, r4
 80089d4:	4628      	mov	r0, r5
 80089d6:	f7fc ff87 	bl	80058e8 <z_finalize_fd>

	return fd;
}
 80089da:	4628      	mov	r0, r5
 80089dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (ctx->remote.sa_family == AF_INET6) {
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d101      	bne.n	80089e6 <zsock_accept_ctx+0xa2>
			*addrlen = sizeof(struct sockaddr_in6);
 80089e2:	2318      	movs	r3, #24
 80089e4:	e7f0      	b.n	80089c8 <zsock_accept_ctx+0x84>
			errno = ENOTSUP;
 80089e6:	f00c ff91 	bl	801590c <__errno>
 80089ea:	2386      	movs	r3, #134	; 0x86
 80089ec:	e7c0      	b.n	8008970 <zsock_accept_ctx+0x2c>
 80089ee:	bf00      	nop
 80089f0:	08019af0 	.word	0x08019af0

080089f4 <zsock_sendto_ctx>:
#endif /* CONFIG_USERSPACE */

ssize_t zsock_sendto_ctx(struct net_context *ctx, const void *buf, size_t len,
			 int flags,
			 const struct sockaddr *dest_addr, socklen_t addrlen)
{
 80089f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	s32_t timeout = K_FOREVER;
	int status;

	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
 80089f8:	065b      	lsls	r3, r3, #25
 80089fa:	bf58      	it	pl
 80089fc:	6e84      	ldrpl	r4, [r0, #104]	; 0x68
	}

	/* Register the callback before sending in order to receive the response
	 * from the peer.
	 */
	status = net_context_recv(ctx, zsock_received_cb,
 80089fe:	6803      	ldr	r3, [r0, #0]
{
 8008a00:	b085      	sub	sp, #20
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
 8008a02:	bf58      	it	pl
 8008a04:	f084 0402 	eorpl.w	r4, r4, #2
{
 8008a08:	4688      	mov	r8, r1
 8008a0a:	4691      	mov	r9, r2
	status = net_context_recv(ctx, zsock_received_cb,
 8008a0c:	491a      	ldr	r1, [pc, #104]	; (8008a78 <zsock_sendto_ctx+0x84>)
{
 8008a0e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	status = net_context_recv(ctx, zsock_received_cb,
 8008a10:	f04f 0200 	mov.w	r2, #0
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
 8008a14:	bf54      	ite	pl
 8008a16:	f344 0440 	sbfxpl	r4, r4, #1, #1
		timeout = K_NO_WAIT;
 8008a1a:	2400      	movmi	r4, #0
{
 8008a1c:	4605      	mov	r5, r0
	status = net_context_recv(ctx, zsock_received_cb,
 8008a1e:	f003 fedf 	bl	800c7e0 <net_context_recv>
				  K_NO_WAIT, ctx->user_data);
	if (status < 0) {
 8008a22:	1e07      	subs	r7, r0, #0
 8008a24:	da09      	bge.n	8008a3a <zsock_sendto_ctx+0x46>
		errno = -status;
 8008a26:	f00c ff71 	bl	801590c <__errno>
 8008a2a:	427f      	negs	r7, r7
 8008a2c:	6007      	str	r7, [r0, #0]
					  ctx->user_data);
	}

	if (status < 0) {
		errno = -status;
		return -1;
 8008a2e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	}

	return status;
}
 8008a32:	4620      	mov	r0, r4
 8008a34:	b005      	add	sp, #20
 8008a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (dest_addr) {
 8008a3a:	682b      	ldr	r3, [r5, #0]
 8008a3c:	b19e      	cbz	r6, 8008a66 <zsock_sendto_ctx+0x72>
		status = net_context_sendto(ctx, buf, len, dest_addr,
 8008a3e:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8008a42:	2300      	movs	r3, #0
 8008a44:	9301      	str	r3, [sp, #4]
 8008a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	464a      	mov	r2, r9
 8008a4c:	4633      	mov	r3, r6
 8008a4e:	4641      	mov	r1, r8
 8008a50:	4628      	mov	r0, r5
 8008a52:	f00d fe94 	bl	801677e <net_context_sendto>
	if (status < 0) {
 8008a56:	2800      	cmp	r0, #0
		status = net_context_send(ctx, buf, len, NULL, timeout,
 8008a58:	4604      	mov	r4, r0
	if (status < 0) {
 8008a5a:	daea      	bge.n	8008a32 <zsock_sendto_ctx+0x3e>
		errno = -status;
 8008a5c:	f00c ff56 	bl	801590c <__errno>
 8008a60:	4264      	negs	r4, r4
 8008a62:	6004      	str	r4, [r0, #0]
 8008a64:	e7e3      	b.n	8008a2e <zsock_sendto_ctx+0x3a>
		status = net_context_send(ctx, buf, len, NULL, timeout,
 8008a66:	e9cd 4300 	strd	r4, r3, [sp]
 8008a6a:	464a      	mov	r2, r9
 8008a6c:	4633      	mov	r3, r6
 8008a6e:	4641      	mov	r1, r8
 8008a70:	4628      	mov	r0, r5
 8008a72:	f00d fe38 	bl	80166e6 <net_context_send>
 8008a76:	e7ee      	b.n	8008a56 <zsock_sendto_ctx+0x62>
 8008a78:	0801505d 	.word	0x0801505d

08008a7c <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int timeout)
{
 8008a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a80:	b09d      	sub	sp, #116	; 0x74
 8008a82:	468b      	mov	fp, r1
 8008a84:	9003      	str	r0, [sp, #12]
 8008a86:	4616      	mov	r6, r2
	return z_impl_k_uptime_get();
 8008a88:	f010 f887 	bl	8018b9a <z_impl_k_uptime_get>

	if (timeout < 0) {
		timeout = K_FOREVER;
	}

	pev = poll_events;
 8008a8c:	f10d 0920 	add.w	r9, sp, #32
	for (pfd = fds, i = nfds; i--; pfd++) {
 8008a90:	9d03      	ldr	r5, [sp, #12]
 8008a92:	9004      	str	r0, [sp, #16]
	if (timeout < 0) {
 8008a94:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
	pev = poll_events;
 8008a98:	f8cd 9018 	str.w	r9, [sp, #24]
	for (pfd = fds, i = nfds; i--; pfd++) {
 8008a9c:	465c      	mov	r4, fp
		if (ctx == NULL) {
			/* Will set POLLNVAL in return loop */
			continue;
		}

		if (z_fdtable_call_ioctl(vtable, ctx, ZFD_IOCTL_POLL_PREPARE,
 8008a9e:	af06      	add	r7, sp, #24
	for (pfd = fds, i = nfds; i--; pfd++) {
 8008aa0:	b9e4      	cbnz	r4, 8008adc <z_impl_zsock_poll+0x60>
 8008aa2:	46b0      	mov	r8, r6

		pev = poll_events;
		for (pfd = fds, i = nfds; i--; pfd++) {
			struct net_context *ctx;

			pfd->revents = 0;
 8008aa4:	9405      	str	r4, [sp, #20]
		ret = k_poll(poll_events, pev - poll_events, remaining_time);
 8008aa6:	9906      	ldr	r1, [sp, #24]
 8008aa8:	4b3e      	ldr	r3, [pc, #248]	; (8008ba4 <z_impl_zsock_poll+0x128>)
 8008aaa:	eba1 0109 	sub.w	r1, r1, r9
 8008aae:	1089      	asrs	r1, r1, #2
 8008ab0:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
 8008ab2:	4642      	mov	r2, r8
 8008ab4:	4648      	mov	r0, r9
 8008ab6:	f00a fa43 	bl	8012f40 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
 8008aba:	f100 030b 	add.w	r3, r0, #11
 8008abe:	2b0b      	cmp	r3, #11
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	d806      	bhi.n	8008ad2 <z_impl_zsock_poll+0x56>
 8008ac4:	f640 0481 	movw	r4, #2177	; 0x881
 8008ac8:	40dc      	lsrs	r4, r3
 8008aca:	43e4      	mvns	r4, r4
 8008acc:	f014 0401 	ands.w	r4, r4, #1
 8008ad0:	d026      	beq.n	8008b20 <z_impl_zsock_poll+0xa4>
			errno = -ret;
 8008ad2:	f00c ff1b 	bl	801590c <__errno>
 8008ad6:	426d      	negs	r5, r5
 8008ad8:	6005      	str	r5, [r0, #0]
 8008ada:	e017      	b.n	8008b0c <z_impl_zsock_poll+0x90>
		if (pfd->fd < 0) {
 8008adc:	6828      	ldr	r0, [r5, #0]
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	db1b      	blt.n	8008b1a <z_impl_zsock_poll+0x9e>
		ctx = z_get_fd_obj_and_vtable(pfd->fd, &vtable);
 8008ae2:	a907      	add	r1, sp, #28
 8008ae4:	f7fc feca 	bl	800587c <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
 8008ae8:	4601      	mov	r1, r0
 8008aea:	b1b0      	cbz	r0, 8008b1a <z_impl_zsock_poll+0x9e>
		if (z_fdtable_call_ioctl(vtable, ctx, ZFD_IOCTL_POLL_PREPARE,
 8008aec:	ab1c      	add	r3, sp, #112	; 0x70
 8008aee:	e9cd 7300 	strd	r7, r3, [sp]
 8008af2:	f240 1203 	movw	r2, #259	; 0x103
 8008af6:	462b      	mov	r3, r5
 8008af8:	9807      	ldr	r0, [sp, #28]
 8008afa:	f00c fa83 	bl	8015004 <z_fdtable_call_ioctl>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	da0b      	bge.n	8008b1a <z_impl_zsock_poll+0x9e>
			if (errno == EALREADY) {
 8008b02:	f00c ff03 	bl	801590c <__errno>
 8008b06:	6803      	ldr	r3, [r0, #0]
 8008b08:	2b78      	cmp	r3, #120	; 0x78
 8008b0a:	d005      	beq.n	8008b18 <z_impl_zsock_poll+0x9c>
			return -1;
 8008b0c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			}
		}
	} while (retry);

	return ret;
}
 8008b10:	4628      	mov	r0, r5
 8008b12:	b01d      	add	sp, #116	; 0x74
 8008b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				timeout = K_NO_WAIT;
 8008b18:	2600      	movs	r6, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
 8008b1a:	3508      	adds	r5, #8
 8008b1c:	3c01      	subs	r4, #1
 8008b1e:	e7bf      	b.n	8008aa0 <z_impl_zsock_poll+0x24>
		for (pfd = fds, i = nfds; i--; pfd++) {
 8008b20:	9f03      	ldr	r7, [sp, #12]
		pev = poll_events;
 8008b22:	f8cd 9018 	str.w	r9, [sp, #24]
		for (pfd = fds, i = nfds; i--; pfd++) {
 8008b26:	46da      	mov	sl, fp
		ret = 0;
 8008b28:	4625      	mov	r5, r4
		for (pfd = fds, i = nfds; i--; pfd++) {
 8008b2a:	f1ba 0f00 	cmp.w	sl, #0
 8008b2e:	d112      	bne.n	8008b56 <z_impl_zsock_poll+0xda>
		if (retry) {
 8008b30:	2c00      	cmp	r4, #0
 8008b32:	d0ed      	beq.n	8008b10 <z_impl_zsock_poll+0x94>
			if (ret > 0) {
 8008b34:	2d00      	cmp	r5, #0
 8008b36:	dceb      	bgt.n	8008b10 <z_impl_zsock_poll+0x94>
			if (timeout == K_NO_WAIT) {
 8008b38:	2e00      	cmp	r6, #0
 8008b3a:	d0e9      	beq.n	8008b10 <z_impl_zsock_poll+0x94>
			if (timeout != K_FOREVER) {
 8008b3c:	1c73      	adds	r3, r6, #1
 8008b3e:	d0b2      	beq.n	8008aa6 <z_impl_zsock_poll+0x2a>
	return z_impl_k_uptime_get();
 8008b40:	f010 f82b 	bl	8018b9a <z_impl_k_uptime_get>
	return timeout - elapsed;
 8008b44:	9b04      	ldr	r3, [sp, #16]
 8008b46:	eb06 0803 	add.w	r8, r6, r3
 8008b4a:	eba8 0800 	sub.w	r8, r8, r0
				if (remaining_time <= 0) {
 8008b4e:	f1b8 0f00 	cmp.w	r8, #0
 8008b52:	dca8      	bgt.n	8008aa6 <z_impl_zsock_poll+0x2a>
 8008b54:	e7dc      	b.n	8008b10 <z_impl_zsock_poll+0x94>
			if (pfd->fd < 0) {
 8008b56:	6838      	ldr	r0, [r7, #0]
			pfd->revents = 0;
 8008b58:	9b05      	ldr	r3, [sp, #20]
 8008b5a:	80fb      	strh	r3, [r7, #6]
			if (pfd->fd < 0) {
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	db1d      	blt.n	8008b9c <z_impl_zsock_poll+0x120>
			ctx = z_get_fd_obj_and_vtable(pfd->fd, &vtable);
 8008b60:	a907      	add	r1, sp, #28
 8008b62:	f7fc fe8b 	bl	800587c <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
 8008b66:	4601      	mov	r1, r0
 8008b68:	b918      	cbnz	r0, 8008b72 <z_impl_zsock_poll+0xf6>
				pfd->revents = ZSOCK_POLLNVAL;
 8008b6a:	2320      	movs	r3, #32
 8008b6c:	80fb      	strh	r3, [r7, #6]
				ret++;
 8008b6e:	3501      	adds	r5, #1
 8008b70:	e014      	b.n	8008b9c <z_impl_zsock_poll+0x120>
			if (z_fdtable_call_ioctl(vtable, ctx, ZFD_IOCTL_POLL_UPDATE,
 8008b72:	ab06      	add	r3, sp, #24
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008b7a:	463b      	mov	r3, r7
 8008b7c:	9807      	ldr	r0, [sp, #28]
 8008b7e:	f00c fa41 	bl	8015004 <z_fdtable_call_ioctl>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	da06      	bge.n	8008b94 <z_impl_zsock_poll+0x118>
				if (errno == EAGAIN) {
 8008b86:	f00c fec1 	bl	801590c <__errno>
 8008b8a:	6803      	ldr	r3, [r0, #0]
 8008b8c:	2b0b      	cmp	r3, #11
 8008b8e:	d1bd      	bne.n	8008b0c <z_impl_zsock_poll+0x90>
					retry = true;
 8008b90:	2401      	movs	r4, #1
 8008b92:	e003      	b.n	8008b9c <z_impl_zsock_poll+0x120>
			if (pfd->revents != 0) {
 8008b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1e8      	bne.n	8008b6e <z_impl_zsock_poll+0xf2>
		for (pfd = fds, i = nfds; i--; pfd++) {
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008ba2:	e7c2      	b.n	8008b2a <z_impl_zsock_poll+0xae>
 8008ba4:	cccccccd 	.word	0xcccccccd

08008ba8 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8008ba8:	280a      	cmp	r0, #10
{
 8008baa:	b538      	push	{r3, r4, r5, lr}
 8008bac:	4604      	mov	r4, r0
 8008bae:	4d07      	ldr	r5, [pc, #28]	; (8008bcc <console_out+0x24>)
	if ('\n' == c) {
 8008bb0:	d104      	bne.n	8008bbc <console_out+0x14>
 8008bb2:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
 8008bb4:	6843      	ldr	r3, [r0, #4]
 8008bb6:	210d      	movs	r1, #13
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8008bbc:	6828      	ldr	r0, [r5, #0]
 8008bbe:	6843      	ldr	r3, [r0, #4]
 8008bc0:	b2e1      	uxtb	r1, r4
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	4798      	blx	r3

	return c;
}
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	bd38      	pop	{r3, r4, r5, pc}
 8008bca:	bf00      	nop
 8008bcc:	200004cc 	.word	0x200004cc

08008bd0 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
 8008bd0:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 8008bd2:	4c04      	ldr	r4, [pc, #16]	; (8008be4 <uart_console_hook_install+0x14>)
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f001 fc03 	bl	800a3e0 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8008bda:	4620      	mov	r0, r4
}
 8008bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
 8008be0:	f7fc bee8 	b.w	80059b4 <__printk_hook_install>
 8008be4:	08008ba9 	.word	0x08008ba9

08008be8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
 8008be8:	b508      	push	{r3, lr}
 8008bea:	4804      	ldr	r0, [pc, #16]	; (8008bfc <uart_console_init+0x14>)
 8008bec:	f008 ffa4 	bl	8011b38 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8008bf0:	4b03      	ldr	r3, [pc, #12]	; (8008c00 <uart_console_init+0x18>)
 8008bf2:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
 8008bf4:	f7ff ffec 	bl	8008bd0 <uart_console_hook_install>

	return 0;
}
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	bd08      	pop	{r3, pc}
 8008bfc:	0801abc0 	.word	0x0801abc0
 8008c00:	200004cc 	.word	0x200004cc

08008c04 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, void *arg)
{
 8008c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct device *dev = arg;
	struct stm32_exti_data *data = dev->driver_data;
 8008c08:	6895      	ldr	r5, [r2, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8008c0a:	4e0d      	ldr	r6, [pc, #52]	; (8008c40 <__stm32_exti_isr+0x3c>)
{
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	460f      	mov	r7, r1
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8008c10:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8008c14:	f105 0904 	add.w	r9, r5, #4
	for (line = min; line < max; line++) {
 8008c18:	42bc      	cmp	r4, r7
 8008c1a:	db01      	blt.n	8008c20 <__stm32_exti_isr+0x1c>
		}
	}
}
 8008c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c20:	6972      	ldr	r2, [r6, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8008c22:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8008c26:	ea33 0202 	bics.w	r2, r3, r2
 8008c2a:	d107      	bne.n	8008c3c <__stm32_exti_isr+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8008c2c:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 8008c2e:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8008c32:	b11b      	cbz	r3, 8008c3c <__stm32_exti_isr+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8008c34:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8008c38:	4620      	mov	r0, r4
 8008c3a:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8008c3c:	3401      	adds	r4, #1
 8008c3e:	e7eb      	b.n	8008c18 <__stm32_exti_isr+0x14>
 8008c40:	40010400 	.word	0x40010400

08008c44 <stm32_exti_enable>:
	if (line < 32) {
 8008c44:	281f      	cmp	r0, #31
{
 8008c46:	b508      	push	{r3, lr}
	if (line < 32) {
 8008c48:	dd02      	ble.n	8008c50 <stm32_exti_enable+0xc>
		return -ENOTSUP;
 8008c4a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8008c4e:	bd08      	pop	{r3, pc}
  SET_BIT(EXTI->IMR, ExtiLine);
 8008c50:	4a06      	ldr	r2, [pc, #24]	; (8008c6c <stm32_exti_enable+0x28>)
		LL_EXTI_EnableIT_0_31(1 << line);
 8008c52:	2301      	movs	r3, #1
 8008c54:	6811      	ldr	r1, [r2, #0]
 8008c56:	4083      	lsls	r3, r0
 8008c58:	430b      	orrs	r3, r1
	if (line < ARRAY_SIZE(exti_irq_table)) {
 8008c5a:	280f      	cmp	r0, #15
 8008c5c:	6013      	str	r3, [r2, #0]
 8008c5e:	dcf4      	bgt.n	8008c4a <stm32_exti_enable+0x6>
	irq_enable(irqnum);
 8008c60:	4b03      	ldr	r3, [pc, #12]	; (8008c70 <stm32_exti_enable+0x2c>)
 8008c62:	5618      	ldrsb	r0, [r3, r0]
 8008c64:	f000 ff04 	bl	8009a70 <arch_irq_enable>
	return 0;
 8008c68:	2000      	movs	r0, #0
 8008c6a:	e7f0      	b.n	8008c4e <stm32_exti_enable+0xa>
 8008c6c:	40010400 	.word	0x40010400
 8008c70:	0801b307 	.word	0x0801b307

08008c74 <stm32_exti_disable>:
	if (line < 32) {
 8008c74:	281f      	cmp	r0, #31
 8008c76:	dc06      	bgt.n	8008c86 <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8008c78:	4903      	ldr	r1, [pc, #12]	; (8008c88 <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	680b      	ldr	r3, [r1, #0]
 8008c7e:	4082      	lsls	r2, r0
 8008c80:	ea23 0302 	bic.w	r3, r3, r2
 8008c84:	600b      	str	r3, [r1, #0]
}
 8008c86:	4770      	bx	lr
 8008c88:	40010400 	.word	0x40010400

08008c8c <stm32_exti_trigger>:
	if (trigger & STM32_EXTI_TRIG_RISING) {
 8008c8c:	07ca      	lsls	r2, r1, #31
{
 8008c8e:	b510      	push	{r4, lr}
	if (trigger & STM32_EXTI_TRIG_RISING) {
 8008c90:	d507      	bpl.n	8008ca2 <stm32_exti_trigger+0x16>
		if (line < 32) {
 8008c92:	281f      	cmp	r0, #31
 8008c94:	dc05      	bgt.n	8008ca2 <stm32_exti_trigger+0x16>
  SET_BIT(EXTI->RTSR, ExtiLine);
 8008c96:	4b08      	ldr	r3, [pc, #32]	; (8008cb8 <stm32_exti_trigger+0x2c>)
			LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8008c98:	2201      	movs	r2, #1
 8008c9a:	689c      	ldr	r4, [r3, #8]
 8008c9c:	4082      	lsls	r2, r0
 8008c9e:	4322      	orrs	r2, r4
 8008ca0:	609a      	str	r2, [r3, #8]
	if (trigger & STM32_EXTI_TRIG_FALLING) {
 8008ca2:	078b      	lsls	r3, r1, #30
 8008ca4:	d507      	bpl.n	8008cb6 <stm32_exti_trigger+0x2a>
		if (line < 32) {
 8008ca6:	281f      	cmp	r0, #31
 8008ca8:	dc05      	bgt.n	8008cb6 <stm32_exti_trigger+0x2a>
  SET_BIT(EXTI->FTSR, ExtiLine);
 8008caa:	4a03      	ldr	r2, [pc, #12]	; (8008cb8 <stm32_exti_trigger+0x2c>)
			LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8008cac:	2301      	movs	r3, #1
 8008cae:	68d1      	ldr	r1, [r2, #12]
 8008cb0:	4083      	lsls	r3, r0
 8008cb2:	430b      	orrs	r3, r1
 8008cb4:	60d3      	str	r3, [r2, #12]
}
 8008cb6:	bd10      	pop	{r4, pc}
 8008cb8:	40010400 	.word	0x40010400

08008cbc <stm32_exti_set_callback>:
				void *arg)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	if (data->cb[line].cb) {
 8008cbc:	4907      	ldr	r1, [pc, #28]	; (8008cdc <stm32_exti_set_callback+0x20>)
{
 8008cbe:	b530      	push	{r4, r5, lr}
 8008cc0:	688c      	ldr	r4, [r1, #8]
	if (data->cb[line].cb) {
 8008cc2:	f854 1030 	ldr.w	r1, [r4, r0, lsl #3]
 8008cc6:	eb04 05c0 	add.w	r5, r4, r0, lsl #3
 8008cca:	b921      	cbnz	r1, 8008cd6 <stm32_exti_set_callback+0x1a>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8008ccc:	f844 2030 	str.w	r2, [r4, r0, lsl #3]
	data->cb[line].data = arg;
 8008cd0:	606b      	str	r3, [r5, #4]

	return 0;
 8008cd2:	4608      	mov	r0, r1
}
 8008cd4:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 8008cd6:	f06f 000f 	mvn.w	r0, #15
 8008cda:	e7fb      	b.n	8008cd4 <stm32_exti_set_callback+0x18>
 8008cdc:	20008ebc 	.word	0x20008ebc

08008ce0 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	data->cb[line].cb = NULL;
 8008ce0:	4b04      	ldr	r3, [pc, #16]	; (8008cf4 <stm32_exti_unset_callback+0x14>)
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	data->cb[line].data = NULL;
 8008cee:	604b      	str	r3, [r1, #4]
}
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	20008ebc 	.word	0x20008ebc

08008cf8 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8008cf8:	6808      	ldr	r0, [r1, #0]
 8008cfa:	2802      	cmp	r0, #2
{
 8008cfc:	b084      	sub	sp, #16
	switch (pclken->bus) {
 8008cfe:	d00d      	beq.n	8008d1c <stm32_clock_control_on+0x24>
 8008d00:	2803      	cmp	r0, #3
 8008d02:	d016      	beq.n	8008d32 <stm32_clock_control_on+0x3a>
 8008d04:	b9f8      	cbnz	r0, 8008d46 <stm32_clock_control_on+0x4e>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8008d06:	4a11      	ldr	r2, [pc, #68]	; (8008d4c <stm32_clock_control_on+0x54>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8008d08:	684b      	ldr	r3, [r1, #4]
 8008d0a:	6951      	ldr	r1, [r2, #20]
 8008d0c:	4319      	orrs	r1, r3
 8008d0e:	6151      	str	r1, [r2, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8008d10:	6952      	ldr	r2, [r2, #20]
 8008d12:	4013      	ands	r3, r2
 8008d14:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8008d16:	9b01      	ldr	r3, [sp, #4]
	default:
		return -ENOTSUP;
	}

	return 0;
}
 8008d18:	b004      	add	sp, #16
 8008d1a:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8008d1c:	4a0b      	ldr	r2, [pc, #44]	; (8008d4c <stm32_clock_control_on+0x54>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8008d1e:	684b      	ldr	r3, [r1, #4]
 8008d20:	69d1      	ldr	r1, [r2, #28]
 8008d22:	4319      	orrs	r1, r3
 8008d24:	61d1      	str	r1, [r2, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8008d26:	69d2      	ldr	r2, [r2, #28]
 8008d28:	4013      	ands	r3, r2
 8008d2a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8008d2c:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8008d2e:	2000      	movs	r0, #0
 8008d30:	e7f2      	b.n	8008d18 <stm32_clock_control_on+0x20>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8008d32:	4a06      	ldr	r2, [pc, #24]	; (8008d4c <stm32_clock_control_on+0x54>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8008d34:	684b      	ldr	r3, [r1, #4]
 8008d36:	6991      	ldr	r1, [r2, #24]
 8008d38:	4319      	orrs	r1, r3
 8008d3a:	6191      	str	r1, [r2, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008d3c:	6992      	ldr	r2, [r2, #24]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8008d42:	9b03      	ldr	r3, [sp, #12]
 8008d44:	e7f3      	b.n	8008d2e <stm32_clock_control_on+0x36>
		return -ENOTSUP;
 8008d46:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8008d4a:	e7e5      	b.n	8008d18 <stm32_clock_control_on+0x20>
 8008d4c:	40021000 	.word	0x40021000

08008d50 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8008d50:	6808      	ldr	r0, [r1, #0]
 8008d52:	2802      	cmp	r0, #2
 8008d54:	d009      	beq.n	8008d6a <stm32_clock_control_off+0x1a>
 8008d56:	2803      	cmp	r0, #3
 8008d58:	d00f      	beq.n	8008d7a <stm32_clock_control_off+0x2a>
 8008d5a:	b9a8      	cbnz	r0, 8008d88 <stm32_clock_control_off+0x38>
  CLEAR_BIT(RCC->AHBENR, Periphs);
 8008d5c:	4a0c      	ldr	r2, [pc, #48]	; (8008d90 <stm32_clock_control_off+0x40>)
 8008d5e:	6849      	ldr	r1, [r1, #4]
 8008d60:	6953      	ldr	r3, [r2, #20]
 8008d62:	ea23 0301 	bic.w	r3, r3, r1
 8008d66:	6153      	str	r3, [r2, #20]
 8008d68:	4770      	bx	lr
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8008d6a:	4a09      	ldr	r2, [pc, #36]	; (8008d90 <stm32_clock_control_off+0x40>)
 8008d6c:	6849      	ldr	r1, [r1, #4]
 8008d6e:	69d3      	ldr	r3, [r2, #28]
 8008d70:	ea23 0301 	bic.w	r3, r3, r1
 8008d74:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8008d76:	2000      	movs	r0, #0
 8008d78:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8008d7a:	4a05      	ldr	r2, [pc, #20]	; (8008d90 <stm32_clock_control_off+0x40>)
 8008d7c:	6849      	ldr	r1, [r1, #4]
 8008d7e:	6993      	ldr	r3, [r2, #24]
 8008d80:	ea23 0301 	bic.w	r3, r3, r1
 8008d84:	6193      	str	r3, [r2, #24]
 8008d86:	e7f6      	b.n	8008d76 <stm32_clock_control_off+0x26>
		return -ENOTSUP;
 8008d88:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	40021000 	.word	0x40021000

08008d94 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	u32_t ahb_clock = SystemCoreClock;
 8008d94:	4b07      	ldr	r3, [pc, #28]	; (8008db4 <stm32_clock_control_get_subsys_rate+0x20>)
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8008d96:	6809      	ldr	r1, [r1, #0]
	u32_t ahb_clock = SystemCoreClock;
 8008d98:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 8008d9a:	2903      	cmp	r1, #3
 8008d9c:	d807      	bhi.n	8008dae <stm32_clock_control_get_subsys_rate+0x1a>
 8008d9e:	e8df f001 	tbb	[pc, r1]
 8008da2:	0303      	.short	0x0303
 8008da4:	0302      	.short	0x0302
	return clock / prescaler;
 8008da6:	085b      	lsrs	r3, r3, #1
#endif
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && !defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8008da8:	6013      	str	r3, [r2, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8008daa:	2000      	movs	r0, #0
		break;
 8008dac:	4770      	bx	lr
		return -ENOTSUP;
 8008dae:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8008db2:	4770      	bx	lr
 8008db4:	20008e74 	.word	0x20008e74

08008db8 <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(struct device *dev)
{
 8008db8:	b530      	push	{r4, r5, lr}
 8008dba:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8008dc2:	4c19      	ldr	r4, [pc, #100]	; (8008e28 <stm32_clock_control_init+0x70>)
	clk_init->APB2CLKDivider = apb2_prescaler(
 8008dc4:	9305      	str	r3, [sp, #20]
	clk_init->APB1CLKDivider = apb1_prescaler(
 8008dc6:	e9cd 3203 	strd	r3, r2, [sp, #12]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8008dca:	f00c fc8d 	bl	80156e8 <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8008dce:	a801      	add	r0, sp, #4
 8008dd0:	f00c fc84 	bl	80156dc <config_pll_init>
 8008dd4:	6823      	ldr	r3, [r4, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8008dd6:	079a      	lsls	r2, r3, #30
 8008dd8:	d406      	bmi.n	8008de8 <stm32_clock_control_init+0x30>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	f043 0301 	orr.w	r3, r3, #1
 8008de0:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8008de2:	6823      	ldr	r3, [r4, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8008de4:	079b      	lsls	r3, r3, #30
 8008de6:	d5fc      	bpl.n	8008de2 <stm32_clock_control_init+0x2a>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008de8:	6863      	ldr	r3, [r4, #4]
 8008dea:	f023 0303 	bic.w	r3, r3, #3
 8008dee:	6063      	str	r3, [r4, #4]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008df0:	6863      	ldr	r3, [r4, #4]
 8008df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008df6:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008df8:	6865      	ldr	r5, [r4, #4]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8008dfa:	f015 050c 	ands.w	r5, r5, #12
 8008dfe:	d1fb      	bne.n	8008df8 <stm32_clock_control_init+0x40>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008e00:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_CLOCK_STM32_HSE_BYPASS
	hse_bypass = LL_UTILS_HSEBYPASS_ON;
#endif /* CONFIG_CLOCK_STM32_HSE_BYPASS */

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 8008e02:	480a      	ldr	r0, [pc, #40]	; (8008e2c <stm32_clock_control_init+0x74>)
 8008e04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	aa01      	add	r2, sp, #4
 8008e0c:	ab03      	add	r3, sp, #12
 8008e0e:	2101      	movs	r1, #1
 8008e10:	f008 fe38 	bl	8011a84 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	f023 0301 	bic.w	r3, r3, #1
 8008e1a:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 8008e1c:	f00c fc65 	bl	80156ea <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8008e20:	4628      	mov	r0, r5
 8008e22:	b007      	add	sp, #28
 8008e24:	bd30      	pop	{r4, r5, pc}
 8008e26:	bf00      	nop
 8008e28:	40021000 	.word	0x40021000
 8008e2c:	007a1200 	.word	0x007a1200

08008e30 <z_pinmux_stm32_set>:
 *
 * @return 0 on success, error otherwise
 */
int z_pinmux_stm32_set(u32_t pin, u32_t func,
				struct device *clk)
{
 8008e30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e32:	4604      	mov	r4, r0
	/* make sure to enable port clock first */
	if (enable_port(STM32_PORT(pin), clk)) {
 8008e34:	0906      	lsrs	r6, r0, #4
{
 8008e36:	460d      	mov	r5, r1
	if (!clk) {
 8008e38:	4610      	mov	r0, r2
 8008e3a:	b912      	cbnz	r2, 8008e42 <z_pinmux_stm32_set+0x12>
 8008e3c:	4810      	ldr	r0, [pc, #64]	; (8008e80 <z_pinmux_stm32_set+0x50>)
 8008e3e:	f008 fe7b 	bl	8011b38 <z_impl_device_get_binding>
	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8008e42:	2300      	movs	r3, #0
 8008e44:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 8008e46:	4b0f      	ldr	r3, [pc, #60]	; (8008e84 <z_pinmux_stm32_set+0x54>)
 8008e48:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8008e4c:	9301      	str	r3, [sp, #4]
	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 8008e4e:	3301      	adds	r3, #1
 8008e50:	d102      	bne.n	8008e58 <z_pinmux_stm32_set+0x28>
		return -EIO;
 8008e52:	f06f 0004 	mvn.w	r0, #4
 8008e56:	e010      	b.n	8008e7a <z_pinmux_stm32_set+0x4a>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
 8008e58:	6843      	ldr	r3, [r0, #4]
 8008e5a:	4669      	mov	r1, sp
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4798      	blx	r3
	if (enable_port(STM32_PORT(pin), clk)) {
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d1f6      	bne.n	8008e52 <z_pinmux_stm32_set+0x22>
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8008e64:	1120      	asrs	r0, r4, #4
 8008e66:	0280      	lsls	r0, r0, #10
	return gpio_stm32_configure((u32_t *)port_base,
 8008e68:	f005 030f 	and.w	r3, r5, #15
 8008e6c:	462a      	mov	r2, r5
 8008e6e:	f004 010f 	and.w	r1, r4, #15
 8008e72:	f100 4090 	add.w	r0, r0, #1207959552	; 0x48000000
 8008e76:	f00e ff78 	bl	8017d6a <gpio_stm32_configure>
	}

	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
}
 8008e7a:	b002      	add	sp, #8
 8008e7c:	bd70      	pop	{r4, r5, r6, pc}
 8008e7e:	bf00      	nop
 8008e80:	0801b322 	.word	0x0801b322
 8008e84:	08019b20 	.word	0x08019b20

08008e88 <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 8008e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	460e      	mov	r6, r1
 8008e8e:	4809      	ldr	r0, [pc, #36]	; (8008eb4 <stm32_setup_pins+0x2c>)
 8008e90:	f008 fe52 	bl	8011b38 <z_impl_device_get_binding>
	struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (i = 0; i < pins; i++) {
 8008e94:	2500      	movs	r5, #0
 8008e96:	4607      	mov	r7, r0
 8008e98:	42b5      	cmp	r5, r6
 8008e9a:	f104 0408 	add.w	r4, r4, #8
 8008e9e:	d100      	bne.n	8008ea2 <stm32_setup_pins+0x1a>
		z_pinmux_stm32_set(pinconf[i].pin_num,
				  pinconf[i].mode,
				  clk);
	}
}
 8008ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_pinmux_stm32_set(pinconf[i].pin_num,
 8008ea2:	463a      	mov	r2, r7
 8008ea4:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008ea8:	f814 0c08 	ldrb.w	r0, [r4, #-8]
 8008eac:	f7ff ffc0 	bl	8008e30 <z_pinmux_stm32_set>
	for (i = 0; i < pins; i++) {
 8008eb0:	3501      	adds	r5, #1
 8008eb2:	e7f1      	b.n	8008e98 <stm32_setup_pins+0x10>
 8008eb4:	0801b322 	.word	0x0801b322

08008eb8 <eth_enc28j60_read_mem.isra.10>:
			LOG_ERR("Failed to write memory");
		}
	}
}

static void eth_enc28j60_read_mem(struct device *dev, u8_t *data_buffer,
 8008eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ebc:	b08d      	sub	sp, #52	; 0x34
				  u16_t buf_len)
{
	struct eth_enc28j60_runtime *context = dev->driver_data;
	u8_t buf[1] = { ENC28J60_SPI_RBM };
 8008ebe:	233a      	movs	r3, #58	; 0x3a
 8008ec0:	f88d 3004 	strb.w	r3, [sp, #4]
	const struct spi_buf tx_buf = {
 8008ec4:	ab01      	add	r3, sp, #4
 8008ec6:	2501      	movs	r5, #1
 8008ec8:	9302      	str	r3, [sp, #8]
		.buf = buf,
		.len = 1
	};
	const struct spi_buf_set tx = {
 8008eca:	ab02      	add	r3, sp, #8
 8008ecc:	e9cd 3504 	strd	r3, r5, [sp, #16]
		.buffers = &tx_buf,
		.count = 1
	};
	struct spi_buf rx_buf[2] = {
 8008ed0:	ab08      	add	r3, sp, #32
static void eth_enc28j60_read_mem(struct device *dev, u8_t *data_buffer,
 8008ed2:	4614      	mov	r4, r2
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	4688      	mov	r8, r1
	struct spi_buf rx_buf[2] = {
 8008ed8:	4618      	mov	r0, r3
 8008eda:	2210      	movs	r2, #16
 8008edc:	2100      	movs	r1, #0
	const struct spi_buf tx_buf = {
 8008ede:	9503      	str	r5, [sp, #12]
	struct spi_buf rx_buf[2] = {
 8008ee0:	f7fb fd45 	bl	800496e <memset>
		{
			.buf = NULL,
			.len = 1
		},
	};
	const struct spi_buf_set rx = {
 8008ee4:	2302      	movs	r3, #2
	struct spi_buf rx_buf[2] = {
 8008ee6:	9509      	str	r5, [sp, #36]	; 0x24
	const struct spi_buf_set rx = {
 8008ee8:	9006      	str	r0, [sp, #24]
 8008eea:	9307      	str	r3, [sp, #28]
	};
	u16_t num_segments;
	u16_t num_remaining;
	int i;

	num_segments = buf_len / MAX_BUFFER_LENGTH;
 8008eec:	09e5      	lsrs	r5, r4, #7
	num_remaining = buf_len - MAX_BUFFER_LENGTH * num_segments;

	for (i = 0; i < num_segments; i++, data_buffer += MAX_BUFFER_LENGTH) {
 8008eee:	2700      	movs	r7, #0

		rx_buf[1].buf = data_buffer;
		rx_buf[1].len = MAX_BUFFER_LENGTH;
 8008ef0:	f04f 0980 	mov.w	r9, #128	; 0x80
	for (i = 0; i < num_segments; i++, data_buffer += MAX_BUFFER_LENGTH) {
 8008ef4:	42af      	cmp	r7, r5
 8008ef6:	eb08 13c7 	add.w	r3, r8, r7, lsl #7
 8008efa:	db13      	blt.n	8008f24 <eth_enc28j60_read_mem.isra.10+0x6c>
	num_remaining = buf_len - MAX_BUFFER_LENGTH * num_segments;
 8008efc:	ebc5 2545 	rsb	r5, r5, r5, lsl #9
 8008f00:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
 8008f04:	b2a4      	uxth	r4, r4
			LOG_ERR("Failed to read memory");
			return;
		}
	}

	if (num_remaining > 0) {
 8008f06:	b154      	cbz	r4, 8008f1e <eth_enc28j60_read_mem.isra.10+0x66>
		rx_buf[1].buf = data_buffer;
		rx_buf[1].len = num_remaining;
 8008f08:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28

		if (spi_transceive(context->spi, &context->spi_cfg, &tx, &rx)) {
 8008f0c:	f8d6 0398 	ldr.w	r0, [r6, #920]	; 0x398
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&config, *(uintptr_t *)&tx_bufs, *(uintptr_t *)&rx_bufs, K_SYSCALL_SPI_TRANSCEIVE);
	}
#endif
	compiler_barrier();
	return z_impl_spi_transceive(dev, config, tx_bufs, rx_bufs);
 8008f10:	ab06      	add	r3, sp, #24
 8008f12:	aa04      	add	r2, sp, #16
 8008f14:	f506 716a 	add.w	r1, r6, #936	; 0x3a8
 8008f18:	f00c fbe8 	bl	80156ec <z_impl_spi_transceive>
 8008f1c:	b968      	cbnz	r0, 8008f3a <eth_enc28j60_read_mem.isra.10+0x82>
			LOG_ERR("Failed to read memory");
		}
	}
}
 8008f1e:	b00d      	add	sp, #52	; 0x34
 8008f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		rx_buf[1].len = MAX_BUFFER_LENGTH;
 8008f24:	e9cd 390a 	strd	r3, r9, [sp, #40]	; 0x28
		if (spi_transceive(context->spi, &context->spi_cfg, &tx, &rx)) {
 8008f28:	f8d6 0398 	ldr.w	r0, [r6, #920]	; 0x398
 8008f2c:	ab06      	add	r3, sp, #24
 8008f2e:	aa04      	add	r2, sp, #16
 8008f30:	f506 716a 	add.w	r1, r6, #936	; 0x3a8
 8008f34:	f00c fbda 	bl	80156ec <z_impl_spi_transceive>
 8008f38:	b190      	cbz	r0, 8008f60 <eth_enc28j60_read_mem.isra.10+0xa8>
			LOG_ERR("Failed to read memory");
 8008f3a:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <eth_enc28j60_read_mem.isra.10+0xac>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	075b      	lsls	r3, r3, #29
 8008f40:	d0ed      	beq.n	8008f1e <eth_enc28j60_read_mem.isra.10+0x66>
 8008f42:	2301      	movs	r3, #1
 8008f44:	f04f 0100 	mov.w	r1, #0
 8008f48:	f363 0107 	bfi	r1, r3, #0, #8
 8008f4c:	4a06      	ldr	r2, [pc, #24]	; (8008f68 <eth_enc28j60_read_mem.isra.10+0xb0>)
 8008f4e:	4b07      	ldr	r3, [pc, #28]	; (8008f6c <eth_enc28j60_read_mem.isra.10+0xb4>)
 8008f50:	4807      	ldr	r0, [pc, #28]	; (8008f70 <eth_enc28j60_read_mem.isra.10+0xb8>)
 8008f52:	1a9b      	subs	r3, r3, r2
 8008f54:	08db      	lsrs	r3, r3, #3
 8008f56:	f363 118f 	bfi	r1, r3, #6, #10
 8008f5a:	f00a fe52 	bl	8013c02 <log_0>
 8008f5e:	e7de      	b.n	8008f1e <eth_enc28j60_read_mem.isra.10+0x66>
	for (i = 0; i < num_segments; i++, data_buffer += MAX_BUFFER_LENGTH) {
 8008f60:	3701      	adds	r7, #1
 8008f62:	e7c7      	b.n	8008ef4 <eth_enc28j60_read_mem.isra.10+0x3c>
 8008f64:	20008fd4 	.word	0x20008fd4
 8008f68:	08019248 	.word	0x08019248
 8008f6c:	08019250 	.word	0x08019250
 8008f70:	0801b3bf 	.word	0x0801b3bf

08008f74 <eth_enc28j60_write_mem.isra.11>:
static void eth_enc28j60_write_mem(struct device *dev, u8_t *data_buffer,
 8008f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f78:	b088      	sub	sp, #32
	u8_t buf[1] = { ENC28J60_SPI_WBM };
 8008f7a:	237a      	movs	r3, #122	; 0x7a
 8008f7c:	f88d 3004 	strb.w	r3, [sp, #4]
	struct spi_buf tx_buf[2] = {
 8008f80:	ab01      	add	r3, sp, #4
 8008f82:	9304      	str	r3, [sp, #16]
 8008f84:	2301      	movs	r3, #1
 8008f86:	9305      	str	r3, [sp, #20]
	const struct spi_buf_set tx = {
 8008f88:	ab04      	add	r3, sp, #16
 8008f8a:	9302      	str	r3, [sp, #8]
 8008f8c:	2302      	movs	r3, #2
static void eth_enc28j60_write_mem(struct device *dev, u8_t *data_buffer,
 8008f8e:	4606      	mov	r6, r0
 8008f90:	4688      	mov	r8, r1
 8008f92:	4614      	mov	r4, r2
	const struct spi_buf_set tx = {
 8008f94:	9303      	str	r3, [sp, #12]
	num_segments = buf_len / MAX_BUFFER_LENGTH;
 8008f96:	09d5      	lsrs	r5, r2, #7
	for (i = 0; i < num_segments; i++, data_buffer += MAX_BUFFER_LENGTH) {
 8008f98:	2700      	movs	r7, #0
		tx_buf[1].len = MAX_BUFFER_LENGTH;
 8008f9a:	f04f 0980 	mov.w	r9, #128	; 0x80
		if (spi_write(context->spi, &context->spi_cfg, &tx)) {
 8008f9e:	f500 7a6a 	add.w	sl, r0, #936	; 0x3a8
	for (i = 0; i < num_segments; i++, data_buffer += MAX_BUFFER_LENGTH) {
 8008fa2:	42af      	cmp	r7, r5
 8008fa4:	eb08 13c7 	add.w	r3, r8, r7, lsl #7
 8008fa8:	db12      	blt.n	8008fd0 <eth_enc28j60_write_mem.isra.11+0x5c>
	num_remaining = buf_len - MAX_BUFFER_LENGTH * num_segments;
 8008faa:	ebc5 2545 	rsb	r5, r5, r5, lsl #9
 8008fae:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
 8008fb2:	b2a4      	uxth	r4, r4
	if (num_remaining > 0) {
 8008fb4:	b14c      	cbz	r4, 8008fca <eth_enc28j60_write_mem.isra.11+0x56>
		if (spi_write(context->spi, &context->spi_cfg, &tx)) {
 8008fb6:	aa02      	add	r2, sp, #8
 8008fb8:	f506 716a 	add.w	r1, r6, #936	; 0x3a8
 8008fbc:	f8d6 0398 	ldr.w	r0, [r6, #920]	; 0x398
		tx_buf[1].len = num_remaining;
 8008fc0:	e9cd 3406 	strd	r3, r4, [sp, #24]
		if (spi_write(context->spi, &context->spi_cfg, &tx)) {
 8008fc4:	f00c fbb4 	bl	8015730 <spi_write>
 8008fc8:	b958      	cbnz	r0, 8008fe2 <eth_enc28j60_write_mem.isra.11+0x6e>
}
 8008fca:	b008      	add	sp, #32
 8008fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (spi_write(context->spi, &context->spi_cfg, &tx)) {
 8008fd0:	aa02      	add	r2, sp, #8
 8008fd2:	4651      	mov	r1, sl
 8008fd4:	f8d6 0398 	ldr.w	r0, [r6, #920]	; 0x398
		tx_buf[1].len = MAX_BUFFER_LENGTH;
 8008fd8:	e9cd 3906 	strd	r3, r9, [sp, #24]
		if (spi_write(context->spi, &context->spi_cfg, &tx)) {
 8008fdc:	f00c fba8 	bl	8015730 <spi_write>
 8008fe0:	b190      	cbz	r0, 8009008 <eth_enc28j60_write_mem.isra.11+0x94>
			LOG_ERR("Failed to write memory");
 8008fe2:	4b0a      	ldr	r3, [pc, #40]	; (800900c <eth_enc28j60_write_mem.isra.11+0x98>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	075b      	lsls	r3, r3, #29
 8008fe8:	d0ef      	beq.n	8008fca <eth_enc28j60_write_mem.isra.11+0x56>
 8008fea:	2301      	movs	r3, #1
 8008fec:	f04f 0100 	mov.w	r1, #0
 8008ff0:	f363 0107 	bfi	r1, r3, #0, #8
 8008ff4:	4a06      	ldr	r2, [pc, #24]	; (8009010 <eth_enc28j60_write_mem.isra.11+0x9c>)
 8008ff6:	4b07      	ldr	r3, [pc, #28]	; (8009014 <eth_enc28j60_write_mem.isra.11+0xa0>)
 8008ff8:	4807      	ldr	r0, [pc, #28]	; (8009018 <eth_enc28j60_write_mem.isra.11+0xa4>)
 8008ffa:	1a9b      	subs	r3, r3, r2
 8008ffc:	08db      	lsrs	r3, r3, #3
 8008ffe:	f363 118f 	bfi	r1, r3, #6, #10
 8009002:	f00a fdfe 	bl	8013c02 <log_0>
 8009006:	e7e0      	b.n	8008fca <eth_enc28j60_write_mem.isra.11+0x56>
	for (i = 0; i < num_segments; i++, data_buffer += MAX_BUFFER_LENGTH) {
 8009008:	3701      	adds	r7, #1
 800900a:	e7ca      	b.n	8008fa2 <eth_enc28j60_write_mem.isra.11+0x2e>
 800900c:	20008fd4 	.word	0x20008fd4
 8009010:	08019248 	.word	0x08019248
 8009014:	08019250 	.word	0x08019250
 8009018:	0801b3fd 	.word	0x0801b3fd

0800901c <eth_enc28j60_rx_thread>:

	return 0;
}

static void eth_enc28j60_rx_thread(struct device *dev)
{
 800901c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009020:	b093      	sub	sp, #76	; 0x4c
	struct eth_enc28j60_runtime *context = dev->driver_data;
 8009022:	6883      	ldr	r3, [r0, #8]
 8009024:	9306      	str	r3, [sp, #24]
			LOG_ERR("Could not allocate rx buffer");
 8009026:	4a82      	ldr	r2, [pc, #520]	; (8009230 <eth_enc28j60_rx_thread+0x214>)
 8009028:	4b82      	ldr	r3, [pc, #520]	; (8009234 <eth_enc28j60_rx_thread+0x218>)
 800902a:	1a9b      	subs	r3, r3, r2
 800902c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
{
 8009030:	4604      	mov	r4, r0
			LOG_ERR("Could not allocate rx buffer");
 8009032:	9309      	str	r3, [sp, #36]	; 0x24
	u8_t int_stat;

	while (true) {
		k_sem_take(&context->int_sem, K_FOREVER);
 8009034:	9b06      	ldr	r3, [sp, #24]
 8009036:	f503 7576 	add.w	r5, r3, #984	; 0x3d8
	return z_impl_k_sem_take(sem, timeout);
 800903a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800903e:	4628      	mov	r0, r5
 8009040:	f009 fc74 	bl	801292c <z_impl_k_sem_take>

		eth_enc28j60_read_reg(dev, ENC28J60_REG_EIR, &int_stat);
 8009044:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8009048:	211c      	movs	r1, #28
 800904a:	68a0      	ldr	r0, [r4, #8]
 800904c:	f00c fba5 	bl	801579a <eth_enc28j60_read_reg.isra.7>
		if (int_stat & ENC28J60_BIT_EIR_PKTIF) {
 8009050:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8009054:	065a      	lsls	r2, r3, #25
 8009056:	d5f0      	bpl.n	800903a <eth_enc28j60_rx_thread+0x1e>
	const struct eth_enc28j60_config *config = dev->config->config_info;
 8009058:	6823      	ldr	r3, [r4, #0]
	struct eth_enc28j60_runtime *context = dev->driver_data;
 800905a:	68a6      	ldr	r6, [r4, #8]
	const struct eth_enc28j60_config *config = dev->config->config_info;
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	9307      	str	r3, [sp, #28]
	eth_enc28j60_set_bank(dev, ENC28J60_REG_EPKTCNT);
 8009060:	f240 1119 	movw	r1, #281	; 0x119
 8009064:	4630      	mov	r0, r6
 8009066:	f00c fbc4 	bl	80157f2 <eth_enc28j60_set_bank.isra.5>
	eth_enc28j60_read_reg(dev, ENC28J60_REG_EPKTCNT, &counter);
 800906a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800906e:	f240 1119 	movw	r1, #281	; 0x119
 8009072:	68a0      	ldr	r0, [r4, #8]
 8009074:	f00c fb91 	bl	801579a <eth_enc28j60_read_reg.isra.7>
	if (!counter) {
 8009078:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 808a 	beq.w	8009196 <eth_enc28j60_rx_thread+0x17a>
	k_sem_take(&context->tx_rx_sem, K_FOREVER);
 8009082:	f506 7370 	add.w	r3, r6, #960	; 0x3c0
 8009086:	9303      	str	r3, [sp, #12]
 8009088:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800908c:	9803      	ldr	r0, [sp, #12]
 800908e:	f009 fc4d 	bl	801292c <z_impl_k_sem_take>
		u8_t rdptl = 0U;
 8009092:	2500      	movs	r5, #0
		eth_enc28j60_set_bank(dev, ENC28J60_REG_ERXRDPTL);
 8009094:	210c      	movs	r1, #12
 8009096:	68a0      	ldr	r0, [r4, #8]
		u8_t rdptl = 0U;
 8009098:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
		u8_t rdpth = 0U;
 800909c:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
		eth_enc28j60_set_bank(dev, ENC28J60_REG_ERXRDPTL);
 80090a0:	f00c fba7 	bl	80157f2 <eth_enc28j60_set_bank.isra.5>
		eth_enc28j60_read_reg(dev, ENC28J60_REG_ERXRDPTL, &rdptl);
 80090a4:	aa0d      	add	r2, sp, #52	; 0x34
 80090a6:	210c      	movs	r1, #12
 80090a8:	68a0      	ldr	r0, [r4, #8]
 80090aa:	f00c fb76 	bl	801579a <eth_enc28j60_read_reg.isra.7>
		eth_enc28j60_read_reg(dev, ENC28J60_REG_ERXRDPTH, &rdpth);
 80090ae:	aa0e      	add	r2, sp, #56	; 0x38
 80090b0:	210d      	movs	r1, #13
 80090b2:	68a0      	ldr	r0, [r4, #8]
 80090b4:	f00c fb71 	bl	801579a <eth_enc28j60_read_reg.isra.7>
		eth_enc28j60_write_reg(dev, ENC28J60_REG_ERDPTL, rdptl);
 80090b8:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 80090bc:	68a0      	ldr	r0, [r4, #8]
 80090be:	4629      	mov	r1, r5
 80090c0:	f00c fb39 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
		eth_enc28j60_write_reg(dev, ENC28J60_REG_ERDPTH, rdpth);
 80090c4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80090c8:	68a0      	ldr	r0, [r4, #8]
 80090ca:	2101      	movs	r1, #1
 80090cc:	f00c fb33 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
		eth_enc28j60_read_mem(dev, info, 2);
 80090d0:	2202      	movs	r2, #2
 80090d2:	a910      	add	r1, sp, #64	; 0x40
 80090d4:	68a0      	ldr	r0, [r4, #8]
 80090d6:	f7ff feef 	bl	8008eb8 <eth_enc28j60_read_mem.isra.10>
		next_packet = info[0] | (u16_t)info[1] << 8;
 80090da:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80090de:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
		eth_enc28j60_read_mem(dev, info, 4);
 80090e2:	68a0      	ldr	r0, [r4, #8]
		next_packet = info[0] | (u16_t)info[1] << 8;
 80090e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090e8:	b21b      	sxth	r3, r3
 80090ea:	9304      	str	r3, [sp, #16]
 80090ec:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80090f0:	9308      	str	r3, [sp, #32]
		eth_enc28j60_read_mem(dev, info, 4);
 80090f2:	2204      	movs	r2, #4
 80090f4:	a910      	add	r1, sp, #64	; 0x40
 80090f6:	f7ff fedf 	bl	8008eb8 <eth_enc28j60_read_mem.isra.10>
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
 80090fa:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80090fe:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8009102:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		frm_len = sys_get_le16(info) - 4;
 8009106:	3b04      	subs	r3, #4
 8009108:	fa1f f883 	uxth.w	r8, r3
		pkt = net_pkt_rx_alloc_with_buffer(context->iface, frm_len,
 800910c:	9b07      	ldr	r3, [sp, #28]
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	462a      	mov	r2, r5
 8009114:	462b      	mov	r3, r5
 8009116:	4641      	mov	r1, r8
 8009118:	6830      	ldr	r0, [r6, #0]
 800911a:	f003 fd25 	bl	800cb68 <net_pkt_rx_alloc_with_buffer>
		if (!pkt) {
 800911e:	4607      	mov	r7, r0
 8009120:	2800      	cmp	r0, #0
 8009122:	d14d      	bne.n	80091c0 <eth_enc28j60_rx_thread+0x1a4>
			LOG_ERR("Could not allocate rx buffer");
 8009124:	4b44      	ldr	r3, [pc, #272]	; (8009238 <eth_enc28j60_rx_thread+0x21c>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	075b      	lsls	r3, r3, #29
 800912a:	d00c      	beq.n	8009146 <eth_enc28j60_rx_thread+0x12a>
 800912c:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
 8009130:	f043 0301 	orr.w	r3, r3, #1
 8009134:	f363 0a07 	bfi	sl, r3, #0, #8
 8009138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800913a:	4840      	ldr	r0, [pc, #256]	; (800923c <eth_enc28j60_rx_thread+0x220>)
 800913c:	f363 1a8f 	bfi	sl, r3, #6, #10
 8009140:	4651      	mov	r1, sl
 8009142:	f00a fd5e 	bl	8013c02 <log_0>
		eth_enc28j60_set_bank(dev, ENC28J60_REG_ERXRDPTL);
 8009146:	210c      	movs	r1, #12
 8009148:	68a0      	ldr	r0, [r4, #8]
 800914a:	f00c fb52 	bl	80157f2 <eth_enc28j60_set_bank.isra.5>
		eth_enc28j60_write_reg(dev, ENC28J60_REG_ERXRDPTL,
 800914e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8009152:	68a0      	ldr	r0, [r4, #8]
 8009154:	210c      	movs	r1, #12
 8009156:	f00c faee 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
		eth_enc28j60_write_reg(dev, ENC28J60_REG_ERXRDPTH,
 800915a:	9b08      	ldr	r3, [sp, #32]
 800915c:	68a0      	ldr	r0, [r4, #8]
 800915e:	0a1a      	lsrs	r2, r3, #8
 8009160:	210d      	movs	r1, #13
 8009162:	f00c fae8 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
		eth_enc28j60_set_eth_reg(dev, ENC28J60_REG_ECON2,
 8009166:	2240      	movs	r2, #64	; 0x40
 8009168:	211e      	movs	r1, #30
 800916a:	68a0      	ldr	r0, [r4, #8]
 800916c:	f00c fafc 	bl	8015768 <eth_enc28j60_set_eth_reg.isra.8>
		eth_enc28j60_set_bank(dev, ENC28J60_REG_EPKTCNT);
 8009170:	f240 1119 	movw	r1, #281	; 0x119
 8009174:	68a0      	ldr	r0, [r4, #8]
 8009176:	f00c fb3c 	bl	80157f2 <eth_enc28j60_set_bank.isra.5>
		eth_enc28j60_read_reg(dev, ENC28J60_REG_EPKTCNT, &counter);
 800917a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800917e:	f240 1119 	movw	r1, #281	; 0x119
 8009182:	68a0      	ldr	r0, [r4, #8]
 8009184:	f00c fb09 	bl	801579a <eth_enc28j60_read_reg.isra.7>
	} while (counter);
 8009188:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800918c:	2b00      	cmp	r3, #0
 800918e:	d180      	bne.n	8009092 <eth_enc28j60_rx_thread+0x76>
	z_impl_k_sem_give(sem);
 8009190:	9803      	ldr	r0, [sp, #12]
 8009192:	f009 fb9f 	bl	80128d4 <z_impl_k_sem_give>
	const struct spi_buf tx_buf = {
 8009196:	aa0d      	add	r2, sp, #52	; 0x34
 8009198:	920e      	str	r2, [sp, #56]	; 0x38
 800919a:	2202      	movs	r2, #2
 800919c:	920f      	str	r2, [sp, #60]	; 0x3c
	const struct spi_buf_set tx = {
 800919e:	aa0e      	add	r2, sp, #56	; 0x38
 80091a0:	9210      	str	r2, [sp, #64]	; 0x40
 80091a2:	2201      	movs	r2, #1
			eth_enc28j60_rx(dev);
			/* Clear rx interruption flag */
			eth_enc28j60_clear_eth_reg(dev, ENC28J60_REG_EIR,
 80091a4:	68a3      	ldr	r3, [r4, #8]
	const struct spi_buf_set tx = {
 80091a6:	9211      	str	r2, [sp, #68]	; 0x44
	buf[0] = ENC28J60_SPI_BFC | (reg_addr & 0xFF);
 80091a8:	f244 12bc 	movw	r2, #16828	; 0x41bc
 80091ac:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
	spi_write(context->spi, &context->spi_cfg, &tx);
 80091b0:	f503 716a 	add.w	r1, r3, #936	; 0x3a8
 80091b4:	aa10      	add	r2, sp, #64	; 0x40
 80091b6:	f8d3 0398 	ldr.w	r0, [r3, #920]	; 0x398
 80091ba:	f00c fab9 	bl	8015730 <spi_write>
 80091be:	e739      	b.n	8009034 <eth_enc28j60_rx_thread+0x18>
		pkt_buf = pkt->buffer;
 80091c0:	f8d0 b010 	ldr.w	fp, [r0, #16]
		frm_len = sys_get_le16(info) - 4;
 80091c4:	4645      	mov	r5, r8
			data_ptr = pkt_buf->data;
 80091c6:	46d9      	mov	r9, fp
 80091c8:	f859 1f08 	ldr.w	r1, [r9, #8]!
 80091cc:	910b      	str	r1, [sp, #44]	; 0x2c
			frag_len = net_buf_tailroom(pkt_buf);
 80091ce:	4648      	mov	r0, r9
 80091d0:	f00c fbc7 	bl	8015962 <net_buf_simple_tailroom>
			if (frm_len > frag_len) {
 80091d4:	4285      	cmp	r5, r0
 80091d6:	462b      	mov	r3, r5
 80091d8:	bf28      	it	cs
 80091da:	4603      	movcs	r3, r0
			eth_enc28j60_read_mem(dev, data_ptr, spi_frame_len);
 80091dc:	b29a      	uxth	r2, r3
 80091de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091e0:	68a0      	ldr	r0, [r4, #8]
 80091e2:	930a      	str	r3, [sp, #40]	; 0x28
 80091e4:	9205      	str	r2, [sp, #20]
 80091e6:	f7ff fe67 	bl	8008eb8 <eth_enc28j60_read_mem.isra.10>
			net_buf_add(pkt_buf, spi_frame_len);
 80091ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ec:	4648      	mov	r0, r9
 80091ee:	4619      	mov	r1, r3
 80091f0:	f00c fba9 	bl	8015946 <net_buf_simple_add>
			frm_len -= spi_frame_len;
 80091f4:	9b05      	ldr	r3, [sp, #20]
			pkt_buf = pkt_buf->frags;
 80091f6:	f8db b000 	ldr.w	fp, [fp]
			frm_len -= spi_frame_len;
 80091fa:	1aed      	subs	r5, r5, r3
 80091fc:	b2ad      	uxth	r5, r5
		} while (frm_len > 0);
 80091fe:	2d00      	cmp	r5, #0
 8009200:	d1e1      	bne.n	80091c6 <eth_enc28j60_rx_thread+0x1aa>
		eth_enc28j60_read_mem(dev, NULL, 4);
 8009202:	2204      	movs	r2, #4
 8009204:	4629      	mov	r1, r5
 8009206:	68a0      	ldr	r0, [r4, #8]
 8009208:	f7ff fe56 	bl	8008eb8 <eth_enc28j60_read_mem.isra.10>
		if (lengthfr & 0x01) {
 800920c:	f018 0f01 	tst.w	r8, #1
 8009210:	d004      	beq.n	800921c <eth_enc28j60_rx_thread+0x200>
			eth_enc28j60_read_mem(dev, NULL, 1);
 8009212:	2201      	movs	r2, #1
 8009214:	4629      	mov	r1, r5
 8009216:	68a0      	ldr	r0, [r4, #8]
 8009218:	f7ff fe4e 	bl	8008eb8 <eth_enc28j60_read_mem.isra.10>
		if (net_recv_data(context->iface, pkt) < 0) {
 800921c:	4639      	mov	r1, r7
 800921e:	6830      	ldr	r0, [r6, #0]
 8009220:	f001 fa80 	bl	800a724 <net_recv_data>
 8009224:	2800      	cmp	r0, #0
 8009226:	da8e      	bge.n	8009146 <eth_enc28j60_rx_thread+0x12a>
			net_pkt_unref(pkt);
 8009228:	4638      	mov	r0, r7
 800922a:	f00d fbaf 	bl	801698c <net_pkt_unref>
 800922e:	e78a      	b.n	8009146 <eth_enc28j60_rx_thread+0x12a>
 8009230:	08019248 	.word	0x08019248
 8009234:	08019250 	.word	0x08019250
 8009238:	20008fd4 	.word	0x20008fd4
 800923c:	0801b3d5 	.word	0x0801b3d5

08009240 <eth_enc28j60_tx>:
{
 8009240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct eth_enc28j60_runtime *context = dev->driver_data;
 8009244:	6887      	ldr	r7, [r0, #8]
	u16_t len = net_pkt_get_len(pkt);
 8009246:	690d      	ldr	r5, [r1, #16]
{
 8009248:	b087      	sub	sp, #28
 800924a:	4604      	mov	r4, r0
 800924c:	460e      	mov	r6, r1
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
 800924e:	2300      	movs	r3, #0

	while (buf) {
 8009250:	2d00      	cmp	r5, #0
 8009252:	f040 8090 	bne.w	8009376 <eth_enc28j60_tx+0x136>
	u16_t len = net_pkt_get_len(pkt);
 8009256:	fa1f f883 	uxth.w	r8, r3
	k_sem_take(&context->tx_rx_sem, K_FOREVER);
 800925a:	f507 7770 	add.w	r7, r7, #960	; 0x3c0
	return z_impl_k_sem_take(sem, timeout);
 800925e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009262:	4638      	mov	r0, r7
 8009264:	f009 fb62 	bl	801292c <z_impl_k_sem_take>
	eth_enc28j60_set_eth_reg(dev, ENC28J60_REG_ECON1,
 8009268:	2280      	movs	r2, #128	; 0x80
 800926a:	211f      	movs	r1, #31
 800926c:	68a0      	ldr	r0, [r4, #8]
 800926e:	f00c fa7b 	bl	8015768 <eth_enc28j60_set_eth_reg.isra.8>
	eth_enc28j60_clear_eth_reg(dev, ENC28J60_REG_ECON1,
 8009272:	68a3      	ldr	r3, [r4, #8]
	const struct spi_buf tx_buf = {
 8009274:	aa01      	add	r2, sp, #4
 8009276:	9202      	str	r2, [sp, #8]
	buf[0] = ENC28J60_SPI_BFC | (reg_addr & 0xFF);
 8009278:	f248 02bf 	movw	r2, #32959	; 0x80bf
	spi_write(context->spi, &context->spi_cfg, &tx);
 800927c:	f503 716a 	add.w	r1, r3, #936	; 0x3a8
 8009280:	f8d3 0398 	ldr.w	r0, [r3, #920]	; 0x398
	buf[0] = ENC28J60_SPI_BFC | (reg_addr & 0xFF);
 8009284:	f8ad 2004 	strh.w	r2, [sp, #4]
	const struct spi_buf tx_buf = {
 8009288:	f04f 0b02 	mov.w	fp, #2
	spi_write(context->spi, &context->spi_cfg, &tx);
 800928c:	aa04      	add	r2, sp, #16
	const struct spi_buf_set tx = {
 800928e:	f10d 0908 	add.w	r9, sp, #8
 8009292:	f04f 0a01 	mov.w	sl, #1
	const struct spi_buf tx_buf = {
 8009296:	f8cd b00c 	str.w	fp, [sp, #12]
	const struct spi_buf_set tx = {
 800929a:	f8cd 9010 	str.w	r9, [sp, #16]
 800929e:	f8cd a014 	str.w	sl, [sp, #20]
	spi_write(context->spi, &context->spi_cfg, &tx);
 80092a2:	f00c fa45 	bl	8015730 <spi_write>
	eth_enc28j60_set_bank(dev, ENC28J60_REG_ETXSTL);
 80092a6:	2104      	movs	r1, #4
 80092a8:	68a0      	ldr	r0, [r4, #8]
 80092aa:	f00c faa2 	bl	80157f2 <eth_enc28j60_set_bank.isra.5>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_EWRPTL, tx_bufaddr & 0xFF);
 80092ae:	462a      	mov	r2, r5
 80092b0:	4659      	mov	r1, fp
 80092b2:	68a0      	ldr	r0, [r4, #8]
 80092b4:	f00c fa3f 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_EWRPTH, tx_bufaddr >> 8);
 80092b8:	220c      	movs	r2, #12
 80092ba:	2103      	movs	r1, #3
 80092bc:	68a0      	ldr	r0, [r4, #8]
 80092be:	f00c fa3a 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ETXSTL, tx_bufaddr & 0xFF);
 80092c2:	462a      	mov	r2, r5
 80092c4:	2104      	movs	r1, #4
 80092c6:	68a0      	ldr	r0, [r4, #8]
 80092c8:	f00c fa35 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ETXSTH, tx_bufaddr >> 8);
 80092cc:	220c      	movs	r2, #12
 80092ce:	2105      	movs	r1, #5
 80092d0:	68a0      	ldr	r0, [r4, #8]
 80092d2:	f00c fa30 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_mem(dev, &per_packet_control, 1);
 80092d6:	4652      	mov	r2, sl
 80092d8:	4649      	mov	r1, r9
 80092da:	68a0      	ldr	r0, [r4, #8]
	per_packet_control = ENC28J60_PPCTL_BYTE;
 80092dc:	f88d 5008 	strb.w	r5, [sp, #8]
	eth_enc28j60_write_mem(dev, &per_packet_control, 1);
 80092e0:	f7ff fe48 	bl	8008f74 <eth_enc28j60_write_mem.isra.11>
	for (frag = pkt->frags; frag; frag = frag->frags) {
 80092e4:	6936      	ldr	r6, [r6, #16]
 80092e6:	68a0      	ldr	r0, [r4, #8]
 80092e8:	2e00      	cmp	r6, #0
 80092ea:	d148      	bne.n	800937e <eth_enc28j60_tx+0x13e>
	tx_bufaddr_end = tx_bufaddr + len;
 80092ec:	f508 6540 	add.w	r5, r8, #3072	; 0xc00
 80092f0:	b2ad      	uxth	r5, r5
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ETXNDL,
 80092f2:	b2ea      	uxtb	r2, r5
 80092f4:	2106      	movs	r1, #6
 80092f6:	f00c fa1e 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ETXNDH, tx_bufaddr_end >> 8);
 80092fa:	0a2a      	lsrs	r2, r5, #8
 80092fc:	2107      	movs	r1, #7
 80092fe:	68a0      	ldr	r0, [r4, #8]
 8009300:	f00c fa19 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_set_eth_reg(dev, ENC28J60_REG_ECON1,
 8009304:	2208      	movs	r2, #8
 8009306:	211f      	movs	r1, #31
 8009308:	68a0      	ldr	r0, [r4, #8]
 800930a:	f00c fa2d 	bl	8015768 <eth_enc28j60_set_eth_reg.isra.8>
	z_impl_k_busy_wait(usec_to_wait);
 800930e:	200b      	movs	r0, #11
 8009310:	f009 fb4a 	bl	80129a8 <z_impl_k_busy_wait>
		eth_enc28j60_read_reg(dev, ENC28J60_REG_EIR, &tx_end);
 8009314:	aa04      	add	r2, sp, #16
 8009316:	211c      	movs	r1, #28
 8009318:	68a0      	ldr	r0, [r4, #8]
 800931a:	f00c fa3e 	bl	801579a <eth_enc28j60_read_reg.isra.7>
		tx_end &= ENC28J60_BIT_EIR_TXIF;
 800931e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009322:	f003 0308 	and.w	r3, r3, #8
 8009326:	f88d 3010 	strb.w	r3, [sp, #16]
	} while (!tx_end);
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0ef      	beq.n	800930e <eth_enc28j60_tx+0xce>
	eth_enc28j60_read_reg(dev, ENC28J60_REG_ESTAT, &tx_end);
 800932e:	aa04      	add	r2, sp, #16
 8009330:	211d      	movs	r1, #29
 8009332:	68a0      	ldr	r0, [r4, #8]
 8009334:	f00c fa31 	bl	801579a <eth_enc28j60_read_reg.isra.7>
	z_impl_k_sem_give(sem);
 8009338:	4638      	mov	r0, r7
 800933a:	f009 facb 	bl	80128d4 <z_impl_k_sem_give>
	if (tx_end & ENC28J60_BIT_ESTAT_TXABRT) {
 800933e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8009342:	f010 0002 	ands.w	r0, r0, #2
 8009346:	d013      	beq.n	8009370 <eth_enc28j60_tx+0x130>
		LOG_ERR("TX failed!");
 8009348:	4b10      	ldr	r3, [pc, #64]	; (800938c <eth_enc28j60_tx+0x14c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	075b      	lsls	r3, r3, #29
 800934e:	d00d      	beq.n	800936c <eth_enc28j60_tx+0x12c>
 8009350:	2301      	movs	r3, #1
 8009352:	f04f 0100 	mov.w	r1, #0
 8009356:	f363 0107 	bfi	r1, r3, #0, #8
 800935a:	4a0d      	ldr	r2, [pc, #52]	; (8009390 <eth_enc28j60_tx+0x150>)
 800935c:	4b0d      	ldr	r3, [pc, #52]	; (8009394 <eth_enc28j60_tx+0x154>)
 800935e:	480e      	ldr	r0, [pc, #56]	; (8009398 <eth_enc28j60_tx+0x158>)
 8009360:	1a9b      	subs	r3, r3, r2
 8009362:	08db      	lsrs	r3, r3, #3
 8009364:	f363 118f 	bfi	r1, r3, #6, #10
 8009368:	f00a fc4b 	bl	8013c02 <log_0>
		return -EIO;
 800936c:	f06f 0004 	mvn.w	r0, #4
}
 8009370:	b007      	add	sp, #28
 8009372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bytes += buf->len;
 8009376:	89aa      	ldrh	r2, [r5, #12]
		buf = buf->frags;
 8009378:	682d      	ldr	r5, [r5, #0]
		bytes += buf->len;
 800937a:	4413      	add	r3, r2
		buf = buf->frags;
 800937c:	e768      	b.n	8009250 <eth_enc28j60_tx+0x10>
		eth_enc28j60_write_mem(dev, frag->data, frag->len);
 800937e:	89b2      	ldrh	r2, [r6, #12]
 8009380:	68b1      	ldr	r1, [r6, #8]
 8009382:	f7ff fdf7 	bl	8008f74 <eth_enc28j60_write_mem.isra.11>
	for (frag = pkt->frags; frag; frag = frag->frags) {
 8009386:	6836      	ldr	r6, [r6, #0]
 8009388:	e7ad      	b.n	80092e6 <eth_enc28j60_tx+0xa6>
 800938a:	bf00      	nop
 800938c:	20008fd4 	.word	0x20008fd4
 8009390:	08019248 	.word	0x08019248
 8009394:	08019250 	.word	0x08019250
 8009398:	0801b3f2 	.word	0x0801b3f2

0800939c <eth_enc28j60_init>:
	.send			= eth_enc28j60_tx,
};

static int eth_enc28j60_init(struct device *dev)
{
	const struct eth_enc28j60_config *config = dev->config->config_info;
 800939c:	6803      	ldr	r3, [r0, #0]
{
 800939e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct eth_enc28j60_config *config = dev->config->config_info;
 80093a2:	689d      	ldr	r5, [r3, #8]
	struct eth_enc28j60_runtime *context = dev->driver_data;
 80093a4:	6886      	ldr	r6, [r0, #8]

	/* SPI config */
	context->spi_cfg.operation = SPI_WORD_SET(8);
 80093a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093aa:	f8a6 33ac 	strh.w	r3, [r6, #940]	; 0x3ac
	context->spi_cfg.frequency = config->spi_freq;
 80093ae:	696b      	ldr	r3, [r5, #20]
 80093b0:	f8c6 33a8 	str.w	r3, [r6, #936]	; 0x3a8
	context->spi_cfg.slave = config->spi_slave;
 80093b4:	7e2b      	ldrb	r3, [r5, #24]
 80093b6:	f8a6 33ae 	strh.w	r3, [r6, #942]	; 0x3ae
{
 80093ba:	4604      	mov	r4, r0
 80093bc:	b08c      	sub	sp, #48	; 0x30

	context->spi = device_get_binding((char *)config->spi_port);
 80093be:	68a8      	ldr	r0, [r5, #8]
 80093c0:	f008 fbba 	bl	8011b38 <z_impl_device_get_binding>
 80093c4:	f8c6 0398 	str.w	r0, [r6, #920]	; 0x398
	if (!context->spi) {
 80093c8:	b9c8      	cbnz	r0, 80093fe <eth_enc28j60_init+0x62>

		LOG_ERR("SPI master port %s not found", config->spi_port);
 80093ca:	4b59      	ldr	r3, [pc, #356]	; (8009530 <eth_enc28j60_init+0x194>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	075e      	lsls	r6, r3, #29
 80093d0:	d105      	bne.n	80093de <eth_enc28j60_init+0x42>
		return -EINVAL;
 80093d2:	f06f 0515 	mvn.w	r5, #21
			0, K_NO_WAIT);

	LOG_INF("ENC28J60 Initialized");

	return 0;
}
 80093d6:	4628      	mov	r0, r5
 80093d8:	b00c      	add	sp, #48	; 0x30
 80093da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("SPI master port %s not found", config->spi_port);
 80093de:	2301      	movs	r3, #1
 80093e0:	f04f 0200 	mov.w	r2, #0
 80093e4:	f363 0207 	bfi	r2, r3, #0, #8
 80093e8:	4952      	ldr	r1, [pc, #328]	; (8009534 <eth_enc28j60_init+0x198>)
 80093ea:	4b53      	ldr	r3, [pc, #332]	; (8009538 <eth_enc28j60_init+0x19c>)
 80093ec:	4853      	ldr	r0, [pc, #332]	; (800953c <eth_enc28j60_init+0x1a0>)
 80093ee:	1a5b      	subs	r3, r3, r1
 80093f0:	08db      	lsrs	r3, r3, #3
 80093f2:	68a9      	ldr	r1, [r5, #8]
 80093f4:	f363 128f 	bfi	r2, r3, #6, #10
 80093f8:	f00a fc10 	bl	8013c1c <log_1>
 80093fc:	e7e9      	b.n	80093d2 <eth_enc28j60_init+0x36>
		device_get_binding((char *)config->spi_cs_port);
 80093fe:	6928      	ldr	r0, [r5, #16]
 8009400:	f008 fb9a 	bl	8011b38 <z_impl_device_get_binding>
	context->spi_cs.gpio_dev =
 8009404:	f8c6 039c 	str.w	r0, [r6, #924]	; 0x39c
	if (!context->spi_cs.gpio_dev) {
 8009408:	b988      	cbnz	r0, 800942e <eth_enc28j60_init+0x92>
		LOG_ERR("SPI CS port %s not found", config->spi_cs_port);
 800940a:	4b49      	ldr	r3, [pc, #292]	; (8009530 <eth_enc28j60_init+0x194>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	075c      	lsls	r4, r3, #29
 8009410:	d0df      	beq.n	80093d2 <eth_enc28j60_init+0x36>
 8009412:	2301      	movs	r3, #1
 8009414:	f04f 0200 	mov.w	r2, #0
 8009418:	f363 0207 	bfi	r2, r3, #0, #8
 800941c:	4945      	ldr	r1, [pc, #276]	; (8009534 <eth_enc28j60_init+0x198>)
 800941e:	4b46      	ldr	r3, [pc, #280]	; (8009538 <eth_enc28j60_init+0x19c>)
 8009420:	4847      	ldr	r0, [pc, #284]	; (8009540 <eth_enc28j60_init+0x1a4>)
 8009422:	1a5b      	subs	r3, r3, r1
 8009424:	08db      	lsrs	r3, r3, #3
 8009426:	f363 128f 	bfi	r2, r3, #6, #10
 800942a:	6929      	ldr	r1, [r5, #16]
 800942c:	e7e4      	b.n	80093f8 <eth_enc28j60_init+0x5c>
	context->spi_cs.gpio_pin = config->spi_cs_pin;
 800942e:	7b2b      	ldrb	r3, [r5, #12]
 8009430:	f8c6 33a0 	str.w	r3, [r6, #928]	; 0x3a0
	context->spi_cfg.cs = &context->spi_cs;
 8009434:	f506 7367 	add.w	r3, r6, #924	; 0x39c
 8009438:	f8c6 33b0 	str.w	r3, [r6, #944]	; 0x3b0
	context->gpio = device_get_binding((char *)config->gpio_port);
 800943c:	6828      	ldr	r0, [r5, #0]
 800943e:	f008 fb7b 	bl	8011b38 <z_impl_device_get_binding>
 8009442:	f8c6 0394 	str.w	r0, [r6, #916]	; 0x394
	if (!context->gpio) {
 8009446:	b988      	cbnz	r0, 800946c <eth_enc28j60_init+0xd0>
		LOG_ERR("GPIO port %s not found", config->gpio_port);
 8009448:	4b39      	ldr	r3, [pc, #228]	; (8009530 <eth_enc28j60_init+0x194>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	0758      	lsls	r0, r3, #29
 800944e:	d0c0      	beq.n	80093d2 <eth_enc28j60_init+0x36>
 8009450:	2301      	movs	r3, #1
 8009452:	f04f 0200 	mov.w	r2, #0
 8009456:	f363 0207 	bfi	r2, r3, #0, #8
 800945a:	4936      	ldr	r1, [pc, #216]	; (8009534 <eth_enc28j60_init+0x198>)
 800945c:	4b36      	ldr	r3, [pc, #216]	; (8009538 <eth_enc28j60_init+0x19c>)
 800945e:	4839      	ldr	r0, [pc, #228]	; (8009544 <eth_enc28j60_init+0x1a8>)
 8009460:	1a5b      	subs	r3, r3, r1
 8009462:	08db      	lsrs	r3, r3, #3
 8009464:	f363 128f 	bfi	r2, r3, #6, #10
 8009468:	6829      	ldr	r1, [r5, #0]
 800946a:	e7c5      	b.n	80093f8 <eth_enc28j60_init+0x5c>
	if (gpio_pin_configure(context->gpio, config->gpio_pin,
 800946c:	792a      	ldrb	r2, [r5, #4]
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
 800946e:	6843      	ldr	r3, [r0, #4]
 8009470:	2100      	movs	r1, #0
 8009472:	681f      	ldr	r7, [r3, #0]
 8009474:	2332      	movs	r3, #50	; 0x32
 8009476:	47b8      	blx	r7
 8009478:	b188      	cbz	r0, 800949e <eth_enc28j60_init+0x102>
		LOG_ERR("Unable to configure GPIO pin %u",
 800947a:	4b2d      	ldr	r3, [pc, #180]	; (8009530 <eth_enc28j60_init+0x194>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	0759      	lsls	r1, r3, #29
 8009480:	d0a7      	beq.n	80093d2 <eth_enc28j60_init+0x36>
 8009482:	2301      	movs	r3, #1
 8009484:	f04f 0200 	mov.w	r2, #0
 8009488:	f363 0207 	bfi	r2, r3, #0, #8
 800948c:	4929      	ldr	r1, [pc, #164]	; (8009534 <eth_enc28j60_init+0x198>)
 800948e:	4b2a      	ldr	r3, [pc, #168]	; (8009538 <eth_enc28j60_init+0x19c>)
 8009490:	482d      	ldr	r0, [pc, #180]	; (8009548 <eth_enc28j60_init+0x1ac>)
 8009492:	1a5b      	subs	r3, r3, r1
 8009494:	08db      	lsrs	r3, r3, #3
 8009496:	f363 128f 	bfi	r2, r3, #6, #10
 800949a:	7929      	ldrb	r1, [r5, #4]
 800949c:	e7ac      	b.n	80093f8 <eth_enc28j60_init+0x5c>
			   BIT(config->gpio_pin));
 800949e:	792b      	ldrb	r3, [r5, #4]
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 80094a0:	4a2a      	ldr	r2, [pc, #168]	; (800954c <eth_enc28j60_init+0x1b0>)
	if (gpio_add_callback(context->gpio, &(context->gpio_cb))) {
 80094a2:	f8d6 0394 	ldr.w	r0, [r6, #916]	; 0x394
			   BIT(config->gpio_pin));
 80094a6:	2701      	movs	r7, #1
 80094a8:	fa07 f303 	lsl.w	r3, r7, r3
	callback->pin_mask = pin_mask;
 80094ac:	e9c6 23ee 	strd	r2, r3, [r6, #952]	; 0x3b8
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
 80094b0:	6843      	ldr	r3, [r0, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
	gpio_init_callback(&(context->gpio_cb), eth_enc28j60_gpio_callback,
 80094b4:	f506 716d 	add.w	r1, r6, #948	; 0x3b4
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d08a      	beq.n	80093d2 <eth_enc28j60_init+0x36>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 80094bc:	463a      	mov	r2, r7
 80094be:	4798      	blx	r3
	if (gpio_add_callback(context->gpio, &(context->gpio_cb))) {
 80094c0:	4601      	mov	r1, r0
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d185      	bne.n	80093d2 <eth_enc28j60_init+0x36>
	if (gpio_pin_enable_callback(context->gpio, config->gpio_pin)) {
 80094c6:	f8d6 0394 	ldr.w	r0, [r6, #916]	; 0x394
 80094ca:	792a      	ldrb	r2, [r5, #4]
	if (api->enable_callback == NULL) {
 80094cc:	6843      	ldr	r3, [r0, #4]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f43f af7e 	beq.w	80093d2 <eth_enc28j60_init+0x36>
	return api->enable_callback(port, access_op, pin);
 80094d6:	4798      	blx	r3
 80094d8:	2800      	cmp	r0, #0
 80094da:	f47f af7a 	bne.w	80093d2 <eth_enc28j60_init+0x36>
	u8_t buf[2] = { ENC28J60_SPI_SC, 0xFF };
 80094de:	f64f 72ff 	movw	r2, #65535	; 0xffff
	if (eth_enc28j60_soft_reset(dev)) {
 80094e2:	68a3      	ldr	r3, [r4, #8]
	u8_t buf[2] = { ENC28J60_SPI_SC, 0xFF };
 80094e4:	f8ad 201c 	strh.w	r2, [sp, #28]
	const struct spi_buf tx_buf = {
 80094e8:	aa07      	add	r2, sp, #28
 80094ea:	e9cd 2708 	strd	r2, r7, [sp, #32]
	const struct spi_buf_set tx = {
 80094ee:	aa08      	add	r2, sp, #32
 80094f0:	e9cd 270a 	strd	r2, r7, [sp, #40]	; 0x28
	return spi_write(context->spi, &context->spi_cfg, &tx);
 80094f4:	f503 716a 	add.w	r1, r3, #936	; 0x3a8
 80094f8:	aa0a      	add	r2, sp, #40	; 0x28
 80094fa:	f8d3 0398 	ldr.w	r0, [r3, #920]	; 0x398
 80094fe:	f00c f917 	bl	8015730 <spi_write>
	if (eth_enc28j60_soft_reset(dev)) {
 8009502:	4605      	mov	r5, r0
 8009504:	b330      	cbz	r0, 8009554 <eth_enc28j60_init+0x1b8>
		LOG_ERR("Soft-reset failed");
 8009506:	4b0a      	ldr	r3, [pc, #40]	; (8009530 <eth_enc28j60_init+0x194>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	075a      	lsls	r2, r3, #29
 800950c:	d00c      	beq.n	8009528 <eth_enc28j60_init+0x18c>
 800950e:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <eth_enc28j60_init+0x19c>)
 8009510:	4a08      	ldr	r2, [pc, #32]	; (8009534 <eth_enc28j60_init+0x198>)
 8009512:	480f      	ldr	r0, [pc, #60]	; (8009550 <eth_enc28j60_init+0x1b4>)
 8009514:	f04f 0100 	mov.w	r1, #0
 8009518:	1a9b      	subs	r3, r3, r2
 800951a:	f367 0107 	bfi	r1, r7, #0, #8
 800951e:	08db      	lsrs	r3, r3, #3
 8009520:	f363 118f 	bfi	r1, r3, #6, #10
 8009524:	f00a fb6d 	bl	8013c02 <log_0>
		return -EIO;
 8009528:	f06f 0504 	mvn.w	r5, #4
 800952c:	e753      	b.n	80093d6 <eth_enc28j60_init+0x3a>
 800952e:	bf00      	nop
 8009530:	20008fd4 	.word	0x20008fd4
 8009534:	08019248 	.word	0x08019248
 8009538:	08019250 	.word	0x08019250
 800953c:	0801b32b 	.word	0x0801b32b
 8009540:	0801b348 	.word	0x0801b348
 8009544:	0801b361 	.word	0x0801b361
 8009548:	0801b378 	.word	0x0801b378
 800954c:	08015729 	.word	0x08015729
 8009550:	0801b398 	.word	0x0801b398
	z_impl_k_busy_wait(usec_to_wait);
 8009554:	200b      	movs	r0, #11
 8009556:	f009 fa27 	bl	80129a8 <z_impl_k_busy_wait>
	context->mac_address[2] = MICROCHIP_OUI_B2;
 800955a:	f04f 08a3 	mov.w	r8, #163	; 0xa3
	context->mac_address[0] = MICROCHIP_OUI_B0;
 800955e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009562:	f8a6 338c 	strh.w	r3, [r6, #908]	; 0x38c
	context->mac_address[2] = MICROCHIP_OUI_B2;
 8009566:	f886 838e 	strb.w	r8, [r6, #910]	; 0x38e
	eth_enc28j60_set_bank(dev, ENC28J60_REG_ERXSTL);
 800956a:	2108      	movs	r1, #8
 800956c:	68a0      	ldr	r0, [r4, #8]
 800956e:	f00c f940 	bl	80157f2 <eth_enc28j60_set_bank.isra.5>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ERXSTL,
 8009572:	462a      	mov	r2, r5
 8009574:	2108      	movs	r1, #8
 8009576:	68a0      	ldr	r0, [r4, #8]
 8009578:	f00c f8dd 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ERXSTH,
 800957c:	462a      	mov	r2, r5
 800957e:	2109      	movs	r1, #9
 8009580:	68a0      	ldr	r0, [r4, #8]
 8009582:	f00c f8d8 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ERXRDPTL,
 8009586:	462a      	mov	r2, r5
 8009588:	210c      	movs	r1, #12
 800958a:	68a0      	ldr	r0, [r4, #8]
 800958c:	f00c f8d3 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ERXRDPTH,
 8009590:	462a      	mov	r2, r5
 8009592:	210d      	movs	r1, #13
 8009594:	68a0      	ldr	r0, [r4, #8]
 8009596:	f00c f8ce 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ERXNDL,
 800959a:	22ff      	movs	r2, #255	; 0xff
 800959c:	210a      	movs	r1, #10
 800959e:	68a0      	ldr	r0, [r4, #8]
 80095a0:	f00c f8c9 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ERXNDH,
 80095a4:	220b      	movs	r2, #11
 80095a6:	4611      	mov	r1, r2
 80095a8:	68a0      	ldr	r0, [r4, #8]
 80095aa:	f00c f8c4 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ETXSTL,
 80095ae:	462a      	mov	r2, r5
 80095b0:	2104      	movs	r1, #4
 80095b2:	68a0      	ldr	r0, [r4, #8]
 80095b4:	f00c f8bf 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ETXSTH,
 80095b8:	220c      	movs	r2, #12
 80095ba:	2105      	movs	r1, #5
 80095bc:	68a0      	ldr	r0, [r4, #8]
 80095be:	f00c f8ba 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ETXNDL,
 80095c2:	22ff      	movs	r2, #255	; 0xff
 80095c4:	2106      	movs	r1, #6
 80095c6:	68a0      	ldr	r0, [r4, #8]
 80095c8:	f00c f8b5 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ETXNDH,
 80095cc:	2211      	movs	r2, #17
 80095ce:	2107      	movs	r1, #7
 80095d0:	68a0      	ldr	r0, [r4, #8]
 80095d2:	f00c f8b0 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ERDPTL,
 80095d6:	462a      	mov	r2, r5
 80095d8:	4629      	mov	r1, r5
 80095da:	68a0      	ldr	r0, [r4, #8]
 80095dc:	f00c f8ab 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ERDPTH,
 80095e0:	462a      	mov	r2, r5
 80095e2:	4639      	mov	r1, r7
 80095e4:	68a0      	ldr	r0, [r4, #8]
 80095e6:	f00c f8a6 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_EWRPTL,
 80095ea:	462a      	mov	r2, r5
 80095ec:	2102      	movs	r1, #2
 80095ee:	68a0      	ldr	r0, [r4, #8]
 80095f0:	f00c f8a1 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_EWRPTH,
 80095f4:	220c      	movs	r2, #12
 80095f6:	2103      	movs	r1, #3
 80095f8:	68a0      	ldr	r0, [r4, #8]
 80095fa:	f00c f89c 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_set_bank(dev, ENC28J60_REG_ERXFCON);
 80095fe:	f44f 718c 	mov.w	r1, #280	; 0x118
 8009602:	68a0      	ldr	r0, [r4, #8]
 8009604:	f00c f8f5 	bl	80157f2 <eth_enc28j60_set_bank.isra.5>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_ERXFCON,
 8009608:	4642      	mov	r2, r8
 800960a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800960e:	68a0      	ldr	r0, [r4, #8]
 8009610:	f00c f891 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
 8009614:	200b      	movs	r0, #11
 8009616:	f009 f9c7 	bl	80129a8 <z_impl_k_busy_wait>
		eth_enc28j60_read_reg(dev, ENC28J60_REG_ESTAT, &data_estat);
 800961a:	aa0a      	add	r2, sp, #40	; 0x28
 800961c:	211d      	movs	r1, #29
 800961e:	68a0      	ldr	r0, [r4, #8]
 8009620:	f00c f8bb 	bl	801579a <eth_enc28j60_read_reg.isra.7>
	} while (!(data_estat & ENC28J60_BIT_ESTAT_CLKRDY));
 8009624:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8009628:	07db      	lsls	r3, r3, #31
 800962a:	d5f3      	bpl.n	8009614 <eth_enc28j60_init+0x278>
	struct eth_enc28j60_runtime *context = dev->driver_data;
 800962c:	68a7      	ldr	r7, [r4, #8]
	const struct eth_enc28j60_config *config = dev->config->config_info;
 800962e:	6823      	ldr	r3, [r4, #0]
	eth_enc28j60_set_bank(dev, ENC28J60_REG_MACON1);
 8009630:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8009634:	4638      	mov	r0, r7
	const struct eth_enc28j60_config *config = dev->config->config_info;
 8009636:	f8d3 8008 	ldr.w	r8, [r3, #8]
	eth_enc28j60_set_bank(dev, ENC28J60_REG_MACON1);
 800963a:	f00c f8da 	bl	80157f2 <eth_enc28j60_set_bank.isra.5>
	eth_enc28j60_read_reg(dev, ENC28J60_REG_MACON1, &data_macon);
 800963e:	aa0a      	add	r2, sp, #40	; 0x28
 8009640:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8009644:	68a0      	ldr	r0, [r4, #8]
 8009646:	f00c f8a8 	bl	801579a <eth_enc28j60_read_reg.isra.7>
	data_macon |= ENC28J60_BIT_MACON1_MARXEN | ENC28J60_BIT_MACON1_RXPAUS
 800964a:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
	eth_enc28j60_write_reg(dev, ENC28J60_REG_MACON1, data_macon);
 800964e:	68a0      	ldr	r0, [r4, #8]
	data_macon |= ENC28J60_BIT_MACON1_MARXEN | ENC28J60_BIT_MACON1_RXPAUS
 8009650:	f042 020d 	orr.w	r2, r2, #13
	eth_enc28j60_write_reg(dev, ENC28J60_REG_MACON1, data_macon);
 8009654:	f44f 5190 	mov.w	r1, #4608	; 0x1200
	data_macon |= ENC28J60_BIT_MACON1_MARXEN | ENC28J60_BIT_MACON1_RXPAUS
 8009658:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	eth_enc28j60_write_reg(dev, ENC28J60_REG_MACON1, data_macon);
 800965c:	f00c f86b 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	data_macon = ENC28J60_MAC_CONFIG;
 8009660:	2332      	movs	r3, #50	; 0x32
 8009662:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	if (config->full_duplex) {
 8009666:	f898 3019 	ldrb.w	r3, [r8, #25]
 800966a:	b113      	cbz	r3, 8009672 <eth_enc28j60_init+0x2d6>
		data_macon |= ENC28J60_BIT_MACON3_FULDPX;
 800966c:	2333      	movs	r3, #51	; 0x33
 800966e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	eth_enc28j60_write_reg(dev, ENC28J60_REG_MACON3, data_macon);
 8009672:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8009676:	68a0      	ldr	r0, [r4, #8]
 8009678:	f241 2102 	movw	r1, #4610	; 0x1202
 800967c:	f00c f85b 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_MAIPGL, ENC28J60_MAC_NBBIPGL);
 8009680:	2212      	movs	r2, #18
 8009682:	f241 2106 	movw	r1, #4614	; 0x1206
 8009686:	68a0      	ldr	r0, [r4, #8]
 8009688:	f00c f855 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	if (config->full_duplex) {
 800968c:	f898 3019 	ldrb.w	r3, [r8, #25]
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 8082 	beq.w	800979a <eth_enc28j60_init+0x3fe>
		eth_enc28j60_write_reg(dev, ENC28J60_REG_MAIPGH,
 8009696:	220c      	movs	r2, #12
 8009698:	f241 2107 	movw	r1, #4615	; 0x1207
 800969c:	68a0      	ldr	r0, [r4, #8]
 800969e:	f00c f84a 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
		eth_enc28j60_write_reg(dev, ENC28J60_REG_MABBIPG,
 80096a2:	2215      	movs	r2, #21
 80096a4:	f241 2104 	movw	r1, #4612	; 0x1204
		eth_enc28j60_write_reg(dev, ENC28J60_REG_MACON4, 1 << 6);
 80096a8:	68a0      	ldr	r0, [r4, #8]
 80096aa:	f00c f844 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_set_bank(dev, ENC28J60_REG_MAADR0);
 80096ae:	f241 3101 	movw	r1, #4865	; 0x1301
 80096b2:	68a0      	ldr	r0, [r4, #8]
 80096b4:	f00c f89d 	bl	80157f2 <eth_enc28j60_set_bank.isra.5>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_MAADR0,
 80096b8:	f897 2391 	ldrb.w	r2, [r7, #913]	; 0x391
 80096bc:	68a0      	ldr	r0, [r4, #8]
 80096be:	f241 3101 	movw	r1, #4865	; 0x1301
 80096c2:	f00c f838 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_MAADR1,
 80096c6:	f897 2390 	ldrb.w	r2, [r7, #912]	; 0x390
 80096ca:	68a0      	ldr	r0, [r4, #8]
 80096cc:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80096d0:	f00c f831 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_MAADR2,
 80096d4:	f897 238f 	ldrb.w	r2, [r7, #911]	; 0x38f
 80096d8:	68a0      	ldr	r0, [r4, #8]
 80096da:	f241 3103 	movw	r1, #4867	; 0x1303
 80096de:	f00c f82a 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_MAADR3,
 80096e2:	f897 238e 	ldrb.w	r2, [r7, #910]	; 0x38e
 80096e6:	68a0      	ldr	r0, [r4, #8]
 80096e8:	f241 3102 	movw	r1, #4866	; 0x1302
 80096ec:	f00c f823 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_MAADR4,
 80096f0:	f897 238d 	ldrb.w	r2, [r7, #909]	; 0x38d
 80096f4:	68a0      	ldr	r0, [r4, #8]
 80096f6:	f241 3105 	movw	r1, #4869	; 0x1305
 80096fa:	f00c f81c 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_MAADR5,
 80096fe:	f897 238c 	ldrb.w	r2, [r7, #908]	; 0x38c
 8009702:	68a0      	ldr	r0, [r4, #8]
 8009704:	f241 3104 	movw	r1, #4868	; 0x1304
 8009708:	f00c f815 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	const struct eth_enc28j60_config *config = dev->config->config_info;
 800970c:	6823      	ldr	r3, [r4, #0]
	if (config->full_duplex) {
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	7e5a      	ldrb	r2, [r3, #25]
 8009712:	2a00      	cmp	r2, #0
 8009714:	d04b      	beq.n	80097ae <eth_enc28j60_init+0x412>
		eth_enc28j60_write_phy(dev, ENC28J60_PHY_PHCON1,
 8009716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800971a:	2100      	movs	r1, #0
 800971c:	4620      	mov	r0, r4
 800971e:	f00c f89a 	bl	8015856 <eth_enc28j60_write_phy>
		eth_enc28j60_write_phy(dev, ENC28J60_PHY_PHCON2, 0x0);
 8009722:	2200      	movs	r2, #0
		eth_enc28j60_write_phy(dev, ENC28J60_PHY_PHCON2,
 8009724:	4620      	mov	r0, r4
 8009726:	2110      	movs	r1, #16
 8009728:	f00c f895 	bl	8015856 <eth_enc28j60_write_phy>
	eth_enc28j60_set_eth_reg(dev, ENC28J60_REG_EIE, ENC28J60_BIT_EIE_INTIE);
 800972c:	68a0      	ldr	r0, [r4, #8]
 800972e:	2280      	movs	r2, #128	; 0x80
 8009730:	211b      	movs	r1, #27
 8009732:	f00c f819 	bl	8015768 <eth_enc28j60_set_eth_reg.isra.8>
	eth_enc28j60_set_eth_reg(dev, ENC28J60_REG_EIE, ENC28J60_BIT_EIE_PKTIE);
 8009736:	68a0      	ldr	r0, [r4, #8]
 8009738:	2240      	movs	r2, #64	; 0x40
 800973a:	211b      	movs	r1, #27
 800973c:	f00c f814 	bl	8015768 <eth_enc28j60_set_eth_reg.isra.8>
	eth_enc28j60_set_eth_reg(dev, ENC28J60_REG_ECON1,
 8009740:	2204      	movs	r2, #4
 8009742:	211f      	movs	r1, #31
 8009744:	68a0      	ldr	r0, [r4, #8]
 8009746:	f00c f80f 	bl	8015768 <eth_enc28j60_set_eth_reg.isra.8>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800974a:	2300      	movs	r3, #0
 800974c:	f06f 020d 	mvn.w	r2, #13
 8009750:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009754:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8009758:	e9cd 4300 	strd	r4, r3, [sp]
 800975c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009760:	4b16      	ldr	r3, [pc, #88]	; (80097bc <eth_enc28j60_init+0x420>)
 8009762:	f106 0108 	add.w	r1, r6, #8
 8009766:	f506 704a 	add.w	r0, r6, #808	; 0x328
 800976a:	f009 f96f 	bl	8012a4c <z_impl_k_thread_create>
	LOG_INF("ENC28J60 Initialized");
 800976e:	4b14      	ldr	r3, [pc, #80]	; (80097c0 <eth_enc28j60_init+0x424>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 0307 	and.w	r3, r3, #7
 8009776:	2b02      	cmp	r3, #2
 8009778:	f67f ae2d 	bls.w	80093d6 <eth_enc28j60_init+0x3a>
 800977c:	2303      	movs	r3, #3
 800977e:	f04f 0100 	mov.w	r1, #0
 8009782:	f363 0107 	bfi	r1, r3, #0, #8
 8009786:	4a0f      	ldr	r2, [pc, #60]	; (80097c4 <eth_enc28j60_init+0x428>)
 8009788:	4b0f      	ldr	r3, [pc, #60]	; (80097c8 <eth_enc28j60_init+0x42c>)
 800978a:	4810      	ldr	r0, [pc, #64]	; (80097cc <eth_enc28j60_init+0x430>)
 800978c:	1a9b      	subs	r3, r3, r2
 800978e:	08db      	lsrs	r3, r3, #3
 8009790:	f363 118f 	bfi	r1, r3, #6, #10
 8009794:	f00a fa35 	bl	8013c02 <log_0>
 8009798:	e61d      	b.n	80093d6 <eth_enc28j60_init+0x3a>
		eth_enc28j60_write_reg(dev, ENC28J60_REG_MABBIPG,
 800979a:	2212      	movs	r2, #18
 800979c:	f241 2104 	movw	r1, #4612	; 0x1204
 80097a0:	68a0      	ldr	r0, [r4, #8]
 80097a2:	f00b ffc8 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
		eth_enc28j60_write_reg(dev, ENC28J60_REG_MACON4, 1 << 6);
 80097a6:	2240      	movs	r2, #64	; 0x40
 80097a8:	f241 2103 	movw	r1, #4611	; 0x1203
 80097ac:	e77c      	b.n	80096a8 <eth_enc28j60_init+0x30c>
		eth_enc28j60_write_phy(dev, ENC28J60_PHY_PHCON1, 0x0);
 80097ae:	4611      	mov	r1, r2
 80097b0:	4620      	mov	r0, r4
 80097b2:	f00c f850 	bl	8015856 <eth_enc28j60_write_phy>
		eth_enc28j60_write_phy(dev, ENC28J60_PHY_PHCON2,
 80097b6:	2201      	movs	r2, #1
 80097b8:	e7b4      	b.n	8009724 <eth_enc28j60_init+0x388>
 80097ba:	bf00      	nop
 80097bc:	0800901d 	.word	0x0800901d
 80097c0:	20008fd4 	.word	0x20008fd4
 80097c4:	08019248 	.word	0x08019248
 80097c8:	08019250 	.word	0x08019250
 80097cc:	0801b3aa 	.word	0x0801b3aa

080097d0 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static u32_t elapsed(void)
{
	u32_t val1 = SysTick->VAL;	/* A */
 80097d0:	4b0b      	ldr	r3, [pc, #44]	; (8009800 <elapsed+0x30>)
 80097d2:	689a      	ldr	r2, [r3, #8]
	u32_t ctrl = SysTick->CTRL;	/* B */
 80097d4:	6819      	ldr	r1, [r3, #0]
	u32_t val2 = SysTick->VAL;	/* C */
 80097d6:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 80097d8:	4b0a      	ldr	r3, [pc, #40]	; (8009804 <elapsed+0x34>)
 80097da:	f411 3f80 	tst.w	r1, #65536	; 0x10000
{
 80097de:	b510      	push	{r4, lr}
 80097e0:	4909      	ldr	r1, [pc, #36]	; (8009808 <elapsed+0x38>)
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 80097e2:	d101      	bne.n	80097e8 <elapsed+0x18>
	    || (val1 < val2)) {
 80097e4:	4282      	cmp	r2, r0
 80097e6:	d205      	bcs.n	80097f4 <elapsed+0x24>
		overflow_cyc += last_load;
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	680c      	ldr	r4, [r1, #0]
 80097ec:	4422      	add	r2, r4
 80097ee:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 80097f0:	4a03      	ldr	r2, [pc, #12]	; (8009800 <elapsed+0x30>)
 80097f2:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	680a      	ldr	r2, [r1, #0]
 80097f8:	4413      	add	r3, r2
}
 80097fa:	1a18      	subs	r0, r3, r0
 80097fc:	bd10      	pop	{r4, pc}
 80097fe:	bf00      	nop
 8009800:	e000e010 	.word	0xe000e010
 8009804:	2000055c 	.word	0x2000055c
 8009808:	20000558 	.word	0x20000558

0800980c <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 800980c:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	u32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 800980e:	f7ff ffdf 	bl	80097d0 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8009812:	4b0c      	ldr	r3, [pc, #48]	; (8009844 <z_clock_isr+0x38>)
 8009814:	4a0c      	ldr	r2, [pc, #48]	; (8009848 <z_clock_isr+0x3c>)
 8009816:	6818      	ldr	r0, [r3, #0]
 8009818:	6811      	ldr	r1, [r2, #0]
 800981a:	4408      	add	r0, r1
 800981c:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800981e:	2200      	movs	r2, #0
 8009820:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8009822:	4a0a      	ldr	r2, [pc, #40]	; (800984c <z_clock_isr+0x40>)
 8009824:	6811      	ldr	r1, [r2, #0]
 8009826:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 800982a:	1a40      	subs	r0, r0, r1
 800982c:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 8009830:	fb03 1300 	mla	r3, r3, r0, r1
 8009834:	6013      	str	r3, [r2, #0]
		z_clock_announce(dticks);
 8009836:	f009 fabf 	bl	8012db8 <z_clock_announce>
	} else {
		z_clock_announce(1);
	}
	z_arm_exc_exit();
}
 800983a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
 800983e:	f000 b8bb 	b.w	80099b8 <z_arm_exc_exit>
 8009842:	bf00      	nop
 8009844:	2000055c 	.word	0x2000055c
 8009848:	20000554 	.word	0x20000554
 800984c:	20000550 	.word	0x20000550

08009850 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009850:	4b09      	ldr	r3, [pc, #36]	; (8009878 <z_clock_driver_init+0x28>)
 8009852:	2210      	movs	r2, #16
 8009854:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

int z_clock_driver_init(struct device *device)
{
	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8009858:	4b08      	ldr	r3, [pc, #32]	; (800987c <z_clock_driver_init+0x2c>)
 800985a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800985e:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8009860:	4b07      	ldr	r3, [pc, #28]	; (8009880 <z_clock_driver_init+0x30>)
 8009862:	2000      	movs	r0, #0
 8009864:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8009866:	4b07      	ldr	r3, [pc, #28]	; (8009884 <z_clock_driver_init+0x34>)
 8009868:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 800986a:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	f042 0207 	orr.w	r2, r2, #7
 8009872:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	e000ed00 	.word	0xe000ed00
 800987c:	20000558 	.word	0x20000558
 8009880:	2000055c 	.word	0x2000055c
 8009884:	e000e010 	.word	0xe000e010

08009888 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	4604      	mov	r4, r0
 800988c:	4d2a      	ldr	r5, [pc, #168]	; (8009938 <z_clock_set_timeout+0xb0>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle && ticks == K_FOREVER) {
 800988e:	b151      	cbz	r1, 80098a6 <z_clock_set_timeout+0x1e>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d10e      	bne.n	80098b2 <z_clock_set_timeout+0x2a>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8009894:	4a29      	ldr	r2, [pc, #164]	; (800993c <z_clock_set_timeout+0xb4>)
 8009896:	6813      	ldr	r3, [r2, #0]
 8009898:	f023 0301 	bic.w	r3, r3, #1
 800989c:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 800989e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80098a2:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 80098a4:	bd70      	pop	{r4, r5, r6, pc}
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
 80098a6:	f640 1319 	movw	r3, #2329	; 0x919
 80098aa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80098ae:	bf08      	it	eq
 80098b0:	461c      	moveq	r4, r3
	__asm__ volatile(
 80098b2:	f04f 0310 	mov.w	r3, #16
 80098b6:	f3ef 8611 	mrs	r6, BASEPRI
 80098ba:	f383 8811 	msr	BASEPRI, r3
 80098be:	f3bf 8f6f 	isb	sy
	u32_t pending = elapsed();
 80098c2:	f7ff ff85 	bl	80097d0 <elapsed>
	cycle_count += pending;
 80098c6:	4b1e      	ldr	r3, [pc, #120]	; (8009940 <z_clock_set_timeout+0xb8>)
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	4410      	add	r0, r2
 80098cc:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 80098ce:	4b1d      	ldr	r3, [pc, #116]	; (8009944 <z_clock_set_timeout+0xbc>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	601a      	str	r2, [r3, #0]
	u32_t unannounced = cycle_count - announced_cycles;
 80098d4:	4b1c      	ldr	r3, [pc, #112]	; (8009948 <z_clock_set_timeout+0xc0>)
 80098d6:	681b      	ldr	r3, [r3, #0]
	if ((s32_t)unannounced < 0) {
 80098d8:	1ac2      	subs	r2, r0, r3
 80098da:	d50d      	bpl.n	80098f8 <z_clock_set_timeout+0x70>
		last_load = MIN_DELAY;
 80098dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = MAX_CYCLES;
 80098e0:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
 80098e2:	682b      	ldr	r3, [r5, #0]
 80098e4:	4a15      	ldr	r2, [pc, #84]	; (800993c <z_clock_set_timeout+0xb4>)
 80098e6:	3b01      	subs	r3, #1
 80098e8:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 80098ea:	2300      	movs	r3, #0
 80098ec:	6093      	str	r3, [r2, #8]
	__asm__ volatile(
 80098ee:	f386 8811 	msr	BASEPRI, r6
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	e7d5      	b.n	80098a4 <z_clock_set_timeout+0x1c>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
 80098f8:	3c01      	subs	r4, #1
		delay = ticks * CYC_PER_TICK;
 80098fa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80098fe:	f640 1119 	movw	r1, #2329	; 0x919
 8009902:	428c      	cmp	r4, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8009904:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
		delay = ticks * CYC_PER_TICK;
 8009908:	bfa8      	it	ge
 800990a:	460c      	movge	r4, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800990c:	321f      	adds	r2, #31
		delay = ticks * CYC_PER_TICK;
 800990e:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
		delay -= unannounced;
 8009912:	1a18      	subs	r0, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8009914:	fb01 2404 	mla	r4, r1, r4, r2
 8009918:	fbb4 f4f1 	udiv	r4, r4, r1
		delay -= unannounced;
 800991c:	fb01 0404 	mla	r4, r1, r4, r0
		delay = MAX(delay, MIN_DELAY);
 8009920:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009924:	d904      	bls.n	8009930 <z_clock_set_timeout+0xa8>
		if (delay > MAX_CYCLES) {
 8009926:	4b09      	ldr	r3, [pc, #36]	; (800994c <z_clock_set_timeout+0xc4>)
 8009928:	429c      	cmp	r4, r3
 800992a:	d8d9      	bhi.n	80098e0 <z_clock_set_timeout+0x58>
			last_load = delay;
 800992c:	602c      	str	r4, [r5, #0]
 800992e:	e7d8      	b.n	80098e2 <z_clock_set_timeout+0x5a>
		delay = MAX(delay, MIN_DELAY);
 8009930:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009934:	e7fa      	b.n	800992c <z_clock_set_timeout+0xa4>
 8009936:	bf00      	nop
 8009938:	20000558 	.word	0x20000558
 800993c:	e000e010 	.word	0xe000e010
 8009940:	20000554 	.word	0x20000554
 8009944:	2000055c 	.word	0x2000055c
 8009948:	20000550 	.word	0x20000550
 800994c:	00ffdf20 	.word	0x00ffdf20

08009950 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
 8009950:	b510      	push	{r4, lr}
	__asm__ volatile(
 8009952:	f04f 0310 	mov.w	r3, #16
 8009956:	f3ef 8411 	mrs	r4, BASEPRI
 800995a:	f383 8811 	msr	BASEPRI, r3
 800995e:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc = elapsed() + cycle_count - announced_cycles;
 8009962:	f7ff ff35 	bl	80097d0 <elapsed>
 8009966:	4b07      	ldr	r3, [pc, #28]	; (8009984 <z_clock_elapsed+0x34>)
 8009968:	4a07      	ldr	r2, [pc, #28]	; (8009988 <z_clock_elapsed+0x38>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6812      	ldr	r2, [r2, #0]
 800996e:	1a9b      	subs	r3, r3, r2
 8009970:	4418      	add	r0, r3
	__asm__ volatile(
 8009972:	f384 8811 	msr	BASEPRI, r4
 8009976:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 800997a:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 800997e:	fbb0 f0f3 	udiv	r0, r0, r3
 8009982:	bd10      	pop	{r4, pc}
 8009984:	20000554 	.word	0x20000554
 8009988:	20000550 	.word	0x20000550

0800998c <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
 800998c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800998e:	f04f 0310 	mov.w	r3, #16
 8009992:	f3ef 8411 	mrs	r4, BASEPRI
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = elapsed() + cycle_count;
 800999e:	f7ff ff17 	bl	80097d0 <elapsed>
 80099a2:	4b04      	ldr	r3, [pc, #16]	; (80099b4 <z_timer_cycle_get_32+0x28>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4418      	add	r0, r3
	__asm__ volatile(
 80099a8:	f384 8811 	msr	BASEPRI, r4
 80099ac:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 80099b0:	bd10      	pop	{r4, pc}
 80099b2:	bf00      	nop
 80099b4:	20000554 	.word	0x20000554

080099b8 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
 80099b8:	4804      	ldr	r0, [pc, #16]	; (80099cc <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
 80099ba:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
 80099bc:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
 80099be:	4288      	cmp	r0, r1
    beq _EXIT_EXC
 80099c0:	d003      	beq.n	80099ca <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
 80099c2:	4903      	ldr	r1, [pc, #12]	; (80099d0 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
 80099c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
 80099c8:	600a      	str	r2, [r1, #0]

080099ca <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
 80099ca:	4770      	bx	lr
    ldr r0, =_kernel
 80099cc:	200018f8 	.word	0x200018f8
    ldr r1, =_SCS_ICSR
 80099d0:	e000ed04 	.word	0xe000ed04

080099d4 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
 80099d4:	4a09      	ldr	r2, [pc, #36]	; (80099fc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 80099d6:	490a      	ldr	r1, [pc, #40]	; (8009a00 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 80099d8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 80099da:	6809      	ldr	r1, [r1, #0]
 80099dc:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80099de:	4909      	ldr	r1, [pc, #36]	; (8009a04 <arch_swap+0x30>)
	_current->arch.basepri = key;
 80099e0:	65d8      	str	r0, [r3, #92]	; 0x5c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80099e2:	684b      	ldr	r3, [r1, #4]
 80099e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099e8:	604b      	str	r3, [r1, #4]
 80099ea:	2300      	movs	r3, #0
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 80099f4:	6893      	ldr	r3, [r2, #8]
}
 80099f6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	200018f8 	.word	0x200018f8
 8009a00:	0801a37c 	.word	0x0801a37c
 8009a04:	e000ed00 	.word	0xe000ed00

08009a08 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8009a08:	490f      	ldr	r1, [pc, #60]	; (8009a48 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8009a0a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8009a0c:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
 8009a10:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8009a12:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8009a16:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8009a1a:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8009a1c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8009a20:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8009a24:	4f09      	ldr	r7, [pc, #36]	; (8009a4c <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8009a26:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8009a2a:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 8009a2c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8009a2e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8009a30:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
    movs r3, #0
 8009a32:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8009a34:	65d3      	str	r3, [r2, #92]	; 0x5c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8009a36:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8009a3a:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
 8009a3e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8009a42:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
 8009a46:	4770      	bx	lr
    ldr r1, =_kernel
 8009a48:	200018f8 	.word	0x200018f8
    ldr v4, =_SCS_ICSR
 8009a4c:	e000ed04 	.word	0xe000ed04

08009a50 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 8009a50:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8009a54:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8009a56:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8009a5a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8009a5e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8009a60:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8009a64:	2902      	cmp	r1, #2
    beq _oops
 8009a66:	d0ff      	beq.n	8009a68 <_oops>

08009a68 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8009a68:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8009a6a:	f00b ff27 	bl	80158bc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8009a6e:	bd01      	pop	{r0, pc}

08009a70 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8009a70:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	db08      	blt.n	8009a88 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a76:	2201      	movs	r2, #1
 8009a78:	f000 001f 	and.w	r0, r0, #31
 8009a7c:	fa02 f000 	lsl.w	r0, r2, r0
 8009a80:	095b      	lsrs	r3, r3, #5
 8009a82:	4a02      	ldr	r2, [pc, #8]	; (8009a8c <arch_irq_enable+0x1c>)
 8009a84:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	e000e100 	.word	0xe000e100

08009a90 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8009a90:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8009a92:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a94:	bfa8      	it	ge
 8009a96:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 8009a9a:	f101 0101 	add.w	r1, r1, #1
 8009a9e:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8009aa2:	bfae      	itee	ge
 8009aa4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009aa8:	f000 000f 	andlt.w	r0, r0, #15
 8009aac:	4b03      	ldrlt	r3, [pc, #12]	; (8009abc <z_arm_irq_priority_set+0x2c>)
 8009aae:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ab0:	bfac      	ite	ge
 8009ab2:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ab6:	5419      	strblt	r1, [r3, r0]
}
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	e000ed14 	.word	0xe000ed14

08009ac0 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
 8009ac0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ac2:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
 8009ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac6:	9300      	str	r3, [sp, #0]
	stackEnd = pStackMem + stackSize;
 8009ac8:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
 8009aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
 8009acc:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
 8009ace:	f00e ff79 	bl	80189c4 <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 8009ad2:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
 8009ad6:	4a0a      	ldr	r2, [pc, #40]	; (8009b00 <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 8009ad8:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
 8009adc:	f022 0201 	bic.w	r2, r2, #1
 8009ae0:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
 8009ae2:	9a06      	ldr	r2, [sp, #24]
 8009ae4:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
 8009ae6:	9a07      	ldr	r2, [sp, #28]
 8009ae8:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
 8009aea:	9a08      	ldr	r2, [sp, #32]
 8009aec:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
 8009aee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
 8009af2:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
 8009af4:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
 8009af6:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	65eb      	str	r3, [r5, #92]	; 0x5c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8009afc:	b002      	add	sp, #8
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	08013449 	.word	0x08013449

08009b04 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
 8009b04:	b510      	push	{r4, lr}
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8009b06:	2400      	movs	r4, #0
 8009b08:	eee1 4a10 	vmsr	fpscr, r4
#endif

	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
 8009b0c:	4411      	add	r1, r2
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
 8009b0e:	4a08      	ldr	r2, [pc, #32]	; (8009b30 <arch_switch_to_main_thread+0x2c>)
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
 8009b10:	f021 0107 	bic.w	r1, r1, #7
	_current = main_thread;
 8009b14:	6090      	str	r0, [r2, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8009b16:	4618      	mov	r0, r3
 8009b18:	f381 8809 	msr	PSP, r1
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	b663      	cpsie	if
 8009b20:	f381 8811 	msr	BASEPRI, r1
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	2200      	movs	r2, #0
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f009 fc8c 	bl	8013448 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8009b30:	200018f8 	.word	0x200018f8

08009b34 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
 8009b34:	4901      	ldr	r1, [pc, #4]	; (8009b3c <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
 8009b36:	2210      	movs	r2, #16
	str r2, [r1]
 8009b38:	600a      	str	r2, [r1, #0]
#endif
	bx lr
 8009b3a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
 8009b3c:	e000ed10 	.word	0xe000ed10

08009b40 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
 8009b40:	4040      	eors	r0, r0
	msr BASEPRI, r0
 8009b42:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
 8009b46:	bf30      	wfi

	bx lr
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop

08009b4c <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
 8009b4c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8009b50:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
 8009b54:	4672      	mov	r2, lr

	push {r0, lr}
 8009b56:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
 8009b58:	f000 faf2 	bl	800a140 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
 8009b5c:	bd01      	pop	{r0, pc}
 8009b5e:	bf00      	nop

08009b60 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8009b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b62:	4606      	mov	r6, r0

	if (esf != NULL) {
 8009b64:	460c      	mov	r4, r1
 8009b66:	2900      	cmp	r1, #0
 8009b68:	d045      	beq.n	8009bf6 <z_arm_fatal_error+0x96>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8009b6a:	4f26      	ldr	r7, [pc, #152]	; (8009c04 <z_arm_fatal_error+0xa4>)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	0758      	lsls	r0, r3, #29
 8009b70:	d041      	beq.n	8009bf6 <z_arm_fatal_error+0x96>
 8009b72:	2201      	movs	r2, #1
 8009b74:	f04f 0300 	mov.w	r3, #0
 8009b78:	f362 0307 	bfi	r3, r2, #0, #8
 8009b7c:	4d22      	ldr	r5, [pc, #136]	; (8009c08 <z_arm_fatal_error+0xa8>)
 8009b7e:	4a23      	ldr	r2, [pc, #140]	; (8009c0c <z_arm_fatal_error+0xac>)
 8009b80:	4823      	ldr	r0, [pc, #140]	; (8009c10 <z_arm_fatal_error+0xb0>)
 8009b82:	1aad      	subs	r5, r5, r2
 8009b84:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8009b88:	f365 138f 	bfi	r3, r5, #6, #10
 8009b8c:	f8ad 3000 	strh.w	r3, [sp]
 8009b90:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 8009b94:	6809      	ldr	r1, [r1, #0]
 8009b96:	f00a f86d 	bl	8013c74 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	0759      	lsls	r1, r3, #29
 8009b9e:	d02a      	beq.n	8009bf6 <z_arm_fatal_error+0x96>
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f04f 0300 	mov.w	r3, #0
 8009ba6:	f362 0307 	bfi	r3, r2, #0, #8
 8009baa:	f365 138f 	bfi	r3, r5, #6, #10
 8009bae:	f8ad 3000 	strh.w	r3, [sp]
 8009bb2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8009bb6:	68e1      	ldr	r1, [r4, #12]
 8009bb8:	4816      	ldr	r0, [pc, #88]	; (8009c14 <z_arm_fatal_error+0xb4>)
 8009bba:	f00a f85b 	bl	8013c74 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	075a      	lsls	r2, r3, #29
 8009bc2:	d018      	beq.n	8009bf6 <z_arm_fatal_error+0x96>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	f04f 0200 	mov.w	r2, #0
 8009bca:	f363 0207 	bfi	r2, r3, #0, #8
 8009bce:	f365 128f 	bfi	r2, r5, #6, #10
 8009bd2:	69e1      	ldr	r1, [r4, #28]
 8009bd4:	4810      	ldr	r0, [pc, #64]	; (8009c18 <z_arm_fatal_error+0xb8>)
 8009bd6:	f00a f821 	bl	8013c1c <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	075b      	lsls	r3, r3, #29
 8009bde:	d00a      	beq.n	8009bf6 <z_arm_fatal_error+0x96>
 8009be0:	f04f 0200 	mov.w	r2, #0
 8009be4:	2301      	movs	r3, #1
 8009be6:	f363 0207 	bfi	r2, r3, #0, #8
 8009bea:	f365 128f 	bfi	r2, r5, #6, #10
 8009bee:	69a1      	ldr	r1, [r4, #24]
 8009bf0:	480a      	ldr	r0, [pc, #40]	; (8009c1c <z_arm_fatal_error+0xbc>)
 8009bf2:	f00a f813 	bl	8013c1c <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4630      	mov	r0, r6
}
 8009bfa:	b003      	add	sp, #12
 8009bfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	z_fatal_error(reason, esf);
 8009c00:	f007 bfe8 	b.w	8011bd4 <z_fatal_error>
 8009c04:	2000903c 	.word	0x2000903c
 8009c08:	08019320 	.word	0x08019320
 8009c0c:	08019248 	.word	0x08019248
 8009c10:	0801b446 	.word	0x0801b446
 8009c14:	0801b475 	.word	0x0801b475
 8009c18:	0801b4a4 	.word	0x0801b4a4
 8009c1c:	0801b4b3 	.word	0x0801b4b3

08009c20 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8009c20:	bf30      	wfi
    b z_SysNmiOnReset
 8009c22:	f7ff bffd 	b.w	8009c20 <z_SysNmiOnReset>
 8009c26:	bf00      	nop

08009c28 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8009c28:	4a11      	ldr	r2, [pc, #68]	; (8009c70 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8009c2a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8009c2c:	4b11      	ldr	r3, [pc, #68]	; (8009c74 <z_arm_prep_c+0x4c>)
 8009c2e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8009c32:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009c34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009c38:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 8009c3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009c40:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8009c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
 8009c48:	4a0b      	ldr	r2, [pc, #44]	; (8009c78 <z_arm_prep_c+0x50>)
 8009c4a:	6853      	ldr	r3, [r2, #4]
 8009c4c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009c50:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8009c52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009c56:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
 8009c60:	f008 f82e 	bl	8011cc0 <z_bss_zero>
	z_data_copy();
 8009c64:	f008 f836 	bl	8011cd4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
 8009c68:	f000 fb88 	bl	800a37c <z_arm_int_lib_init>
	z_cstart();
 8009c6c:	f008 f86a 	bl	8011d44 <z_cstart>
 8009c70:	08000000 	.word	0x08000000
 8009c74:	e000ed00 	.word	0xe000ed00
 8009c78:	e000ef30 	.word	0xe000ef30

08009c7c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8009c7c:	b501      	push	{r0, lr}

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8009c7e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8009c82:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8009c86:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
 8009c8a:	4904      	ldr	r1, [pc, #16]	; (8009c9c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8009c8c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8009c8e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
 8009c90:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8009c92:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8009c96:	4902      	ldr	r1, [pc, #8]	; (8009ca0 <_isr_wrapper+0x24>)
	bx r1
 8009c98:	4708      	bx	r1
 8009c9a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8009c9c:	08018e58 	.word	0x08018e58
	ldr r1, =z_arm_int_exit
 8009ca0:	080099b9 	.word	0x080099b9

08009ca4 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8009ca4:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8009ca6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
 8009caa:	4808      	ldr	r0, [pc, #32]	; (8009ccc <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
 8009cac:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 8009cb0:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8009cb2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8009cb6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8009cba:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8009cbc:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8009cbe:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8009cc2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8009cc6:	f7ff ffaf 	bl	8009c28 <z_arm_prep_c>
 8009cca:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
 8009ccc:	20003b18 	.word	0x20003b18

08009cd0 <usage_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
 8009cd0:	b510      	push	{r4, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 8009cd2:	4c4c      	ldr	r4, [pc, #304]	; (8009e04 <usage_fault.isra.2+0x134>)
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	075b      	lsls	r3, r3, #29
 8009cd8:	d00d      	beq.n	8009cf6 <usage_fault.isra.2+0x26>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	f04f 0100 	mov.w	r1, #0
 8009ce0:	f363 0107 	bfi	r1, r3, #0, #8
 8009ce4:	4a48      	ldr	r2, [pc, #288]	; (8009e08 <usage_fault.isra.2+0x138>)
 8009ce6:	4b49      	ldr	r3, [pc, #292]	; (8009e0c <usage_fault.isra.2+0x13c>)
 8009ce8:	4849      	ldr	r0, [pc, #292]	; (8009e10 <usage_fault.isra.2+0x140>)
 8009cea:	1a9b      	subs	r3, r3, r2
 8009cec:	08db      	lsrs	r3, r3, #3
 8009cee:	f363 118f 	bfi	r1, r3, #6, #10
 8009cf2:	f009 ff86 	bl	8013c02 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8009cf6:	4b47      	ldr	r3, [pc, #284]	; (8009e14 <usage_fault.isra.2+0x144>)
 8009cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfa:	0198      	lsls	r0, r3, #6
 8009cfc:	d510      	bpl.n	8009d20 <usage_fault.isra.2+0x50>
		PR_FAULT_INFO("  Division by zero");
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	0759      	lsls	r1, r3, #29
 8009d02:	d00d      	beq.n	8009d20 <usage_fault.isra.2+0x50>
 8009d04:	2301      	movs	r3, #1
 8009d06:	f04f 0100 	mov.w	r1, #0
 8009d0a:	f363 0107 	bfi	r1, r3, #0, #8
 8009d0e:	4a3e      	ldr	r2, [pc, #248]	; (8009e08 <usage_fault.isra.2+0x138>)
 8009d10:	4b3e      	ldr	r3, [pc, #248]	; (8009e0c <usage_fault.isra.2+0x13c>)
 8009d12:	4841      	ldr	r0, [pc, #260]	; (8009e18 <usage_fault.isra.2+0x148>)
 8009d14:	1a9b      	subs	r3, r3, r2
 8009d16:	08db      	lsrs	r3, r3, #3
 8009d18:	f363 118f 	bfi	r1, r3, #6, #10
 8009d1c:	f009 ff71 	bl	8013c02 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8009d20:	4b3c      	ldr	r3, [pc, #240]	; (8009e14 <usage_fault.isra.2+0x144>)
 8009d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d24:	01da      	lsls	r2, r3, #7
 8009d26:	d510      	bpl.n	8009d4a <usage_fault.isra.2+0x7a>
		PR_FAULT_INFO("  Unaligned memory access");
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	075b      	lsls	r3, r3, #29
 8009d2c:	d00d      	beq.n	8009d4a <usage_fault.isra.2+0x7a>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	f04f 0100 	mov.w	r1, #0
 8009d34:	f363 0107 	bfi	r1, r3, #0, #8
 8009d38:	4a33      	ldr	r2, [pc, #204]	; (8009e08 <usage_fault.isra.2+0x138>)
 8009d3a:	4b34      	ldr	r3, [pc, #208]	; (8009e0c <usage_fault.isra.2+0x13c>)
 8009d3c:	4837      	ldr	r0, [pc, #220]	; (8009e1c <usage_fault.isra.2+0x14c>)
 8009d3e:	1a9b      	subs	r3, r3, r2
 8009d40:	08db      	lsrs	r3, r3, #3
 8009d42:	f363 118f 	bfi	r1, r3, #6, #10
 8009d46:	f009 ff5c 	bl	8013c02 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8009d4a:	4b32      	ldr	r3, [pc, #200]	; (8009e14 <usage_fault.isra.2+0x144>)
 8009d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4e:	0318      	lsls	r0, r3, #12
 8009d50:	d510      	bpl.n	8009d74 <usage_fault.isra.2+0xa4>
		PR_FAULT_INFO("  No coprocessor instructions");
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	0759      	lsls	r1, r3, #29
 8009d56:	d00d      	beq.n	8009d74 <usage_fault.isra.2+0xa4>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	f04f 0100 	mov.w	r1, #0
 8009d5e:	f363 0107 	bfi	r1, r3, #0, #8
 8009d62:	4a29      	ldr	r2, [pc, #164]	; (8009e08 <usage_fault.isra.2+0x138>)
 8009d64:	4b29      	ldr	r3, [pc, #164]	; (8009e0c <usage_fault.isra.2+0x13c>)
 8009d66:	482e      	ldr	r0, [pc, #184]	; (8009e20 <usage_fault.isra.2+0x150>)
 8009d68:	1a9b      	subs	r3, r3, r2
 8009d6a:	08db      	lsrs	r3, r3, #3
 8009d6c:	f363 118f 	bfi	r1, r3, #6, #10
 8009d70:	f009 ff47 	bl	8013c02 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8009d74:	4b27      	ldr	r3, [pc, #156]	; (8009e14 <usage_fault.isra.2+0x144>)
 8009d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d78:	035a      	lsls	r2, r3, #13
 8009d7a:	d510      	bpl.n	8009d9e <usage_fault.isra.2+0xce>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	075b      	lsls	r3, r3, #29
 8009d80:	d00d      	beq.n	8009d9e <usage_fault.isra.2+0xce>
 8009d82:	2301      	movs	r3, #1
 8009d84:	f04f 0100 	mov.w	r1, #0
 8009d88:	f363 0107 	bfi	r1, r3, #0, #8
 8009d8c:	4a1e      	ldr	r2, [pc, #120]	; (8009e08 <usage_fault.isra.2+0x138>)
 8009d8e:	4b1f      	ldr	r3, [pc, #124]	; (8009e0c <usage_fault.isra.2+0x13c>)
 8009d90:	4824      	ldr	r0, [pc, #144]	; (8009e24 <usage_fault.isra.2+0x154>)
 8009d92:	1a9b      	subs	r3, r3, r2
 8009d94:	08db      	lsrs	r3, r3, #3
 8009d96:	f363 118f 	bfi	r1, r3, #6, #10
 8009d9a:	f009 ff32 	bl	8013c02 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8009d9e:	4b1d      	ldr	r3, [pc, #116]	; (8009e14 <usage_fault.isra.2+0x144>)
 8009da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da2:	0398      	lsls	r0, r3, #14
 8009da4:	d510      	bpl.n	8009dc8 <usage_fault.isra.2+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	0759      	lsls	r1, r3, #29
 8009daa:	d00d      	beq.n	8009dc8 <usage_fault.isra.2+0xf8>
 8009dac:	2301      	movs	r3, #1
 8009dae:	f04f 0100 	mov.w	r1, #0
 8009db2:	f363 0107 	bfi	r1, r3, #0, #8
 8009db6:	4a14      	ldr	r2, [pc, #80]	; (8009e08 <usage_fault.isra.2+0x138>)
 8009db8:	4b14      	ldr	r3, [pc, #80]	; (8009e0c <usage_fault.isra.2+0x13c>)
 8009dba:	481b      	ldr	r0, [pc, #108]	; (8009e28 <usage_fault.isra.2+0x158>)
 8009dbc:	1a9b      	subs	r3, r3, r2
 8009dbe:	08db      	lsrs	r3, r3, #3
 8009dc0:	f363 118f 	bfi	r1, r3, #6, #10
 8009dc4:	f009 ff1d 	bl	8013c02 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8009dc8:	4b12      	ldr	r3, [pc, #72]	; (8009e14 <usage_fault.isra.2+0x144>)
 8009dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dcc:	03da      	lsls	r2, r3, #15
 8009dce:	d510      	bpl.n	8009df2 <usage_fault.isra.2+0x122>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	075b      	lsls	r3, r3, #29
 8009dd4:	d00d      	beq.n	8009df2 <usage_fault.isra.2+0x122>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	f04f 0100 	mov.w	r1, #0
 8009ddc:	f363 0107 	bfi	r1, r3, #0, #8
 8009de0:	4a09      	ldr	r2, [pc, #36]	; (8009e08 <usage_fault.isra.2+0x138>)
 8009de2:	4b0a      	ldr	r3, [pc, #40]	; (8009e0c <usage_fault.isra.2+0x13c>)
 8009de4:	4811      	ldr	r0, [pc, #68]	; (8009e2c <usage_fault.isra.2+0x15c>)
 8009de6:	1a9b      	subs	r3, r3, r2
 8009de8:	08db      	lsrs	r3, r3, #3
 8009dea:	f363 118f 	bfi	r1, r3, #6, #10
 8009dee:	f009 ff08 	bl	8013c02 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8009df2:	4a08      	ldr	r2, [pc, #32]	; (8009e14 <usage_fault.isra.2+0x144>)
 8009df4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009df6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8009dfa:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8009dfe:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 8009e00:	2000      	movs	r0, #0
 8009e02:	bd10      	pop	{r4, pc}
 8009e04:	2000903c 	.word	0x2000903c
 8009e08:	08019248 	.word	0x08019248
 8009e0c:	08019320 	.word	0x08019320
 8009e10:	0801b641 	.word	0x0801b641
 8009e14:	e000ed00 	.word	0xe000ed00
 8009e18:	0801b659 	.word	0x0801b659
 8009e1c:	0801b66c 	.word	0x0801b66c
 8009e20:	0801b686 	.word	0x0801b686
 8009e24:	0801b6a4 	.word	0x0801b6a4
 8009e28:	0801b6c9 	.word	0x0801b6c9
 8009e2c:	0801b6e3 	.word	0x0801b6e3

08009e30 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 8009e30:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
 8009e32:	4c51      	ldr	r4, [pc, #324]	; (8009f78 <mem_manage_fault.isra.4+0x148>)
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	075b      	lsls	r3, r3, #29
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 8009e38:	4606      	mov	r6, r0
 8009e3a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 8009e3c:	d00d      	beq.n	8009e5a <mem_manage_fault.isra.4+0x2a>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	f04f 0100 	mov.w	r1, #0
 8009e44:	f363 0107 	bfi	r1, r3, #0, #8
 8009e48:	4a4c      	ldr	r2, [pc, #304]	; (8009f7c <mem_manage_fault.isra.4+0x14c>)
 8009e4a:	4b4d      	ldr	r3, [pc, #308]	; (8009f80 <mem_manage_fault.isra.4+0x150>)
 8009e4c:	484d      	ldr	r0, [pc, #308]	; (8009f84 <mem_manage_fault.isra.4+0x154>)
 8009e4e:	1a9b      	subs	r3, r3, r2
 8009e50:	08db      	lsrs	r3, r3, #3
 8009e52:	f363 118f 	bfi	r1, r3, #6, #10
 8009e56:	f009 fed4 	bl	8013c02 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8009e5a:	4b4b      	ldr	r3, [pc, #300]	; (8009f88 <mem_manage_fault.isra.4+0x158>)
 8009e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e5e:	06d8      	lsls	r0, r3, #27
 8009e60:	d510      	bpl.n	8009e84 <mem_manage_fault.isra.4+0x54>
		PR_FAULT_INFO("  Stacking error (context area might be"
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	0759      	lsls	r1, r3, #29
 8009e66:	d00d      	beq.n	8009e84 <mem_manage_fault.isra.4+0x54>
 8009e68:	2301      	movs	r3, #1
 8009e6a:	f04f 0100 	mov.w	r1, #0
 8009e6e:	f363 0107 	bfi	r1, r3, #0, #8
 8009e72:	4a42      	ldr	r2, [pc, #264]	; (8009f7c <mem_manage_fault.isra.4+0x14c>)
 8009e74:	4b42      	ldr	r3, [pc, #264]	; (8009f80 <mem_manage_fault.isra.4+0x150>)
 8009e76:	4845      	ldr	r0, [pc, #276]	; (8009f8c <mem_manage_fault.isra.4+0x15c>)
 8009e78:	1a9b      	subs	r3, r3, r2
 8009e7a:	08db      	lsrs	r3, r3, #3
 8009e7c:	f363 118f 	bfi	r1, r3, #6, #10
 8009e80:	f009 febf 	bl	8013c02 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8009e84:	4b40      	ldr	r3, [pc, #256]	; (8009f88 <mem_manage_fault.isra.4+0x158>)
 8009e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e88:	071a      	lsls	r2, r3, #28
 8009e8a:	d510      	bpl.n	8009eae <mem_manage_fault.isra.4+0x7e>
		PR_FAULT_INFO("  Unstacking error");
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	075b      	lsls	r3, r3, #29
 8009e90:	d00d      	beq.n	8009eae <mem_manage_fault.isra.4+0x7e>
 8009e92:	2301      	movs	r3, #1
 8009e94:	f04f 0100 	mov.w	r1, #0
 8009e98:	f363 0107 	bfi	r1, r3, #0, #8
 8009e9c:	4a37      	ldr	r2, [pc, #220]	; (8009f7c <mem_manage_fault.isra.4+0x14c>)
 8009e9e:	4b38      	ldr	r3, [pc, #224]	; (8009f80 <mem_manage_fault.isra.4+0x150>)
 8009ea0:	483b      	ldr	r0, [pc, #236]	; (8009f90 <mem_manage_fault.isra.4+0x160>)
 8009ea2:	1a9b      	subs	r3, r3, r2
 8009ea4:	08db      	lsrs	r3, r3, #3
 8009ea6:	f363 118f 	bfi	r1, r3, #6, #10
 8009eaa:	f009 feaa 	bl	8013c02 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8009eae:	4b36      	ldr	r3, [pc, #216]	; (8009f88 <mem_manage_fault.isra.4+0x158>)
 8009eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb2:	0798      	lsls	r0, r3, #30
 8009eb4:	d52c      	bpl.n	8009f10 <mem_manage_fault.isra.4+0xe0>
		PR_FAULT_INFO("  Data Access Violation");
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	0759      	lsls	r1, r3, #29
 8009eba:	d00d      	beq.n	8009ed8 <mem_manage_fault.isra.4+0xa8>
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	f04f 0100 	mov.w	r1, #0
 8009ec2:	f363 0107 	bfi	r1, r3, #0, #8
 8009ec6:	4a2d      	ldr	r2, [pc, #180]	; (8009f7c <mem_manage_fault.isra.4+0x14c>)
 8009ec8:	4b2d      	ldr	r3, [pc, #180]	; (8009f80 <mem_manage_fault.isra.4+0x150>)
 8009eca:	4832      	ldr	r0, [pc, #200]	; (8009f94 <mem_manage_fault.isra.4+0x164>)
 8009ecc:	1a9b      	subs	r3, r3, r2
 8009ece:	08db      	lsrs	r3, r3, #3
 8009ed0:	f363 118f 	bfi	r1, r3, #6, #10
 8009ed4:	f009 fe95 	bl	8013c02 <log_0>
		mmfar = SCB->MMFAR;
 8009ed8:	4b2b      	ldr	r3, [pc, #172]	; (8009f88 <mem_manage_fault.isra.4+0x158>)
 8009eda:	6b59      	ldr	r1, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8009edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ede:	061a      	lsls	r2, r3, #24
 8009ee0:	d516      	bpl.n	8009f10 <mem_manage_fault.isra.4+0xe0>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	075b      	lsls	r3, r3, #29
 8009ee6:	d00d      	beq.n	8009f04 <mem_manage_fault.isra.4+0xd4>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	f04f 0200 	mov.w	r2, #0
 8009eee:	f363 0207 	bfi	r2, r3, #0, #8
 8009ef2:	4822      	ldr	r0, [pc, #136]	; (8009f7c <mem_manage_fault.isra.4+0x14c>)
 8009ef4:	4b22      	ldr	r3, [pc, #136]	; (8009f80 <mem_manage_fault.isra.4+0x150>)
 8009ef6:	1a1b      	subs	r3, r3, r0
 8009ef8:	08db      	lsrs	r3, r3, #3
 8009efa:	f363 128f 	bfi	r2, r3, #6, #10
 8009efe:	4826      	ldr	r0, [pc, #152]	; (8009f98 <mem_manage_fault.isra.4+0x168>)
 8009f00:	f009 fe8c 	bl	8013c1c <log_1>
			if (from_hard_fault) {
 8009f04:	b126      	cbz	r6, 8009f10 <mem_manage_fault.isra.4+0xe0>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8009f06:	4a20      	ldr	r2, [pc, #128]	; (8009f88 <mem_manage_fault.isra.4+0x158>)
 8009f08:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f0e:	6293      	str	r3, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8009f10:	4b1d      	ldr	r3, [pc, #116]	; (8009f88 <mem_manage_fault.isra.4+0x158>)
 8009f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f14:	07d8      	lsls	r0, r3, #31
 8009f16:	d510      	bpl.n	8009f3a <mem_manage_fault.isra.4+0x10a>
		PR_FAULT_INFO("  Instruction Access Violation");
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	0759      	lsls	r1, r3, #29
 8009f1c:	d00d      	beq.n	8009f3a <mem_manage_fault.isra.4+0x10a>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	f04f 0100 	mov.w	r1, #0
 8009f24:	f363 0107 	bfi	r1, r3, #0, #8
 8009f28:	4a14      	ldr	r2, [pc, #80]	; (8009f7c <mem_manage_fault.isra.4+0x14c>)
 8009f2a:	4b15      	ldr	r3, [pc, #84]	; (8009f80 <mem_manage_fault.isra.4+0x150>)
 8009f2c:	481b      	ldr	r0, [pc, #108]	; (8009f9c <mem_manage_fault.isra.4+0x16c>)
 8009f2e:	1a9b      	subs	r3, r3, r2
 8009f30:	08db      	lsrs	r3, r3, #3
 8009f32:	f363 118f 	bfi	r1, r3, #6, #10
 8009f36:	f009 fe64 	bl	8013c02 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8009f3a:	4b13      	ldr	r3, [pc, #76]	; (8009f88 <mem_manage_fault.isra.4+0x158>)
 8009f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3e:	069a      	lsls	r2, r3, #26
 8009f40:	d510      	bpl.n	8009f64 <mem_manage_fault.isra.4+0x134>
		PR_FAULT_INFO(
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	075b      	lsls	r3, r3, #29
 8009f46:	d00d      	beq.n	8009f64 <mem_manage_fault.isra.4+0x134>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	f04f 0100 	mov.w	r1, #0
 8009f4e:	f363 0107 	bfi	r1, r3, #0, #8
 8009f52:	4a0a      	ldr	r2, [pc, #40]	; (8009f7c <mem_manage_fault.isra.4+0x14c>)
 8009f54:	4b0a      	ldr	r3, [pc, #40]	; (8009f80 <mem_manage_fault.isra.4+0x150>)
 8009f56:	4812      	ldr	r0, [pc, #72]	; (8009fa0 <mem_manage_fault.isra.4+0x170>)
 8009f58:	1a9b      	subs	r3, r3, r2
 8009f5a:	08db      	lsrs	r3, r3, #3
 8009f5c:	f363 118f 	bfi	r1, r3, #6, #10
 8009f60:	f009 fe4f 	bl	8013c02 <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 8009f64:	4b08      	ldr	r3, [pc, #32]	; (8009f88 <mem_manage_fault.isra.4+0x158>)
 8009f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8009f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 8009f6a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8009f6c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8009f70:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 8009f72:	7028      	strb	r0, [r5, #0]
}
 8009f74:	bd70      	pop	{r4, r5, r6, pc}
 8009f76:	bf00      	nop
 8009f78:	2000903c 	.word	0x2000903c
 8009f7c:	08019248 	.word	0x08019248
 8009f80:	08019320 	.word	0x08019320
 8009f84:	0801b569 	.word	0x0801b569
 8009f88:	e000ed00 	.word	0xe000ed00
 8009f8c:	0801b57f 	.word	0x0801b57f
 8009f90:	0801b5b2 	.word	0x0801b5b2
 8009f94:	0801b5c5 	.word	0x0801b5c5
 8009f98:	0801b5dd 	.word	0x0801b5dd
 8009f9c:	0801b5f3 	.word	0x0801b5f3
 8009fa0:	0801b612 	.word	0x0801b612

08009fa4 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8009fa4:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
 8009fa6:	4c5a      	ldr	r4, [pc, #360]	; (800a110 <bus_fault.isra.5+0x16c>)
 8009fa8:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8009faa:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 8009fac:	0759      	lsls	r1, r3, #29
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8009fae:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
 8009fb0:	d00d      	beq.n	8009fce <bus_fault.isra.5+0x2a>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	f04f 0100 	mov.w	r1, #0
 8009fb8:	f363 0107 	bfi	r1, r3, #0, #8
 8009fbc:	4a55      	ldr	r2, [pc, #340]	; (800a114 <bus_fault.isra.5+0x170>)
 8009fbe:	4b56      	ldr	r3, [pc, #344]	; (800a118 <bus_fault.isra.5+0x174>)
 8009fc0:	4856      	ldr	r0, [pc, #344]	; (800a11c <bus_fault.isra.5+0x178>)
 8009fc2:	1a9b      	subs	r3, r3, r2
 8009fc4:	08db      	lsrs	r3, r3, #3
 8009fc6:	f363 118f 	bfi	r1, r3, #6, #10
 8009fca:	f009 fe1a 	bl	8013c02 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8009fce:	4b54      	ldr	r3, [pc, #336]	; (800a120 <bus_fault.isra.5+0x17c>)
 8009fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd2:	04da      	lsls	r2, r3, #19
 8009fd4:	d510      	bpl.n	8009ff8 <bus_fault.isra.5+0x54>
		PR_FAULT_INFO("  Stacking error");
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	075b      	lsls	r3, r3, #29
 8009fda:	d00d      	beq.n	8009ff8 <bus_fault.isra.5+0x54>
 8009fdc:	2301      	movs	r3, #1
 8009fde:	f04f 0100 	mov.w	r1, #0
 8009fe2:	f363 0107 	bfi	r1, r3, #0, #8
 8009fe6:	4a4b      	ldr	r2, [pc, #300]	; (800a114 <bus_fault.isra.5+0x170>)
 8009fe8:	4b4b      	ldr	r3, [pc, #300]	; (800a118 <bus_fault.isra.5+0x174>)
 8009fea:	484e      	ldr	r0, [pc, #312]	; (800a124 <bus_fault.isra.5+0x180>)
 8009fec:	1a9b      	subs	r3, r3, r2
 8009fee:	08db      	lsrs	r3, r3, #3
 8009ff0:	f363 118f 	bfi	r1, r3, #6, #10
 8009ff4:	f009 fe05 	bl	8013c02 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8009ff8:	4b49      	ldr	r3, [pc, #292]	; (800a120 <bus_fault.isra.5+0x17c>)
 8009ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffc:	0518      	lsls	r0, r3, #20
 8009ffe:	d510      	bpl.n	800a022 <bus_fault.isra.5+0x7e>
		PR_FAULT_INFO("  Unstacking error");
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	0759      	lsls	r1, r3, #29
 800a004:	d00d      	beq.n	800a022 <bus_fault.isra.5+0x7e>
 800a006:	2301      	movs	r3, #1
 800a008:	f04f 0100 	mov.w	r1, #0
 800a00c:	f363 0107 	bfi	r1, r3, #0, #8
 800a010:	4a40      	ldr	r2, [pc, #256]	; (800a114 <bus_fault.isra.5+0x170>)
 800a012:	4b41      	ldr	r3, [pc, #260]	; (800a118 <bus_fault.isra.5+0x174>)
 800a014:	4844      	ldr	r0, [pc, #272]	; (800a128 <bus_fault.isra.5+0x184>)
 800a016:	1a9b      	subs	r3, r3, r2
 800a018:	08db      	lsrs	r3, r3, #3
 800a01a:	f363 118f 	bfi	r1, r3, #6, #10
 800a01e:	f009 fdf0 	bl	8013c02 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 800a022:	4b3f      	ldr	r3, [pc, #252]	; (800a120 <bus_fault.isra.5+0x17c>)
 800a024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a026:	059a      	lsls	r2, r3, #22
 800a028:	d52c      	bpl.n	800a084 <bus_fault.isra.5+0xe0>
		PR_FAULT_INFO("  Precise data bus error");
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	075b      	lsls	r3, r3, #29
 800a02e:	d00d      	beq.n	800a04c <bus_fault.isra.5+0xa8>
 800a030:	2301      	movs	r3, #1
 800a032:	f04f 0100 	mov.w	r1, #0
 800a036:	f363 0107 	bfi	r1, r3, #0, #8
 800a03a:	4a36      	ldr	r2, [pc, #216]	; (800a114 <bus_fault.isra.5+0x170>)
 800a03c:	4b36      	ldr	r3, [pc, #216]	; (800a118 <bus_fault.isra.5+0x174>)
 800a03e:	483b      	ldr	r0, [pc, #236]	; (800a12c <bus_fault.isra.5+0x188>)
 800a040:	1a9b      	subs	r3, r3, r2
 800a042:	08db      	lsrs	r3, r3, #3
 800a044:	f363 118f 	bfi	r1, r3, #6, #10
 800a048:	f009 fddb 	bl	8013c02 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
 800a04c:	4b34      	ldr	r3, [pc, #208]	; (800a120 <bus_fault.isra.5+0x17c>)
 800a04e:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 800a050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a052:	0418      	lsls	r0, r3, #16
 800a054:	d516      	bpl.n	800a084 <bus_fault.isra.5+0xe0>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 800a056:	6823      	ldr	r3, [r4, #0]
 800a058:	075a      	lsls	r2, r3, #29
 800a05a:	d00d      	beq.n	800a078 <bus_fault.isra.5+0xd4>
 800a05c:	2301      	movs	r3, #1
 800a05e:	f04f 0200 	mov.w	r2, #0
 800a062:	f363 0207 	bfi	r2, r3, #0, #8
 800a066:	482b      	ldr	r0, [pc, #172]	; (800a114 <bus_fault.isra.5+0x170>)
 800a068:	4b2b      	ldr	r3, [pc, #172]	; (800a118 <bus_fault.isra.5+0x174>)
 800a06a:	1a1b      	subs	r3, r3, r0
 800a06c:	08db      	lsrs	r3, r3, #3
 800a06e:	f363 128f 	bfi	r2, r3, #6, #10
 800a072:	482f      	ldr	r0, [pc, #188]	; (800a130 <bus_fault.isra.5+0x18c>)
 800a074:	f009 fdd2 	bl	8013c1c <log_1>
			if (from_hard_fault) {
 800a078:	b126      	cbz	r6, 800a084 <bus_fault.isra.5+0xe0>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 800a07a:	4a29      	ldr	r2, [pc, #164]	; (800a120 <bus_fault.isra.5+0x17c>)
 800a07c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800a07e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a082:	6293      	str	r3, [r2, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800a084:	4b26      	ldr	r3, [pc, #152]	; (800a120 <bus_fault.isra.5+0x17c>)
 800a086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a088:	055b      	lsls	r3, r3, #21
 800a08a:	d510      	bpl.n	800a0ae <bus_fault.isra.5+0x10a>
		PR_FAULT_INFO("  Imprecise data bus error");
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	075e      	lsls	r6, r3, #29
 800a090:	d00d      	beq.n	800a0ae <bus_fault.isra.5+0x10a>
 800a092:	2301      	movs	r3, #1
 800a094:	f04f 0100 	mov.w	r1, #0
 800a098:	f363 0107 	bfi	r1, r3, #0, #8
 800a09c:	4a1d      	ldr	r2, [pc, #116]	; (800a114 <bus_fault.isra.5+0x170>)
 800a09e:	4b1e      	ldr	r3, [pc, #120]	; (800a118 <bus_fault.isra.5+0x174>)
 800a0a0:	4824      	ldr	r0, [pc, #144]	; (800a134 <bus_fault.isra.5+0x190>)
 800a0a2:	1a9b      	subs	r3, r3, r2
 800a0a4:	08db      	lsrs	r3, r3, #3
 800a0a6:	f363 118f 	bfi	r1, r3, #6, #10
 800a0aa:	f009 fdaa 	bl	8013c02 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800a0ae:	4b1c      	ldr	r3, [pc, #112]	; (800a120 <bus_fault.isra.5+0x17c>)
 800a0b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0b2:	05d0      	lsls	r0, r2, #23
 800a0b4:	d518      	bpl.n	800a0e8 <bus_fault.isra.5+0x144>
		PR_FAULT_INFO("  Instruction bus error");
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	0759      	lsls	r1, r3, #29
 800a0ba:	d00d      	beq.n	800a0d8 <bus_fault.isra.5+0x134>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	f04f 0100 	mov.w	r1, #0
 800a0c2:	f363 0107 	bfi	r1, r3, #0, #8
 800a0c6:	4a13      	ldr	r2, [pc, #76]	; (800a114 <bus_fault.isra.5+0x170>)
 800a0c8:	4b13      	ldr	r3, [pc, #76]	; (800a118 <bus_fault.isra.5+0x174>)
 800a0ca:	481b      	ldr	r0, [pc, #108]	; (800a138 <bus_fault.isra.5+0x194>)
 800a0cc:	1a9b      	subs	r3, r3, r2
 800a0ce:	08db      	lsrs	r3, r3, #3
 800a0d0:	f363 118f 	bfi	r1, r3, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 800a0d4:	f009 fd95 	bl	8013c02 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800a0d8:	4a11      	ldr	r2, [pc, #68]	; (800a120 <bus_fault.isra.5+0x17c>)
 800a0da:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 800a0dc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800a0de:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800a0e2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 800a0e4:	7028      	strb	r0, [r5, #0]
}
 800a0e6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 800a0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ea:	049a      	lsls	r2, r3, #18
 800a0ec:	d5f4      	bpl.n	800a0d8 <bus_fault.isra.5+0x134>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 800a0ee:	6823      	ldr	r3, [r4, #0]
 800a0f0:	075b      	lsls	r3, r3, #29
 800a0f2:	d0f1      	beq.n	800a0d8 <bus_fault.isra.5+0x134>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f04f 0100 	mov.w	r1, #0
 800a0fa:	f363 0107 	bfi	r1, r3, #0, #8
 800a0fe:	4a05      	ldr	r2, [pc, #20]	; (800a114 <bus_fault.isra.5+0x170>)
 800a100:	4b05      	ldr	r3, [pc, #20]	; (800a118 <bus_fault.isra.5+0x174>)
 800a102:	480e      	ldr	r0, [pc, #56]	; (800a13c <bus_fault.isra.5+0x198>)
 800a104:	1a9b      	subs	r3, r3, r2
 800a106:	08db      	lsrs	r3, r3, #3
 800a108:	f363 118f 	bfi	r1, r3, #6, #10
 800a10c:	e7e2      	b.n	800a0d4 <bus_fault.isra.5+0x130>
 800a10e:	bf00      	nop
 800a110:	2000903c 	.word	0x2000903c
 800a114:	08019248 	.word	0x08019248
 800a118:	08019320 	.word	0x08019320
 800a11c:	0801b4e1 	.word	0x0801b4e1
 800a120:	e000ed00 	.word	0xe000ed00
 800a124:	0801b4f7 	.word	0x0801b4f7
 800a128:	0801b5b2 	.word	0x0801b5b2
 800a12c:	0801b508 	.word	0x0801b508
 800a130:	0801b521 	.word	0x0801b521
 800a134:	0801b536 	.word	0x0801b536
 800a138:	0801b551 	.word	0x0801b551
 800a13c:	0801b612 	.word	0x0801b612

0800a140 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
 800a140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800a144:	4b7a      	ldr	r3, [pc, #488]	; (800a330 <z_arm_fault+0x1f0>)
 800a146:	685f      	ldr	r7, [r3, #4]
{
 800a148:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800a14a:	f3c7 0408 	ubfx	r4, r7, #0, #9
 800a14e:	f04f 0800 	mov.w	r8, #0
 800a152:	f388 8811 	msr	BASEPRI, r8
 800a156:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 800a15a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 800a15e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800a162:	d116      	bne.n	800a192 <z_arm_fault+0x52>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800a164:	f002 030c 	and.w	r3, r2, #12
 800a168:	2b08      	cmp	r3, #8
 800a16a:	d114      	bne.n	800a196 <z_arm_fault+0x56>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 800a16c:	4b71      	ldr	r3, [pc, #452]	; (800a334 <z_arm_fault+0x1f4>)
 800a16e:	681e      	ldr	r6, [r3, #0]
 800a170:	f016 0607 	ands.w	r6, r6, #7
 800a174:	d023      	beq.n	800a1be <z_arm_fault+0x7e>
 800a176:	2301      	movs	r3, #1
 800a178:	f04f 0100 	mov.w	r1, #0
 800a17c:	f363 0107 	bfi	r1, r3, #0, #8
 800a180:	4a6d      	ldr	r2, [pc, #436]	; (800a338 <z_arm_fault+0x1f8>)
 800a182:	4b6e      	ldr	r3, [pc, #440]	; (800a33c <z_arm_fault+0x1fc>)
 800a184:	486e      	ldr	r0, [pc, #440]	; (800a340 <z_arm_fault+0x200>)
 800a186:	1a9b      	subs	r3, r3, r2
 800a188:	08db      	lsrs	r3, r3, #3
 800a18a:	f363 118f 	bfi	r1, r3, #6, #10
 800a18e:	f009 fd38 	bl	8013c02 <log_0>
		return NULL;
 800a192:	4645      	mov	r5, r8
 800a194:	e005      	b.n	800a1a2 <z_arm_fault+0x62>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 800a196:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 800a198:	bf4e      	itee	mi
 800a19a:	460d      	movmi	r5, r1
			ptr_esf = (z_arch_esf_t *)msp;
 800a19c:	4605      	movpl	r5, r0
			*nested_exc = true;
 800a19e:	f04f 0801 	movpl.w	r8, #1
	*recoverable = false;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
 800a1a8:	1ee3      	subs	r3, r4, #3
 800a1aa:	2b09      	cmp	r3, #9
 800a1ac:	f200 809f 	bhi.w	800a2ee <z_arm_fault+0x1ae>
 800a1b0:	e8df f003 	tbb	[pc, r3]
 800a1b4:	5f888407 	.word	0x5f888407
 800a1b8:	9d9d9d9d 	.word	0x9d9d9d9d
 800a1bc:	8c9d      	.short	0x8c9d
	*nested_exc = false;
 800a1be:	46b0      	mov	r8, r6
 800a1c0:	e7e7      	b.n	800a192 <z_arm_fault+0x52>
	PR_FAULT_INFO("***** HARD FAULT *****");
 800a1c2:	4f5c      	ldr	r7, [pc, #368]	; (800a334 <z_arm_fault+0x1f4>)
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	075b      	lsls	r3, r3, #29
 800a1c8:	d00d      	beq.n	800a1e6 <z_arm_fault+0xa6>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	f04f 0100 	mov.w	r1, #0
 800a1d0:	f363 0107 	bfi	r1, r3, #0, #8
 800a1d4:	4a58      	ldr	r2, [pc, #352]	; (800a338 <z_arm_fault+0x1f8>)
 800a1d6:	4b59      	ldr	r3, [pc, #356]	; (800a33c <z_arm_fault+0x1fc>)
 800a1d8:	485a      	ldr	r0, [pc, #360]	; (800a344 <z_arm_fault+0x204>)
 800a1da:	1a9b      	subs	r3, r3, r2
 800a1dc:	08db      	lsrs	r3, r3, #3
 800a1de:	f363 118f 	bfi	r1, r3, #6, #10
 800a1e2:	f009 fd0e 	bl	8013c02 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800a1e6:	4b52      	ldr	r3, [pc, #328]	; (800a330 <z_arm_fault+0x1f0>)
 800a1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	*recoverable = false;
 800a1ea:	2400      	movs	r4, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800a1ec:	0796      	lsls	r6, r2, #30
	*recoverable = false;
 800a1ee:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800a1f2:	d513      	bpl.n	800a21c <z_arm_fault+0xdc>
		PR_EXC("  Bus fault on vector table read");
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	075c      	lsls	r4, r3, #29
 800a1f8:	d101      	bne.n	800a1fe <z_arm_fault+0xbe>
	u32_t reason = K_ERR_CPU_EXCEPTION;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	e03c      	b.n	800a278 <z_arm_fault+0x138>
		PR_EXC("  Bus fault on vector table read");
 800a1fe:	2301      	movs	r3, #1
 800a200:	f04f 0100 	mov.w	r1, #0
 800a204:	f363 0107 	bfi	r1, r3, #0, #8
 800a208:	4a4b      	ldr	r2, [pc, #300]	; (800a338 <z_arm_fault+0x1f8>)
 800a20a:	4b4c      	ldr	r3, [pc, #304]	; (800a33c <z_arm_fault+0x1fc>)
 800a20c:	484e      	ldr	r0, [pc, #312]	; (800a348 <z_arm_fault+0x208>)
 800a20e:	1a9b      	subs	r3, r3, r2
 800a210:	08db      	lsrs	r3, r3, #3
 800a212:	f363 118f 	bfi	r1, r3, #6, #10
	PR_FAULT_INFO(
 800a216:	f009 fcf4 	bl	8013c02 <log_0>
 800a21a:	e7ee      	b.n	800a1fa <z_arm_fault+0xba>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800a21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21e:	0058      	lsls	r0, r3, #1
 800a220:	d5eb      	bpl.n	800a1fa <z_arm_fault+0xba>
		PR_EXC("  Fault escalation (see below)");
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	0759      	lsls	r1, r3, #29
 800a226:	d00d      	beq.n	800a244 <z_arm_fault+0x104>
 800a228:	2301      	movs	r3, #1
 800a22a:	f04f 0100 	mov.w	r1, #0
 800a22e:	f363 0107 	bfi	r1, r3, #0, #8
 800a232:	4a41      	ldr	r2, [pc, #260]	; (800a338 <z_arm_fault+0x1f8>)
 800a234:	4b41      	ldr	r3, [pc, #260]	; (800a33c <z_arm_fault+0x1fc>)
 800a236:	4845      	ldr	r0, [pc, #276]	; (800a34c <z_arm_fault+0x20c>)
 800a238:	1a9b      	subs	r3, r3, r2
 800a23a:	08db      	lsrs	r3, r3, #3
 800a23c:	f363 118f 	bfi	r1, r3, #6, #10
 800a240:	f009 fcdf 	bl	8013c02 <log_0>
		if (SCB_MMFSR != 0) {
 800a244:	4b42      	ldr	r3, [pc, #264]	; (800a350 <z_arm_fault+0x210>)
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	b12b      	cbz	r3, 800a256 <z_arm_fault+0x116>
			reason = mem_manage_fault(esf, 1, recoverable);
 800a24a:	f10d 0107 	add.w	r1, sp, #7
 800a24e:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 800a250:	f7ff fdee 	bl	8009e30 <mem_manage_fault.isra.4>
 800a254:	e00f      	b.n	800a276 <z_arm_fault+0x136>
		} else if (SCB_BFSR != 0) {
 800a256:	4b3f      	ldr	r3, [pc, #252]	; (800a354 <z_arm_fault+0x214>)
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	b12b      	cbz	r3, 800a268 <z_arm_fault+0x128>
			reason = bus_fault(esf, 1, recoverable);
 800a25c:	f10d 0107 	add.w	r1, sp, #7
 800a260:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 800a262:	f7ff fe9f 	bl	8009fa4 <bus_fault.isra.5>
 800a266:	e006      	b.n	800a276 <z_arm_fault+0x136>
		} else if (SCB_UFSR != 0) {
 800a268:	4b3b      	ldr	r3, [pc, #236]	; (800a358 <z_arm_fault+0x218>)
 800a26a:	881b      	ldrh	r3, [r3, #0]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d0c3      	beq.n	800a1fa <z_arm_fault+0xba>
			reason = usage_fault(esf);
 800a272:	f7ff fd2d 	bl	8009cd0 <usage_fault.isra.2>
 800a276:	4603      	mov	r3, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 800a278:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a27c:	b9da      	cbnz	r2, 800a2b6 <z_arm_fault+0x176>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800a27e:	462a      	mov	r2, r5
 800a280:	f102 0720 	add.w	r7, r2, #32
 800a284:	ad02      	add	r5, sp, #8
 800a286:	6810      	ldr	r0, [r2, #0]
 800a288:	6851      	ldr	r1, [r2, #4]
 800a28a:	462c      	mov	r4, r5
 800a28c:	c403      	stmia	r4!, {r0, r1}
 800a28e:	3208      	adds	r2, #8
 800a290:	42ba      	cmp	r2, r7
 800a292:	4625      	mov	r5, r4
 800a294:	d1f7      	bne.n	800a286 <z_arm_fault+0x146>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 800a296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a298:	f1b8 0f00 	cmp.w	r8, #0
 800a29c:	d042      	beq.n	800a324 <z_arm_fault+0x1e4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800a29e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a2a2:	b921      	cbnz	r1, 800a2ae <z_arm_fault+0x16e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 800a2a4:	ea6f 2252 	mvn.w	r2, r2, lsr #9
 800a2a8:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800a2ac:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 800a2ae:	a902      	add	r1, sp, #8
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7ff fc55 	bl	8009b60 <z_arm_fatal_error>
}
 800a2b6:	b00a      	add	sp, #40	; 0x28
 800a2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 800a2bc:	f10d 0107 	add.w	r1, sp, #7
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	e7c5      	b.n	800a250 <z_arm_fault+0x110>
		reason = bus_fault(esf, 0, recoverable);
 800a2c4:	f10d 0107 	add.w	r1, sp, #7
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	e7ca      	b.n	800a262 <z_arm_fault+0x122>
	PR_FAULT_INFO(
 800a2cc:	4b19      	ldr	r3, [pc, #100]	; (800a334 <z_arm_fault+0x1f4>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	075a      	lsls	r2, r3, #29
 800a2d2:	d092      	beq.n	800a1fa <z_arm_fault+0xba>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	f04f 0100 	mov.w	r1, #0
 800a2da:	f363 0107 	bfi	r1, r3, #0, #8
 800a2de:	4a16      	ldr	r2, [pc, #88]	; (800a338 <z_arm_fault+0x1f8>)
 800a2e0:	4b16      	ldr	r3, [pc, #88]	; (800a33c <z_arm_fault+0x1fc>)
 800a2e2:	481e      	ldr	r0, [pc, #120]	; (800a35c <z_arm_fault+0x21c>)
 800a2e4:	1a9b      	subs	r3, r3, r2
 800a2e6:	08db      	lsrs	r3, r3, #3
 800a2e8:	f363 118f 	bfi	r1, r3, #6, #10
 800a2ec:	e793      	b.n	800a216 <z_arm_fault+0xd6>
	PR_FAULT_INFO("***** %s %d) *****",
 800a2ee:	4b11      	ldr	r3, [pc, #68]	; (800a334 <z_arm_fault+0x1f4>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	075b      	lsls	r3, r3, #29
 800a2f4:	d081      	beq.n	800a1fa <z_arm_fault+0xba>
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f04f 0300 	mov.w	r3, #0
 800a2fc:	f362 0307 	bfi	r3, r2, #0, #8
 800a300:	490e      	ldr	r1, [pc, #56]	; (800a33c <z_arm_fault+0x1fc>)
 800a302:	4a0d      	ldr	r2, [pc, #52]	; (800a338 <z_arm_fault+0x1f8>)
 800a304:	4816      	ldr	r0, [pc, #88]	; (800a360 <z_arm_fault+0x220>)
 800a306:	1a89      	subs	r1, r1, r2
 800a308:	08c9      	lsrs	r1, r1, #3
 800a30a:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
 800a30e:	f361 138f 	bfi	r3, r1, #6, #10
 800a312:	f1a4 0210 	sub.w	r2, r4, #16
 800a316:	4913      	ldr	r1, [pc, #76]	; (800a364 <z_arm_fault+0x224>)
 800a318:	bf18      	it	ne
 800a31a:	4601      	movne	r1, r0
 800a31c:	4812      	ldr	r0, [pc, #72]	; (800a368 <z_arm_fault+0x228>)
 800a31e:	f009 fc91 	bl	8013c44 <log_2>
 800a322:	e76a      	b.n	800a1fa <z_arm_fault+0xba>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800a324:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800a328:	f022 0201 	bic.w	r2, r2, #1
 800a32c:	e7be      	b.n	800a2ac <z_arm_fault+0x16c>
 800a32e:	bf00      	nop
 800a330:	e000ed00 	.word	0xe000ed00
 800a334:	2000903c 	.word	0x2000903c
 800a338:	08019248 	.word	0x08019248
 800a33c:	08019320 	.word	0x08019320
 800a340:	0801b70e 	.word	0x0801b70e
 800a344:	0801b739 	.word	0x0801b739
 800a348:	0801b750 	.word	0x0801b750
 800a34c:	0801b771 	.word	0x0801b771
 800a350:	e000ed28 	.word	0xe000ed28
 800a354:	e000ed29 	.word	0xe000ed29
 800a358:	e000ed2a 	.word	0xe000ed2a
 800a35c:	0801b790 	.word	0x0801b790
 800a360:	0801b7db 	.word	0x0801b7db
 800a364:	0801b7c6 	.word	0x0801b7c6
 800a368:	0801b7f4 	.word	0x0801b7f4

0800a36c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 800a36c:	4a02      	ldr	r2, [pc, #8]	; (800a378 <z_arm_fault_init+0xc>)
 800a36e:	6953      	ldr	r3, [r2, #20]
 800a370:	f043 0310 	orr.w	r3, r3, #16
 800a374:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 800a376:	4770      	bx	lr
 800a378:	e000ed00 	.word	0xe000ed00

0800a37c <z_arm_int_lib_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a37c:	4804      	ldr	r0, [pc, #16]	; (800a390 <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
 800a37e:	2300      	movs	r3, #0
 800a380:	2110      	movs	r1, #16
 800a382:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 800a384:	3301      	adds	r3, #1
 800a386:	2b52      	cmp	r3, #82	; 0x52
 800a388:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 800a38c:	d1f9      	bne.n	800a382 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 800a38e:	4770      	bx	lr
 800a390:	e000e100 	.word	0xe000e100

0800a394 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
 800a394:	b538      	push	{r3, r4, r5, lr}
 800a396:	4605      	mov	r5, r0
	__asm__ volatile(
 800a398:	f04f 0310 	mov.w	r3, #16
 800a39c:	f3ef 8411 	mrs	r4, BASEPRI
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
 800a3a8:	f00e fb18 	bl	80189dc <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
 800a3ac:	4b0a      	ldr	r3, [pc, #40]	; (800a3d8 <z_impl_k_thread_abort+0x44>)
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	42ab      	cmp	r3, r5
 800a3b2:	d10b      	bne.n	800a3cc <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
 800a3b4:	4b09      	ldr	r3, [pc, #36]	; (800a3dc <z_impl_k_thread_abort+0x48>)
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3bc:	b912      	cbnz	r2, 800a3c4 <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
 800a3be:	4620      	mov	r0, r4
 800a3c0:	f7ff fb08 	bl	80099d4 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800a3c4:	685a      	ldr	r2, [r3, #4]
 800a3c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a3ca:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
 800a3cc:	4620      	mov	r0, r4
}
 800a3ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
 800a3d2:	f00e ba2c 	b.w	801882e <z_reschedule_irqlock>
 800a3d6:	bf00      	nop
 800a3d8:	200018f8 	.word	0x200018f8
 800a3dc:	e000ed00 	.word	0xe000ed00

0800a3e0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 800a3e0:	4b01      	ldr	r3, [pc, #4]	; (800a3e8 <__stdout_hook_install+0x8>)
 800a3e2:	6018      	str	r0, [r3, #0]
}
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	200088ec 	.word	0x200088ec

0800a3ec <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 800a3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
 800a3ee:	4f08      	ldr	r7, [pc, #32]	; (800a410 <z_impl_zephyr_read_stdin+0x24>)
{
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
 800a3f4:	2400      	movs	r4, #0
 800a3f6:	42ac      	cmp	r4, r5
 800a3f8:	da08      	bge.n	800a40c <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 800a3fe:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
 800a400:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 800a402:	f104 0401 	add.w	r4, r4, #1
 800a406:	d001      	beq.n	800a40c <z_impl_zephyr_read_stdin+0x20>
 800a408:	280d      	cmp	r0, #13
 800a40a:	d1f4      	bne.n	800a3f6 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
 800a40c:	4620      	mov	r0, r4
 800a40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a410:	200088e8 	.word	0x200088e8

0800a414 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 800a414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a416:	4f0a      	ldr	r7, [pc, #40]	; (800a440 <z_impl_zephyr_write_stdout+0x2c>)
 800a418:	460e      	mov	r6, r1
 800a41a:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 800a41c:	f1c0 0501 	rsb	r5, r0, #1
 800a420:	192b      	adds	r3, r5, r4
 800a422:	429e      	cmp	r6, r3
 800a424:	dc01      	bgt.n	800a42a <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
 800a426:	4630      	mov	r0, r6
 800a428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
 800a42a:	7863      	ldrb	r3, [r4, #1]
 800a42c:	2b0a      	cmp	r3, #10
 800a42e:	d102      	bne.n	800a436 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	200d      	movs	r0, #13
 800a434:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800a43c:	4798      	blx	r3
 800a43e:	e7ef      	b.n	800a420 <z_impl_zephyr_write_stdout+0xc>
 800a440:	200088ec 	.word	0x200088ec

0800a444 <_exit>:
	return 0;
}
FUNC_ALIAS(_fstat, fstat, int);

void _exit(int status)
{
 800a444:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800a446:	2105      	movs	r1, #5
 800a448:	4801      	ldr	r0, [pc, #4]	; (800a450 <_exit+0xc>)
 800a44a:	f7ff ffe3 	bl	800a414 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
		;
 800a44e:	e7fe      	b.n	800a44e <_exit+0xa>
 800a450:	0801b807 	.word	0x0801b807

0800a454 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
 800a454:	b538      	push	{r3, r4, r5, lr}
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
 800a456:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 800a45a:	4605      	mov	r5, r0
	sys_sem_take(&heap_sem, K_FOREVER);
 800a45c:	480a      	ldr	r0, [pc, #40]	; (800a488 <_sbrk+0x34>)
 800a45e:	f008 ffe4 	bl	801342a <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
 800a462:	4a0a      	ldr	r2, [pc, #40]	; (800a48c <_sbrk+0x38>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 800a464:	490a      	ldr	r1, [pc, #40]	; (800a490 <_sbrk+0x3c>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
 800a466:	6814      	ldr	r4, [r2, #0]
		ret = ptr;
	} else {
		ret = (void *)-1;
	}

	sys_sem_give(&heap_sem);
 800a468:	4807      	ldr	r0, [pc, #28]	; (800a488 <_sbrk+0x34>)
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 800a46a:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
 800a46e:	4425      	add	r5, r4
 800a470:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 800a474:	429d      	cmp	r5, r3
	ptr = ((char *)HEAP_BASE) + heap_sz;
 800a476:	bf36      	itet	cc
 800a478:	1864      	addcc	r4, r4, r1
		ret = (void *)-1;
 800a47a:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
		heap_sz += count;
 800a47e:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
 800a480:	f008 ffce 	bl	8013420 <sys_sem_give>

	return ret;
}
 800a484:	4620      	mov	r0, r4
 800a486:	bd38      	pop	{r3, r4, r5, pc}
 800a488:	2000911c 	.word	0x2000911c
 800a48c:	20000560 	.word	0x20000560
 800a490:	20009274 	.word	0x20009274

0800a494 <pinmux_stm32_init>:
	{STM32_PIN_PA12, STM32F3_PINMUX_FUNC_PA12_USB_DP},
#endif	/* CONFIG_USB_DC_STM32 */
};

static int pinmux_stm32_init(struct device *port)
{
 800a494:	b508      	push	{r3, lr}
	ARG_UNUSED(port);

	stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 800a496:	2110      	movs	r1, #16
 800a498:	4802      	ldr	r0, [pc, #8]	; (800a4a4 <pinmux_stm32_init+0x10>)
 800a49a:	f7fe fcf5 	bl	8008e88 <stm32_setup_pins>

	return 0;
}
 800a49e:	2000      	movs	r0, #0
 800a4a0:	bd08      	pop	{r3, pc}
 800a4a2:	bf00      	nop
 800a4a4:	08019b88 	.word	0x08019b88

0800a4a8 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 800a4a8:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
 800a4aa:	4b04      	ldr	r3, [pc, #16]	; (800a4bc <net_buf_id+0x14>)
 800a4ac:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a4b0:	69db      	ldr	r3, [r3, #28]
 800a4b2:	1ac0      	subs	r0, r0, r3
}
 800a4b4:	4b02      	ldr	r3, [pc, #8]	; (800a4c0 <net_buf_id+0x18>)
	return buf - pool->__bufs;
 800a4b6:	10c0      	asrs	r0, r0, #3
}
 800a4b8:	4358      	muls	r0, r3
 800a4ba:	4770      	bx	lr
 800a4bc:	20009170 	.word	0x20009170
 800a4c0:	aaaaaaab 	.word	0xaaaaaaab

0800a4c4 <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
 800a4c4:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 800a4c6:	4b09      	ldr	r3, [pc, #36]	; (800a4ec <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 800a4c8:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 800a4ca:	eb03 1342 	add.w	r3, r3, r2, lsl #5

	*size = MIN(fixed->data_size, *size);
 800a4ce:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
 800a4d4:	6823      	ldr	r3, [r4, #0]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	bf94      	ite	ls
 800a4da:	600a      	strls	r2, [r1, #0]
 800a4dc:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
 800a4de:	f7ff ffe3 	bl	800a4a8 <net_buf_id>
 800a4e2:	e9d4 2300 	ldrd	r2, r3, [r4]
}
 800a4e6:	fb02 3000 	mla	r0, r2, r0, r3
 800a4ea:	bd10      	pop	{r4, pc}
 800a4ec:	20009170 	.word	0x20009170

0800a4f0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
 800a4f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	9101      	str	r1, [sp, #4]
 800a4f8:	4616      	mov	r6, r2
	u32_t alloc_start = k_uptime_get_32();
 800a4fa:	f00b fa0a 	bl	8015912 <k_uptime_get_32>
 800a4fe:	4607      	mov	r7, r0
 800a500:	f04f 0310 	mov.w	r3, #16
 800a504:	f3ef 8811 	mrs	r8, BASEPRI
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
 800a510:	8a6b      	ldrh	r3, [r5, #18]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d041      	beq.n	800a59a <net_buf_alloc_len+0xaa>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
 800a516:	8a2a      	ldrh	r2, [r5, #16]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d92c      	bls.n	800a576 <net_buf_alloc_len+0x86>
	return z_impl_k_queue_get(queue, timeout);
 800a51c:	2100      	movs	r1, #0
 800a51e:	4628      	mov	r0, r5
 800a520:	f00e f8da 	bl	80186d8 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
 800a524:	4604      	mov	r4, r0
 800a526:	b330      	cbz	r0, 800a576 <net_buf_alloc_len+0x86>
	__asm__ volatile(
 800a528:	f388 8811 	msr	BASEPRI, r8
 800a52c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
 800a530:	9b01      	ldr	r3, [sp, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d040      	beq.n	800a5b8 <net_buf_alloc_len+0xc8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
 800a536:	1c73      	adds	r3, r6, #1
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d906      	bls.n	800a54a <net_buf_alloc_len+0x5a>
			u32_t diff = k_uptime_get_32() - alloc_start;
 800a53c:	f00b f9e9 	bl	8015912 <k_uptime_get_32>
 800a540:	1bc0      	subs	r0, r0, r7

			timeout -= MIN(timeout, diff);
 800a542:	42b0      	cmp	r0, r6
 800a544:	bf94      	ite	ls
 800a546:	1a36      	subls	r6, r6, r0
 800a548:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 800a54a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
 800a54c:	4f20      	ldr	r7, [pc, #128]	; (800a5d0 <net_buf_alloc_len+0xe0>)
 800a54e:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 800a552:	4632      	mov	r2, r6
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	a901      	add	r1, sp, #4
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4620      	mov	r0, r4
 800a55e:	4798      	blx	r3
 800a560:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
 800a562:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
 800a564:	bb48      	cbnz	r0, 800a5ba <net_buf_alloc_len+0xca>
	k_lifo_put(&pool->free, buf);
 800a566:	79a0      	ldrb	r0, [r4, #6]
 800a568:	4621      	mov	r1, r4
 800a56a:	eb07 1040 	add.w	r0, r7, r0, lsl #5
 800a56e:	f00e f8ae 	bl	80186ce <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
 800a572:	462c      	mov	r4, r5
 800a574:	e01c      	b.n	800a5b0 <net_buf_alloc_len+0xc0>
		uninit_count = pool->uninit_count--;
 800a576:	8a6b      	ldrh	r3, [r5, #18]
 800a578:	1e5a      	subs	r2, r3, #1
 800a57a:	826a      	strh	r2, [r5, #18]
 800a57c:	f388 8811 	msr	BASEPRI, r8
 800a580:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
 800a584:	8a2c      	ldrh	r4, [r5, #16]
 800a586:	1ae4      	subs	r4, r4, r3
 800a588:	69eb      	ldr	r3, [r5, #28]
 800a58a:	2218      	movs	r2, #24
 800a58c:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
 800a590:	4b0f      	ldr	r3, [pc, #60]	; (800a5d0 <net_buf_alloc_len+0xe0>)
 800a592:	1aed      	subs	r5, r5, r3
 800a594:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
 800a596:	71a5      	strb	r5, [r4, #6]
		goto success;
 800a598:	e7ca      	b.n	800a530 <net_buf_alloc_len+0x40>
 800a59a:	f388 8811 	msr	BASEPRI, r8
 800a59e:	f3bf 8f6f 	isb	sy
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	f00e f897 	bl	80186d8 <z_impl_k_queue_get>
	if (!buf) {
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d1bf      	bne.n	800a530 <net_buf_alloc_len+0x40>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	b002      	add	sp, #8
 800a5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
 800a5b8:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
 800a5ba:	2300      	movs	r3, #0
	buf->ref   = 1U;
 800a5bc:	2201      	movs	r2, #1
	buf->frags = NULL;
 800a5be:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
 800a5c0:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
 800a5c2:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
 800a5c4:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
 800a5c6:	6923      	ldr	r3, [r4, #16]
 800a5c8:	81e2      	strh	r2, [r4, #14]
 800a5ca:	60a3      	str	r3, [r4, #8]
	return buf;
 800a5cc:	e7f0      	b.n	800a5b0 <net_buf_alloc_len+0xc0>
 800a5ce:	bf00      	nop
 800a5d0:	20009170 	.word	0x20009170

0800a5d4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
 800a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d6:	4d15      	ldr	r5, [pc, #84]	; (800a62c <net_buf_unref+0x58>)
 800a5d8:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
 800a5da:	2600      	movs	r6, #0
	while (buf) {
 800a5dc:	b904      	cbnz	r4, 800a5e0 <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
 800a5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
 800a5e0:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
 800a5e2:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	7123      	strb	r3, [r4, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1f7      	bne.n	800a5de <net_buf_unref+0xa>
		if (buf->__buf) {
 800a5ee:	6921      	ldr	r1, [r4, #16]
 800a5f0:	b159      	cbz	r1, 800a60a <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
 800a5f2:	7963      	ldrb	r3, [r4, #5]
 800a5f4:	079b      	lsls	r3, r3, #30
 800a5f6:	d407      	bmi.n	800a608 <net_buf_unref+0x34>
	pool->alloc->cb->unref(buf, data);
 800a5f8:	79a3      	ldrb	r3, [r4, #6]
 800a5fa:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 800a5fe:	4620      	mov	r0, r4
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	4798      	blx	r3
			buf->__buf = NULL;
 800a608:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
 800a60a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
 800a60c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
 800a60e:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
 800a612:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	b11b      	cbz	r3, 800a620 <net_buf_unref+0x4c>
			pool->destroy(buf);
 800a618:	4620      	mov	r0, r4
 800a61a:	4798      	blx	r3
{
 800a61c:	463c      	mov	r4, r7
 800a61e:	e7dd      	b.n	800a5dc <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
 800a620:	4621      	mov	r1, r4
 800a622:	eb05 1040 	add.w	r0, r5, r0, lsl #5
 800a626:	f00e f852 	bl	80186ce <k_queue_prepend>
 800a62a:	e7f7      	b.n	800a61c <net_buf_unref+0x48>
 800a62c:	20009170 	.word	0x20009170

0800a630 <ethernet_send>:

	net_pkt_frag_unref(buf);
}

static int ethernet_send(struct net_if *iface, struct net_pkt *pkt)
{
 800a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
 800a632:	6803      	ldr	r3, [r0, #0]
	const struct ethernet_api *api = net_if_get_device(iface)->driver_api;
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	685e      	ldr	r6, [r3, #4]
{
 800a638:	4607      	mov	r7, r0
 800a63a:	460c      	mov	r4, r1
	struct ethernet_context *ctx = net_if_l2_data(iface);
	u16_t ptype;
	int ret;

	if (!api) {
 800a63c:	2e00      	cmp	r6, #0
 800a63e:	d064      	beq.n	800a70a <ethernet_send+0xda>
	return pkt->family;
 800a640:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
				net_pkt_set_family(pkt, AF_INET);
			} else {
				ptype = htons(NET_ETH_PTYPE_IP);
			}
		}
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800a644:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800a648:	2b02      	cmp	r3, #2
 800a64a:	d161      	bne.n	800a710 <ethernet_send+0xe0>

	/* If the ll dst addr has not been set before, let's assume
	 * temporarily it's a broadcast one. When filling the header,
	 * it might detect this should be multicast and act accordingly.
	 */
	if (!net_pkt_lladdr_dst(pkt)->addr) {
 800a64c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800a64e:	b923      	cbnz	r3, 800a65a <ethernet_send+0x2a>
		net_pkt_lladdr_dst(pkt)->addr = (u8_t *)broadcast_eth_addr.addr;
 800a650:	4b32      	ldr	r3, [pc, #200]	; (800a71c <ethernet_send+0xec>)
 800a652:	630b      	str	r3, [r1, #48]	; 0x30
		net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
 800a654:	2306      	movs	r3, #6
 800a656:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
	hdr_frag = net_pkt_get_frag(pkt, NET_BUF_TIMEOUT);
 800a65a:	2164      	movs	r1, #100	; 0x64
 800a65c:	4620      	mov	r0, r4
 800a65e:	f002 f989 	bl	800c974 <net_pkt_get_frag>
	if (!hdr_frag) {
 800a662:	4605      	mov	r5, r0
 800a664:	2800      	cmp	r0, #0
 800a666:	d056      	beq.n	800a716 <ethernet_send+0xe6>
 800a668:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
		hdr = (struct net_eth_hdr *)(hdr_frag->data);
 800a66c:	6883      	ldr	r3, [r0, #8]
	if (net_pkt_family(pkt) == AF_INET6 &&
 800a66e:	f3c2 0242 	ubfx	r2, r2, #1, #3
 800a672:	2a02      	cmp	r2, #2
 800a674:	d134      	bne.n	800a6e0 <ethernet_send+0xb0>
	return pkt->frags->data;
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
 800a676:	6922      	ldr	r2, [r4, #16]
	    net_ipv6_is_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
 800a678:	6892      	ldr	r2, [r2, #8]
	if (net_pkt_family(pkt) == AF_INET6 &&
 800a67a:	7e12      	ldrb	r2, [r2, #24]
 800a67c:	2aff      	cmp	r2, #255	; 0xff
 800a67e:	d12f      	bne.n	800a6e0 <ethernet_send+0xb0>
 800a680:	4a27      	ldr	r2, [pc, #156]	; (800a720 <ethernet_send+0xf0>)
 800a682:	8812      	ldrh	r2, [r2, #0]
 800a684:	801a      	strh	r2, [r3, #0]
 800a686:	6922      	ldr	r2, [r4, #16]
 800a688:	6892      	ldr	r2, [r2, #8]
 800a68a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a68c:	f8c3 2002 	str.w	r2, [r3, #2]
 800a690:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a692:	6811      	ldr	r1, [r2, #0]
 800a694:	f8c3 1006 	str.w	r1, [r3, #6]
 800a698:	8892      	ldrh	r2, [r2, #4]
 800a69a:	815a      	strh	r2, [r3, #10]
		hdr->type = ptype;
 800a69c:	f06f 0279 	mvn.w	r2, #121	; 0x79
 800a6a0:	731a      	strb	r2, [r3, #12]
 800a6a2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a6a6:	735a      	strb	r2, [r3, #13]
		net_buf_add(hdr_frag, sizeof(struct net_eth_hdr));
 800a6a8:	210e      	movs	r1, #14
 800a6aa:	f105 0008 	add.w	r0, r5, #8
 800a6ae:	f00b f94a 	bl	8015946 <net_buf_simple_add>
	net_pkt_frag_insert(pkt, hdr_frag);
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f00c f993 	bl	80169e0 <net_pkt_frag_insert>
	if (!ethernet_fill_header(ctx, pkt, ptype)) {
		ret = -ENOMEM;
		goto error;
	}

	net_pkt_cursor_init(pkt);
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f00c f9e4 	bl	8016a88 <net_pkt_cursor_init>
 800a6c0:	683a      	ldr	r2, [r7, #0]

send:
	ret = api->send(net_if_get_device(iface), pkt);
 800a6c2:	69b3      	ldr	r3, [r6, #24]
 800a6c4:	6810      	ldr	r0, [r2, #0]
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	4798      	blx	r3
	if (ret != 0) {
 800a6ca:	4605      	mov	r5, r0
	buf = pkt->buffer;
 800a6cc:	6920      	ldr	r0, [r4, #16]
	if (ret != 0) {
 800a6ce:	b16d      	cbz	r5, 800a6ec <ethernet_send+0xbc>
	pkt->buffer = buf->frags;
 800a6d0:	6803      	ldr	r3, [r0, #0]
 800a6d2:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	6003      	str	r3, [r0, #0]
	net_pkt_frag_unref(buf);
 800a6d8:	f00c f954 	bl	8016984 <net_pkt_frag_unref>
	ethernet_remove_l2_header(pkt);

	net_pkt_unref(pkt);
error:
	return ret;
}
 800a6dc:	4628      	mov	r0, r5
 800a6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a6e2:	6811      	ldr	r1, [r2, #0]
 800a6e4:	6019      	str	r1, [r3, #0]
 800a6e6:	8892      	ldrh	r2, [r2, #4]
 800a6e8:	809a      	strh	r2, [r3, #4]
 800a6ea:	e7d1      	b.n	800a690 <ethernet_send+0x60>
	ret = net_pkt_get_len(pkt);
 800a6ec:	4603      	mov	r3, r0
	while (buf) {
 800a6ee:	b943      	cbnz	r3, 800a702 <ethernet_send+0xd2>
	pkt->buffer = buf->frags;
 800a6f0:	6802      	ldr	r2, [r0, #0]
 800a6f2:	6122      	str	r2, [r4, #16]
	buf->frags = NULL;
 800a6f4:	6003      	str	r3, [r0, #0]
	net_pkt_frag_unref(buf);
 800a6f6:	f00c f945 	bl	8016984 <net_pkt_frag_unref>
	net_pkt_unref(pkt);
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f00c f946 	bl	801698c <net_pkt_unref>
	return ret;
 800a700:	e7ec      	b.n	800a6dc <ethernet_send+0xac>
		bytes += buf->len;
 800a702:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
 800a704:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
 800a706:	4415      	add	r5, r2
		buf = buf->frags;
 800a708:	e7f1      	b.n	800a6ee <ethernet_send+0xbe>
		ret = -ENOENT;
 800a70a:	f06f 0501 	mvn.w	r5, #1
 800a70e:	e7e5      	b.n	800a6dc <ethernet_send+0xac>
		ret = -ENOTSUP;
 800a710:	f06f 0585 	mvn.w	r5, #133	; 0x85
 800a714:	e7e2      	b.n	800a6dc <ethernet_send+0xac>
		ret = -ENOMEM;
 800a716:	f06f 050b 	mvn.w	r5, #11
	return ret;
 800a71a:	e7df      	b.n	800a6dc <ethernet_send+0xac>
 800a71c:	0801b815 	.word	0x0801b815
 800a720:	0801b81b 	.word	0x0801b81b

0800a724 <net_recv_data>:
	net_tc_submit_to_rx_queue(tc, pkt);
}

/* Called by driver when an IP packet has been received */
int net_recv_data(struct net_if *iface, struct net_pkt *pkt)
{
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	4605      	mov	r5, r0
	if (!pkt || !iface) {
 800a728:	460c      	mov	r4, r1
 800a72a:	b351      	cbz	r1, 800a782 <net_recv_data+0x5e>
 800a72c:	b348      	cbz	r0, 800a782 <net_recv_data+0x5e>
		return -EINVAL;
	}

	if (!pkt->frags) {
 800a72e:	690b      	ldr	r3, [r1, #16]
 800a730:	b353      	cbz	r3, 800a788 <net_recv_data+0x64>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800a732:	6803      	ldr	r3, [r0, #0]
 800a734:	f3bf 8f5b 	dmb	ish
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	f3bf 8f5b 	dmb	ish
		return -ENODATA;
	}

	if (!net_if_flag_is_set(iface, NET_IF_UP)) {
 800a73e:	07db      	lsls	r3, r3, #31
 800a740:	d525      	bpl.n	800a78e <net_recv_data+0x6a>
				    &NET_IPV6_HDR(pkt)->src);
}

static inline void net_pkt_set_overwrite(struct net_pkt *pkt, bool overwrite)
{
	pkt->overwrite = overwrite;
 800a742:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 800a746:	f043 0301 	orr.w	r3, r3, #1
 800a74a:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
		return -ENETDOWN;
	}

	net_pkt_set_overwrite(pkt, true);
	net_pkt_cursor_init(pkt);
 800a74e:	4608      	mov	r0, r1
 800a750:	f00c f99a 	bl	8016a88 <net_pkt_cursor_init>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
 800a754:	682b      	ldr	r3, [r5, #0]
	pkt->iface = iface;
 800a756:	6225      	str	r5, [r4, #32]
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
 800a758:	7d5b      	ldrb	r3, [r3, #21]
 800a75a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
 800a75e:	682b      	ldr	r3, [r5, #0]
 800a760:	7d5b      	ldrb	r3, [r3, #21]
 800a762:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	u8_t tc = net_rx_priority2tc(prio);
 800a766:	2000      	movs	r0, #0
 800a768:	f00c fb77 	bl	8016e5a <net_rx_priority2tc>
 * @return N/A
 * @req K-WORK-001
 */
static inline void k_work_init(struct k_work *work, k_work_handler_t handler)
{
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 800a76c:	4b09      	ldr	r3, [pc, #36]	; (800a794 <net_recv_data+0x70>)
 800a76e:	2500      	movs	r5, #0
	net_tc_submit_to_rx_queue(tc, pkt);
 800a770:	b2c0      	uxtb	r0, r0
 800a772:	6025      	str	r5, [r4, #0]
 800a774:	e9c4 3501 	strd	r3, r5, [r4, #4]
 800a778:	4621      	mov	r1, r4
 800a77a:	f002 fa4b 	bl	800cc14 <net_tc_submit_to_rx_queue>

	net_pkt_set_iface(pkt, iface);

	net_queue_rx(iface, pkt);

	return 0;
 800a77e:	4628      	mov	r0, r5
}
 800a780:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 800a782:	f06f 0015 	mvn.w	r0, #21
 800a786:	e7fb      	b.n	800a780 <net_recv_data+0x5c>
		return -ENODATA;
 800a788:	f06f 003c 	mvn.w	r0, #60	; 0x3c
 800a78c:	e7f8      	b.n	800a780 <net_recv_data+0x5c>
		return -ENETDOWN;
 800a78e:	f06f 0072 	mvn.w	r0, #114	; 0x72
 800a792:	e7f5      	b.n	800a780 <net_recv_data+0x5c>
 800a794:	08015b5b 	.word	0x08015b5b

0800a798 <k_delayed_work_submit>:
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 800a798:	460a      	mov	r2, r1
 800a79a:	4601      	mov	r1, r0
 800a79c:	4801      	ldr	r0, [pc, #4]	; (800a7a4 <k_delayed_work_submit+0xc>)
 800a79e:	f008 ba2b 	b.w	8012bf8 <k_delayed_work_submit_to_queue>
 800a7a2:	bf00      	nop
 800a7a4:	20001930 	.word	0x20001930

0800a7a8 <address_lifetime_timeout>:

	return false;
}

static void address_lifetime_timeout(struct k_work *work)
{
 800a7a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u64_t timeout_update = UINT64_MAX;
	u32_t current_time = k_uptime_get_32();
 800a7ac:	f00b faea 	bl	8015d84 <k_uptime_get_32>
	bool found = false;
	struct net_if_addr *current, *next;

	ARG_UNUSED(work);

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
 800a7b0:	4b31      	ldr	r3, [pc, #196]	; (800a878 <address_lifetime_timeout+0xd0>)
 800a7b2:	681d      	ldr	r5, [r3, #0]
	u32_t current_time = k_uptime_get_32();
 800a7b4:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
 800a7b6:	2d00      	cmp	r5, #0
 800a7b8:	d053      	beq.n	800a862 <address_lifetime_timeout+0xba>
 800a7ba:	f1b5 0414 	subs.w	r4, r5, #20
 800a7be:	d052      	beq.n	800a866 <address_lifetime_timeout+0xbe>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800a7c0:	682d      	ldr	r5, [r5, #0]
 800a7c2:	b105      	cbz	r5, 800a7c6 <address_lifetime_timeout+0x1e>
 800a7c4:	3d14      	subs	r5, #20
		*next_wakeup = NET_TIMEOUT_MAX_VALUE;
 800a7c6:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 800a87c <address_lifetime_timeout+0xd4>
	sys_slist_find_and_remove(&active_address_lifetime_timers,
 800a7ca:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a878 <address_lifetime_timeout+0xd0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
 800a7ce:	f04f 0900 	mov.w	r9, #0
 800a7d2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a7d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a7da:	b97c      	cbnz	r4, 800a7fc <address_lifetime_timeout+0x54>
		if (current == next) {
			break;
		}
	}

	if (found) {
 800a7dc:	f1b9 0f00 	cmp.w	r9, #0
 800a7e0:	d048      	beq.n	800a874 <address_lifetime_timeout+0xcc>
			timeout_update = NET_TIMEOUT_MAX_VALUE;
		}

		NET_DBG("Waiting for %d ms", (s32_t)timeout_update);

		k_delayed_work_submit(&address_lifetime_timer, timeout_update);
 800a7e2:	4a26      	ldr	r2, [pc, #152]	; (800a87c <address_lifetime_timeout+0xd4>)
 800a7e4:	4826      	ldr	r0, [pc, #152]	; (800a880 <address_lifetime_timeout+0xd8>)
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	42bb      	cmp	r3, r7
 800a7ea:	bf08      	it	eq
 800a7ec:	42b2      	cmpeq	r2, r6
 800a7ee:	bf38      	it	cc
 800a7f0:	4616      	movcc	r6, r2
 800a7f2:	4631      	mov	r1, r6
	}
}
 800a7f4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		k_delayed_work_submit(&address_lifetime_timer, timeout_update);
 800a7f8:	f7ff bfce 	b.w	800a798 <k_delayed_work_submit>
	if (counter > 0) {
 800a7fc:	6a21      	ldr	r1, [r4, #32]
 800a7fe:	b9c1      	cbnz	r1, 800a832 <address_lifetime_timeout+0x8a>
	if ((s32_t)((start + (u32_t)timeout) - current_time) > 0) {
 800a800:	69a3      	ldr	r3, [r4, #24]
 800a802:	69e2      	ldr	r2, [r4, #28]
 800a804:	eba3 0308 	sub.w	r3, r3, r8
 800a808:	4413      	add	r3, r2
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	dc2f      	bgt.n	800a86e <address_lifetime_timeout+0xc6>
	ifaddr->addr_state = NET_ADDR_DEPRECATED;
 800a80e:	2302      	movs	r3, #2
	ifaddr->lifetime.timer_timeout = 0;
 800a810:	61e1      	str	r1, [r4, #28]
	ifaddr->addr_state = NET_ADDR_DEPRECATED;
 800a812:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	sys_slist_find_and_remove(&active_address_lifetime_timers,
 800a816:	f104 0114 	add.w	r1, r4, #20
 800a81a:	4650      	mov	r0, sl
 800a81c:	f00b fa4a 	bl	8015cb4 <sys_slist_find_and_remove>
		if (current == next) {
 800a820:	42ac      	cmp	r4, r5
 800a822:	d0db      	beq.n	800a7dc <address_lifetime_timeout+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
 800a824:	b30d      	cbz	r5, 800a86a <address_lifetime_timeout+0xc2>
 800a826:	696b      	ldr	r3, [r5, #20]
 800a828:	b103      	cbz	r3, 800a82c <address_lifetime_timeout+0x84>
 800a82a:	3b14      	subs	r3, #20
 800a82c:	462c      	mov	r4, r5
 800a82e:	461d      	mov	r5, r3
 800a830:	e7d3      	b.n	800a7da <address_lifetime_timeout+0x32>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
 800a832:	45d8      	cmp	r8, fp
 800a834:	d105      	bne.n	800a842 <address_lifetime_timeout+0x9a>
		ifaddr->lifetime.timer_start = k_uptime_get_32();
 800a836:	f00b faa5 	bl	8015d84 <k_uptime_get_32>
		ifaddr->lifetime.wrap_counter--;
 800a83a:	6a23      	ldr	r3, [r4, #32]
		ifaddr->lifetime.timer_start = k_uptime_get_32();
 800a83c:	61a0      	str	r0, [r4, #24]
		ifaddr->lifetime.wrap_counter--;
 800a83e:	3b01      	subs	r3, #1
 800a840:	6223      	str	r3, [r4, #32]
	if (ifaddr->lifetime.wrap_counter > 0) {
 800a842:	6a23      	ldr	r3, [r4, #32]
 800a844:	2b00      	cmp	r3, #0
 800a846:	dc0a      	bgt.n	800a85e <address_lifetime_timeout+0xb6>
		*next_wakeup = ifaddr->lifetime.timer_timeout;
 800a848:	69e2      	ldr	r2, [r4, #28]
			if (next_timeout < timeout_update) {
 800a84a:	2300      	movs	r3, #0
 800a84c:	42bb      	cmp	r3, r7
 800a84e:	bf08      	it	eq
 800a850:	42b2      	cmpeq	r2, r6
 800a852:	bf3e      	ittt	cc
 800a854:	4616      	movcc	r6, r2
 800a856:	461f      	movcc	r7, r3
				found = true;
 800a858:	f04f 0901 	movcc.w	r9, #1
 800a85c:	e7e0      	b.n	800a820 <address_lifetime_timeout+0x78>
		*next_wakeup = NET_TIMEOUT_MAX_VALUE;
 800a85e:	465a      	mov	r2, fp
 800a860:	e7f3      	b.n	800a84a <address_lifetime_timeout+0xa2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
 800a862:	462c      	mov	r4, r5
 800a864:	e7af      	b.n	800a7c6 <address_lifetime_timeout+0x1e>
 800a866:	4625      	mov	r5, r4
 800a868:	e7ad      	b.n	800a7c6 <address_lifetime_timeout+0x1e>
 800a86a:	462b      	mov	r3, r5
 800a86c:	e7de      	b.n	800a82c <address_lifetime_timeout+0x84>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
 800a86e:	45d8      	cmp	r8, fp
 800a870:	d1ea      	bne.n	800a848 <address_lifetime_timeout+0xa0>
 800a872:	e7e0      	b.n	800a836 <address_lifetime_timeout+0x8e>
}
 800a874:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a878:	20000564 	.word	0x20000564
 800a87c:	7fffff9b 	.word	0x7fffff9b
 800a880:	2000058c 	.word	0x2000058c

0800a884 <net_if_ipv6_start_dad>:
{
 800a884:	b510      	push	{r4, lr}
 800a886:	4603      	mov	r3, r0
 800a888:	460c      	mov	r4, r1
	return atomic_test_bit(iface->if_dev->flags, value);
 800a88a:	6800      	ldr	r0, [r0, #0]
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
 800a88c:	2100      	movs	r1, #0
 800a88e:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 800a892:	300c      	adds	r0, #12
 800a894:	f00b fa40 	bl	8015d18 <atomic_test_bit>
	if (net_if_is_up(iface)) {
 800a898:	b1f0      	cbz	r0, 800a8d8 <net_if_ipv6_start_dad+0x54>
		ifaddr->dad_count = 1U;
 800a89a:	2201      	movs	r2, #1
 800a89c:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
		if (!net_ipv6_start_dad(iface, ifaddr)) {
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f00c fe71 	bl	801758a <net_ipv6_start_dad>
 800a8a8:	b9b0      	cbnz	r0, 800a8d8 <net_if_ipv6_start_dad+0x54>
			ifaddr->dad_start = k_uptime_get_32();
 800a8aa:	f00b fa6b 	bl	8015d84 <k_uptime_get_32>
			sys_slist_append(&active_dad_timers, &ifaddr->dad_node);
 800a8ae:	f104 0124 	add.w	r1, r4, #36	; 0x24
			ifaddr->dad_start = k_uptime_get_32();
 800a8b2:	62a0      	str	r0, [r4, #40]	; 0x28
			sys_slist_append(&active_dad_timers, &ifaddr->dad_node);
 800a8b4:	4809      	ldr	r0, [pc, #36]	; (800a8dc <net_if_ipv6_start_dad+0x58>)
 800a8b6:	f00b f9f3 	bl	8015ca0 <sys_slist_append>
 * @return Remaining time (in milliseconds).
 * @req K-DWORK-001
 */
static inline s32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return k_ticks_to_ms_floor64(z_timeout_remaining(&work->timeout));
 800a8ba:	4809      	ldr	r0, [pc, #36]	; (800a8e0 <net_if_ipv6_start_dad+0x5c>)
 800a8bc:	f008 fa52 	bl	8012d64 <z_timeout_remaining>
			return t / (from_hz / to_hz);
 800a8c0:	220a      	movs	r2, #10
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	17c1      	asrs	r1, r0, #31
 800a8c6:	f7f7 f9dd 	bl	8001c84 <__aeabi_uldivmod>
			if (!k_delayed_work_remaining_get(&dad_timer)) {
 800a8ca:	b928      	cbnz	r0, 800a8d8 <net_if_ipv6_start_dad+0x54>
				k_delayed_work_submit(&dad_timer, DAD_TIMEOUT);
 800a8cc:	2164      	movs	r1, #100	; 0x64
 800a8ce:	4805      	ldr	r0, [pc, #20]	; (800a8e4 <net_if_ipv6_start_dad+0x60>)
}
 800a8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				k_delayed_work_submit(&dad_timer, DAD_TIMEOUT);
 800a8d4:	f7ff bf60 	b.w	800a798 <k_delayed_work_submit>
}
 800a8d8:	bd10      	pop	{r4, pc}
 800a8da:	bf00      	nop
 800a8dc:	2000056c 	.word	0x2000056c
 800a8e0:	200005b8 	.word	0x200005b8
 800a8e4:	200005ac 	.word	0x200005ac

0800a8e8 <net_if_ipv6_get_best_match.isra.17>:
	}

	return false;
}

static struct in6_addr *net_if_ipv6_get_best_match(struct net_if *iface,
 800a8e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ec:	9101      	str	r1, [sp, #4]
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
	struct in6_addr *src = NULL;
	u8_t len;
	int i;

	if (!ipv6) {
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d04b      	beq.n	800a98a <net_if_ipv6_get_best_match.isra.17+0xa2>
	struct in6_addr *src = NULL;
 800a8f2:	2600      	movs	r6, #0
 800a8f4:	1d05      	adds	r5, r0, #4
		return NULL;
	}

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800a8f6:	4637      	mov	r7, r6
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
 800a8f8:	f04f 0e30 	mov.w	lr, #48	; 0x30
	    addr->address.family == AF_INET6 &&
 800a8fc:	f248 0afe 	movw	sl, #33022	; 0x80fe
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
 800a900:	fb0e 0407 	mla	r4, lr, r7, r0
 800a904:	4922      	ldr	r1, [pc, #136]	; (800a990 <net_if_ipv6_get_best_match.isra.17+0xa8>)
 800a906:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a908:	f023 437d 	bic.w	r3, r3, #4244635648	; 0xfd000000
 800a90c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800a910:	428b      	cmp	r3, r1
 800a912:	d125      	bne.n	800a960 <net_if_ipv6_get_best_match.isra.17+0x78>
 800a914:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 800a918:	2b02      	cmp	r3, #2
 800a91a:	d121      	bne.n	800a960 <net_if_ipv6_get_best_match.isra.17+0x78>
	    addr->address.family == AF_INET6 &&
 800a91c:	88a3      	ldrh	r3, [r4, #4]
 800a91e:	4553      	cmp	r3, sl
 800a920:	d01e      	beq.n	800a960 <net_if_ipv6_get_best_match.isra.17+0x78>
static u8_t get_ipaddr_diff(const u8_t *src, const u8_t *dst, int addr_len)
 800a922:	9b01      	ldr	r3, [sp, #4]
 800a924:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800a928:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
	u8_t len = 0U;
 800a92c:	2300      	movs	r3, #0
		if (src[j] == dst[j]) {
 800a92e:	f819 8f01 	ldrb.w	r8, [r9, #1]!
 800a932:	f81b 4f01 	ldrb.w	r4, [fp, #1]!
 800a936:	45a0      	cmp	r8, r4
 800a938:	f103 0c08 	add.w	ip, r3, #8
 800a93c:	d118      	bne.n	800a970 <net_if_ipv6_get_best_match.isra.17+0x88>
			len += 8U;
 800a93e:	fa5f f38c 	uxtb.w	r3, ip
	for (j = 0U; j < addr_len; j++) {
 800a942:	2b80      	cmp	r3, #128	; 0x80
 800a944:	d1f3      	bne.n	800a92e <net_if_ipv6_get_best_match.isra.17+0x46>
		if (!is_proper_ipv6_address(&ipv6->unicast[i])) {
			continue;
		}

		len = get_diff_ipv6(dst, &ipv6->unicast[i].address.in6_addr);
		if (len >= *best_so_far) {
 800a946:	7814      	ldrb	r4, [r2, #0]
 800a948:	429c      	cmp	r4, r3
 800a94a:	d809      	bhi.n	800a960 <net_if_ipv6_get_best_match.isra.17+0x78>
			/* Mesh local address can only be selected for the same
			 * subnet.
			 */
			if (ipv6->unicast[i].is_mesh_local && len < 64) {
 800a94c:	fb0e 0407 	mla	r4, lr, r7, r0
 800a950:	f894 402f 	ldrb.w	r4, [r4, #47]	; 0x2f
 800a954:	0761      	lsls	r1, r4, #29
 800a956:	d501      	bpl.n	800a95c <net_if_ipv6_get_best_match.isra.17+0x74>
 800a958:	2b3f      	cmp	r3, #63	; 0x3f
 800a95a:	d901      	bls.n	800a960 <net_if_ipv6_get_best_match.isra.17+0x78>
				continue;
			}

			*best_so_far = len;
 800a95c:	7013      	strb	r3, [r2, #0]
 800a95e:	462e      	mov	r6, r5
 800a960:	3530      	adds	r5, #48	; 0x30
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800a962:	b11f      	cbz	r7, 800a96c <net_if_ipv6_get_best_match.isra.17+0x84>
			src = &ipv6->unicast[i].address.in6_addr;
		}
	}

	return src;
}
 800a964:	4630      	mov	r0, r6
 800a966:	b003      	add	sp, #12
 800a968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800a96c:	2701      	movs	r7, #1
 800a96e:	e7c7      	b.n	800a900 <net_if_ipv6_get_best_match.isra.17+0x18>
			xor = src[j] ^ dst[j];
 800a970:	ea88 0404 	eor.w	r4, r8, r4
			for (k = 0U; k < 8; k++) {
 800a974:	fa5f fc8c 	uxtb.w	ip, ip
				if (!(xor & 0x80)) {
 800a978:	0621      	lsls	r1, r4, #24
 800a97a:	d4e4      	bmi.n	800a946 <net_if_ipv6_get_best_match.isra.17+0x5e>
					len++;
 800a97c:	3301      	adds	r3, #1
 800a97e:	b2db      	uxtb	r3, r3
					xor <<= 1;
 800a980:	0064      	lsls	r4, r4, #1
			for (k = 0U; k < 8; k++) {
 800a982:	4563      	cmp	r3, ip
					xor <<= 1;
 800a984:	b2e4      	uxtb	r4, r4
			for (k = 0U; k < 8; k++) {
 800a986:	d1f7      	bne.n	800a978 <net_if_ipv6_get_best_match.isra.17+0x90>
 800a988:	e7dd      	b.n	800a946 <net_if_ipv6_get_best_match.isra.17+0x5e>
		return NULL;
 800a98a:	4606      	mov	r6, r0
 800a98c:	e7ea      	b.n	800a964 <net_if_ipv6_get_best_match.isra.17+0x7c>
 800a98e:	bf00      	nop
 800a990:	02000100 	.word	0x02000100

0800a994 <iface_router_run_timer>:
{
 800a994:	b538      	push	{r3, r4, r5, lr}
 800a996:	4604      	mov	r4, r0
 800a998:	4815      	ldr	r0, [pc, #84]	; (800a9f0 <iface_router_run_timer+0x5c>)
 800a99a:	f008 f9e3 	bl	8012d64 <z_timeout_remaining>
 800a99e:	220a      	movs	r2, #10
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	17c1      	asrs	r1, r0, #31
 800a9a4:	f7f7 f96e 	bl	8001c84 <__aeabi_uldivmod>
	if (k_delayed_work_remaining_get(&router_timer)) {
 800a9a8:	b110      	cbz	r0, 800a9b0 <iface_router_run_timer+0x1c>
		k_delayed_work_cancel(&router_timer);
 800a9aa:	4812      	ldr	r0, [pc, #72]	; (800a9f4 <iface_router_run_timer+0x60>)
 800a9ac:	f00e f89c 	bl	8018ae8 <k_delayed_work_cancel>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 800a9b0:	4b11      	ldr	r3, [pc, #68]	; (800a9f8 <iface_router_run_timer+0x64>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	b1db      	cbz	r3, 800a9ee <iface_router_run_timer+0x5a>
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			K_SECONDS(router->lifetime) - current_time;
 800a9bc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 800a9c0:	b933      	cbnz	r3, 800a9d0 <iface_router_run_timer+0x3c>
	if (new_timer != UINT_MAX) {
 800a9c2:	1c4b      	adds	r3, r1, #1
 800a9c4:	d013      	beq.n	800a9ee <iface_router_run_timer+0x5a>
		k_delayed_work_submit(&router_timer, new_timer);
 800a9c6:	480b      	ldr	r0, [pc, #44]	; (800a9f4 <iface_router_run_timer+0x60>)
}
 800a9c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_delayed_work_submit(&router_timer, new_timer);
 800a9cc:	f7ff bee4 	b.w	800a798 <k_delayed_work_submit>
			K_SECONDS(router->lifetime) - current_time;
 800a9d0:	8c18      	ldrh	r0, [r3, #32]
		u32_t current_timer = router->life_start +
 800a9d2:	69db      	ldr	r3, [r3, #28]
 800a9d4:	1b1b      	subs	r3, r3, r4
 800a9d6:	fb05 3300 	mla	r3, r5, r0, r3
		new_timer = MIN(current_timer, new_timer);
 800a9da:	4299      	cmp	r1, r3
 800a9dc:	bf28      	it	cs
 800a9de:	4619      	movcs	r1, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 800a9e0:	b11a      	cbz	r2, 800a9ea <iface_router_run_timer+0x56>
 800a9e2:	6810      	ldr	r0, [r2, #0]
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	e7ea      	b.n	800a9c0 <iface_router_run_timer+0x2c>
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	e7fa      	b.n	800a9e4 <iface_router_run_timer+0x50>
}
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}
 800a9f0:	20000830 	.word	0x20000830
 800a9f4:	20000824 	.word	0x20000824
 800a9f8:	2000057c 	.word	0x2000057c

0800a9fc <iface_router_expired>:
{
 800a9fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 800aa00:	4d20      	ldr	r5, [pc, #128]	; (800aa84 <iface_router_expired+0x88>)
	u32_t current_time = k_uptime_get_32();
 800aa02:	f00b f9bf 	bl	8015d84 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 800aa06:	682c      	ldr	r4, [r5, #0]
	u32_t current_time = k_uptime_get_32();
 800aa08:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 800aa0a:	b924      	cbnz	r4, 800aa16 <iface_router_expired+0x1a>
	iface_router_run_timer(current_time);
 800aa0c:	4640      	mov	r0, r8
}
 800aa0e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	iface_router_run_timer(current_time);
 800aa12:	f7ff bfbf 	b.w	800a994 <iface_router_run_timer>
 800aa16:	2600      	movs	r6, #0
 800aa18:	6827      	ldr	r7, [r4, #0]
		net_mgmt_event_notify_with_info(NET_EVENT_IPV6_ROUTER_DEL,
 800aa1a:	f8df b06c 	ldr.w	fp, [pc, #108]	; 800aa88 <iface_router_expired+0x8c>
			    K_SECONDS(router->lifetime) - current_time) > 0) {
 800aa1e:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
	parent->next = child;
 800aa22:	46b1      	mov	r9, r6
 800aa24:	69e2      	ldr	r2, [r4, #28]
 800aa26:	8c23      	ldrh	r3, [r4, #32]
 800aa28:	eba2 0208 	sub.w	r2, r2, r8
 800aa2c:	fb0a 2303 	mla	r3, sl, r3, r2
		if ((s32_t)(router->life_start +
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	4621      	mov	r1, r4
 800aa34:	dc19      	bgt.n	800aa6a <iface_router_expired+0x6e>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800aa36:	88a3      	ldrh	r3, [r4, #4]
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d106      	bne.n	800aa4a <iface_router_expired+0x4e>
		net_mgmt_event_notify_with_info(NET_EVENT_IPV6_ROUTER_DEL,
 800aa3c:	2310      	movs	r3, #16
 800aa3e:	f104 0208 	add.w	r2, r4, #8
 800aa42:	69a1      	ldr	r1, [r4, #24]
 800aa44:	4658      	mov	r0, fp
 800aa46:	f001 fc49 	bl	800c2dc <net_mgmt_event_notify_with_info>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 800aa4a:	6823      	ldr	r3, [r4, #0]
 800aa4c:	b99e      	cbnz	r6, 800aa76 <iface_router_expired+0x7a>
 800aa4e:	686a      	ldr	r2, [r5, #4]
	list->head = node;
 800aa50:	602b      	str	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
 800aa52:	42a2      	cmp	r2, r4
 800aa54:	d100      	bne.n	800aa58 <iface_router_expired+0x5c>
	list->tail = node;
 800aa56:	606b      	str	r3, [r5, #4]
		router->is_used = false;
 800aa58:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	parent->next = child;
 800aa5c:	f8c4 9000 	str.w	r9, [r4]
 800aa60:	f369 0300 	bfi	r3, r9, #0, #1
 800aa64:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800aa68:	4631      	mov	r1, r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 800aa6a:	2f00      	cmp	r7, #0
 800aa6c:	d0ce      	beq.n	800aa0c <iface_router_expired+0x10>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800aa6e:	463c      	mov	r4, r7
 800aa70:	460e      	mov	r6, r1
 800aa72:	683f      	ldr	r7, [r7, #0]
 800aa74:	e7d6      	b.n	800aa24 <iface_router_expired+0x28>
	parent->next = child;
 800aa76:	6033      	str	r3, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 800aa78:	686b      	ldr	r3, [r5, #4]
 800aa7a:	42a3      	cmp	r3, r4
	list->tail = node;
 800aa7c:	bf08      	it	eq
 800aa7e:	606e      	streq	r6, [r5, #4]
 800aa80:	e7ea      	b.n	800aa58 <iface_router_expired+0x5c>
 800aa82:	bf00      	nop
 800aa84:	2000057c 	.word	0x2000057c
 800aa88:	e060000a 	.word	0xe060000a

0800aa8c <net_if_queue_tx>:
{
 800aa8c:	b510      	push	{r4, lr}
	u8_t tc = net_tx_priority2tc(prio);
 800aa8e:	2000      	movs	r0, #0
{
 800aa90:	460c      	mov	r4, r1
	u8_t tc = net_tx_priority2tc(prio);
 800aa92:	f002 f8c9 	bl	800cc28 <net_tx_priority2tc>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 800aa96:	4a05      	ldr	r2, [pc, #20]	; (800aaac <net_if_queue_tx+0x20>)
 800aa98:	2300      	movs	r3, #0
 800aa9a:	6023      	str	r3, [r4, #0]
 800aa9c:	e9c4 2301 	strd	r2, r3, [r4, #4]
	net_tc_submit_to_tx_queue(tc, pkt);
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	b2c0      	uxtb	r0, r0
}
 800aaa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_tc_submit_to_tx_queue(tc, pkt);
 800aaa8:	f002 b8aa 	b.w	800cc00 <net_tc_submit_to_tx_queue>
 800aaac:	0800ba1d 	.word	0x0800ba1d

0800aab0 <net_if_get_first_by_type>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800aab0:	4a07      	ldr	r2, [pc, #28]	; (800aad0 <net_if_get_first_by_type+0x20>)
 800aab2:	4908      	ldr	r1, [pc, #32]	; (800aad4 <net_if_get_first_by_type+0x24>)
{
 800aab4:	b510      	push	{r4, lr}
 800aab6:	4604      	mov	r4, r0
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800aab8:	428a      	cmp	r2, r1
 800aaba:	d102      	bne.n	800aac2 <net_if_get_first_by_type+0x12>
	return NULL;
 800aabc:	2200      	movs	r2, #0
}
 800aabe:	4610      	mov	r0, r2
 800aac0:	bd10      	pop	{r4, pc}
		if (net_if_l2(iface) == l2) {
 800aac2:	4610      	mov	r0, r2
 800aac4:	f00b f911 	bl	8015cea <net_if_l2>
 800aac8:	4284      	cmp	r4, r0
 800aaca:	d0f8      	beq.n	800aabe <net_if_get_first_by_type+0xe>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800aacc:	3220      	adds	r2, #32
 800aace:	e7f3      	b.n	800aab8 <net_if_get_first_by_type+0x8>
 800aad0:	200091c0 	.word	0x200091c0
 800aad4:	200091e0 	.word	0x200091e0

0800aad8 <net_if_get_default>:
{
 800aad8:	b510      	push	{r4, lr}
	if (__net_if_start == __net_if_end) {
 800aada:	4b06      	ldr	r3, [pc, #24]	; (800aaf4 <net_if_get_default+0x1c>)
 800aadc:	4c06      	ldr	r4, [pc, #24]	; (800aaf8 <net_if_get_default+0x20>)
 800aade:	429c      	cmp	r4, r3
 800aae0:	d006      	beq.n	800aaf0 <net_if_get_default+0x18>
	iface = net_if_get_first_by_type(&NET_L2_GET_NAME(ETHERNET));
 800aae2:	4806      	ldr	r0, [pc, #24]	; (800aafc <net_if_get_default+0x24>)
 800aae4:	f7ff ffe4 	bl	800aab0 <net_if_get_first_by_type>
	return iface ? iface : __net_if_start;
 800aae8:	2800      	cmp	r0, #0
 800aaea:	bf08      	it	eq
 800aaec:	4620      	moveq	r0, r4
}
 800aaee:	bd10      	pop	{r4, pc}
		return NULL;
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	e7fc      	b.n	800aaee <net_if_get_default+0x16>
 800aaf4:	200091e0 	.word	0x200091e0
 800aaf8:	200091c0 	.word	0x200091c0
 800aafc:	08019238 	.word	0x08019238

0800ab00 <net_if_config_ipv6_get>:
	if (iface->config.ip.ipv6) {
 800ab00:	6843      	ldr	r3, [r0, #4]
{
 800ab02:	b510      	push	{r4, lr}
	if (iface->config.ip.ipv6) {
 800ab04:	b973      	cbnz	r3, 800ab24 <net_if_config_ipv6_get+0x24>
		if (ipv6_addresses[i].iface) {
 800ab06:	4a0b      	ldr	r2, [pc, #44]	; (800ab34 <net_if_config_ipv6_get+0x34>)
 800ab08:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
 800ab0c:	b11b      	cbz	r3, 800ab16 <net_if_config_ipv6_get+0x16>
 800ab0e:	f8d2 3224 	ldr.w	r3, [r2, #548]	; 0x224
 800ab12:	b95b      	cbnz	r3, 800ab2c <net_if_config_ipv6_get+0x2c>
	for (i = 0; i < ARRAY_SIZE(ipv6_addresses); i++) {
 800ab14:	2301      	movs	r3, #1
		iface->config.ip.ipv6 = &ipv6_addresses[i].ipv6;
 800ab16:	f44f 748a 	mov.w	r4, #276	; 0x114
 800ab1a:	fb04 2303 	mla	r3, r4, r3, r2
 800ab1e:	6043      	str	r3, [r0, #4]
		ipv6_addresses[i].iface = iface;
 800ab20:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
		if (ipv6) {
 800ab24:	b101      	cbz	r1, 800ab28 <net_if_config_ipv6_get+0x28>
			*ipv6 = iface->config.ip.ipv6;
 800ab26:	600b      	str	r3, [r1, #0]
		return 0;
 800ab28:	2000      	movs	r0, #0
}
 800ab2a:	bd10      	pop	{r4, pc}
	return -ESRCH;
 800ab2c:	f06f 0002 	mvn.w	r0, #2
 800ab30:	e7fb      	b.n	800ab2a <net_if_config_ipv6_get+0x2a>
 800ab32:	bf00      	nop
 800ab34:	200005cc 	.word	0x200005cc

0800ab38 <net_if_start_rs>:
{
 800ab38:	b510      	push	{r4, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 800ab3a:	6844      	ldr	r4, [r0, #4]
	if (!ipv6) {
 800ab3c:	b1dc      	cbz	r4, 800ab76 <net_if_start_rs+0x3e>
	if (!net_ipv6_start_rs(iface)) {
 800ab3e:	f00c fe17 	bl	8017770 <net_ipv6_start_rs>
 800ab42:	b9c0      	cbnz	r0, 800ab76 <net_if_start_rs+0x3e>
		ipv6->rs_start = k_uptime_get_32();
 800ab44:	f00b f91e 	bl	8015d84 <k_uptime_get_32>
		sys_slist_append(&active_rs_timers, &ipv6->rs_node);
 800ab48:	f504 7182 	add.w	r1, r4, #260	; 0x104
		ipv6->rs_start = k_uptime_get_32();
 800ab4c:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		sys_slist_append(&active_rs_timers, &ipv6->rs_node);
 800ab50:	4809      	ldr	r0, [pc, #36]	; (800ab78 <net_if_start_rs+0x40>)
 800ab52:	f00b f8a5 	bl	8015ca0 <sys_slist_append>
	return k_ticks_to_ms_floor64(z_timeout_remaining(&work->timeout));
 800ab56:	4809      	ldr	r0, [pc, #36]	; (800ab7c <net_if_start_rs+0x44>)
 800ab58:	f008 f904 	bl	8012d64 <z_timeout_remaining>
 800ab5c:	220a      	movs	r2, #10
 800ab5e:	2300      	movs	r3, #0
 800ab60:	17c1      	asrs	r1, r0, #31
 800ab62:	f7f7 f88f 	bl	8001c84 <__aeabi_uldivmod>
		if (!k_delayed_work_remaining_get(&rs_timer)) {
 800ab66:	b930      	cbnz	r0, 800ab76 <net_if_start_rs+0x3e>
			k_delayed_work_submit(&rs_timer, RS_TIMEOUT);
 800ab68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ab6c:	4804      	ldr	r0, [pc, #16]	; (800ab80 <net_if_start_rs+0x48>)
}
 800ab6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_delayed_work_submit(&rs_timer, RS_TIMEOUT);
 800ab72:	f7ff be11 	b.w	800a798 <k_delayed_work_submit>
}
 800ab76:	bd10      	pop	{r4, pc}
 800ab78:	20000584 	.word	0x20000584
 800ab7c:	20000874 	.word	0x20000874
 800ab80:	20000868 	.word	0x20000868

0800ab84 <rs_timeout>:
{
 800ab84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
 800ab88:	4d22      	ldr	r5, [pc, #136]	; (800ac14 <rs_timeout+0x90>)
	u32_t current_time = k_uptime_get_32();
 800ab8a:	f00b f8fb 	bl	8015d84 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
 800ab8e:	682a      	ldr	r2, [r5, #0]
 800ab90:	2a00      	cmp	r2, #0
 800ab92:	d03c      	beq.n	800ac0e <rs_timeout+0x8a>
 800ab94:	f5b2 7382 	subs.w	r3, r2, #260	; 0x104
 800ab98:	d039      	beq.n	800ac0e <rs_timeout+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800ab9a:	6814      	ldr	r4, [r2, #0]
 800ab9c:	b10c      	cbz	r4, 800aba2 <rs_timeout+0x1e>
 800ab9e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
		for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800aba2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800ac20 <rs_timeout+0x9c>
		if ((s32_t)(ipv6->rs_start + RS_TIMEOUT - current_time) > 0) {
 800aba6:	f5c0 767a 	rsb	r6, r0, #1000	; 0x3e8
	parent->next = child;
 800abaa:	2700      	movs	r7, #0
 800abac:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800abb0:	4431      	add	r1, r6
 800abb2:	2900      	cmp	r1, #0
 800abb4:	dc21      	bgt.n	800abfa <rs_timeout+0x76>
Z_GENLIST_REMOVE(slist, snode)
 800abb6:	6869      	ldr	r1, [r5, #4]
 800abb8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	list->head = node;
 800abbc:	6028      	str	r0, [r5, #0]
		sys_slist_remove(&active_rs_timers, NULL, &ipv6->rs_node);
 800abbe:	f503 7282 	add.w	r2, r3, #260	; 0x104
Z_GENLIST_REMOVE(slist, snode)
 800abc2:	4291      	cmp	r1, r2
		ipv6->rs_count++;
 800abc4:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
	list->tail = node;
 800abc8:	bf08      	it	eq
 800abca:	6068      	streq	r0, [r5, #4]
 800abcc:	3201      	adds	r2, #1
 800abce:	b2d2      	uxtb	r2, r2
		for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800abd0:	4811      	ldr	r0, [pc, #68]	; (800ac18 <rs_timeout+0x94>)
	parent->next = child;
 800abd2:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
		ipv6->rs_count++;
 800abd6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800abda:	4540      	cmp	r0, r8
 800abdc:	d108      	bne.n	800abf0 <rs_timeout+0x6c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
 800abde:	b1b4      	cbz	r4, 800ac0e <rs_timeout+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800abe0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 800abe4:	b10a      	cbz	r2, 800abea <rs_timeout+0x66>
 800abe6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
{
 800abea:	4623      	mov	r3, r4
 800abec:	4614      	mov	r4, r2
 800abee:	e7dd      	b.n	800abac <rs_timeout+0x28>
			if (iface->config.ip.ipv6 == ipv6) {
 800abf0:	6841      	ldr	r1, [r0, #4]
 800abf2:	4299      	cmp	r1, r3
 800abf4:	d006      	beq.n	800ac04 <rs_timeout+0x80>
		for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800abf6:	3020      	adds	r0, #32
 800abf8:	e7ef      	b.n	800abda <rs_timeout+0x56>
		k_delayed_work_submit(&rs_timer,
 800abfa:	4808      	ldr	r0, [pc, #32]	; (800ac1c <rs_timeout+0x98>)
}
 800abfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_delayed_work_submit(&rs_timer,
 800ac00:	f7ff bdca 	b.w	800a798 <k_delayed_work_submit>
			if (ipv6->rs_count < RS_COUNT) {
 800ac04:	2a02      	cmp	r2, #2
 800ac06:	d8ea      	bhi.n	800abde <rs_timeout+0x5a>
				net_if_start_rs(iface);
 800ac08:	f7ff ff96 	bl	800ab38 <net_if_start_rs>
 800ac0c:	e7e7      	b.n	800abde <rs_timeout+0x5a>
}
 800ac0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac12:	bf00      	nop
 800ac14:	20000584 	.word	0x20000584
 800ac18:	200091c0 	.word	0x200091c0
 800ac1c:	20000868 	.word	0x20000868
 800ac20:	200091e0 	.word	0x200091e0

0800ac24 <net_if_stop_rs>:
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 800ac24:	6841      	ldr	r1, [r0, #4]
	if (!ipv6) {
 800ac26:	b121      	cbz	r1, 800ac32 <net_if_stop_rs+0xe>
	sys_slist_find_and_remove(&active_rs_timers, &ipv6->rs_node);
 800ac28:	f501 7182 	add.w	r1, r1, #260	; 0x104
 800ac2c:	4801      	ldr	r0, [pc, #4]	; (800ac34 <net_if_stop_rs+0x10>)
 800ac2e:	f00b b841 	b.w	8015cb4 <sys_slist_find_and_remove>
}
 800ac32:	4770      	bx	lr
 800ac34:	20000584 	.word	0x20000584

0800ac38 <net_if_ipv6_addr_lookup>:
{
 800ac38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800ac3c:	4d18      	ldr	r5, [pc, #96]	; (800aca0 <net_if_ipv6_addr_lookup+0x68>)
 800ac3e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800aca4 <net_if_ipv6_addr_lookup+0x6c>
{
 800ac42:	4606      	mov	r6, r0
 800ac44:	460f      	mov	r7, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800ac46:	4545      	cmp	r5, r8
 800ac48:	d101      	bne.n	800ac4e <net_if_ipv6_addr_lookup+0x16>
	return NULL;
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	e023      	b.n	800ac96 <net_if_ipv6_addr_lookup+0x5e>
		struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 800ac4e:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
 800ac50:	b90c      	cbnz	r4, 800ac56 <net_if_ipv6_addr_lookup+0x1e>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800ac52:	3520      	adds	r5, #32
 800ac54:	e7f7      	b.n	800ac46 <net_if_ipv6_addr_lookup+0xe>
			if (!ipv6->unicast[i].is_used ||
 800ac56:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ac5a:	079a      	lsls	r2, r3, #30
 800ac5c:	d508      	bpl.n	800ac70 <net_if_ipv6_addr_lookup+0x38>
 800ac5e:	8823      	ldrh	r3, [r4, #0]
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d105      	bne.n	800ac70 <net_if_ipv6_addr_lookup+0x38>
			if (net_ipv6_is_prefix(
 800ac64:	2280      	movs	r2, #128	; 0x80
 800ac66:	1d21      	adds	r1, r4, #4
 800ac68:	4630      	mov	r0, r6
 800ac6a:	f00b f85e 	bl	8015d2a <net_ipv6_is_prefix>
 800ac6e:	b9a0      	cbnz	r0, 800ac9a <net_if_ipv6_addr_lookup+0x62>
			if (!ipv6->unicast[i].is_used ||
 800ac70:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 800ac74:	079b      	lsls	r3, r3, #30
 800ac76:	d5ec      	bpl.n	800ac52 <net_if_ipv6_addr_lookup+0x1a>
 800ac78:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d1e9      	bne.n	800ac52 <net_if_ipv6_addr_lookup+0x1a>
			if (net_ipv6_is_prefix(
 800ac7e:	2280      	movs	r2, #128	; 0x80
 800ac80:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800ac84:	4630      	mov	r0, r6
 800ac86:	f00b f850 	bl	8015d2a <net_ipv6_is_prefix>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d0e1      	beq.n	800ac52 <net_if_ipv6_addr_lookup+0x1a>
 800ac8e:	2030      	movs	r0, #48	; 0x30
				if (ret) {
 800ac90:	b107      	cbz	r7, 800ac94 <net_if_ipv6_addr_lookup+0x5c>
					*ret = iface;
 800ac92:	603d      	str	r5, [r7, #0]
				return &ipv6->unicast[i];
 800ac94:	4420      	add	r0, r4
}
 800ac96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (net_ipv6_is_prefix(
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	e7f8      	b.n	800ac90 <net_if_ipv6_addr_lookup+0x58>
 800ac9e:	bf00      	nop
 800aca0:	200091c0 	.word	0x200091c0
 800aca4:	200091e0 	.word	0x200091e0

0800aca8 <dad_timeout>:
{
 800aca8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
 800acac:	4e22      	ldr	r6, [pc, #136]	; (800ad38 <dad_timeout+0x90>)
	u32_t current_time = k_uptime_get_32();
 800acae:	f00b f869 	bl	8015d84 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
 800acb2:	6833      	ldr	r3, [r6, #0]
 800acb4:	b393      	cbz	r3, 800ad1c <dad_timeout+0x74>
 800acb6:	f1b3 0524 	subs.w	r5, r3, #36	; 0x24
 800acba:	d02f      	beq.n	800ad1c <dad_timeout+0x74>
 800acbc:	681c      	ldr	r4, [r3, #0]
 800acbe:	b104      	cbz	r4, 800acc2 <dad_timeout+0x1a>
 800acc0:	3c24      	subs	r4, #36	; 0x24
			net_mgmt_event_notify_with_info(
 800acc2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800ad40 <dad_timeout+0x98>
			    DAD_TIMEOUT - current_time) > 0) {
 800acc6:	f1c0 0764 	rsb	r7, r0, #100	; 0x64
	parent->next = child;
 800acca:	f04f 0800 	mov.w	r8, #0
 800acce:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800acd0:	4439      	add	r1, r7
		if ((s32_t)(ifaddr->dad_start +
 800acd2:	2900      	cmp	r1, #0
 800acd4:	dc25      	bgt.n	800ad22 <dad_timeout+0x7a>
Z_GENLIST_REMOVE(slist, snode)
 800acd6:	462b      	mov	r3, r5
 800acd8:	6871      	ldr	r1, [r6, #4]
 800acda:	f853 2f24 	ldr.w	r2, [r3, #36]!
	parent->next = child;
 800acde:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
Z_GENLIST_REMOVE(slist, snode)
 800ace2:	4299      	cmp	r1, r3
		tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
 800ace4:	f105 0a04 	add.w	sl, r5, #4
		ifaddr->addr_state = NET_ADDR_PREFERRED;
 800ace8:	f04f 0301 	mov.w	r3, #1
 800acec:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
		tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
 800acf0:	a901      	add	r1, sp, #4
 800acf2:	4650      	mov	r0, sl
	list->tail = node;
 800acf4:	bf08      	it	eq
 800acf6:	6072      	streq	r2, [r6, #4]
	list->head = node;
 800acf8:	6032      	str	r2, [r6, #0]
		iface = NULL;
 800acfa:	f8cd 8004 	str.w	r8, [sp, #4]
		tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
 800acfe:	f7ff ff9b 	bl	800ac38 <net_if_ipv6_addr_lookup>
		if (tmp == ifaddr) {
 800ad02:	4285      	cmp	r5, r0
 800ad04:	d109      	bne.n	800ad1a <dad_timeout+0x72>
			net_mgmt_event_notify_with_info(
 800ad06:	9901      	ldr	r1, [sp, #4]
 800ad08:	4648      	mov	r0, r9
 800ad0a:	2310      	movs	r3, #16
 800ad0c:	4652      	mov	r2, sl
 800ad0e:	f001 fae5 	bl	800c2dc <net_mgmt_event_notify_with_info>
			net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
 800ad12:	4651      	mov	r1, sl
 800ad14:	9801      	ldr	r0, [sp, #4]
 800ad16:	f002 fb7d 	bl	800d414 <net_ipv6_nbr_rm>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
 800ad1a:	b934      	cbnz	r4, 800ad2a <dad_timeout+0x82>
}
 800ad1c:	b002      	add	sp, #8
 800ad1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		k_delayed_work_submit(&dad_timer,
 800ad22:	4806      	ldr	r0, [pc, #24]	; (800ad3c <dad_timeout+0x94>)
 800ad24:	f7ff fd38 	bl	800a798 <k_delayed_work_submit>
 800ad28:	e7f8      	b.n	800ad1c <dad_timeout+0x74>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800ad2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
 800ad2c:	b103      	cbz	r3, 800ad30 <dad_timeout+0x88>
 800ad2e:	3b24      	subs	r3, #36	; 0x24
{
 800ad30:	4625      	mov	r5, r4
 800ad32:	461c      	mov	r4, r3
 800ad34:	e7cb      	b.n	800acce <dad_timeout+0x26>
 800ad36:	bf00      	nop
 800ad38:	2000056c 	.word	0x2000056c
 800ad3c:	200005ac 	.word	0x200005ac
 800ad40:	e060000d 	.word	0xe060000d

0800ad44 <net_if_ipv6_addr_update_lifetime>:
{
 800ad44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ifaddr->addr_state = NET_ADDR_PREFERRED;
 800ad46:	2301      	movs	r3, #1
{
 800ad48:	4604      	mov	r4, r0
	ifaddr->addr_state = NET_ADDR_PREFERRED;
 800ad4a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	u64_t expire_timeout = K_SECONDS((u64_t)vlifetime);
 800ad4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ad52:	fba1 6700 	umull	r6, r7, r1, r0
	sys_slist_append(&active_address_lifetime_timers,
 800ad56:	f104 0114 	add.w	r1, r4, #20
 800ad5a:	4818      	ldr	r0, [pc, #96]	; (800adbc <net_if_ipv6_addr_update_lifetime+0x78>)
 800ad5c:	f00a ffa0 	bl	8015ca0 <sys_slist_append>
	ifaddr->lifetime.timer_start = k_uptime_get_32();
 800ad60:	f00b f810 	bl	8015d84 <k_uptime_get_32>
	ifaddr->lifetime.wrap_counter = expire_timeout /
 800ad64:	4a16      	ldr	r2, [pc, #88]	; (800adc0 <net_if_ipv6_addr_update_lifetime+0x7c>)
	ifaddr->lifetime.timer_start = k_uptime_get_32();
 800ad66:	61a0      	str	r0, [r4, #24]
	ifaddr->lifetime.wrap_counter = expire_timeout /
 800ad68:	2300      	movs	r3, #0
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	4639      	mov	r1, r7
 800ad6e:	f7f6 ff89 	bl	8001c84 <__aeabi_uldivmod>
	ifaddr->lifetime.timer_timeout = expire_timeout -
 800ad72:	4b13      	ldr	r3, [pc, #76]	; (800adc0 <net_if_ipv6_addr_update_lifetime+0x7c>)
	ifaddr->lifetime.wrap_counter = expire_timeout /
 800ad74:	6220      	str	r0, [r4, #32]
	ifaddr->lifetime.timer_timeout = expire_timeout -
 800ad76:	fb03 6010 	mls	r0, r3, r0, r6
 800ad7a:	61e0      	str	r0, [r4, #28]
 800ad7c:	4811      	ldr	r0, [pc, #68]	; (800adc4 <net_if_ipv6_addr_update_lifetime+0x80>)
 800ad7e:	f007 fff1 	bl	8012d64 <z_timeout_remaining>
 800ad82:	220a      	movs	r2, #10
 800ad84:	2300      	movs	r3, #0
 800ad86:	17c1      	asrs	r1, r0, #31
 800ad88:	f7f6 ff7c 	bl	8001c84 <__aeabi_uldivmod>
	if (!remaining || (ifaddr->lifetime.wrap_counter == 0 &&
 800ad8c:	4605      	mov	r5, r0
 800ad8e:	b120      	cbz	r0, 800ad9a <net_if_ipv6_addr_update_lifetime+0x56>
 800ad90:	6a23      	ldr	r3, [r4, #32]
 800ad92:	b98b      	cbnz	r3, 800adb8 <net_if_ipv6_addr_update_lifetime+0x74>
 800ad94:	69e3      	ldr	r3, [r4, #28]
 800ad96:	4283      	cmp	r3, r0
 800ad98:	da0e      	bge.n	800adb8 <net_if_ipv6_addr_update_lifetime+0x74>
		k_delayed_work_cancel(&address_lifetime_timer);
 800ad9a:	480b      	ldr	r0, [pc, #44]	; (800adc8 <net_if_ipv6_addr_update_lifetime+0x84>)
 800ad9c:	f00d fea4 	bl	8018ae8 <k_delayed_work_cancel>
		if (ifaddr->lifetime.wrap_counter > 0 && remaining == 0) {
 800ada0:	6a23      	ldr	r3, [r4, #32]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	dd06      	ble.n	800adb4 <net_if_ipv6_addr_update_lifetime+0x70>
 800ada6:	b92d      	cbnz	r5, 800adb4 <net_if_ipv6_addr_update_lifetime+0x70>
			k_delayed_work_submit(&address_lifetime_timer,
 800ada8:	4905      	ldr	r1, [pc, #20]	; (800adc0 <net_if_ipv6_addr_update_lifetime+0x7c>)
			k_delayed_work_submit(&address_lifetime_timer,
 800adaa:	4807      	ldr	r0, [pc, #28]	; (800adc8 <net_if_ipv6_addr_update_lifetime+0x84>)
}
 800adac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_delayed_work_submit(&address_lifetime_timer,
 800adb0:	f7ff bcf2 	b.w	800a798 <k_delayed_work_submit>
 800adb4:	69e1      	ldr	r1, [r4, #28]
 800adb6:	e7f8      	b.n	800adaa <net_if_ipv6_addr_update_lifetime+0x66>
}
 800adb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adba:	bf00      	nop
 800adbc:	20000564 	.word	0x20000564
 800adc0:	7fffff9b 	.word	0x7fffff9b
 800adc4:	20000598 	.word	0x20000598
 800adc8:	2000058c 	.word	0x2000058c

0800adcc <net_if_ipv6_addr_add>:
{
 800adcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add0:	b08d      	sub	sp, #52	; 0x34
 800add2:	460f      	mov	r7, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
 800add4:	a903      	add	r1, sp, #12
{
 800add6:	4606      	mov	r6, r0
 800add8:	4691      	mov	r9, r2
 800adda:	4698      	mov	r8, r3
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
 800addc:	f7ff fe90 	bl	800ab00 <net_if_config_ipv6_get>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	da03      	bge.n	800adec <net_if_ipv6_addr_add+0x20>
		return NULL;
 800ade4:	2000      	movs	r0, #0
}
 800ade6:	b00d      	add	sp, #52	; 0x34
 800ade8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ifaddr = ipv6_addr_find(iface, addr);
 800adec:	6875      	ldr	r5, [r6, #4]
		if (!ipv6->unicast[i].is_used) {
 800adee:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800adf2:	079c      	lsls	r4, r3, #30
 800adf4:	f100 80f2 	bmi.w	800afdc <net_if_ipv6_addr_add+0x210>
 800adf8:	f895 305f 	ldrb.w	r3, [r5, #95]	; 0x5f
 800adfc:	0798      	lsls	r0, r3, #30
 800adfe:	f100 80f6 	bmi.w	800afee <net_if_ipv6_addr_add+0x222>
		if (ipv6->unicast[i].is_used) {
 800ae02:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800ae06:	f89c 402f 	ldrb.w	r4, [ip, #47]	; 0x2f
 800ae0a:	f3c4 0440 	ubfx	r4, r4, #1, #1
 800ae0e:	b124      	cbz	r4, 800ae1a <net_if_ipv6_addr_add+0x4e>
 800ae10:	f89c 305f 	ldrb.w	r3, [ip, #95]	; 0x5f
 800ae14:	0799      	lsls	r1, r3, #30
 800ae16:	d4e5      	bmi.n	800ade4 <net_if_ipv6_addr_add+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800ae18:	2401      	movs	r4, #1
		net_if_addr_init(&ipv6->unicast[i], addr, addr_type,
 800ae1a:	2530      	movs	r5, #48	; 0x30
 800ae1c:	4365      	muls	r5, r4
 800ae1e:	eb0c 0e05 	add.w	lr, ip, r5
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
 800ae22:	463a      	mov	r2, r7
	ifaddr->is_used = true;
 800ae24:	f89e 302f 	ldrb.w	r3, [lr, #47]	; 0x2f
 800ae28:	f043 0302 	orr.w	r3, r3, #2
 800ae2c:	f88e 302f 	strb.w	r3, [lr, #47]	; 0x2f
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
 800ae30:	af04      	add	r7, sp, #16
	ifaddr->address.family = AF_INET6;
 800ae32:	2302      	movs	r3, #2
 800ae34:	f82c 3005 	strh.w	r3, [ip, r5]
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
 800ae38:	f102 0a10 	add.w	sl, r2, #16
	ifaddr->addr_type = addr_type;
 800ae3c:	f88e 902c 	strb.w	r9, [lr, #44]	; 0x2c
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
 800ae40:	463b      	mov	r3, r7
 800ae42:	6810      	ldr	r0, [r2, #0]
 800ae44:	6851      	ldr	r1, [r2, #4]
 800ae46:	46b9      	mov	r9, r7
 800ae48:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 800ae4c:	3208      	adds	r2, #8
 800ae4e:	4552      	cmp	r2, sl
 800ae50:	464f      	mov	r7, r9
 800ae52:	d1f6      	bne.n	800ae42 <net_if_ipv6_addr_add+0x76>
 800ae54:	461a      	mov	r2, r3
 800ae56:	f10e 0904 	add.w	r9, lr, #4
 800ae5a:	af08      	add	r7, sp, #32
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	cb03      	ldmia	r3!, {r0, r1}
 800ae60:	42bb      	cmp	r3, r7
 800ae62:	f8c9 0000 	str.w	r0, [r9]
 800ae66:	f8c9 1004 	str.w	r1, [r9, #4]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	f109 0908 	add.w	r9, r9, #8
 800ae70:	d1f4      	bne.n	800ae5c <net_if_ipv6_addr_add+0x90>
	if (vlifetime) {
 800ae72:	2330      	movs	r3, #48	; 0x30
		ifaddr->is_infinite = false;
 800ae74:	fb03 c304 	mla	r3, r3, r4, ip
 800ae78:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
	if (vlifetime) {
 800ae7c:	f1b8 0f00 	cmp.w	r8, #0
 800ae80:	f000 80c2 	beq.w	800b008 <net_if_ipv6_addr_add+0x23c>
		ifaddr->is_infinite = false;
 800ae84:	f36f 0200 	bfc	r2, #0, #1
 800ae88:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
 800ae8c:	4641      	mov	r1, r8
 800ae8e:	4670      	mov	r0, lr
 800ae90:	f7ff ff58 	bl	800ad44 <net_if_ipv6_addr_update_lifetime>
		if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
 800ae94:	4630      	mov	r0, r6
 800ae96:	f00a ff32 	bl	8015cfe <l2_flags_get>
 800ae9a:	f010 0b08 	ands.w	fp, r0, #8
 800ae9e:	f105 0a04 	add.w	sl, r5, #4
 800aea2:	f040 8091 	bne.w	800afc8 <net_if_ipv6_addr_add+0x1fc>
	flags = l2_flags_get(iface);
 800aea6:	4630      	mov	r0, r6
					 &ipv6->unicast[i].address.in6_addr);
 800aea8:	f8dd 900c 	ldr.w	r9, [sp, #12]
	flags = l2_flags_get(iface);
 800aeac:	f00a ff27 	bl	8015cfe <l2_flags_get>
	if (flags & NET_L2_MULTICAST) {
 800aeb0:	f010 0f01 	tst.w	r0, #1
	flags = l2_flags_get(iface);
 800aeb4:	4680      	mov	r8, r0
	if (flags & NET_L2_MULTICAST) {
 800aeb6:	f000 8082 	beq.w	800afbe <net_if_ipv6_addr_add+0x1f2>
					u16_t addr0, u16_t addr1,
					u16_t addr2, u16_t addr3,
					u16_t addr4, u16_t addr5,
					u16_t addr6, u16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
 800aeba:	f240 23ff 	movw	r3, #767	; 0x2ff
 800aebe:	f8ad 3020 	strh.w	r3, [sp, #32]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
 800aec2:	f8ad b022 	strh.w	fp, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
 800aec6:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
 800aeca:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
 800aece:	f8ad b028 	strh.w	fp, [sp, #40]	; 0x28
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
 800aed2:	f8ad b02a 	strh.w	fp, [sp, #42]	; 0x2a
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
 800aed6:	f8ad b02c 	strh.w	fp, [sp, #44]	; 0x2c
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
 800aeda:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aede:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	ret = net_ipv6_mld_join(iface, &addr);
 800aee2:	4639      	mov	r1, r7
 800aee4:	4630      	mov	r0, r6
 800aee6:	f003 fa9f 	bl	800e428 <net_ipv6_mld_join>
	if (ret < 0 && ret != -EALREADY) {
 800aeea:	f1b0 0b00 	subs.w	fp, r0, #0
 800aeee:	da1f      	bge.n	800af30 <net_if_ipv6_addr_add+0x164>
 800aef0:	f11b 0f78 	cmn.w	fp, #120	; 0x78
 800aef4:	d01c      	beq.n	800af30 <net_if_ipv6_addr_add+0x164>
		NET_ERR("Cannot join all nodes address %s (%d)",
 800aef6:	4b47      	ldr	r3, [pc, #284]	; (800b014 <net_if_ipv6_addr_add+0x248>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	075a      	lsls	r2, r3, #29
 800aefc:	d018      	beq.n	800af30 <net_if_ipv6_addr_add+0x164>
 800aefe:	2201      	movs	r2, #1
 800af00:	f04f 0300 	mov.w	r3, #0
 800af04:	f362 0307 	bfi	r3, r2, #0, #8
 800af08:	4943      	ldr	r1, [pc, #268]	; (800b018 <net_if_ipv6_addr_add+0x24c>)
 800af0a:	4a44      	ldr	r2, [pc, #272]	; (800b01c <net_if_ipv6_addr_add+0x250>)
 800af0c:	1a89      	subs	r1, r1, r2
 800af0e:	08c9      	lsrs	r1, r1, #3
 800af10:	f361 138f 	bfi	r3, r1, #6, #10
 800af14:	2002      	movs	r0, #2
 800af16:	4639      	mov	r1, r7
 800af18:	e9cd 3300 	strd	r3, r3, [sp]
 800af1c:	f001 f8da 	bl	800c0d4 <net_sprint_addr>
 800af20:	f7fa ff40 	bl	8005da4 <log_strdup>
 800af24:	9b01      	ldr	r3, [sp, #4]
 800af26:	4601      	mov	r1, r0
 800af28:	465a      	mov	r2, fp
 800af2a:	483d      	ldr	r0, [pc, #244]	; (800b020 <net_if_ipv6_addr_add+0x254>)
 800af2c:	f008 fe8a 	bl	8013c44 <log_2>
		if (!(flags & NET_L2_MULTICAST_SKIP_JOIN_SOLICIT_NODE)) {
 800af30:	f018 0802 	ands.w	r8, r8, #2
 800af34:	d143      	bne.n	800afbe <net_if_ipv6_addr_add+0x1f2>
	dst->s6_addr[0]   = 0xFF;
 800af36:	f240 23ff 	movw	r3, #767	; 0x2ff
 800af3a:	9308      	str	r3, [sp, #32]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
 800af3c:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
 800af40:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
 800af44:	f8ad 8028 	strh.w	r8, [sp, #40]	; 0x28
	dst->s6_addr[10]  = 0U;
 800af48:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af4c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	dst->s6_addr[12]  = 0xFF;
 800af50:	23ff      	movs	r3, #255	; 0xff
 800af52:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	dst->s6_addr[13]  = src->s6_addr[13];
 800af56:	2330      	movs	r3, #48	; 0x30
 800af58:	fb03 9404 	mla	r4, r3, r4, r9
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
 800af5c:	44d1      	add	r9, sl
	dst->s6_addr[13]  = src->s6_addr[13];
 800af5e:	7c63      	ldrb	r3, [r4, #17]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
 800af60:	f899 200f 	ldrb.w	r2, [r9, #15]
	dst->s6_addr[13]  = src->s6_addr[13];
 800af64:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
 800af68:	f899 300e 	ldrb.w	r3, [r9, #14]
 800af6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800af70:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	ret = net_ipv6_mld_join(iface, &addr);
 800af74:	4639      	mov	r1, r7
 800af76:	4630      	mov	r0, r6
 800af78:	f003 fa56 	bl	800e428 <net_ipv6_mld_join>
	if (ret < 0 && ret != -EALREADY) {
 800af7c:	f1b0 0800 	subs.w	r8, r0, #0
 800af80:	da1d      	bge.n	800afbe <net_if_ipv6_addr_add+0x1f2>
 800af82:	f118 0f78 	cmn.w	r8, #120	; 0x78
 800af86:	d01a      	beq.n	800afbe <net_if_ipv6_addr_add+0x1f2>
		NET_ERR("Cannot join solicit node address %s (%d)",
 800af88:	4b22      	ldr	r3, [pc, #136]	; (800b014 <net_if_ipv6_addr_add+0x248>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	075b      	lsls	r3, r3, #29
 800af8e:	d016      	beq.n	800afbe <net_if_ipv6_addr_add+0x1f2>
 800af90:	2301      	movs	r3, #1
 800af92:	f04f 0400 	mov.w	r4, #0
 800af96:	f363 0407 	bfi	r4, r3, #0, #8
 800af9a:	491f      	ldr	r1, [pc, #124]	; (800b018 <net_if_ipv6_addr_add+0x24c>)
 800af9c:	4b1f      	ldr	r3, [pc, #124]	; (800b01c <net_if_ipv6_addr_add+0x250>)
 800af9e:	1ac9      	subs	r1, r1, r3
 800afa0:	08c9      	lsrs	r1, r1, #3
 800afa2:	f361 148f 	bfi	r4, r1, #6, #10
 800afa6:	2002      	movs	r0, #2
 800afa8:	4639      	mov	r1, r7
 800afaa:	f001 f893 	bl	800c0d4 <net_sprint_addr>
 800afae:	f7fa fef9 	bl	8005da4 <log_strdup>
 800afb2:	4623      	mov	r3, r4
 800afb4:	4601      	mov	r1, r0
 800afb6:	4642      	mov	r2, r8
 800afb8:	481a      	ldr	r0, [pc, #104]	; (800b024 <net_if_ipv6_addr_add+0x258>)
 800afba:	f008 fe43 	bl	8013c44 <log_2>
			net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
 800afbe:	9903      	ldr	r1, [sp, #12]
 800afc0:	4630      	mov	r0, r6
 800afc2:	4429      	add	r1, r5
 800afc4:	f7ff fc5e 	bl	800a884 <net_if_ipv6_start_dad>
		net_mgmt_event_notify_with_info(
 800afc8:	9a03      	ldr	r2, [sp, #12]
 800afca:	4817      	ldr	r0, [pc, #92]	; (800b028 <net_if_ipv6_addr_add+0x25c>)
 800afcc:	2310      	movs	r3, #16
 800afce:	4452      	add	r2, sl
 800afd0:	4631      	mov	r1, r6
 800afd2:	f001 f983 	bl	800c2dc <net_mgmt_event_notify_with_info>
		return &ipv6->unicast[i];
 800afd6:	9803      	ldr	r0, [sp, #12]
 800afd8:	4428      	add	r0, r5
 800afda:	e704      	b.n	800ade6 <net_if_ipv6_addr_add+0x1a>
		if (net_ipv6_addr_cmp(
 800afdc:	1d29      	adds	r1, r5, #4
 800afde:	4638      	mov	r0, r7
 800afe0:	f00a fec8 	bl	8015d74 <net_ipv6_addr_cmp>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	f43f af07 	beq.w	800adf8 <net_if_ipv6_addr_add+0x2c>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800afea:	2000      	movs	r0, #0
 800afec:	e008      	b.n	800b000 <net_if_ipv6_addr_add+0x234>
		if (net_ipv6_addr_cmp(
 800afee:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800aff2:	4638      	mov	r0, r7
 800aff4:	f00a febe 	bl	8015d74 <net_ipv6_addr_cmp>
 800aff8:	2800      	cmp	r0, #0
 800affa:	f43f af02 	beq.w	800ae02 <net_if_ipv6_addr_add+0x36>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800affe:	2001      	movs	r0, #1
			return &ipv6->unicast[i];
 800b000:	2330      	movs	r3, #48	; 0x30
 800b002:	fb03 5000 	mla	r0, r3, r0, r5
	if (ifaddr) {
 800b006:	e6ee      	b.n	800ade6 <net_if_ipv6_addr_add+0x1a>
		ifaddr->is_infinite = true;
 800b008:	f042 0201 	orr.w	r2, r2, #1
 800b00c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800b010:	e740      	b.n	800ae94 <net_if_ipv6_addr_add+0xc8>
 800b012:	bf00      	nop
 800b014:	2000900c 	.word	0x2000900c
 800b018:	080192c0 	.word	0x080192c0
 800b01c:	08019248 	.word	0x08019248
 800b020:	0801b8f6 	.word	0x0801b8f6
 800b024:	0801b91c 	.word	0x0801b91c
 800b028:	e0600001 	.word	0xe0600001

0800b02c <net_if_start_dad>:
{
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	4604      	mov	r4, r0
	struct in6_addr addr = { };
 800b032:	2210      	movs	r2, #16
 800b034:	2100      	movs	r1, #0
 800b036:	a802      	add	r0, sp, #8
 800b038:	f7f9 fc99 	bl	800496e <memset>
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
 800b03c:	a901      	add	r1, sp, #4
 800b03e:	4620      	mov	r0, r4
 800b040:	f7ff fd5e 	bl	800ab00 <net_if_config_ipv6_get>
 800b044:	2800      	cmp	r0, #0
 800b046:	da14      	bge.n	800b072 <net_if_start_dad+0x46>
		NET_WARN("Cannot do DAD IPv6 config is not valid.");
 800b048:	4b4d      	ldr	r3, [pc, #308]	; (800b180 <net_if_start_dad+0x154>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f013 0f06 	tst.w	r3, #6
 800b050:	d00d      	beq.n	800b06e <net_if_start_dad+0x42>
 800b052:	2302      	movs	r3, #2
 800b054:	f04f 0100 	mov.w	r1, #0
 800b058:	f363 0107 	bfi	r1, r3, #0, #8
 800b05c:	4a49      	ldr	r2, [pc, #292]	; (800b184 <net_if_start_dad+0x158>)
 800b05e:	4b4a      	ldr	r3, [pc, #296]	; (800b188 <net_if_start_dad+0x15c>)
 800b060:	484a      	ldr	r0, [pc, #296]	; (800b18c <net_if_start_dad+0x160>)
 800b062:	1a9b      	subs	r3, r3, r2
 800b064:	08db      	lsrs	r3, r3, #3
 800b066:	f363 118f 	bfi	r1, r3, #6, #10
 800b06a:	f008 fdca 	bl	8013c02 <log_0>
}
 800b06e:	b006      	add	sp, #24
 800b070:	bd70      	pop	{r4, r5, r6, pc}
	if (!ipv6) {
 800b072:	9b01      	ldr	r3, [sp, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d0fa      	beq.n	800b06e <net_if_start_dad+0x42>
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
 800b078:	f248 03fe 	movw	r3, #33022	; 0x80fe
	net_ipv6_addr_create_iid(&addr, net_if_get_link_addr(iface));
 800b07c:	6822      	ldr	r2, [r4, #0]
 800b07e:	9302      	str	r3, [sp, #8]
	addr->s6_addr[1] = 0x80;
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
 800b080:	2300      	movs	r3, #0
 800b082:	9303      	str	r3, [sp, #12]

	switch (lladdr->len) {
 800b084:	7d13      	ldrb	r3, [r2, #20]
 800b086:	2b06      	cmp	r3, #6
 800b088:	d056      	beq.n	800b138 <net_if_start_dad+0x10c>
 800b08a:	2b08      	cmp	r3, #8
 800b08c:	d072      	beq.n	800b174 <net_if_start_dad+0x148>
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d113      	bne.n	800b0ba <net_if_start_dad+0x8e>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154 ||
 800b092:	7d53      	ldrb	r3, [r2, #21]
 800b094:	2b01      	cmp	r3, #1
 800b096:	d001      	beq.n	800b09c <net_if_start_dad+0x70>
 800b098:	2b06      	cmp	r3, #6
 800b09a:	d10e      	bne.n	800b0ba <net_if_start_dad+0x8e>
		    lladdr->type == NET_LINK_CANBUS) {
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
 800b09c:	2300      	movs	r3, #0
 800b09e:	9304      	str	r3, [sp, #16]
			addr->s6_addr[11] = 0xff;
 800b0a0:	23ff      	movs	r3, #255	; 0xff
 800b0a2:	f88d 3013 	strb.w	r3, [sp, #19]
			addr->s6_addr[12] = 0xfe;
 800b0a6:	23fe      	movs	r3, #254	; 0xfe
 800b0a8:	f8ad 3014 	strh.w	r3, [sp, #20]
			addr->s6_addr[13] = 0U;
			addr->s6_addr[14] = lladdr->addr[0];
 800b0ac:	6913      	ldr	r3, [r2, #16]
 800b0ae:	781a      	ldrb	r2, [r3, #0]
 800b0b0:	f88d 2016 	strb.w	r2, [sp, #22]
			addr->s6_addr[15] = lladdr->addr[1];
 800b0b4:	785b      	ldrb	r3, [r3, #1]
 800b0b6:	f88d 3017 	strb.w	r3, [sp, #23]
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	2201      	movs	r2, #1
 800b0be:	a902      	add	r1, sp, #8
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f7ff fe83 	bl	800adcc <net_if_ipv6_addr_add>
	if (!ifaddr) {
 800b0c6:	4605      	mov	r5, r0
 800b0c8:	b9d0      	cbnz	r0, 800b100 <net_if_start_dad+0xd4>
		NET_ERR("Cannot add %s address to interface %p, DAD fails",
 800b0ca:	4b2d      	ldr	r3, [pc, #180]	; (800b180 <net_if_start_dad+0x154>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	0759      	lsls	r1, r3, #29
 800b0d0:	d016      	beq.n	800b100 <net_if_start_dad+0xd4>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	f04f 0600 	mov.w	r6, #0
 800b0d8:	f363 0607 	bfi	r6, r3, #0, #8
 800b0dc:	4a2a      	ldr	r2, [pc, #168]	; (800b188 <net_if_start_dad+0x15c>)
 800b0de:	4b29      	ldr	r3, [pc, #164]	; (800b184 <net_if_start_dad+0x158>)
 800b0e0:	1ad2      	subs	r2, r2, r3
 800b0e2:	08d2      	lsrs	r2, r2, #3
 800b0e4:	a902      	add	r1, sp, #8
 800b0e6:	2002      	movs	r0, #2
 800b0e8:	f362 168f 	bfi	r6, r2, #6, #10
 800b0ec:	f000 fff2 	bl	800c0d4 <net_sprint_addr>
 800b0f0:	f7fa fe58 	bl	8005da4 <log_strdup>
 800b0f4:	4633      	mov	r3, r6
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	4622      	mov	r2, r4
 800b0fa:	4825      	ldr	r0, [pc, #148]	; (800b190 <net_if_start_dad+0x164>)
 800b0fc:	f008 fda2 	bl	8013c44 <log_2>
		if (!ipv6->unicast[i].is_used ||
 800b100:	9901      	ldr	r1, [sp, #4]
 800b102:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 800b106:	079a      	lsls	r2, r3, #30
 800b108:	d507      	bpl.n	800b11a <net_if_start_dad+0xee>
 800b10a:	880b      	ldrh	r3, [r1, #0]
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d104      	bne.n	800b11a <net_if_start_dad+0xee>
		    ipv6->unicast[i].address.family != AF_INET6 ||
 800b110:	428d      	cmp	r5, r1
 800b112:	d002      	beq.n	800b11a <net_if_start_dad+0xee>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
 800b114:	4620      	mov	r0, r4
 800b116:	f7ff fbb5 	bl	800a884 <net_if_ipv6_start_dad>
		if (!ipv6->unicast[i].is_used ||
 800b11a:	9901      	ldr	r1, [sp, #4]
 800b11c:	f891 305f 	ldrb.w	r3, [r1, #95]	; 0x5f
 800b120:	079b      	lsls	r3, r3, #30
 800b122:	d5a4      	bpl.n	800b06e <net_if_start_dad+0x42>
 800b124:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 800b126:	2b02      	cmp	r3, #2
 800b128:	d1a1      	bne.n	800b06e <net_if_start_dad+0x42>
		    &ipv6->unicast[i] == ifaddr) {
 800b12a:	3130      	adds	r1, #48	; 0x30
		    ipv6->unicast[i].address.family != AF_INET6 ||
 800b12c:	428d      	cmp	r5, r1
 800b12e:	d09e      	beq.n	800b06e <net_if_start_dad+0x42>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
 800b130:	4620      	mov	r0, r4
 800b132:	f7ff fba7 	bl	800a884 <net_if_ipv6_start_dad>
 800b136:	e79a      	b.n	800b06e <net_if_start_dad+0x42>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
 800b138:	6913      	ldr	r3, [r2, #16]
 800b13a:	7899      	ldrb	r1, [r3, #2]
 800b13c:	8818      	ldrh	r0, [r3, #0]
 800b13e:	f88d 1012 	strb.w	r1, [sp, #18]
		addr->s6_addr[11] = 0xff;
 800b142:	21ff      	movs	r1, #255	; 0xff
 800b144:	f88d 1013 	strb.w	r1, [sp, #19]
		addr->s6_addr[12] = 0xfe;
 800b148:	21fe      	movs	r1, #254	; 0xfe
 800b14a:	f88d 1014 	strb.w	r1, [sp, #20]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
 800b14e:	f8ad 0010 	strh.w	r0, [sp, #16]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
 800b152:	f833 1f03 	ldrh.w	r1, [r3, #3]!
 800b156:	f8ad 1015 	strh.w	r1, [sp, #21]
 800b15a:	789b      	ldrb	r3, [r3, #2]
 800b15c:	f88d 3017 	strb.w	r3, [sp, #23]
		if (lladdr->type == NET_LINK_BLUETOOTH) {
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
 800b160:	7d53      	ldrb	r3, [r2, #21]
 800b162:	2b03      	cmp	r3, #3
 800b164:	d1a9      	bne.n	800b0ba <net_if_start_dad+0x8e>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
		addr->s6_addr[8] ^= 0x02;
 800b166:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800b16a:	f083 0302 	eor.w	r3, r3, #2
 800b16e:	f88d 3010 	strb.w	r3, [sp, #16]
		break;
 800b172:	e7a2      	b.n	800b0ba <net_if_start_dad+0x8e>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
 800b174:	6912      	ldr	r2, [r2, #16]
 800b176:	6810      	ldr	r0, [r2, #0]
 800b178:	6851      	ldr	r1, [r2, #4]
 800b17a:	ab04      	add	r3, sp, #16
 800b17c:	c303      	stmia	r3!, {r0, r1}
 800b17e:	e7f2      	b.n	800b166 <net_if_start_dad+0x13a>
 800b180:	2000900c 	.word	0x2000900c
 800b184:	08019248 	.word	0x08019248
 800b188:	080192c0 	.word	0x080192c0
 800b18c:	0801b96c 	.word	0x0801b96c
 800b190:	0801b994 	.word	0x0801b994

0800b194 <net_if_ipv6_maddr_add>:
{
 800b194:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b196:	460e      	mov	r6, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
 800b198:	a901      	add	r1, sp, #4
{
 800b19a:	4605      	mov	r5, r0
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
 800b19c:	f7ff fcb0 	bl	800ab00 <net_if_config_ipv6_get>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	db38      	blt.n	800b216 <net_if_ipv6_maddr_add+0x82>
	if (!net_ipv6_is_addr_mcast(addr)) {
 800b1a4:	7833      	ldrb	r3, [r6, #0]
 800b1a6:	2bff      	cmp	r3, #255	; 0xff
 800b1a8:	d135      	bne.n	800b216 <net_if_ipv6_maddr_add+0x82>
		if (ipv6->mcast[i].is_used) {
 800b1aa:	9b01      	ldr	r3, [sp, #4]
 800b1ac:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
 800b1b0:	f010 0001 	ands.w	r0, r0, #1
 800b1b4:	d008      	beq.n	800b1c8 <net_if_ipv6_maddr_add+0x34>
 800b1b6:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800b1ba:	07d1      	lsls	r1, r2, #31
 800b1bc:	d529      	bpl.n	800b212 <net_if_ipv6_maddr_add+0x7e>
 800b1be:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 800b1c2:	07d2      	lsls	r2, r2, #31
 800b1c4:	d427      	bmi.n	800b216 <net_if_ipv6_maddr_add+0x82>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 800b1c6:	2002      	movs	r0, #2
		ipv6->mcast[i].is_used = true;
 800b1c8:	2418      	movs	r4, #24
 800b1ca:	4344      	muls	r4, r0
 800b1cc:	1919      	adds	r1, r3, r4
 800b1ce:	f106 0010 	add.w	r0, r6, #16
 800b1d2:	f891 2074 	ldrb.w	r2, [r1, #116]	; 0x74
 800b1d6:	f042 0201 	orr.w	r2, r2, #1
 800b1da:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
		ipv6->mcast[i].address.family = AF_INET6;
 800b1de:	2202      	movs	r2, #2
 800b1e0:	f8a1 2060 	strh.w	r2, [r1, #96]	; 0x60
		memcpy(&ipv6->mcast[i].address.in6_addr, addr, 16);
 800b1e4:	f104 0264 	add.w	r2, r4, #100	; 0x64
 800b1e8:	4631      	mov	r1, r6
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1f0:	f843 6b04 	str.w	r6, [r3], #4
 800b1f4:	4281      	cmp	r1, r0
 800b1f6:	d1f9      	bne.n	800b1ec <net_if_ipv6_maddr_add+0x58>
		net_mgmt_event_notify_with_info(
 800b1f8:	9901      	ldr	r1, [sp, #4]
 800b1fa:	4808      	ldr	r0, [pc, #32]	; (800b21c <net_if_ipv6_maddr_add+0x88>)
 800b1fc:	2310      	movs	r3, #16
 800b1fe:	440a      	add	r2, r1
 800b200:	4629      	mov	r1, r5
 800b202:	f001 f86b 	bl	800c2dc <net_mgmt_event_notify_with_info>
		return &ipv6->mcast[i];
 800b206:	9b01      	ldr	r3, [sp, #4]
 800b208:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800b20c:	4418      	add	r0, r3
}
 800b20e:	b002      	add	sp, #8
 800b210:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 800b212:	2001      	movs	r0, #1
 800b214:	e7d8      	b.n	800b1c8 <net_if_ipv6_maddr_add+0x34>
		return NULL;
 800b216:	2000      	movs	r0, #0
 800b218:	e7f9      	b.n	800b20e <net_if_ipv6_maddr_add+0x7a>
 800b21a:	bf00      	nop
 800b21c:	e0600003 	.word	0xe0600003

0800b220 <net_if_ipv6_maddr_rm>:
{
 800b220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 800b224:	6846      	ldr	r6, [r0, #4]
{
 800b226:	4681      	mov	r9, r0
 800b228:	468a      	mov	sl, r1
	if (!ipv6) {
 800b22a:	b32e      	cbz	r6, 800b278 <net_if_ipv6_maddr_rm+0x58>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 800b22c:	2500      	movs	r5, #0
		if (!ipv6->mcast[i].is_used) {
 800b22e:	f04f 0b18 	mov.w	fp, #24
 800b232:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800b236:	fb0b f405 	mul.w	r4, fp, r5
 800b23a:	1937      	adds	r7, r6, r4
 800b23c:	3770      	adds	r7, #112	; 0x70
 800b23e:	793a      	ldrb	r2, [r7, #4]
 800b240:	07d2      	lsls	r2, r2, #31
 800b242:	d516      	bpl.n	800b272 <net_if_ipv6_maddr_rm+0x52>
		if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
 800b244:	441c      	add	r4, r3
 800b246:	4651      	mov	r1, sl
 800b248:	4620      	mov	r0, r4
 800b24a:	9301      	str	r3, [sp, #4]
 800b24c:	f00a fd92 	bl	8015d74 <net_ipv6_addr_cmp>
 800b250:	9b01      	ldr	r3, [sp, #4]
 800b252:	4680      	mov	r8, r0
 800b254:	b168      	cbz	r0, 800b272 <net_if_ipv6_maddr_rm+0x52>
		ipv6->mcast[i].is_used = false;
 800b256:	793b      	ldrb	r3, [r7, #4]
		net_mgmt_event_notify_with_info(
 800b258:	4809      	ldr	r0, [pc, #36]	; (800b280 <net_if_ipv6_maddr_rm+0x60>)
		ipv6->mcast[i].is_used = false;
 800b25a:	f36f 0300 	bfc	r3, #0, #1
 800b25e:	713b      	strb	r3, [r7, #4]
		net_mgmt_event_notify_with_info(
 800b260:	4622      	mov	r2, r4
 800b262:	2310      	movs	r3, #16
 800b264:	4649      	mov	r1, r9
 800b266:	f001 f839 	bl	800c2dc <net_mgmt_event_notify_with_info>
}
 800b26a:	4640      	mov	r0, r8
 800b26c:	b003      	add	sp, #12
 800b26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 800b272:	3501      	adds	r5, #1
 800b274:	2d03      	cmp	r5, #3
 800b276:	d1de      	bne.n	800b236 <net_if_ipv6_maddr_rm+0x16>
		return false;
 800b278:	f04f 0800 	mov.w	r8, #0
 800b27c:	e7f5      	b.n	800b26a <net_if_ipv6_maddr_rm+0x4a>
 800b27e:	bf00      	nop
 800b280:	e0600004 	.word	0xe0600004

0800b284 <net_if_ipv6_addr_rm>:
{
 800b284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 800b288:	6844      	ldr	r4, [r0, #4]
{
 800b28a:	b085      	sub	sp, #20
 800b28c:	4680      	mov	r8, r0
 800b28e:	460f      	mov	r7, r1
	if (!ipv6) {
 800b290:	2c00      	cmp	r4, #0
 800b292:	d05f      	beq.n	800b354 <net_if_ipv6_addr_rm+0xd0>
		if (!ipv6->unicast[i].is_used) {
 800b294:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800b298:	0798      	lsls	r0, r3, #30
 800b29a:	d407      	bmi.n	800b2ac <net_if_ipv6_addr_rm+0x28>
 800b29c:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 800b2a0:	079a      	lsls	r2, r3, #30
 800b2a2:	d40b      	bmi.n	800b2bc <net_if_ipv6_addr_rm+0x38>
	return false;
 800b2a4:	2000      	movs	r0, #0
}
 800b2a6:	b005      	add	sp, #20
 800b2a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
 800b2ac:	1d26      	adds	r6, r4, #4
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	f00a fd60 	bl	8015d74 <net_ipv6_addr_cmp>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d0f1      	beq.n	800b29c <net_if_ipv6_addr_rm+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800b2b8:	2500      	movs	r5, #0
 800b2ba:	e008      	b.n	800b2ce <net_if_ipv6_addr_rm+0x4a>
		if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
 800b2bc:	f104 0634 	add.w	r6, r4, #52	; 0x34
 800b2c0:	4639      	mov	r1, r7
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f00a fd56 	bl	8015d74 <net_ipv6_addr_cmp>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d0eb      	beq.n	800b2a4 <net_if_ipv6_addr_rm+0x20>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800b2cc:	2501      	movs	r5, #1
		if (!ipv6->unicast[i].is_infinite) {
 800b2ce:	2130      	movs	r1, #48	; 0x30
 800b2d0:	4369      	muls	r1, r5
 800b2d2:	1863      	adds	r3, r4, r1
 800b2d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b2d8:	07db      	lsls	r3, r3, #31
 800b2da:	d40c      	bmi.n	800b2f6 <net_if_ipv6_addr_rm+0x72>
			sys_slist_find_and_remove(
 800b2dc:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800b360 <net_if_ipv6_addr_rm+0xdc>
 800b2e0:	3114      	adds	r1, #20
 800b2e2:	4421      	add	r1, r4
 800b2e4:	4648      	mov	r0, r9
 800b2e6:	f00a fce5 	bl	8015cb4 <sys_slist_find_and_remove>
			if (sys_slist_is_empty(
 800b2ea:	f8d9 3000 	ldr.w	r3, [r9]
 800b2ee:	b913      	cbnz	r3, 800b2f6 <net_if_ipv6_addr_rm+0x72>
				k_delayed_work_cancel(&address_lifetime_timer);
 800b2f0:	4819      	ldr	r0, [pc, #100]	; (800b358 <net_if_ipv6_addr_rm+0xd4>)
 800b2f2:	f00d fbf9 	bl	8018ae8 <k_delayed_work_cancel>
		ipv6->unicast[i].is_used = false;
 800b2f6:	2030      	movs	r0, #48	; 0x30
 800b2f8:	fb00 4405 	mla	r4, r0, r5, r4
 800b2fc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800b300:	f36f 0341 	bfc	r3, #1, #1
 800b304:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	dst->s6_addr[0]   = 0xFF;
 800b308:	f240 23ff 	movw	r3, #767	; 0x2ff
 800b30c:	9300      	str	r3, [sp, #0]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
 800b30e:	2300      	movs	r3, #0
 800b310:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
 800b314:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
 800b318:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0U;
 800b31c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b320:	f8ad 300a 	strh.w	r3, [sp, #10]
	dst->s6_addr[12]  = 0xFF;
 800b324:	23ff      	movs	r3, #255	; 0xff
 800b326:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
 800b32a:	7b7b      	ldrb	r3, [r7, #13]
 800b32c:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
 800b330:	7bfa      	ldrb	r2, [r7, #15]
 800b332:	7bbb      	ldrb	r3, [r7, #14]
 800b334:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b338:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
 800b33c:	4669      	mov	r1, sp
 800b33e:	4640      	mov	r0, r8
 800b340:	f7ff ff6e 	bl	800b220 <net_if_ipv6_maddr_rm>
		net_mgmt_event_notify_with_info(
 800b344:	4805      	ldr	r0, [pc, #20]	; (800b35c <net_if_ipv6_addr_rm+0xd8>)
 800b346:	2310      	movs	r3, #16
 800b348:	4632      	mov	r2, r6
 800b34a:	4641      	mov	r1, r8
 800b34c:	f000 ffc6 	bl	800c2dc <net_mgmt_event_notify_with_info>
		return true;
 800b350:	2001      	movs	r0, #1
 800b352:	e7a8      	b.n	800b2a6 <net_if_ipv6_addr_rm+0x22>
		return false;
 800b354:	4620      	mov	r0, r4
 800b356:	e7a6      	b.n	800b2a6 <net_if_ipv6_addr_rm+0x22>
 800b358:	2000058c 	.word	0x2000058c
 800b35c:	e0600002 	.word	0xe0600002
 800b360:	20000564 	.word	0x20000564

0800b364 <net_if_ipv6_dad_failed>:
{
 800b364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b366:	460c      	mov	r4, r1
 800b368:	9001      	str	r0, [sp, #4]
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
 800b36a:	a901      	add	r1, sp, #4
 800b36c:	4620      	mov	r0, r4
 800b36e:	f7ff fc63 	bl	800ac38 <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
 800b372:	4605      	mov	r5, r0
 800b374:	b9d0      	cbnz	r0, 800b3ac <net_if_ipv6_dad_failed+0x48>
		NET_ERR("Cannot find %s address in interface %p",
 800b376:	4b15      	ldr	r3, [pc, #84]	; (800b3cc <net_if_ipv6_dad_failed+0x68>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	075b      	lsls	r3, r3, #29
 800b37c:	d014      	beq.n	800b3a8 <net_if_ipv6_dad_failed+0x44>
 800b37e:	2301      	movs	r3, #1
 800b380:	f363 0507 	bfi	r5, r3, #0, #8
 800b384:	4a12      	ldr	r2, [pc, #72]	; (800b3d0 <net_if_ipv6_dad_failed+0x6c>)
 800b386:	4b13      	ldr	r3, [pc, #76]	; (800b3d4 <net_if_ipv6_dad_failed+0x70>)
 800b388:	1ad2      	subs	r2, r2, r3
 800b38a:	08d2      	lsrs	r2, r2, #3
 800b38c:	4621      	mov	r1, r4
 800b38e:	2002      	movs	r0, #2
 800b390:	f362 158f 	bfi	r5, r2, #6, #10
 800b394:	f000 fe9e 	bl	800c0d4 <net_sprint_addr>
 800b398:	f7fa fd04 	bl	8005da4 <log_strdup>
 800b39c:	462b      	mov	r3, r5
 800b39e:	4601      	mov	r1, r0
 800b3a0:	9a01      	ldr	r2, [sp, #4]
 800b3a2:	480d      	ldr	r0, [pc, #52]	; (800b3d8 <net_if_ipv6_dad_failed+0x74>)
 800b3a4:	f008 fc4e 	bl	8013c44 <log_2>
}
 800b3a8:	b003      	add	sp, #12
 800b3aa:	bd30      	pop	{r4, r5, pc}
	sys_slist_find_and_remove(&active_dad_timers, &ifaddr->dad_node);
 800b3ac:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800b3b0:	480a      	ldr	r0, [pc, #40]	; (800b3dc <net_if_ipv6_dad_failed+0x78>)
 800b3b2:	f00a fc7f 	bl	8015cb4 <sys_slist_find_and_remove>
	net_mgmt_event_notify_with_info(NET_EVENT_IPV6_DAD_FAILED, iface,
 800b3b6:	9901      	ldr	r1, [sp, #4]
 800b3b8:	4809      	ldr	r0, [pc, #36]	; (800b3e0 <net_if_ipv6_dad_failed+0x7c>)
 800b3ba:	2310      	movs	r3, #16
 800b3bc:	1d2a      	adds	r2, r5, #4
 800b3be:	f000 ff8d 	bl	800c2dc <net_mgmt_event_notify_with_info>
	net_if_ipv6_addr_rm(iface, addr);
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	9801      	ldr	r0, [sp, #4]
 800b3c6:	f7ff ff5d 	bl	800b284 <net_if_ipv6_addr_rm>
 800b3ca:	e7ed      	b.n	800b3a8 <net_if_ipv6_dad_failed+0x44>
 800b3cc:	2000900c 	.word	0x2000900c
 800b3d0:	080192c0 	.word	0x080192c0
 800b3d4:	08019248 	.word	0x08019248
 800b3d8:	0801b945 	.word	0x0801b945
 800b3dc:	2000056c 	.word	0x2000056c
 800b3e0:	e060000e 	.word	0xe060000e

0800b3e4 <prefix_lifetime_timeout>:
{
 800b3e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t current_time = k_uptime_get_32();
 800b3e8:	f00a fccc 	bl	8015d84 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
 800b3ec:	4b30      	ldr	r3, [pc, #192]	; (800b4b0 <prefix_lifetime_timeout+0xcc>)
 800b3ee:	681c      	ldr	r4, [r3, #0]
	u32_t current_time = k_uptime_get_32();
 800b3f0:	4607      	mov	r7, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
 800b3f2:	2c00      	cmp	r4, #0
 800b3f4:	d040      	beq.n	800b478 <prefix_lifetime_timeout+0x94>
 800b3f6:	6825      	ldr	r5, [r4, #0]
	if (ifprefix->lifetime.wrap_counter > 0) {
 800b3f8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800b4b8 <prefix_lifetime_timeout+0xd4>
 800b3fc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b400:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800b404:	f04f 0900 	mov.w	r9, #0
			  ifprefix->lifetime.wrap_counter,
 800b408:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
	if (counter > 0) {
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d138      	bne.n	800b482 <prefix_lifetime_timeout+0x9e>
	if ((s32_t)((start + (u32_t)timeout) - current_time) > 0) {
 800b410:	6862      	ldr	r2, [r4, #4]
 800b412:	1bd2      	subs	r2, r2, r7
 800b414:	440a      	add	r2, r1
 800b416:	2a00      	cmp	r2, #0
 800b418:	dc47      	bgt.n	800b4aa <prefix_lifetime_timeout+0xc6>
	ifprefix->is_used = false;
 800b41a:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
 800b41e:	6a20      	ldr	r0, [r4, #32]
	ifprefix->is_used = false;
 800b420:	f363 0241 	bfi	r2, r3, #1, #1
 800b424:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
 800b428:	a901      	add	r1, sp, #4
 800b42a:	f7ff fb69 	bl	800ab00 <net_if_config_ipv6_get>
 800b42e:	2800      	cmp	r0, #0
 800b430:	db0e      	blt.n	800b450 <prefix_lifetime_timeout+0x6c>
	remove_prefix_addresses(ifprefix->iface, ipv6, &ifprefix->prefix,
 800b432:	f104 0610 	add.w	r6, r4, #16
 800b436:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800b43a:	9901      	ldr	r1, [sp, #4]
 800b43c:	6a20      	ldr	r0, [r4, #32]
 800b43e:	4632      	mov	r2, r6
 800b440:	f00a fcda 	bl	8015df8 <remove_prefix_addresses>
	net_mgmt_event_notify_with_info(
 800b444:	2310      	movs	r3, #16
 800b446:	4632      	mov	r2, r6
 800b448:	6a21      	ldr	r1, [r4, #32]
 800b44a:	481a      	ldr	r0, [pc, #104]	; (800b4b4 <prefix_lifetime_timeout+0xd0>)
 800b44c:	f000 ff46 	bl	800c2dc <net_mgmt_event_notify_with_info>
		if (current == next) {
 800b450:	42ac      	cmp	r4, r5
 800b452:	d003      	beq.n	800b45c <prefix_lifetime_timeout+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
 800b454:	b33d      	cbz	r5, 800b4a6 <prefix_lifetime_timeout+0xc2>
 800b456:	682b      	ldr	r3, [r5, #0]
	return node->next;
 800b458:	462c      	mov	r4, r5
 800b45a:	b985      	cbnz	r5, 800b47e <prefix_lifetime_timeout+0x9a>
	if (found) {
 800b45c:	f1b9 0f00 	cmp.w	r9, #0
 800b460:	d00a      	beq.n	800b478 <prefix_lifetime_timeout+0x94>
		k_delayed_work_submit(&prefix_lifetime_timer, timeout_update);
 800b462:	4815      	ldr	r0, [pc, #84]	; (800b4b8 <prefix_lifetime_timeout+0xd4>)
 800b464:	2100      	movs	r1, #0
 800b466:	4559      	cmp	r1, fp
 800b468:	bf08      	it	eq
 800b46a:	4550      	cmpeq	r0, sl
 800b46c:	bf38      	it	cc
 800b46e:	4682      	movcc	sl, r0
 800b470:	4651      	mov	r1, sl
 800b472:	4812      	ldr	r0, [pc, #72]	; (800b4bc <prefix_lifetime_timeout+0xd8>)
 800b474:	f7ff f990 	bl	800a798 <k_delayed_work_submit>
}
 800b478:	b003      	add	sp, #12
 800b47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47e:	461d      	mov	r5, r3
 800b480:	e7c2      	b.n	800b408 <prefix_lifetime_timeout+0x24>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
 800b482:	4547      	cmp	r7, r8
 800b484:	d101      	bne.n	800b48a <prefix_lifetime_timeout+0xa6>
		ifprefix->lifetime.wrap_counter--;
 800b486:	3b01      	subs	r3, #1
 800b488:	60e3      	str	r3, [r4, #12]
	if (ifprefix->lifetime.wrap_counter > 0) {
 800b48a:	68e3      	ldr	r3, [r4, #12]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	bfc8      	it	gt
 800b490:	4641      	movgt	r1, r8
			if (next_timeout < timeout_update) {
 800b492:	2300      	movs	r3, #0
 800b494:	455b      	cmp	r3, fp
 800b496:	bf08      	it	eq
 800b498:	4551      	cmpeq	r1, sl
 800b49a:	bf3e      	ittt	cc
 800b49c:	468a      	movcc	sl, r1
 800b49e:	469b      	movcc	fp, r3
				found = true;
 800b4a0:	f04f 0901 	movcc.w	r9, #1
 800b4a4:	e7d4      	b.n	800b450 <prefix_lifetime_timeout+0x6c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
 800b4a6:	462b      	mov	r3, r5
 800b4a8:	e7d6      	b.n	800b458 <prefix_lifetime_timeout+0x74>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
 800b4aa:	4547      	cmp	r7, r8
 800b4ac:	d1f1      	bne.n	800b492 <prefix_lifetime_timeout+0xae>
 800b4ae:	e7ea      	b.n	800b486 <prefix_lifetime_timeout+0xa2>
 800b4b0:	20000574 	.word	0x20000574
 800b4b4:	e0600006 	.word	0xe0600006
 800b4b8:	7fffff9b 	.word	0x7fffff9b
 800b4bc:	20000804 	.word	0x20000804

0800b4c0 <net_if_ipv6_maddr_lookup>:
{
 800b4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800b4c4:	4d1b      	ldr	r5, [pc, #108]	; (800b534 <net_if_ipv6_maddr_lookup+0x74>)
 800b4c6:	4b1c      	ldr	r3, [pc, #112]	; (800b538 <net_if_ipv6_maddr_lookup+0x78>)
{
 800b4c8:	4683      	mov	fp, r0
 800b4ca:	460e      	mov	r6, r1
			if (!ipv6->mcast[i].is_used ||
 800b4cc:	f04f 0a18 	mov.w	sl, #24
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800b4d0:	429d      	cmp	r5, r3
 800b4d2:	d101      	bne.n	800b4d8 <net_if_ipv6_maddr_lookup+0x18>
	return NULL;
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	e024      	b.n	800b522 <net_if_ipv6_maddr_lookup+0x62>
		if (ret && *ret && iface != *ret) {
 800b4d8:	b12e      	cbz	r6, 800b4e6 <net_if_ipv6_maddr_lookup+0x26>
 800b4da:	6832      	ldr	r2, [r6, #0]
 800b4dc:	b11a      	cbz	r2, 800b4e6 <net_if_ipv6_maddr_lookup+0x26>
 800b4de:	42aa      	cmp	r2, r5
 800b4e0:	d001      	beq.n	800b4e6 <net_if_ipv6_maddr_lookup+0x26>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800b4e2:	3520      	adds	r5, #32
 800b4e4:	e7f4      	b.n	800b4d0 <net_if_ipv6_maddr_lookup+0x10>
		struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 800b4e6:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
 800b4e8:	2c00      	cmp	r4, #0
 800b4ea:	d0fa      	beq.n	800b4e2 <net_if_ipv6_maddr_lookup+0x22>
 800b4ec:	46a0      	mov	r8, r4
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 800b4ee:	2700      	movs	r7, #0
			if (!ipv6->mcast[i].is_used ||
 800b4f0:	fb0a f907 	mul.w	r9, sl, r7
 800b4f4:	eb04 0209 	add.w	r2, r4, r9
 800b4f8:	f892 2074 	ldrb.w	r2, [r2, #116]	; 0x74
 800b4fc:	07d2      	lsls	r2, r2, #31
 800b4fe:	d512      	bpl.n	800b526 <net_if_ipv6_maddr_lookup+0x66>
 800b500:	f8b8 2060 	ldrh.w	r2, [r8, #96]	; 0x60
 800b504:	2a02      	cmp	r2, #2
 800b506:	d10e      	bne.n	800b526 <net_if_ipv6_maddr_lookup+0x66>
			if (net_ipv6_is_prefix(
 800b508:	2280      	movs	r2, #128	; 0x80
 800b50a:	f108 0164 	add.w	r1, r8, #100	; 0x64
 800b50e:	4658      	mov	r0, fp
 800b510:	f00a fc0b 	bl	8015d2a <net_ipv6_is_prefix>
 800b514:	4b08      	ldr	r3, [pc, #32]	; (800b538 <net_if_ipv6_maddr_lookup+0x78>)
 800b516:	b130      	cbz	r0, 800b526 <net_if_ipv6_maddr_lookup+0x66>
				if (ret) {
 800b518:	b106      	cbz	r6, 800b51c <net_if_ipv6_maddr_lookup+0x5c>
					*ret = iface;
 800b51a:	6035      	str	r5, [r6, #0]
				return &ipv6->mcast[i];
 800b51c:	f109 0060 	add.w	r0, r9, #96	; 0x60
 800b520:	4420      	add	r0, r4
}
 800b522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 800b526:	3701      	adds	r7, #1
 800b528:	2f03      	cmp	r7, #3
 800b52a:	f108 0818 	add.w	r8, r8, #24
 800b52e:	d1df      	bne.n	800b4f0 <net_if_ipv6_maddr_lookup+0x30>
 800b530:	e7d7      	b.n	800b4e2 <net_if_ipv6_maddr_lookup+0x22>
 800b532:	bf00      	nop
 800b534:	200091c0 	.word	0x200091c0
 800b538:	200091e0 	.word	0x200091e0

0800b53c <net_if_mcast_monitor>:
{
 800b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
 800b53e:	4b0a      	ldr	r3, [pc, #40]	; (800b568 <net_if_mcast_monitor+0x2c>)
 800b540:	681b      	ldr	r3, [r3, #0]
{
 800b542:	4605      	mov	r5, r0
 800b544:	460e      	mov	r6, r1
 800b546:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
 800b548:	b163      	cbz	r3, 800b564 <net_if_mcast_monitor+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800b54a:	681c      	ldr	r4, [r3, #0]
		if (iface == mon->iface) {
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	42aa      	cmp	r2, r5
 800b550:	d104      	bne.n	800b55c <net_if_mcast_monitor+0x20>
			mon->cb(iface, addr, is_joined);
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	463a      	mov	r2, r7
 800b556:	4631      	mov	r1, r6
 800b558:	4628      	mov	r0, r5
 800b55a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
 800b55c:	b114      	cbz	r4, 800b564 <net_if_mcast_monitor+0x28>
 800b55e:	4623      	mov	r3, r4
 800b560:	6824      	ldr	r4, [r4, #0]
 800b562:	e7f3      	b.n	800b54c <net_if_mcast_monitor+0x10>
}
 800b564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b566:	bf00      	nop
 800b568:	200007fc 	.word	0x200007fc

0800b56c <net_if_ipv6_prefix_add>:
{
 800b56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b570:	b086      	sub	sp, #24
 800b572:	460d      	mov	r5, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
 800b574:	a901      	add	r1, sp, #4
{
 800b576:	4606      	mov	r6, r0
 800b578:	4690      	mov	r8, r2
 800b57a:	461f      	mov	r7, r3
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
 800b57c:	f7ff fac0 	bl	800ab00 <net_if_config_ipv6_get>
 800b580:	2800      	cmp	r0, #0
 800b582:	da03      	bge.n	800b58c <net_if_ipv6_prefix_add+0x20>
		return NULL;
 800b584:	2000      	movs	r0, #0
}
 800b586:	b006      	add	sp, #24
 800b588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ifprefix = ipv6_prefix_find(iface, prefix, len);
 800b58c:	6874      	ldr	r4, [r6, #4]
	if (!ipv6) {
 800b58e:	2c00      	cmp	r4, #0
 800b590:	d151      	bne.n	800b636 <net_if_ipv6_prefix_add+0xca>
	if (!ipv6) {
 800b592:	f8dd c004 	ldr.w	ip, [sp, #4]
 800b596:	f1bc 0f00 	cmp.w	ip, #0
 800b59a:	d0f3      	beq.n	800b584 <net_if_ipv6_prefix_add+0x18>
		if (ipv6->prefix[i].is_used) {
 800b59c:	f89c 30cd 	ldrb.w	r3, [ip, #205]	; 0xcd
 800b5a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b5a4:	b123      	cbz	r3, 800b5b0 <net_if_ipv6_prefix_add+0x44>
 800b5a6:	f89c 30f5 	ldrb.w	r3, [ip, #245]	; 0xf5
 800b5aa:	0798      	lsls	r0, r3, #30
 800b5ac:	d4ea      	bmi.n	800b584 <net_if_ipv6_prefix_add+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 800b5ae:	2301      	movs	r3, #1
		net_if_ipv6_prefix_init(iface, &ipv6->prefix[i], prefix,
 800b5b0:	2228      	movs	r2, #40	; 0x28
 800b5b2:	435a      	muls	r2, r3
	ifprefix->is_used = true;
 800b5b4:	eb0c 0102 	add.w	r1, ip, r2
	net_ipaddr_copy(&ifprefix->prefix, addr);
 800b5b8:	f10d 0e08 	add.w	lr, sp, #8
	ifprefix->is_used = true;
 800b5bc:	f891 00cd 	ldrb.w	r0, [r1, #205]	; 0xcd
	ifprefix->len = len;
 800b5c0:	f881 80cc 	strb.w	r8, [r1, #204]	; 0xcc
	ifprefix->is_used = true;
 800b5c4:	f040 0002 	orr.w	r0, r0, #2
 800b5c8:	f102 04a8 	add.w	r4, r2, #168	; 0xa8
 800b5cc:	f881 00cd 	strb.w	r0, [r1, #205]	; 0xcd
	ifprefix->iface = iface;
 800b5d0:	f8c1 60c8 	str.w	r6, [r1, #200]	; 0xc8
	net_ipaddr_copy(&ifprefix->prefix, addr);
 800b5d4:	f105 0a10 	add.w	sl, r5, #16
 800b5d8:	46f0      	mov	r8, lr
 800b5da:	6828      	ldr	r0, [r5, #0]
 800b5dc:	6869      	ldr	r1, [r5, #4]
 800b5de:	46f1      	mov	r9, lr
 800b5e0:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 800b5e4:	3508      	adds	r5, #8
 800b5e6:	4555      	cmp	r5, sl
 800b5e8:	46ce      	mov	lr, r9
 800b5ea:	d1f6      	bne.n	800b5da <net_if_ipv6_prefix_add+0x6e>
 800b5ec:	eb0c 0504 	add.w	r5, ip, r4
 800b5f0:	3510      	adds	r5, #16
 800b5f2:	f10d 0918 	add.w	r9, sp, #24
 800b5f6:	46c6      	mov	lr, r8
 800b5f8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 800b5fc:	45ce      	cmp	lr, r9
 800b5fe:	6028      	str	r0, [r5, #0]
 800b600:	6069      	str	r1, [r5, #4]
 800b602:	46f0      	mov	r8, lr
 800b604:	f105 0508 	add.w	r5, r5, #8
 800b608:	d1f5      	bne.n	800b5f6 <net_if_ipv6_prefix_add+0x8a>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
 800b60a:	2128      	movs	r1, #40	; 0x28
 800b60c:	fb01 c303 	mla	r3, r1, r3, ip
 800b610:	1c79      	adds	r1, r7, #1
 800b612:	424f      	negs	r7, r1
 800b614:	414f      	adcs	r7, r1
 800b616:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
		net_mgmt_event_notify_with_info(
 800b61a:	4818      	ldr	r0, [pc, #96]	; (800b67c <net_if_ipv6_prefix_add+0x110>)
 800b61c:	f367 0100 	bfi	r1, r7, #0, #1
 800b620:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
 800b624:	9901      	ldr	r1, [sp, #4]
			&ipv6->prefix[i].prefix, sizeof(struct in6_addr));
 800b626:	32b8      	adds	r2, #184	; 0xb8
		net_mgmt_event_notify_with_info(
 800b628:	440a      	add	r2, r1
 800b62a:	2310      	movs	r3, #16
 800b62c:	4631      	mov	r1, r6
 800b62e:	f000 fe55 	bl	800c2dc <net_mgmt_event_notify_with_info>
		return &ipv6->prefix[i];
 800b632:	9801      	ldr	r0, [sp, #4]
 800b634:	e01e      	b.n	800b674 <net_if_ipv6_prefix_add+0x108>
		if (!ipv6->unicast[i].is_used) {
 800b636:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800b63a:	079a      	lsls	r2, r3, #30
 800b63c:	d509      	bpl.n	800b652 <net_if_ipv6_prefix_add+0xe6>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
 800b63e:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
 800b642:	4628      	mov	r0, r5
 800b644:	f00a fb96 	bl	8015d74 <net_ipv6_addr_cmp>
 800b648:	b118      	cbz	r0, 800b652 <net_if_ipv6_prefix_add+0xe6>
 800b64a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
 800b64e:	4543      	cmp	r3, r8
 800b650:	d012      	beq.n	800b678 <net_if_ipv6_prefix_add+0x10c>
		if (!ipv6->unicast[i].is_used) {
 800b652:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 800b656:	079b      	lsls	r3, r3, #30
 800b658:	d59b      	bpl.n	800b592 <net_if_ipv6_prefix_add+0x26>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
 800b65a:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 800b65e:	4628      	mov	r0, r5
 800b660:	f00a fb88 	bl	8015d74 <net_ipv6_addr_cmp>
 800b664:	2800      	cmp	r0, #0
 800b666:	d094      	beq.n	800b592 <net_if_ipv6_prefix_add+0x26>
 800b668:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 800b66c:	4543      	cmp	r3, r8
 800b66e:	d190      	bne.n	800b592 <net_if_ipv6_prefix_add+0x26>
 800b670:	2028      	movs	r0, #40	; 0x28
			return &ipv6->prefix[i];
 800b672:	30a8      	adds	r0, #168	; 0xa8
		return &ipv6->prefix[i];
 800b674:	4420      	add	r0, r4
 800b676:	e786      	b.n	800b586 <net_if_ipv6_prefix_add+0x1a>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
 800b678:	2000      	movs	r0, #0
 800b67a:	e7fa      	b.n	800b672 <net_if_ipv6_prefix_add+0x106>
 800b67c:	e0600005 	.word	0xe0600005

0800b680 <net_if_ipv6_addr_onlink>:
{
 800b680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
 800b684:	4d18      	ldr	r5, [pc, #96]	; (800b6e8 <net_if_ipv6_addr_onlink+0x68>)
 800b686:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800b6ec <net_if_ipv6_addr_onlink+0x6c>
{
 800b68a:	4606      	mov	r6, r0
 800b68c:	460f      	mov	r7, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
 800b68e:	4545      	cmp	r5, r8
 800b690:	d101      	bne.n	800b696 <net_if_ipv6_addr_onlink+0x16>
	return false;
 800b692:	2000      	movs	r0, #0
 800b694:	e023      	b.n	800b6de <net_if_ipv6_addr_onlink+0x5e>
		if (iface && *iface && *iface != tmp) {
 800b696:	b11e      	cbz	r6, 800b6a0 <net_if_ipv6_addr_onlink+0x20>
 800b698:	6833      	ldr	r3, [r6, #0]
 800b69a:	b10b      	cbz	r3, 800b6a0 <net_if_ipv6_addr_onlink+0x20>
 800b69c:	42ab      	cmp	r3, r5
 800b69e:	d111      	bne.n	800b6c4 <net_if_ipv6_addr_onlink+0x44>
		struct net_if_ipv6 *ipv6 = tmp->config.ip.ipv6;
 800b6a0:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
 800b6a2:	b17c      	cbz	r4, 800b6c4 <net_if_ipv6_addr_onlink+0x44>
			if (ipv6->prefix[i].is_used &&
 800b6a4:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
 800b6a8:	079a      	lsls	r2, r3, #30
 800b6aa:	d40d      	bmi.n	800b6c8 <net_if_ipv6_addr_onlink+0x48>
 800b6ac:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
 800b6b0:	079b      	lsls	r3, r3, #30
 800b6b2:	d507      	bpl.n	800b6c4 <net_if_ipv6_addr_onlink+0x44>
			    net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
 800b6b4:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
 800b6b8:	4639      	mov	r1, r7
 800b6ba:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 800b6be:	f00a fb34 	bl	8015d2a <net_ipv6_is_prefix>
			if (ipv6->prefix[i].is_used &&
 800b6c2:	b950      	cbnz	r0, 800b6da <net_if_ipv6_addr_onlink+0x5a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
 800b6c4:	3520      	adds	r5, #32
 800b6c6:	e7e2      	b.n	800b68e <net_if_ipv6_addr_onlink+0xe>
			    net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
 800b6c8:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
 800b6cc:	4639      	mov	r1, r7
 800b6ce:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 800b6d2:	f00a fb2a 	bl	8015d2a <net_ipv6_is_prefix>
			if (ipv6->prefix[i].is_used &&
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	d0e8      	beq.n	800b6ac <net_if_ipv6_addr_onlink+0x2c>
				if (iface) {
 800b6da:	b916      	cbnz	r6, 800b6e2 <net_if_ipv6_addr_onlink+0x62>
				return true;
 800b6dc:	2001      	movs	r0, #1
}
 800b6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					*iface = tmp;
 800b6e2:	6035      	str	r5, [r6, #0]
 800b6e4:	e7fa      	b.n	800b6dc <net_if_ipv6_addr_onlink+0x5c>
 800b6e6:	bf00      	nop
 800b6e8:	200091c0 	.word	0x200091c0
 800b6ec:	200091e0 	.word	0x200091e0

0800b6f0 <net_if_ipv6_prefix_set_timer>:
{
 800b6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (lifetime == 0xffffffff) {
 800b6f2:	1c4b      	adds	r3, r1, #1
{
 800b6f4:	4604      	mov	r4, r0
	if (lifetime == 0xffffffff) {
 800b6f6:	d033      	beq.n	800b760 <net_if_ipv6_prefix_set_timer+0x70>
	u64_t expire_timeout = K_SECONDS((u64_t)lifetime);
 800b6f8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800b6fc:	fba1 6706 	umull	r6, r7, r1, r6
	sys_slist_append(&active_prefix_lifetime_timers,
 800b700:	4601      	mov	r1, r0
 800b702:	4818      	ldr	r0, [pc, #96]	; (800b764 <net_if_ipv6_prefix_set_timer+0x74>)
 800b704:	f00a facc 	bl	8015ca0 <sys_slist_append>
	ifprefix->lifetime.timer_start = k_uptime_get_32();
 800b708:	f00a fb3c 	bl	8015d84 <k_uptime_get_32>
	ifprefix->lifetime.wrap_counter = expire_timeout /
 800b70c:	4a16      	ldr	r2, [pc, #88]	; (800b768 <net_if_ipv6_prefix_set_timer+0x78>)
	ifprefix->lifetime.timer_start = k_uptime_get_32();
 800b70e:	6060      	str	r0, [r4, #4]
	ifprefix->lifetime.wrap_counter = expire_timeout /
 800b710:	2300      	movs	r3, #0
 800b712:	4630      	mov	r0, r6
 800b714:	4639      	mov	r1, r7
 800b716:	f7f6 fab5 	bl	8001c84 <__aeabi_uldivmod>
	ifprefix->lifetime.timer_timeout = expire_timeout -
 800b71a:	4913      	ldr	r1, [pc, #76]	; (800b768 <net_if_ipv6_prefix_set_timer+0x78>)
	ifprefix->lifetime.wrap_counter = expire_timeout /
 800b71c:	60e0      	str	r0, [r4, #12]
	ifprefix->lifetime.timer_timeout = expire_timeout -
 800b71e:	fb01 6010 	mls	r0, r1, r0, r6
 800b722:	60a0      	str	r0, [r4, #8]
 800b724:	4811      	ldr	r0, [pc, #68]	; (800b76c <net_if_ipv6_prefix_set_timer+0x7c>)
 800b726:	f007 fb1d 	bl	8012d64 <z_timeout_remaining>
 800b72a:	220a      	movs	r2, #10
 800b72c:	2300      	movs	r3, #0
 800b72e:	17c1      	asrs	r1, r0, #31
 800b730:	f7f6 faa8 	bl	8001c84 <__aeabi_uldivmod>
	if (!remaining || (ifprefix->lifetime.wrap_counter == 0 &&
 800b734:	4605      	mov	r5, r0
 800b736:	b120      	cbz	r0, 800b742 <net_if_ipv6_prefix_set_timer+0x52>
 800b738:	68e3      	ldr	r3, [r4, #12]
 800b73a:	b98b      	cbnz	r3, 800b760 <net_if_ipv6_prefix_set_timer+0x70>
 800b73c:	68a3      	ldr	r3, [r4, #8]
 800b73e:	4283      	cmp	r3, r0
 800b740:	da0e      	bge.n	800b760 <net_if_ipv6_prefix_set_timer+0x70>
		k_delayed_work_cancel(&prefix_lifetime_timer);
 800b742:	480b      	ldr	r0, [pc, #44]	; (800b770 <net_if_ipv6_prefix_set_timer+0x80>)
 800b744:	f00d f9d0 	bl	8018ae8 <k_delayed_work_cancel>
		if (ifprefix->lifetime.wrap_counter > 0 && remaining == 0) {
 800b748:	68e3      	ldr	r3, [r4, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	dd06      	ble.n	800b75c <net_if_ipv6_prefix_set_timer+0x6c>
 800b74e:	b92d      	cbnz	r5, 800b75c <net_if_ipv6_prefix_set_timer+0x6c>
			k_delayed_work_submit(&prefix_lifetime_timer,
 800b750:	4905      	ldr	r1, [pc, #20]	; (800b768 <net_if_ipv6_prefix_set_timer+0x78>)
			k_delayed_work_submit(&prefix_lifetime_timer,
 800b752:	4807      	ldr	r0, [pc, #28]	; (800b770 <net_if_ipv6_prefix_set_timer+0x80>)
}
 800b754:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_delayed_work_submit(&prefix_lifetime_timer,
 800b758:	f7ff b81e 	b.w	800a798 <k_delayed_work_submit>
 800b75c:	68a1      	ldr	r1, [r4, #8]
 800b75e:	e7f8      	b.n	800b752 <net_if_ipv6_prefix_set_timer+0x62>
}
 800b760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b762:	bf00      	nop
 800b764:	20000574 	.word	0x20000574
 800b768:	7fffff9b 	.word	0x7fffff9b
 800b76c:	20000810 	.word	0x20000810
 800b770:	20000804 	.word	0x20000804

0800b774 <net_if_ipv6_prefix_unset_timer>:
	if (!prefix->is_used) {
 800b774:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800b778:	079b      	lsls	r3, r3, #30
{
 800b77a:	4601      	mov	r1, r0
	if (!prefix->is_used) {
 800b77c:	d505      	bpl.n	800b78a <net_if_ipv6_prefix_unset_timer+0x16>
	ifprefix->lifetime.timer_timeout = 0;
 800b77e:	2300      	movs	r3, #0
	ifprefix->lifetime.wrap_counter = 0;
 800b780:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_slist_find_and_remove(&active_prefix_lifetime_timers,
 800b784:	4801      	ldr	r0, [pc, #4]	; (800b78c <net_if_ipv6_prefix_unset_timer+0x18>)
 800b786:	f00a ba95 	b.w	8015cb4 <sys_slist_find_and_remove>
}
 800b78a:	4770      	bx	lr
 800b78c:	20000574 	.word	0x20000574

0800b790 <net_if_ipv6_prefix_rm>:
{
 800b790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 800b794:	6844      	ldr	r4, [r0, #4]
{
 800b796:	4607      	mov	r7, r0
 800b798:	4689      	mov	r9, r1
 800b79a:	4690      	mov	r8, r2
	if (!ipv6) {
 800b79c:	b914      	cbnz	r4, 800b7a4 <net_if_ipv6_prefix_rm+0x14>
		return false;
 800b79e:	2000      	movs	r0, #0
}
 800b7a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!ipv6->prefix[i].is_used) {
 800b7a4:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
 800b7a8:	079a      	lsls	r2, r3, #30
 800b7aa:	d509      	bpl.n	800b7c0 <net_if_ipv6_prefix_rm+0x30>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
 800b7ac:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	f00a fadf 	bl	8015d74 <net_ipv6_addr_cmp>
 800b7b6:	b118      	cbz	r0, 800b7c0 <net_if_ipv6_prefix_rm+0x30>
 800b7b8:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
 800b7bc:	4543      	cmp	r3, r8
 800b7be:	d02c      	beq.n	800b81a <net_if_ipv6_prefix_rm+0x8a>
		if (!ipv6->prefix[i].is_used) {
 800b7c0:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
 800b7c4:	079b      	lsls	r3, r3, #30
 800b7c6:	d5ea      	bpl.n	800b79e <net_if_ipv6_prefix_rm+0xe>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
 800b7c8:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
 800b7cc:	4649      	mov	r1, r9
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	f00a fad0 	bl	8015d74 <net_ipv6_addr_cmp>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d0e2      	beq.n	800b79e <net_if_ipv6_prefix_rm+0xe>
 800b7d8:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 800b7dc:	4543      	cmp	r3, r8
 800b7de:	d1de      	bne.n	800b79e <net_if_ipv6_prefix_rm+0xe>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 800b7e0:	2501      	movs	r5, #1
 800b7e2:	2028      	movs	r0, #40	; 0x28
		net_if_ipv6_prefix_unset_timer(&ipv6->prefix[i]);
 800b7e4:	30a8      	adds	r0, #168	; 0xa8
 800b7e6:	4420      	add	r0, r4
 800b7e8:	f7ff ffc4 	bl	800b774 <net_if_ipv6_prefix_unset_timer>
		ipv6->prefix[i].is_used = false;
 800b7ec:	2328      	movs	r3, #40	; 0x28
 800b7ee:	fb03 4505 	mla	r5, r3, r5, r4
		remove_prefix_addresses(iface, ipv6, addr, len);
 800b7f2:	464a      	mov	r2, r9
		ipv6->prefix[i].is_used = false;
 800b7f4:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
 800b7f8:	f36f 0341 	bfc	r3, #1, #1
 800b7fc:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		remove_prefix_addresses(iface, ipv6, addr, len);
 800b800:	4621      	mov	r1, r4
 800b802:	4643      	mov	r3, r8
 800b804:	4638      	mov	r0, r7
 800b806:	f00a faf7 	bl	8015df8 <remove_prefix_addresses>
		net_mgmt_event_notify_with_info(
 800b80a:	4805      	ldr	r0, [pc, #20]	; (800b820 <net_if_ipv6_prefix_rm+0x90>)
 800b80c:	2310      	movs	r3, #16
 800b80e:	4632      	mov	r2, r6
 800b810:	4639      	mov	r1, r7
 800b812:	f000 fd63 	bl	800c2dc <net_mgmt_event_notify_with_info>
		return true;
 800b816:	2001      	movs	r0, #1
 800b818:	e7c2      	b.n	800b7a0 <net_if_ipv6_prefix_rm+0x10>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 800b81a:	2500      	movs	r5, #0
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
 800b81c:	4628      	mov	r0, r5
 800b81e:	e7e1      	b.n	800b7e4 <net_if_ipv6_prefix_rm+0x54>
 800b820:	e0600006 	.word	0xe0600006

0800b824 <net_if_ipv6_router_lookup>:
{
 800b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!routers[i].is_used ||
 800b826:	4c0f      	ldr	r4, [pc, #60]	; (800b864 <net_if_ipv6_router_lookup+0x40>)
{
 800b828:	4605      	mov	r5, r0
 800b82a:	460e      	mov	r6, r1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
 800b82c:	2300      	movs	r3, #0
		     net_ipv6_addr_cmp(net_if_router_ipv6(&routers[i]),
 800b82e:	f104 0708 	add.w	r7, r4, #8
		if (!routers[i].is_used ||
 800b832:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
		    routers[i].address.family != family ||
 800b836:	88a0      	ldrh	r0, [r4, #4]
		    routers[i].iface != iface) {
 800b838:	69a1      	ldr	r1, [r4, #24]
		if (!routers[i].is_used ||
 800b83a:	f002 0201 	and.w	r2, r2, #1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
 800b83e:	b113      	cbz	r3, 800b846 <net_if_ipv6_router_lookup+0x22>
	return NULL;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!routers[i].is_used ||
 800b846:	2a00      	cmp	r2, #0
 800b848:	d0fb      	beq.n	800b842 <net_if_ipv6_router_lookup+0x1e>
 800b84a:	2802      	cmp	r0, #2
 800b84c:	d1f9      	bne.n	800b842 <net_if_ipv6_router_lookup+0x1e>
		    routers[i].address.family != family ||
 800b84e:	428d      	cmp	r5, r1
 800b850:	d1f7      	bne.n	800b842 <net_if_ipv6_router_lookup+0x1e>
		     net_ipv6_addr_cmp(net_if_router_ipv6(&routers[i]),
 800b852:	4631      	mov	r1, r6
 800b854:	4638      	mov	r0, r7
 800b856:	f00a fa8d 	bl	8015d74 <net_ipv6_addr_cmp>
 800b85a:	2301      	movs	r3, #1
		if ((IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6 &&
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d0e8      	beq.n	800b832 <net_if_ipv6_router_lookup+0xe>
			return &routers[i];
 800b860:	4b00      	ldr	r3, [pc, #0]	; (800b864 <net_if_ipv6_router_lookup+0x40>)
	return iface_router_lookup(iface, AF_INET6, addr);
 800b862:	e7ee      	b.n	800b842 <net_if_ipv6_router_lookup+0x1e>
 800b864:	20000844 	.word	0x20000844

0800b868 <net_if_ipv6_router_find_default>:
		    !routers[i].is_default ||
 800b868:	4b0b      	ldr	r3, [pc, #44]	; (800b898 <net_if_ipv6_router_find_default+0x30>)
 800b86a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800b86e:	f3c2 0140 	ubfx	r1, r2, #1, #1
		if (!routers[i].is_used ||
 800b872:	f012 0201 	ands.w	r2, r2, #1
{
 800b876:	b530      	push	{r4, r5, lr}
		    routers[i].address.family != family) {
 800b878:	889d      	ldrh	r5, [r3, #4]
		if (iface && iface != routers[i].iface) {
 800b87a:	699c      	ldr	r4, [r3, #24]
		if (!routers[i].is_used ||
 800b87c:	d008      	beq.n	800b890 <net_if_ipv6_router_find_default+0x28>
 800b87e:	b139      	cbz	r1, 800b890 <net_if_ipv6_router_find_default+0x28>
		    !routers[i].is_default ||
 800b880:	2d02      	cmp	r5, #2
 800b882:	d105      	bne.n	800b890 <net_if_ipv6_router_find_default+0x28>
		if (iface && iface != routers[i].iface) {
 800b884:	b130      	cbz	r0, 800b894 <net_if_ipv6_router_find_default+0x2c>
		return &routers[i];
 800b886:	42a0      	cmp	r0, r4
 800b888:	bf0c      	ite	eq
 800b88a:	4618      	moveq	r0, r3
 800b88c:	2000      	movne	r0, #0
}
 800b88e:	bd30      	pop	{r4, r5, pc}
	return NULL;
 800b890:	2000      	movs	r0, #0
 800b892:	e7fc      	b.n	800b88e <net_if_ipv6_router_find_default+0x26>
		return &routers[i];
 800b894:	4618      	mov	r0, r3
 800b896:	e7fa      	b.n	800b88e <net_if_ipv6_router_find_default+0x26>
 800b898:	20000844 	.word	0x20000844

0800b89c <net_if_ipv6_router_add>:
{
 800b89c:	b570      	push	{r4, r5, r6, lr}
		if (routers[i].is_used) {
 800b89e:	4c1d      	ldr	r4, [pc, #116]	; (800b914 <net_if_ipv6_router_add+0x78>)
 800b8a0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
{
 800b8a4:	460e      	mov	r6, r1
		if (routers[i].is_used) {
 800b8a6:	07d9      	lsls	r1, r3, #31
{
 800b8a8:	4605      	mov	r5, r0
		if (routers[i].is_used) {
 800b8aa:	d430      	bmi.n	800b90e <net_if_ipv6_router_add+0x72>
		routers[i].address.family = family;
 800b8ac:	2102      	movs	r1, #2
		routers[i].iface = iface;
 800b8ae:	61a0      	str	r0, [r4, #24]
		routers[i].address.family = family;
 800b8b0:	80a1      	strh	r1, [r4, #4]
		if (lifetime) {
 800b8b2:	f043 0301 	orr.w	r3, r3, #1
 800b8b6:	b312      	cbz	r2, 800b8fe <net_if_ipv6_router_add+0x62>
			routers[i].is_default = true;
 800b8b8:	f023 0306 	bic.w	r3, r3, #6
 800b8bc:	430b      	orrs	r3, r1
 800b8be:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			routers[i].lifetime = lifetime;
 800b8c2:	8422      	strh	r2, [r4, #32]
			routers[i].life_start = k_uptime_get_32();
 800b8c4:	f00a fa5e 	bl	8015d84 <k_uptime_get_32>
			sys_slist_append(&active_router_timers,
 800b8c8:	4621      	mov	r1, r4
			routers[i].life_start = k_uptime_get_32();
 800b8ca:	61e0      	str	r0, [r4, #28]
			sys_slist_append(&active_router_timers,
 800b8cc:	4812      	ldr	r0, [pc, #72]	; (800b918 <net_if_ipv6_router_add+0x7c>)
 800b8ce:	f00a f9e7 	bl	8015ca0 <sys_slist_append>
			iface_router_run_timer(routers[i].life_start);
 800b8d2:	69e0      	ldr	r0, [r4, #28]
 800b8d4:	f7ff f85e 	bl	800a994 <iface_router_run_timer>
 800b8d8:	4c10      	ldr	r4, [pc, #64]	; (800b91c <net_if_ipv6_router_add+0x80>)
 800b8da:	4633      	mov	r3, r6
 800b8dc:	3610      	adds	r6, #16
 800b8de:	6818      	ldr	r0, [r3, #0]
 800b8e0:	6859      	ldr	r1, [r3, #4]
 800b8e2:	4622      	mov	r2, r4
 800b8e4:	c203      	stmia	r2!, {r0, r1}
 800b8e6:	3308      	adds	r3, #8
 800b8e8:	42b3      	cmp	r3, r6
 800b8ea:	4614      	mov	r4, r2
 800b8ec:	d1f7      	bne.n	800b8de <net_if_ipv6_router_add+0x42>
			net_mgmt_event_notify_with_info(
 800b8ee:	480c      	ldr	r0, [pc, #48]	; (800b920 <net_if_ipv6_router_add+0x84>)
 800b8f0:	4a0a      	ldr	r2, [pc, #40]	; (800b91c <net_if_ipv6_router_add+0x80>)
 800b8f2:	2310      	movs	r3, #16
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	f000 fcf1 	bl	800c2dc <net_mgmt_event_notify_with_info>
		return &routers[i];
 800b8fa:	4806      	ldr	r0, [pc, #24]	; (800b914 <net_if_ipv6_router_add+0x78>)
}
 800b8fc:	bd70      	pop	{r4, r5, r6, pc}
			routers[i].is_default = false;
 800b8fe:	f023 0306 	bic.w	r3, r3, #6
 800b902:	f043 0304 	orr.w	r3, r3, #4
			routers[i].lifetime = 0;
 800b906:	8422      	strh	r2, [r4, #32]
			routers[i].is_default = false;
 800b908:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800b90c:	e7e4      	b.n	800b8d8 <net_if_ipv6_router_add+0x3c>
	return NULL;
 800b90e:	2000      	movs	r0, #0
	return iface_router_add(iface, AF_INET6, addr, false, lifetime);
 800b910:	e7f4      	b.n	800b8fc <net_if_ipv6_router_add+0x60>
 800b912:	bf00      	nop
 800b914:	20000844 	.word	0x20000844
 800b918:	2000057c 	.word	0x2000057c
 800b91c:	2000084c 	.word	0x2000084c
 800b920:	e0600009 	.word	0xe0600009

0800b924 <net_if_ipv6_router_rm>:
{
 800b924:	b510      	push	{r4, lr}
 800b926:	4604      	mov	r4, r0
	if (!router->is_used) {
 800b928:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
 800b92c:	f010 0001 	ands.w	r0, r0, #1
 800b930:	d019      	beq.n	800b966 <net_if_ipv6_router_rm+0x42>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800b932:	88a3      	ldrh	r3, [r4, #4]
 800b934:	2b02      	cmp	r3, #2
 800b936:	d106      	bne.n	800b946 <net_if_ipv6_router_rm+0x22>
		net_mgmt_event_notify_with_info(NET_EVENT_IPV6_ROUTER_DEL,
 800b938:	2310      	movs	r3, #16
 800b93a:	f104 0208 	add.w	r2, r4, #8
 800b93e:	69a1      	ldr	r1, [r4, #24]
 800b940:	4809      	ldr	r0, [pc, #36]	; (800b968 <net_if_ipv6_router_rm+0x44>)
 800b942:	f000 fccb 	bl	800c2dc <net_mgmt_event_notify_with_info>
	if (sys_slist_find_and_remove(&active_router_timers, &router->node)) {
 800b946:	4621      	mov	r1, r4
 800b948:	4808      	ldr	r0, [pc, #32]	; (800b96c <net_if_ipv6_router_rm+0x48>)
 800b94a:	f00a f9b3 	bl	8015cb4 <sys_slist_find_and_remove>
 800b94e:	b118      	cbz	r0, 800b958 <net_if_ipv6_router_rm+0x34>
		iface_router_run_timer(k_uptime_get_32());
 800b950:	f00a fa18 	bl	8015d84 <k_uptime_get_32>
 800b954:	f7ff f81e 	bl	800a994 <iface_router_run_timer>
	router->is_used = false;
 800b958:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800b95c:	f36f 0300 	bfc	r3, #0, #1
 800b960:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	return true;
 800b964:	2001      	movs	r0, #1
}
 800b966:	bd10      	pop	{r4, pc}
 800b968:	e060000a 	.word	0xe060000a
 800b96c:	2000057c 	.word	0x2000057c

0800b970 <net_if_ipv6_select_src_addr>:

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   const struct in6_addr *dst)
{
 800b970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct in6_addr *src = NULL;
	u8_t best_match = 0U;
	struct net_if *iface;

	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
 800b972:	880a      	ldrh	r2, [r1, #0]
 800b974:	f248 03fe 	movw	r3, #33022	; 0x80fe
	u8_t best_match = 0U;
 800b978:	2400      	movs	r4, #0
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
 800b97a:	429a      	cmp	r2, r3
{
 800b97c:	460e      	mov	r6, r1
	u8_t best_match = 0U;
 800b97e:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
 800b982:	d030      	beq.n	800b9e6 <net_if_ipv6_select_src_addr+0x76>
 800b984:	780b      	ldrb	r3, [r1, #0]

		for (iface = __net_if_start;
 800b986:	4d19      	ldr	r5, [pc, #100]	; (800b9ec <net_if_ipv6_select_src_addr+0x7c>)
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
 800b988:	2bff      	cmp	r3, #255	; 0xff
 800b98a:	d113      	bne.n	800b9b4 <net_if_ipv6_select_src_addr+0x44>
							 &best_match);
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
 800b98c:	4e18      	ldr	r6, [pc, #96]	; (800b9f0 <net_if_ipv6_select_src_addr+0x80>)
		for (iface = __net_if_start;
 800b98e:	b310      	cbz	r0, 800b9d6 <net_if_ipv6_select_src_addr+0x66>
				break;
			}
		}

		if (dst_iface) {
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
 800b990:	2101      	movs	r1, #1
 800b992:	f00a fac8 	bl	8015f26 <net_if_ipv6_get_ll>
 800b996:	e015      	b.n	800b9c4 <net_if_ipv6_select_src_addr+0x54>
			addr = net_if_ipv6_get_best_match(iface, dst,
 800b998:	6868      	ldr	r0, [r5, #4]
 800b99a:	f10d 0207 	add.w	r2, sp, #7
 800b99e:	4631      	mov	r1, r6
 800b9a0:	f7fe ffa2 	bl	800a8e8 <net_if_ipv6_get_best_match.isra.17>
		     iface++) {
 800b9a4:	3520      	adds	r5, #32
			if (addr) {
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	bf18      	it	ne
 800b9aa:	4604      	movne	r4, r0
		     !dst_iface && iface != __net_if_end;
 800b9ac:	42bd      	cmp	r5, r7
 800b9ae:	d1f3      	bne.n	800b998 <net_if_ipv6_select_src_addr+0x28>
		}
	}

	if (!src) {
 800b9b0:	b9b4      	cbnz	r4, 800b9e0 <net_if_ipv6_select_src_addr+0x70>
 800b9b2:	e012      	b.n	800b9da <net_if_ipv6_select_src_addr+0x6a>
		     !dst_iface && iface != __net_if_end;
 800b9b4:	4f0e      	ldr	r7, [pc, #56]	; (800b9f0 <net_if_ipv6_select_src_addr+0x80>)
		for (iface = __net_if_start;
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	d0f8      	beq.n	800b9ac <net_if_ipv6_select_src_addr+0x3c>
			src = net_if_ipv6_get_best_match(dst_iface, dst,
 800b9ba:	f10d 0207 	add.w	r2, sp, #7
 800b9be:	6840      	ldr	r0, [r0, #4]
 800b9c0:	f7fe ff92 	bl	800a8e8 <net_if_ipv6_get_best_match.isra.17>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
 800b9c4:	4604      	mov	r4, r0
 800b9c6:	e7f3      	b.n	800b9b0 <net_if_ipv6_select_src_addr+0x40>
			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
 800b9c8:	2101      	movs	r1, #1
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	f00a faab 	bl	8015f26 <net_if_ipv6_get_ll>
			if (addr) {
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	b928      	cbnz	r0, 800b9e0 <net_if_ipv6_select_src_addr+0x70>
		     iface++) {
 800b9d4:	3520      	adds	r5, #32
		     !dst_iface && iface != __net_if_end;
 800b9d6:	42b5      	cmp	r5, r6
 800b9d8:	d1f6      	bne.n	800b9c8 <net_if_ipv6_select_src_addr+0x58>
		return net_ipv6_unspecified_address();
 800b9da:	f000 fb93 	bl	800c104 <net_ipv6_unspecified_address>
 800b9de:	4604      	mov	r4, r0
	}

	return src;
}
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	b003      	add	sp, #12
 800b9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9e6:	4d01      	ldr	r5, [pc, #4]	; (800b9ec <net_if_ipv6_select_src_addr+0x7c>)
 800b9e8:	e7d0      	b.n	800b98c <net_if_ipv6_select_src_addr+0x1c>
 800b9ea:	bf00      	nop
 800b9ec:	200091c0 	.word	0x200091c0
 800b9f0:	200091e0 	.word	0x200091e0

0800b9f4 <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
 800b9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
 800b9f6:	4b08      	ldr	r3, [pc, #32]	; (800ba18 <net_if_call_link_cb+0x24>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
{
 800b9fa:	4605      	mov	r5, r0
 800b9fc:	460e      	mov	r6, r1
 800b9fe:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
 800ba00:	b14b      	cbz	r3, 800ba16 <net_if_call_link_cb+0x22>
 800ba02:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	463a      	mov	r2, r7
 800ba08:	4631      	mov	r1, r6
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
 800ba0e:	b114      	cbz	r4, 800ba16 <net_if_call_link_cb+0x22>
 800ba10:	4623      	mov	r3, r4
 800ba12:	6824      	ldr	r4, [r4, #0]
 800ba14:	e7f6      	b.n	800ba04 <net_if_call_link_cb+0x10>
	}
}
 800ba16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba18:	200007f4 	.word	0x200007f4

0800ba1c <process_tx_packet>:
{
 800ba1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	context = net_pkt_context(pkt);
 800ba1e:	e9d0 7507 	ldrd	r7, r5, [r0, #28]
{
 800ba22:	4604      	mov	r4, r0
 800ba24:	6828      	ldr	r0, [r5, #0]
 800ba26:	2100      	movs	r1, #0
 800ba28:	300c      	adds	r0, #12
 800ba2a:	f00a f975 	bl	8015d18 <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
 800ba2e:	b1d0      	cbz	r0, 800ba66 <process_tx_packet+0x4a>
		status = net_if_l2(iface)->send(iface, pkt);
 800ba30:	4628      	mov	r0, r5
 800ba32:	f00a f95a 	bl	8015cea <net_if_l2>
 800ba36:	4621      	mov	r1, r4
 800ba38:	6843      	ldr	r3, [r0, #4]
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	4798      	blx	r3
	if (status < 0) {
 800ba3e:	1e06      	subs	r6, r0, #0
 800ba40:	da02      	bge.n	800ba48 <process_tx_packet+0x2c>
		net_pkt_unref(pkt);
 800ba42:	4620      	mov	r0, r4
 800ba44:	f00a ffa2 	bl	801698c <net_pkt_unref>
	if (context) {
 800ba48:	b11f      	cbz	r7, 800ba52 <process_tx_packet+0x36>
		net_context_send_cb(context, status);
 800ba4a:	4631      	mov	r1, r6
 800ba4c:	4638      	mov	r0, r7
 800ba4e:	f00a f950 	bl	8015cf2 <net_context_send_cb>
	if (dst->addr) {
 800ba52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ba54:	b1f3      	cbz	r3, 800ba94 <process_tx_packet+0x78>
		net_if_call_link_cb(iface, dst, status);
 800ba56:	4632      	mov	r2, r6
 800ba58:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800ba5c:	4628      	mov	r0, r5
}
 800ba5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_if_call_link_cb(iface, dst, status);
 800ba62:	f7ff bfc7 	b.w	800b9f4 <net_if_call_link_cb>
		NET_WARN("iface %p is down", iface);
 800ba66:	4b0c      	ldr	r3, [pc, #48]	; (800ba98 <process_tx_packet+0x7c>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f013 0f06 	tst.w	r3, #6
 800ba6e:	d00e      	beq.n	800ba8e <process_tx_packet+0x72>
 800ba70:	2302      	movs	r3, #2
 800ba72:	f04f 0200 	mov.w	r2, #0
 800ba76:	f363 0207 	bfi	r2, r3, #0, #8
 800ba7a:	4908      	ldr	r1, [pc, #32]	; (800ba9c <process_tx_packet+0x80>)
 800ba7c:	4b08      	ldr	r3, [pc, #32]	; (800baa0 <process_tx_packet+0x84>)
 800ba7e:	4809      	ldr	r0, [pc, #36]	; (800baa4 <process_tx_packet+0x88>)
 800ba80:	1a5b      	subs	r3, r3, r1
 800ba82:	08db      	lsrs	r3, r3, #3
 800ba84:	f363 128f 	bfi	r2, r3, #6, #10
 800ba88:	4629      	mov	r1, r5
 800ba8a:	f008 f8c7 	bl	8013c1c <log_1>
		status = -ENETDOWN;
 800ba8e:	f06f 0672 	mvn.w	r6, #114	; 0x72
 800ba92:	e7d6      	b.n	800ba42 <process_tx_packet+0x26>
}
 800ba94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba96:	bf00      	nop
 800ba98:	2000900c 	.word	0x2000900c
 800ba9c:	08019248 	.word	0x08019248
 800baa0:	080192c0 	.word	0x080192c0
 800baa4:	0801b9c5 	.word	0x0801b9c5

0800baa8 <net_if_send_data>:
{
 800baa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baaa:	4605      	mov	r5, r0
 800baac:	6800      	ldr	r0, [r0, #0]
	struct net_context *context = net_pkt_context(pkt);
 800baae:	69cf      	ldr	r7, [r1, #28]
{
 800bab0:	460c      	mov	r4, r1
 800bab2:	300c      	adds	r0, #12
 800bab4:	2100      	movs	r1, #0
 800bab6:	f00a f92f 	bl	8015d18 <atomic_test_bit>
	if (!net_if_flag_is_set(iface, NET_IF_UP)) {
 800baba:	b9b0      	cbnz	r0, 800baea <net_if_send_data+0x42>
		NET_WARN("iface %p is down", iface);
 800babc:	4b25      	ldr	r3, [pc, #148]	; (800bb54 <net_if_send_data+0xac>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f013 0f06 	tst.w	r3, #6
 800bac4:	d00e      	beq.n	800bae4 <net_if_send_data+0x3c>
 800bac6:	2302      	movs	r3, #2
 800bac8:	f04f 0200 	mov.w	r2, #0
 800bacc:	f363 0207 	bfi	r2, r3, #0, #8
 800bad0:	4921      	ldr	r1, [pc, #132]	; (800bb58 <net_if_send_data+0xb0>)
 800bad2:	4b22      	ldr	r3, [pc, #136]	; (800bb5c <net_if_send_data+0xb4>)
 800bad4:	4822      	ldr	r0, [pc, #136]	; (800bb60 <net_if_send_data+0xb8>)
 800bad6:	1a5b      	subs	r3, r3, r1
 800bad8:	08db      	lsrs	r3, r3, #3
 800bada:	f363 128f 	bfi	r2, r3, #6, #10
 800bade:	4629      	mov	r1, r5
 800bae0:	f008 f89c 	bl	8013c1c <log_1>
		status = -ENETDOWN;
 800bae4:	f06f 0672 	mvn.w	r6, #114	; 0x72
 800bae8:	e021      	b.n	800bb2e <net_if_send_data+0x86>
 800baea:	6828      	ldr	r0, [r5, #0]
 800baec:	2101      	movs	r1, #1
 800baee:	300c      	adds	r0, #12
 800baf0:	f00a f912 	bl	8015d18 <atomic_test_bit>
	if (!net_if_flag_is_set(iface, NET_IF_POINTOPOINT) &&
 800baf4:	b940      	cbnz	r0, 800bb08 <net_if_send_data+0x60>
 800baf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800baf8:	b933      	cbnz	r3, 800bb08 <net_if_send_data+0x60>
	return net_if_get_link_addr(pkt->iface);
 800bafa:	6a23      	ldr	r3, [r4, #32]
 800bafc:	681b      	ldr	r3, [r3, #0]
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
 800bafe:	691a      	ldr	r2, [r3, #16]
 800bb00:	62a2      	str	r2, [r4, #40]	; 0x28
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
 800bb02:	7d1b      	ldrb	r3, [r3, #20]
 800bb04:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	return pkt->family;
 800bb08:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
	if (IS_ENABLED(CONFIG_NET_IPV6) && net_pkt_family(pkt) == AF_INET6) {
 800bb0c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d005      	beq.n	800bb20 <net_if_send_data+0x78>
		net_if_queue_tx(iface, pkt);
 800bb14:	4628      	mov	r0, r5
 800bb16:	4621      	mov	r1, r4
 800bb18:	f7fe ffb8 	bl	800aa8c <net_if_queue_tx>
 800bb1c:	2000      	movs	r0, #0
}
 800bb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		verdict = net_ipv6_prepare_for_send(pkt);
 800bb20:	4620      	mov	r0, r4
 800bb22:	f00b fd3f 	bl	80175a4 <net_ipv6_prepare_for_send>
	if (verdict == NET_DROP) {
 800bb26:	2802      	cmp	r0, #2
 800bb28:	d110      	bne.n	800bb4c <net_if_send_data+0xa4>
	int status = -EIO;
 800bb2a:	f06f 0604 	mvn.w	r6, #4
		if (context) {
 800bb2e:	b11f      	cbz	r7, 800bb38 <net_if_send_data+0x90>
			net_context_send_cb(context, status);
 800bb30:	4631      	mov	r1, r6
 800bb32:	4638      	mov	r0, r7
 800bb34:	f00a f8dd 	bl	8015cf2 <net_context_send_cb>
		if (dst->addr) {
 800bb38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bb3a:	b12b      	cbz	r3, 800bb48 <net_if_send_data+0xa0>
			net_if_call_link_cb(iface, dst, status);
 800bb3c:	4632      	mov	r2, r6
 800bb3e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800bb42:	4628      	mov	r0, r5
 800bb44:	f7ff ff56 	bl	800b9f4 <net_if_call_link_cb>
 800bb48:	2002      	movs	r0, #2
 800bb4a:	e7e8      	b.n	800bb1e <net_if_send_data+0x76>
	} else if (verdict == NET_OK) {
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	d1e6      	bne.n	800bb1e <net_if_send_data+0x76>
 800bb50:	e7e0      	b.n	800bb14 <net_if_send_data+0x6c>
 800bb52:	bf00      	nop
 800bb54:	2000900c 	.word	0x2000900c
 800bb58:	08019248 	.word	0x08019248
 800bb5c:	080192c0 	.word	0x080192c0
 800bb60:	0801b9c5 	.word	0x0801b9c5

0800bb64 <net_if_need_calc_tx_checksum>:
	return true;
#endif
}

bool net_if_need_calc_tx_checksum(struct net_if *iface)
{
 800bb64:	b508      	push	{r3, lr}
 800bb66:	4602      	mov	r2, r0
	if (net_if_l2(iface) != &NET_L2_GET_NAME(ETHERNET)) {
 800bb68:	f00a f8bf 	bl	8015cea <net_if_l2>
 800bb6c:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <net_if_need_calc_tx_checksum+0x20>)
 800bb6e:	4283      	cmp	r3, r0
 800bb70:	d105      	bne.n	800bb7e <net_if_need_calc_tx_checksum+0x1a>
 800bb72:	2101      	movs	r1, #1
 800bb74:	4610      	mov	r0, r2
	return need_calc_checksum(iface, ETHERNET_HW_TX_CHKSUM_OFFLOAD);
}
 800bb76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bb7a:	f00a b907 	b.w	8015d8c <need_calc_checksum.part.18>
 800bb7e:	2001      	movs	r0, #1
 800bb80:	bd08      	pop	{r3, pc}
 800bb82:	bf00      	nop
 800bb84:	08019238 	.word	0x08019238

0800bb88 <net_if_need_calc_rx_checksum>:

bool net_if_need_calc_rx_checksum(struct net_if *iface)
{
 800bb88:	b508      	push	{r3, lr}
 800bb8a:	4602      	mov	r2, r0
	if (net_if_l2(iface) != &NET_L2_GET_NAME(ETHERNET)) {
 800bb8c:	f00a f8ad 	bl	8015cea <net_if_l2>
 800bb90:	4b05      	ldr	r3, [pc, #20]	; (800bba8 <net_if_need_calc_rx_checksum+0x20>)
 800bb92:	4283      	cmp	r3, r0
 800bb94:	d105      	bne.n	800bba2 <net_if_need_calc_rx_checksum+0x1a>
 800bb96:	2102      	movs	r1, #2
 800bb98:	4610      	mov	r0, r2
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
}
 800bb9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bb9e:	f00a b8f5 	b.w	8015d8c <need_calc_checksum.part.18>
 800bba2:	2001      	movs	r0, #1
 800bba4:	bd08      	pop	{r3, pc}
 800bba6:	bf00      	nop
 800bba8:	08019238 	.word	0x08019238

0800bbac <net_if_get_by_index>:

struct net_if *net_if_get_by_index(int index)
{
	if (index <= 0) {
 800bbac:	2800      	cmp	r0, #0
 800bbae:	dd08      	ble.n	800bbc2 <net_if_get_by_index+0x16>
		return NULL;
	}

	if (&__net_if_start[index - 1] >= __net_if_end) {
 800bbb0:	1e43      	subs	r3, r0, #1
 800bbb2:	4805      	ldr	r0, [pc, #20]	; (800bbc8 <net_if_get_by_index+0x1c>)
 800bbb4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		return NULL;
 800bbb8:	4b04      	ldr	r3, [pc, #16]	; (800bbcc <net_if_get_by_index+0x20>)
 800bbba:	4298      	cmp	r0, r3
 800bbbc:	bf28      	it	cs
 800bbbe:	2000      	movcs	r0, #0
 800bbc0:	4770      	bx	lr
 800bbc2:	2000      	movs	r0, #0
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index - 1];
}
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	200091c0 	.word	0x200091c0
 800bbcc:	200091e0 	.word	0x200091e0

0800bbd0 <net_if_get_by_iface>:

int net_if_get_by_iface(struct net_if *iface)
{
	if (!(iface >= __net_if_start && iface < __net_if_end)) {
 800bbd0:	4b06      	ldr	r3, [pc, #24]	; (800bbec <net_if_get_by_iface+0x1c>)
 800bbd2:	4298      	cmp	r0, r3
 800bbd4:	d306      	bcc.n	800bbe4 <net_if_get_by_iface+0x14>
 800bbd6:	4a06      	ldr	r2, [pc, #24]	; (800bbf0 <net_if_get_by_iface+0x20>)
 800bbd8:	4290      	cmp	r0, r2
 800bbda:	d203      	bcs.n	800bbe4 <net_if_get_by_iface+0x14>
		return -1;
	}

	return (iface - __net_if_start) + 1;
 800bbdc:	1ac0      	subs	r0, r0, r3
 800bbde:	1140      	asrs	r0, r0, #5
 800bbe0:	3001      	adds	r0, #1
 800bbe2:	4770      	bx	lr
		return -1;
 800bbe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	200091c0 	.word	0x200091c0
 800bbf0:	200091e0 	.word	0x200091e0

0800bbf4 <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
 800bbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800bbf6:	4c06      	ldr	r4, [pc, #24]	; (800bc10 <net_if_foreach+0x1c>)
 800bbf8:	4d06      	ldr	r5, [pc, #24]	; (800bc14 <net_if_foreach+0x20>)
{
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	460f      	mov	r7, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800bbfe:	42ac      	cmp	r4, r5
 800bc00:	d100      	bne.n	800bc04 <net_if_foreach+0x10>
		cb(iface, user_data);
	}
}
 800bc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb(iface, user_data);
 800bc04:	4620      	mov	r0, r4
 800bc06:	4639      	mov	r1, r7
 800bc08:	47b0      	blx	r6
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800bc0a:	3420      	adds	r4, #32
 800bc0c:	e7f7      	b.n	800bbfe <net_if_foreach+0xa>
 800bc0e:	bf00      	nop
 800bc10:	200091c0 	.word	0x200091c0
 800bc14:	200091e0 	.word	0x200091e0

0800bc18 <net_if_up>:

int net_if_up(struct net_if *iface)
{
 800bc18:	b510      	push	{r4, lr}
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	6800      	ldr	r0, [r0, #0]
 800bc1e:	2100      	movs	r1, #0
 800bc20:	300c      	adds	r0, #12
 800bc22:	f00a f879 	bl	8015d18 <atomic_test_bit>
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
 800bc26:	bb10      	cbnz	r0, 800bc6e <net_if_up+0x56>
		net_if_flag_set(iface, NET_IF_UP);
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f00a f85e 	bl	8015cea <net_if_l2>
 800bc2e:	bb00      	cbnz	r0, 800bc72 <net_if_up+0x5a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800bc30:	6823      	ldr	r3, [r4, #0]
 800bc32:	f3bf 8f5b 	dmb	ish
 800bc36:	330c      	adds	r3, #12
 800bc38:	e853 2f00 	ldrex	r2, [r3]
 800bc3c:	f042 0201 	orr.w	r2, r2, #1
 800bc40:	e843 2100 	strex	r1, r2, [r3]
 800bc44:	2900      	cmp	r1, #0
 800bc46:	d1f7      	bne.n	800bc38 <net_if_up+0x20>
 800bc48:	f3bf 8f5b 	dmb	ish
	net_if_flag_set(iface, NET_IF_UP);

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f00a f856 	bl	8015cfe <l2_flags_get>
 800bc52:	0703      	lsls	r3, r0, #28
 800bc54:	d405      	bmi.n	800bc62 <net_if_up+0x4a>
		net_if_start_dad(iface);
 800bc56:	4620      	mov	r0, r4
 800bc58:	f7ff f9e8 	bl	800b02c <net_if_start_dad>
	net_if_start_rs(iface);
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f7fe ff6b 	bl	800ab38 <net_if_start_rs>
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
 800bc62:	2300      	movs	r3, #0
 800bc64:	461a      	mov	r2, r3
 800bc66:	4621      	mov	r1, r4
 800bc68:	4806      	ldr	r0, [pc, #24]	; (800bc84 <net_if_up+0x6c>)
 800bc6a:	f000 fb37 	bl	800c2dc <net_mgmt_event_notify_with_info>
		return 0;
 800bc6e:	2000      	movs	r0, #0
 800bc70:	e007      	b.n	800bc82 <net_if_up+0x6a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
 800bc72:	6883      	ldr	r3, [r0, #8]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d0db      	beq.n	800bc30 <net_if_up+0x18>
	status = net_if_l2(iface)->enable(iface, true);
 800bc78:	2101      	movs	r1, #1
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	4798      	blx	r3
	if (status < 0) {
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	dad6      	bge.n	800bc30 <net_if_up+0x18>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
 800bc82:	bd10      	pop	{r4, pc}
 800bc84:	d0010002 	.word	0xd0010002

0800bc88 <net_if_down>:

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);
}

int net_if_down(struct net_if *iface)
{
 800bc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 800bc8c:	6846      	ldr	r6, [r0, #4]
{
 800bc8e:	4604      	mov	r4, r0
	if (!ipv6) {
 800bc90:	b19e      	cbz	r6, 800bcba <net_if_down+0x32>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 800bc92:	2500      	movs	r5, #0
		if (!ipv6->mcast[i].is_used ||
 800bc94:	2718      	movs	r7, #24
		net_ipv6_mld_leave(iface, &ipv6->mcast[i].address.in6_addr);
 800bc96:	f106 0864 	add.w	r8, r6, #100	; 0x64
		if (!ipv6->mcast[i].is_used ||
 800bc9a:	fb07 f105 	mul.w	r1, r7, r5
 800bc9e:	1873      	adds	r3, r6, r1
 800bca0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bca4:	07da      	lsls	r2, r3, #31
 800bca6:	d505      	bpl.n	800bcb4 <net_if_down+0x2c>
 800bca8:	079b      	lsls	r3, r3, #30
 800bcaa:	d503      	bpl.n	800bcb4 <net_if_down+0x2c>
		net_ipv6_mld_leave(iface, &ipv6->mcast[i].address.in6_addr);
 800bcac:	4441      	add	r1, r8
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f002 fbee 	bl	800e490 <net_ipv6_mld_leave>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 800bcb4:	3501      	adds	r5, #1
 800bcb6:	2d03      	cmp	r5, #3
 800bcb8:	d1ef      	bne.n	800bc9a <net_if_down+0x12>
	if (net_if_is_ip_offloaded(iface)) {
		goto done;
	}

	/* If the L2 does not support enable just clear the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f00a f815 	bl	8015cea <net_if_l2>
 800bcc0:	b9b0      	cbnz	r0, 800bcf0 <net_if_down+0x68>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800bcc2:	6823      	ldr	r3, [r4, #0]
 800bcc4:	f3bf 8f5b 	dmb	ish
 800bcc8:	330c      	adds	r3, #12
 800bcca:	e853 2f00 	ldrex	r2, [r3]
 800bcce:	f022 0201 	bic.w	r2, r2, #1
 800bcd2:	e843 2100 	strex	r1, r2, [r3]
 800bcd6:	2900      	cmp	r1, #0
 800bcd8:	d1f7      	bne.n	800bcca <net_if_down+0x42>
 800bcda:	f3bf 8f5b 	dmb	ish
 800bcde:	2300      	movs	r3, #0
 800bce0:	4808      	ldr	r0, [pc, #32]	; (800bd04 <net_if_down+0x7c>)
 800bce2:	461a      	mov	r2, r3
 800bce4:	4621      	mov	r1, r4
 800bce6:	f000 faf9 	bl	800c2dc <net_mgmt_event_notify_with_info>
done:
	net_if_flag_clear(iface, NET_IF_UP);

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);

	return 0;
 800bcea:	2000      	movs	r0, #0
}
 800bcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
 800bcf0:	6883      	ldr	r3, [r0, #8]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d0e5      	beq.n	800bcc2 <net_if_down+0x3a>
	status = net_if_l2(iface)->enable(iface, false);
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	4798      	blx	r3
	if (status < 0) {
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	dae0      	bge.n	800bcc2 <net_if_down+0x3a>
 800bd00:	e7f4      	b.n	800bcec <net_if_down+0x64>
 800bd02:	bf00      	nop
 800bd04:	d0010001 	.word	0xd0010001

0800bd08 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
 800bd08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_if *iface;
	int if_count;

	NET_DBG("");

	net_tc_tx_init();
 800bd0c:	f000 ff94 	bl	800cc38 <net_tc_tx_init>
 800bd10:	4d4c      	ldr	r5, [pc, #304]	; (800be44 <net_if_init+0x13c>)
		NET_ERR("Iface %p driver API init NULL", iface);
 800bd12:	4b4d      	ldr	r3, [pc, #308]	; (800be48 <net_if_init+0x140>)

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
 800bd14:	4c4d      	ldr	r4, [pc, #308]	; (800be4c <net_if_init+0x144>)
 800bd16:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800be98 <net_if_init+0x190>
		NET_ERR("Iface %p driver API init NULL", iface);
 800bd1a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 800be50 <net_if_init+0x148>
 800bd1e:	f8df a17c 	ldr.w	sl, [pc, #380]	; 800be9c <net_if_init+0x194>
 800bd22:	1aed      	subs	r5, r5, r3
 800bd24:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 800bd28:	4627      	mov	r7, r4
	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
 800bd2a:	4544      	cmp	r4, r8
 800bd2c:	d114      	bne.n	800bd58 <net_if_init+0x50>
 800bd2e:	1be6      	subs	r6, r4, r7
	     iface++, if_count++) {
		init_iface(iface);
	}

	if (iface == __net_if_start) {
 800bd30:	42bc      	cmp	r4, r7
 800bd32:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800bd36:	d12b      	bne.n	800bd90 <net_if_init+0x88>
		NET_ERR("There is no network interface to work with!");
 800bd38:	4b45      	ldr	r3, [pc, #276]	; (800be50 <net_if_init+0x148>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	075b      	lsls	r3, r3, #29
 800bd3e:	d07e      	beq.n	800be3e <net_if_init+0x136>
 800bd40:	f04f 0100 	mov.w	r1, #0
 800bd44:	2301      	movs	r3, #1
 800bd46:	f363 0107 	bfi	r1, r3, #0, #8
 800bd4a:	f365 118f 	bfi	r1, r5, #6, #10
 800bd4e:	4841      	ldr	r0, [pc, #260]	; (800be54 <net_if_init+0x14c>)
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
 800bd50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		NET_ERR("There is no network interface to work with!");
 800bd54:	f007 bf55 	b.w	8013c02 <log_0>
	return iface->if_dev->dev;
 800bd58:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
 800bd5e:	b10b      	cbz	r3, 800bd64 <net_if_init+0x5c>
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	b993      	cbnz	r3, 800bd8a <net_if_init+0x82>
		NET_ERR("Iface %p driver API init NULL", iface);
 800bd64:	f8d9 3000 	ldr.w	r3, [r9]
 800bd68:	075a      	lsls	r2, r3, #29
 800bd6a:	d00c      	beq.n	800bd86 <net_if_init+0x7e>
 800bd6c:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
 800bd70:	f043 0301 	orr.w	r3, r3, #1
 800bd74:	f363 0607 	bfi	r6, r3, #0, #8
 800bd78:	f365 168f 	bfi	r6, r5, #6, #10
 800bd7c:	4632      	mov	r2, r6
 800bd7e:	4621      	mov	r1, r4
 800bd80:	4650      	mov	r0, sl
 800bd82:	f007 ff4b 	bl	8013c1c <log_1>
	     iface++, if_count++) {
 800bd86:	3420      	adds	r4, #32
 800bd88:	e7cf      	b.n	800bd2a <net_if_init+0x22>
	api->init(iface);
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	4798      	blx	r3
 800bd8e:	e7fa      	b.n	800bd86 <net_if_init+0x7e>
	k_delayed_work_init(&dad_timer, dad_timeout);
 800bd90:	4931      	ldr	r1, [pc, #196]	; (800be58 <net_if_init+0x150>)
 800bd92:	4832      	ldr	r0, [pc, #200]	; (800be5c <net_if_init+0x154>)
 800bd94:	f00c fea0 	bl	8018ad8 <k_delayed_work_init>
	list->head = NULL;
 800bd98:	4b31      	ldr	r3, [pc, #196]	; (800be60 <net_if_init+0x158>)
	k_delayed_work_init(&rs_timer, rs_timeout);
 800bd9a:	4932      	ldr	r1, [pc, #200]	; (800be64 <net_if_init+0x15c>)
 800bd9c:	4832      	ldr	r0, [pc, #200]	; (800be68 <net_if_init+0x160>)
 800bd9e:	2400      	movs	r4, #0
	list->tail = NULL;
 800bda0:	e9c3 4400 	strd	r4, r4, [r3]
 800bda4:	f00c fe98 	bl	8018ad8 <k_delayed_work_init>
	list->head = NULL;
 800bda8:	4b30      	ldr	r3, [pc, #192]	; (800be6c <net_if_init+0x164>)
	k_delayed_work_init(&address_lifetime_timer, address_lifetime_timeout);
 800bdaa:	4931      	ldr	r1, [pc, #196]	; (800be70 <net_if_init+0x168>)
 800bdac:	4831      	ldr	r0, [pc, #196]	; (800be74 <net_if_init+0x16c>)
	list->tail = NULL;
 800bdae:	e9c3 4400 	strd	r4, r4, [r3]
 800bdb2:	f00c fe91 	bl	8018ad8 <k_delayed_work_init>
	k_delayed_work_init(&prefix_lifetime_timer, prefix_lifetime_timeout);
 800bdb6:	4930      	ldr	r1, [pc, #192]	; (800be78 <net_if_init+0x170>)
 800bdb8:	4830      	ldr	r0, [pc, #192]	; (800be7c <net_if_init+0x174>)
 800bdba:	f00c fe8d 	bl	8018ad8 <k_delayed_work_init>
	if (if_count > ARRAY_SIZE(ipv6_addresses)) {
 800bdbe:	2e02      	cmp	r6, #2
 800bdc0:	dd1e      	ble.n	800be00 <net_if_init+0xf8>
		NET_WARN("You have %lu IPv6 net_if addresses but %d "
 800bdc2:	4c23      	ldr	r4, [pc, #140]	; (800be50 <net_if_init+0x148>)
 800bdc4:	6823      	ldr	r3, [r4, #0]
 800bdc6:	f013 0f06 	tst.w	r3, #6
 800bdca:	d019      	beq.n	800be00 <net_if_init+0xf8>
 800bdcc:	2202      	movs	r2, #2
 800bdce:	f04f 0300 	mov.w	r3, #0
 800bdd2:	f362 0307 	bfi	r3, r2, #0, #8
 800bdd6:	f365 138f 	bfi	r3, r5, #6, #10
 800bdda:	4632      	mov	r2, r6
 800bddc:	2102      	movs	r1, #2
 800bdde:	4828      	ldr	r0, [pc, #160]	; (800be80 <net_if_init+0x178>)
 800bde0:	f007 ff30 	bl	8013c44 <log_2>
		NET_WARN("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT "
 800bde4:	6823      	ldr	r3, [r4, #0]
 800bde6:	f013 0f06 	tst.w	r3, #6
 800bdea:	d009      	beq.n	800be00 <net_if_init+0xf8>
 800bdec:	f04f 0100 	mov.w	r1, #0
 800bdf0:	2302      	movs	r3, #2
 800bdf2:	f363 0107 	bfi	r1, r3, #0, #8
 800bdf6:	f365 118f 	bfi	r1, r5, #6, #10
 800bdfa:	4822      	ldr	r0, [pc, #136]	; (800be84 <net_if_init+0x17c>)
 800bdfc:	f007 ff01 	bl	8013c02 <log_0>
		ipv6_addresses[i].ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
 800be00:	4c21      	ldr	r4, [pc, #132]	; (800be88 <net_if_init+0x180>)
 800be02:	2640      	movs	r6, #64	; 0x40
		ipv6_addresses[i].ipv6.base_reachable_time = REACHABLE_TIME;
 800be04:	f247 5530 	movw	r5, #30000	; 0x7530
		ipv6_addresses[i].ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
 800be08:	f884 610d 	strb.w	r6, [r4, #269]	; 0x10d
		ipv6_addresses[i].ipv6.base_reachable_time = REACHABLE_TIME;
 800be0c:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
 * @param ipv6 IPv6 address configuration
 */
static inline void net_if_ipv6_set_reachable_time(struct net_if_ipv6 *ipv6)
{
#if defined(CONFIG_NET_NATIVE_IPV6)
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
 800be10:	4620      	mov	r0, r4
 800be12:	f00a f8ce 	bl	8015fb2 <net_if_ipv6_calc_reachable_time>
		ipv6_addresses[i].ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
 800be16:	f884 6221 	strb.w	r6, [r4, #545]	; 0x221
 800be1a:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
		ipv6_addresses[i].ipv6.base_reachable_time = REACHABLE_TIME;
 800be1e:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
 800be22:	f504 708a 	add.w	r0, r4, #276	; 0x114
 800be26:	f00a f8c4 	bl	8015fb2 <net_if_ipv6_calc_reachable_time>
	k_delayed_work_init(&router_timer, iface_router_expired);
 800be2a:	4918      	ldr	r1, [pc, #96]	; (800be8c <net_if_init+0x184>)
 800be2c:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 800be30:	4817      	ldr	r0, [pc, #92]	; (800be90 <net_if_init+0x188>)
 800be32:	f00c fe51 	bl	8018ad8 <k_delayed_work_init>
	list->head = NULL;
 800be36:	4b17      	ldr	r3, [pc, #92]	; (800be94 <net_if_init+0x18c>)
 800be38:	2200      	movs	r2, #0
	list->tail = NULL;
 800be3a:	e9c3 2200 	strd	r2, r2, [r3]
}
 800be3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be42:	bf00      	nop
 800be44:	080192c0 	.word	0x080192c0
 800be48:	08019248 	.word	0x08019248
 800be4c:	200091c0 	.word	0x200091c0
 800be50:	2000900c 	.word	0x2000900c
 800be54:	0801b855 	.word	0x0801b855
 800be58:	0800aca9 	.word	0x0800aca9
 800be5c:	200005ac 	.word	0x200005ac
 800be60:	2000056c 	.word	0x2000056c
 800be64:	0800ab85 	.word	0x0800ab85
 800be68:	20000868 	.word	0x20000868
 800be6c:	20000584 	.word	0x20000584
 800be70:	0800a7a9 	.word	0x0800a7a9
 800be74:	2000058c 	.word	0x2000058c
 800be78:	0800b3e5 	.word	0x0800b3e5
 800be7c:	20000804 	.word	0x20000804
 800be80:	0801b881 	.word	0x0801b881
 800be84:	0801b8be 	.word	0x0801b8be
 800be88:	200005cc 	.word	0x200005cc
 800be8c:	0800a9fd 	.word	0x0800a9fd
 800be90:	20000824 	.word	0x20000824
 800be94:	2000057c 	.word	0x2000057c
 800be98:	200091e0 	.word	0x200091e0
 800be9c:	0801b837 	.word	0x0801b837

0800bea0 <net_if_post_init>:

void net_if_post_init(void)
{
 800bea0:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800bea2:	4c08      	ldr	r4, [pc, #32]	; (800bec4 <net_if_post_init+0x24>)
 800bea4:	4d08      	ldr	r5, [pc, #32]	; (800bec8 <net_if_post_init+0x28>)
 800bea6:	42ac      	cmp	r4, r5
 800bea8:	d100      	bne.n	800beac <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
 800beaa:	bd38      	pop	{r3, r4, r5, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
 800beac:	6820      	ldr	r0, [r4, #0]
 800beae:	2103      	movs	r1, #3
 800beb0:	300c      	adds	r0, #12
 800beb2:	f009 ff31 	bl	8015d18 <atomic_test_bit>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
 800beb6:	b910      	cbnz	r0, 800bebe <net_if_post_init+0x1e>
			net_if_up(iface);
 800beb8:	4620      	mov	r0, r4
 800beba:	f7ff fead 	bl	800bc18 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
 800bebe:	3420      	adds	r4, #32
 800bec0:	e7f1      	b.n	800bea6 <net_if_post_init+0x6>
 800bec2:	bf00      	nop
 800bec4:	200091c0 	.word	0x200091c0
 800bec8:	200091e0 	.word	0x200091e0

0800becc <net_sprint_ll_addr_buf>:

char *net_sprint_ll_addr_buf(const u8_t *ll, u8_t ll_len,
			     char *buf, int buflen)
{
	u8_t i, len, blen;
	char *ptr = buf;
 800becc:	3902      	subs	r1, #2
 800bece:	b2c9      	uxtb	r1, r1
 800bed0:	2906      	cmp	r1, #6
{
 800bed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bed6:	4616      	mov	r6, r2

	switch (ll_len) {
 800bed8:	bf9a      	itte	ls
 800beda:	4a10      	ldrls	r2, [pc, #64]	; (800bf1c <net_sprint_ll_addr_buf+0x50>)
 800bedc:	5c52      	ldrbls	r2, [r2, r1]
{
 800bede:	2206      	movhi	r2, #6
	default:
		len = 6U;
		break;
	}

	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
 800bee0:	4605      	mov	r5, r0
 800bee2:	1887      	adds	r7, r0, r2
 800bee4:	b2dc      	uxtb	r4, r3
 800bee6:	4630      	mov	r0, r6
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
		*ptr++ = ':';
 800bee8:	f04f 083a 	mov.w	r8, #58	; 0x3a
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
 800beec:	b15c      	cbz	r4, 800bf06 <net_sprint_ll_addr_buf+0x3a>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
 800beee:	f815 1b01 	ldrb.w	r1, [r5], #1
 800bef2:	2301      	movs	r3, #1
 800bef4:	2241      	movs	r2, #65	; 0x41
 800bef6:	f00a f891 	bl	801601c <net_byte_to_hex>
		blen -= 3U;
 800befa:	3c03      	subs	r4, #3
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
 800befc:	42af      	cmp	r7, r5
		*ptr++ = ':';
 800befe:	f800 8b01 	strb.w	r8, [r0], #1
		blen -= 3U;
 800bf02:	b2e4      	uxtb	r4, r4
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
 800bf04:	d1f2      	bne.n	800beec <net_sprint_ll_addr_buf+0x20>
	}

	if (!(ptr - buf)) {
 800bf06:	42b0      	cmp	r0, r6
 800bf08:	f04f 0200 	mov.w	r2, #0
		return NULL;
	}

	*(ptr - 1) = '\0';
 800bf0c:	bf16      	itet	ne
 800bf0e:	f800 2c01 	strbne.w	r2, [r0, #-1]
		return NULL;
 800bf12:	4610      	moveq	r0, r2
	return buf;
 800bf14:	4630      	movne	r0, r6
}
 800bf16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf1a:	bf00      	nop
 800bf1c:	0801b9dd 	.word	0x0801b9dd

0800bf20 <z_impl_net_addr_ntop>:
	return buf - start;
}

char *z_impl_net_addr_ntop(sa_family_t family, const void *src,
			   char *dst, size_t size)
{
 800bf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct in6_addr *addr6;
	u16_t *w;
	u8_t i, bl, bh, longest = 1U;
	s8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
 800bf24:	2300      	movs	r3, #0
{
 800bf26:	b089      	sub	sp, #36	; 0x24
	char *ptr = dst;
	int len = -1;
	u16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
 800bf28:	2802      	cmp	r0, #2
{
 800bf2a:	4681      	mov	r9, r0
 800bf2c:	468a      	mov	sl, r1
 800bf2e:	4690      	mov	r8, r2
	unsigned char zeros[8] = { 0 };
 800bf30:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
 800bf34:	d13d      	bne.n	800bfb2 <z_impl_net_addr_ntop+0x92>
		addr6 = (struct in6_addr *)src;
		w = (u16_t *)addr6->s6_addr16;
 800bf36:	aa06      	add	r2, sp, #24
 800bf38:	9104      	str	r1, [sp, #16]
 800bf3a:	4610      	mov	r0, r2
{
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	e006      	b.n	800bf4e <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
 800bf40:	7804      	ldrb	r4, [r0, #0]
 800bf42:	3101      	adds	r1, #1
 800bf44:	3401      	adds	r4, #1
 800bf46:	7004      	strb	r4, [r0, #0]
			for (j = i; j < 8; j++) {
 800bf48:	b2cc      	uxtb	r4, r1
 800bf4a:	2c07      	cmp	r4, #7
 800bf4c:	d803      	bhi.n	800bf56 <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
 800bf4e:	f83a 4011 	ldrh.w	r4, [sl, r1, lsl #1]
 800bf52:	2c00      	cmp	r4, #0
 800bf54:	d0f4      	beq.n	800bf40 <z_impl_net_addr_ntop+0x20>
 800bf56:	3301      	adds	r3, #1
		for (i = 0U; i < 8; i++) {
 800bf58:	2b08      	cmp	r3, #8
 800bf5a:	f100 0001 	add.w	r0, r0, #1
 800bf5e:	d1ed      	bne.n	800bf3c <z_impl_net_addr_ntop+0x1c>
	s8_t pos = -1;
 800bf60:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1U;
 800bf64:	2701      	movs	r7, #1
			}
		}

		for (i = 0U; i < 8; i++) {
 800bf66:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
 800bf68:	f812 1b01 	ldrb.w	r1, [r2], #1
 800bf6c:	42b9      	cmp	r1, r7
				longest = zeros[i];
				pos = i;
 800bf6e:	bf88      	it	hi
 800bf70:	b25e      	sxtbhi	r6, r3
		for (i = 0U; i < 8; i++) {
 800bf72:	f103 0301 	add.w	r3, r3, #1
 800bf76:	b2db      	uxtb	r3, r3
				pos = i;
 800bf78:	bf88      	it	hi
 800bf7a:	460f      	movhi	r7, r1
		for (i = 0U; i < 8; i++) {
 800bf7c:	2b08      	cmp	r3, #8
 800bf7e:	d1f3      	bne.n	800bf68 <z_impl_net_addr_ntop+0x48>
		len = 8;
 800bf80:	9303      	str	r3, [sp, #12]
 800bf82:	2f01      	cmp	r7, #1
 800bf84:	f04f 033a 	mov.w	r3, #58	; 0x3a
 800bf88:	9302      	str	r3, [sp, #8]
 800bf8a:	bf08      	it	eq
 800bf8c:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
	bool needcolon = false;
 800bf90:	2200      	movs	r2, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
 800bf92:	4644      	mov	r4, r8
 800bf94:	4615      	mov	r5, r2
 800bf96:	9b03      	ldr	r3, [sp, #12]
 800bf98:	429d      	cmp	r5, r3
 800bf9a:	db1a      	blt.n	800bfd2 <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
 800bf9c:	4544      	cmp	r4, r8
 800bf9e:	d00a      	beq.n	800bfb6 <z_impl_net_addr_ntop+0x96>
		return NULL;
	}

	if (family == AF_INET) {
 800bfa0:	f1b9 0f01 	cmp.w	r9, #1
 800bfa4:	f04f 0300 	mov.w	r3, #0
		*(ptr - 1) = '\0';
 800bfa8:	bf0c      	ite	eq
 800bfaa:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
 800bfae:	7023      	strbne	r3, [r4, #0]
 800bfb0:	e003      	b.n	800bfba <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
 800bfb2:	2801      	cmp	r0, #1
 800bfb4:	d005      	beq.n	800bfc2 <z_impl_net_addr_ntop+0xa2>
		return NULL;
 800bfb6:	f04f 0800 	mov.w	r8, #0
	}

	return dst;
}
 800bfba:	4640      	mov	r0, r8
 800bfbc:	b009      	add	sp, #36	; 0x24
 800bfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
 800bfc2:	232e      	movs	r3, #46	; 0x2e
 800bfc4:	2204      	movs	r2, #4
 800bfc6:	e9cd 3202 	strd	r3, r2, [sp, #8]
	s8_t pos = -1;
 800bfca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1U;
 800bfce:	4607      	mov	r7, r0
 800bfd0:	e7de      	b.n	800bf90 <z_impl_net_addr_ntop+0x70>
		if (len == 4) {
 800bfd2:	9b03      	ldr	r3, [sp, #12]
 800bfd4:	2b04      	cmp	r3, #4
 800bfd6:	d134      	bne.n	800c042 <z_impl_net_addr_ntop+0x122>
			value = (u32_t)addr->s4_addr[i];
 800bfd8:	f81a 1005 	ldrb.w	r1, [sl, r5]
			if (value == 0U) {
 800bfdc:	b949      	cbnz	r1, 800bff2 <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
 800bfde:	4620      	mov	r0, r4
 800bfe0:	2330      	movs	r3, #48	; 0x30
 800bfe2:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
 800bfe6:	9b02      	ldr	r3, [sp, #8]
 800bfe8:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
 800bfea:	3501      	adds	r5, #1
 800bfec:	b2ed      	uxtb	r5, r5
 800bfee:	4604      	mov	r4, r0
 800bff0:	e7d1      	b.n	800bf96 <z_impl_net_addr_ntop+0x76>
			l = net_value_to_udec(ptr, value, 0);
 800bff2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800c0d0 <z_impl_net_addr_ntop+0x1b0>
 800bff6:	9401      	str	r4, [sp, #4]
 800bff8:	2009      	movs	r0, #9
 800bffa:	f04f 0b00 	mov.w	fp, #0
		temp = value / divisor;
 800bffe:	fbb1 fefc 	udiv	lr, r1, ip
		if ((precision > i) || (temp != 0)) {
 800c002:	4583      	cmp	fp, r0
		value = value % divisor;
 800c004:	fb0c 131e 	mls	r3, ip, lr, r1
 800c008:	9305      	str	r3, [sp, #20]
		if ((precision > i) || (temp != 0)) {
 800c00a:	dc01      	bgt.n	800c010 <z_impl_net_addr_ntop+0xf0>
 800c00c:	4561      	cmp	r1, ip
 800c00e:	d306      	bcc.n	800c01e <z_impl_net_addr_ntop+0xfe>
			*buf++ = (char) (temp + '0');
 800c010:	9b01      	ldr	r3, [sp, #4]
 800c012:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800c016:	f803 eb01 	strb.w	lr, [r3], #1
 800c01a:	4683      	mov	fp, r0
 800c01c:	9301      	str	r3, [sp, #4]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
 800c01e:	3801      	subs	r0, #1
 800c020:	230a      	movs	r3, #10
 800c022:	fbbc fcf3 	udiv	ip, ip, r3
 800c026:	1c43      	adds	r3, r0, #1
		value = value % divisor;
 800c028:	9905      	ldr	r1, [sp, #20]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
 800c02a:	d1e8      	bne.n	800bffe <z_impl_net_addr_ntop+0xde>
	*buf = 0;
 800c02c:	9901      	ldr	r1, [sp, #4]
 800c02e:	f04f 0300 	mov.w	r3, #0
 800c032:	700b      	strb	r3, [r1, #0]
	return buf - start;
 800c034:	1b0b      	subs	r3, r1, r4
			ptr += l;
 800c036:	b2db      	uxtb	r3, r3
 800c038:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
 800c03a:	9902      	ldr	r1, [sp, #8]
 800c03c:	54e1      	strb	r1, [r4, r3]
 800c03e:	3001      	adds	r0, #1
			continue;
 800c040:	e7d3      	b.n	800bfea <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
 800c042:	42ae      	cmp	r6, r5
 800c044:	d10d      	bne.n	800c062 <z_impl_net_addr_ntop+0x142>
			if (needcolon || i == 0U) {
 800c046:	b902      	cbnz	r2, 800c04a <z_impl_net_addr_ntop+0x12a>
 800c048:	b916      	cbnz	r6, 800c050 <z_impl_net_addr_ntop+0x130>
				*ptr++ = ':';
 800c04a:	233a      	movs	r3, #58	; 0x3a
 800c04c:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
 800c050:	4620      	mov	r0, r4
 800c052:	233a      	movs	r3, #58	; 0x3a
 800c054:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
 800c058:	1e7b      	subs	r3, r7, #1
 800c05a:	441d      	add	r5, r3
 800c05c:	b2ed      	uxtb	r5, r5
			needcolon = false;
 800c05e:	2200      	movs	r2, #0
			continue;
 800c060:	e7c3      	b.n	800bfea <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
 800c062:	b112      	cbz	r2, 800c06a <z_impl_net_addr_ntop+0x14a>
			*ptr++ = ':';
 800c064:	233a      	movs	r3, #58	; 0x3a
 800c066:	f804 3b01 	strb.w	r3, [r4], #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
 800c06a:	9b04      	ldr	r3, [sp, #16]
 800c06c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800c070:	021a      	lsls	r2, r3, #8
 800c072:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
 800c076:	b212      	sxth	r2, r2
		bh = value >> 8;
 800c078:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
 800c07c:	fa5f fb82 	uxtb.w	fp, r2
		if (bh) {
 800c080:	b1b3      	cbz	r3, 800c0b0 <z_impl_net_addr_ntop+0x190>
			if (bh > 0x0f) {
 800c082:	2b0f      	cmp	r3, #15
		bh = value >> 8;
 800c084:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
 800c086:	d90b      	bls.n	800c0a0 <z_impl_net_addr_ntop+0x180>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
 800c088:	2300      	movs	r3, #0
 800c08a:	2261      	movs	r2, #97	; 0x61
 800c08c:	4620      	mov	r0, r4
 800c08e:	f009 ffc5 	bl	801601c <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
 800c092:	2301      	movs	r3, #1
 800c094:	2261      	movs	r2, #97	; 0x61
 800c096:	4659      	mov	r1, fp
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
 800c098:	f009 ffc0 	bl	801601c <net_byte_to_hex>
		needcolon = true;
 800c09c:	2201      	movs	r2, #1
 800c09e:	e7a4      	b.n	800bfea <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
 800c0a0:	b25b      	sxtb	r3, r3
 800c0a2:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
 800c0a4:	bf94      	ite	ls
 800c0a6:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
 800c0a8:	3357      	addhi	r3, #87	; 0x57
 800c0aa:	1c60      	adds	r0, r4, #1
 800c0ac:	7023      	strb	r3, [r4, #0]
 800c0ae:	e7f0      	b.n	800c092 <z_impl_net_addr_ntop+0x172>
		} else if (bl > 0x0f) {
 800c0b0:	f1bb 0f0f 	cmp.w	fp, #15
 800c0b4:	d903      	bls.n	800c0be <z_impl_net_addr_ntop+0x19e>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
 800c0b6:	2261      	movs	r2, #97	; 0x61
 800c0b8:	4659      	mov	r1, fp
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	e7ec      	b.n	800c098 <z_impl_net_addr_ntop+0x178>
			if (bl < 10) {
 800c0be:	b252      	sxtb	r2, r2
 800c0c0:	f1bb 0f09 	cmp.w	fp, #9
				*ptr++ = (char)(bl + '0');
 800c0c4:	bf94      	ite	ls
 800c0c6:	3230      	addls	r2, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
 800c0c8:	3257      	addhi	r2, #87	; 0x57
 800c0ca:	1c60      	adds	r0, r4, #1
 800c0cc:	7022      	strb	r2, [r4, #0]
 800c0ce:	e7e5      	b.n	800c09c <z_impl_net_addr_ntop+0x17c>
 800c0d0:	3b9aca00 	.word	0x3b9aca00

0800c0d4 <net_sprint_addr>:
	char *s = buf[++i % NBUFS];
 800c0d4:	4b09      	ldr	r3, [pc, #36]	; (800c0fc <net_sprint_addr+0x28>)
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	3201      	adds	r2, #1
{
 800c0da:	b410      	push	{r4}
	char *s = buf[++i % NBUFS];
 800c0dc:	601a      	str	r2, [r3, #0]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
 800c0de:	4c08      	ldr	r4, [pc, #32]	; (800c100 <net_sprint_addr+0x2c>)
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	fb92 f3f3 	sdiv	r3, r2, r3
 800c0e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c0ea:	1ad2      	subs	r2, r2, r3
 800c0ec:	2328      	movs	r3, #40	; 0x28
 800c0ee:	fb03 4202 	mla	r2, r3, r2, r4
}
 800c0f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0f6:	f7ff bf13 	b.w	800bf20 <z_impl_net_addr_ntop>
 800c0fa:	bf00      	nop
 800c0fc:	20000888 	.word	0x20000888
 800c100:	20001af2 	.word	0x20001af2

0800c104 <net_ipv6_unspecified_address>:
const struct in6_addr in6addr_loopback = IN6ADDR_LOOPBACK_INIT;

const struct in6_addr *net_ipv6_unspecified_address(void)
{
	return &in6addr_any;
}
 800c104:	4800      	ldr	r0, [pc, #0]	; (800c108 <net_ipv6_unspecified_address+0x4>)
 800c106:	4770      	bx	lr
 800c108:	08019c14 	.word	0x08019c14

0800c10c <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
 800c10c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (out_event < 0 || !events[out_event].event) {
 800c110:	4f41      	ldr	r7, [pc, #260]	; (800c218 <mgmt_thread+0x10c>)
	struct mgmt_event_entry *mgmt_event;

	while (1) {
		k_sem_take(&network_event, K_FOREVER);
 800c112:	4842      	ldr	r0, [pc, #264]	; (800c21c <mgmt_thread+0x110>)
 800c114:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c118:	f00a f8d9 	bl	80162ce <k_sem_take>
		k_sem_take(&net_mgmt_lock, K_FOREVER);
 800c11c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c120:	483f      	ldr	r0, [pc, #252]	; (800c220 <mgmt_thread+0x114>)
 800c122:	f00a f8d4 	bl	80162ce <k_sem_take>
	if (out_event < 0 || !events[out_event].event) {
 800c126:	4b3f      	ldr	r3, [pc, #252]	; (800c224 <mgmt_thread+0x118>)
 800c128:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c12c:	2d00      	cmp	r5, #0
 800c12e:	db21      	blt.n	800c174 <mgmt_thread+0x68>
 800c130:	f857 2035 	ldr.w	r2, [r7, r5, lsl #3]
 800c134:	b1f2      	cbz	r2, 800c174 <mgmt_thread+0x68>
	if (o_idx == in_event) {
 800c136:	493c      	ldr	r1, [pc, #240]	; (800c228 <mgmt_thread+0x11c>)
 800c138:	f9b1 0000 	ldrsh.w	r0, [r1]
	out_event++;
 800c13c:	1c6a      	adds	r2, r5, #1
 800c13e:	b212      	sxth	r2, r2
	if (o_idx == in_event) {
 800c140:	42a8      	cmp	r0, r5
	out_event++;
 800c142:	801a      	strh	r2, [r3, #0]
	if (o_idx == in_event) {
 800c144:	d112      	bne.n	800c16c <mgmt_thread+0x60>
		in_event = -1;
 800c146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c14a:	800a      	strh	r2, [r1, #0]
		out_event = 0;
 800c14c:	801a      	strh	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 800c14e:	4e37      	ldr	r6, [pc, #220]	; (800c22c <mgmt_thread+0x120>)
 800c150:	6834      	ldr	r4, [r6, #0]
 800c152:	b9cc      	cbnz	r4, 800c188 <mgmt_thread+0x7c>
	mgmt_event->event = 0U;
 800c154:	2300      	movs	r3, #0
 800c156:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
	mgmt_event->iface = NULL;
 800c15a:	eb07 05c5 	add.w	r5, r7, r5, lsl #3

		mgmt_run_callbacks(mgmt_event);

		mgmt_clean_event(mgmt_event);

		k_sem_give(&net_mgmt_lock);
 800c15e:	4830      	ldr	r0, [pc, #192]	; (800c220 <mgmt_thread+0x114>)
	mgmt_event->iface = NULL;
 800c160:	606b      	str	r3, [r5, #4]
		k_sem_give(&net_mgmt_lock);
 800c162:	f00a f8b6 	bl	80162d2 <k_sem_give>
	z_impl_k_yield();
 800c166:	f006 fb45 	bl	80127f4 <z_impl_k_yield>
 800c16a:	e7d2      	b.n	800c112 <mgmt_thread+0x6>
	} else if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
 800c16c:	2a02      	cmp	r2, #2
 800c16e:	d1ee      	bne.n	800c14e <mgmt_thread+0x42>
		out_event = 0;
 800c170:	2200      	movs	r2, #0
 800c172:	e7eb      	b.n	800c14c <mgmt_thread+0x40>
	z_impl_k_sem_init(sem, initial_count, limit);
 800c174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c178:	2100      	movs	r1, #0
 800c17a:	4828      	ldr	r0, [pc, #160]	; (800c21c <mgmt_thread+0x110>)
 800c17c:	f00c fc05 	bl	801898a <z_impl_k_sem_init>
			k_sem_give(&net_mgmt_lock);
 800c180:	4827      	ldr	r0, [pc, #156]	; (800c220 <mgmt_thread+0x114>)
 800c182:	f00a f8a6 	bl	80162d2 <k_sem_give>
			continue;
 800c186:	e7c4      	b.n	800c112 <mgmt_thread+0x6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800c188:	f04f 0b00 	mov.w	fp, #0
 800c18c:	f8d4 8000 	ldr.w	r8, [r4]
	return node->next;
 800c190:	eb07 09c5 	add.w	r9, r7, r5, lsl #3
	parent->next = child;
 800c194:	46da      	mov	sl, fp
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
 800c196:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
 800c19a:	68a0      	ldr	r0, [r4, #8]
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
 800c19c:	ea81 0200 	eor.w	r2, r1, r0
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
 800c1a0:	ea81 0300 	eor.w	r3, r1, r0
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
 800c1a4:	f3c2 7201 	ubfx	r2, r2, #28, #2
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
 800c1a8:	f3c3 430a 	ubfx	r3, r3, #16, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	d120      	bne.n	800c1f2 <mgmt_thread+0xe6>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
 800c1b0:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
 800c1b2:	b12b      	cbz	r3, 800c1c0 <mgmt_thread+0xb4>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
 800c1b4:	b283      	uxth	r3, r0
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
 800c1b6:	b11b      	cbz	r3, 800c1c0 <mgmt_thread+0xb4>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
 800c1b8:	ea01 0300 	and.w	r3, r1, r0
 800c1bc:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
 800c1be:	b1c3      	cbz	r3, 800c1f2 <mgmt_thread+0xe6>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
 800c1c0:	0100      	lsls	r0, r0, #4
 800c1c2:	6863      	ldr	r3, [r4, #4]
 800c1c4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c1c8:	d522      	bpl.n	800c210 <mgmt_thread+0x104>
			if (sync_data->iface &&
 800c1ca:	6998      	ldr	r0, [r3, #24]
 800c1cc:	b108      	cbz	r0, 800c1d2 <mgmt_thread+0xc6>
 800c1ce:	4290      	cmp	r0, r2
 800c1d0:	d10f      	bne.n	800c1f2 <mgmt_thread+0xe6>
			cb->raised_event = mgmt_event->event;
 800c1d2:	60a1      	str	r1, [r4, #8]
			sync_data->iface = mgmt_event->iface;
 800c1d4:	619a      	str	r2, [r3, #24]
Z_GENLIST_REMOVE(slist, snode)
 800c1d6:	6822      	ldr	r2, [r4, #0]
 800c1d8:	f1bb 0f00 	cmp.w	fp, #0
 800c1dc:	d110      	bne.n	800c200 <mgmt_thread+0xf4>
 800c1de:	6871      	ldr	r1, [r6, #4]
	list->head = node;
 800c1e0:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 800c1e2:	428c      	cmp	r4, r1
 800c1e4:	d100      	bne.n	800c1e8 <mgmt_thread+0xdc>
	list->tail = node;
 800c1e6:	6072      	str	r2, [r6, #4]
	parent->next = child;
 800c1e8:	f8c4 a000 	str.w	sl, [r4]
			k_sem_give(cb->sync_call);
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f00a f870 	bl	80162d2 <k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 800c1f2:	f1b8 0f00 	cmp.w	r8, #0
 800c1f6:	d0ad      	beq.n	800c154 <mgmt_thread+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800c1f8:	4644      	mov	r4, r8
 800c1fa:	f8d8 8000 	ldr.w	r8, [r8]
 800c1fe:	e7ca      	b.n	800c196 <mgmt_thread+0x8a>
	parent->next = child;
 800c200:	f8cb 2000 	str.w	r2, [fp]
Z_GENLIST_REMOVE(slist, snode)
 800c204:	6872      	ldr	r2, [r6, #4]
 800c206:	4294      	cmp	r4, r2
	list->tail = node;
 800c208:	bf08      	it	eq
 800c20a:	f8c6 b004 	streq.w	fp, [r6, #4]
 800c20e:	e7eb      	b.n	800c1e8 <mgmt_thread+0xdc>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
 800c210:	4620      	mov	r0, r4
 800c212:	4798      	blx	r3
			prev = &cb->node;
 800c214:	46a3      	mov	fp, r4
 800c216:	e7ec      	b.n	800c1f2 <mgmt_thread+0xe6>
 800c218:	20000894 	.word	0x20000894
 800c21c:	200090d4 	.word	0x200090d4
 800c220:	200090bc 	.word	0x200090bc
 800c224:	200019ac 	.word	0x200019ac
 800c228:	200019aa 	.word	0x200019aa
 800c22c:	2000088c 	.word	0x2000088c

0800c230 <net_mgmt_add_event_callback>:

	return ret;
}

void net_mgmt_add_event_callback(struct net_mgmt_event_callback *cb)
{
 800c230:	b510      	push	{r4, lr}
	NET_DBG("Adding event callback %p", cb);

	k_sem_take(&net_mgmt_lock, K_FOREVER);
 800c232:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 800c236:	4604      	mov	r4, r0
	k_sem_take(&net_mgmt_lock, K_FOREVER);
 800c238:	4809      	ldr	r0, [pc, #36]	; (800c260 <net_mgmt_add_event_callback+0x30>)
 800c23a:	f00a f848 	bl	80162ce <k_sem_take>
Z_GENLIST_PREPEND(slist, snode)
 800c23e:	4b09      	ldr	r3, [pc, #36]	; (800c264 <net_mgmt_add_event_callback+0x34>)
 800c240:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 800c242:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
 800c244:	685a      	ldr	r2, [r3, #4]
	list->head = node;
 800c246:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
 800c248:	b902      	cbnz	r2, 800c24c <net_mgmt_add_event_callback+0x1c>
	list->tail = node;
 800c24a:	605c      	str	r4, [r3, #4]
	global_event_mask |= event_mask;
 800c24c:	4a06      	ldr	r2, [pc, #24]	; (800c268 <net_mgmt_add_event_callback+0x38>)
 800c24e:	68a3      	ldr	r3, [r4, #8]
 800c250:	6811      	ldr	r1, [r2, #0]

	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);

	k_sem_give(&net_mgmt_lock);
 800c252:	4803      	ldr	r0, [pc, #12]	; (800c260 <net_mgmt_add_event_callback+0x30>)
	global_event_mask |= event_mask;
 800c254:	430b      	orrs	r3, r1
}
 800c256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	global_event_mask |= event_mask;
 800c25a:	6013      	str	r3, [r2, #0]
	k_sem_give(&net_mgmt_lock);
 800c25c:	f00a b839 	b.w	80162d2 <k_sem_give>
 800c260:	200090bc 	.word	0x200090bc
 800c264:	2000088c 	.word	0x2000088c
 800c268:	200008a4 	.word	0x200008a4

0800c26c <net_mgmt_del_event_callback>:

void net_mgmt_del_event_callback(struct net_mgmt_event_callback *cb)
{
 800c26c:	b510      	push	{r4, lr}
	NET_DBG("Deleting event callback %p", cb);

	k_sem_take(&net_mgmt_lock, K_FOREVER);
 800c26e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 800c272:	4604      	mov	r4, r0
	k_sem_take(&net_mgmt_lock, K_FOREVER);
 800c274:	4816      	ldr	r0, [pc, #88]	; (800c2d0 <net_mgmt_del_event_callback+0x64>)
 800c276:	f00a f82a 	bl	80162ce <k_sem_take>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800c27a:	4b16      	ldr	r3, [pc, #88]	; (800c2d4 <net_mgmt_del_event_callback+0x68>)
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	2100      	movs	r1, #0
 800c280:	b152      	cbz	r2, 800c298 <net_mgmt_del_event_callback+0x2c>
 800c282:	4294      	cmp	r4, r2
 800c284:	d11b      	bne.n	800c2be <net_mgmt_del_event_callback+0x52>
Z_GENLIST_REMOVE(slist, snode)
 800c286:	6822      	ldr	r2, [r4, #0]
 800c288:	b999      	cbnz	r1, 800c2b2 <net_mgmt_del_event_callback+0x46>
 800c28a:	6859      	ldr	r1, [r3, #4]
	list->head = node;
 800c28c:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
 800c28e:	428c      	cmp	r4, r1
 800c290:	d100      	bne.n	800c294 <net_mgmt_del_event_callback+0x28>
	list->tail = node;
 800c292:	605a      	str	r2, [r3, #4]
	parent->next = child;
 800c294:	2200      	movs	r2, #0
 800c296:	6022      	str	r2, [r4, #0]
	global_event_mask = 0U;
 800c298:	490f      	ldr	r1, [pc, #60]	; (800c2d8 <net_mgmt_del_event_callback+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 800c29a:	681c      	ldr	r4, [r3, #0]
	global_event_mask = 0U;
 800c29c:	2200      	movs	r2, #0
 800c29e:	600a      	str	r2, [r1, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 800c2a0:	b18c      	cbz	r4, 800c2c6 <net_mgmt_del_event_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800c2a2:	6820      	ldr	r0, [r4, #0]
 800c2a4:	4613      	mov	r3, r2
	global_event_mask |= event_mask;
 800c2a6:	68a2      	ldr	r2, [r4, #8]
 800c2a8:	4313      	orrs	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 800c2aa:	b158      	cbz	r0, 800c2c4 <net_mgmt_del_event_callback+0x58>
	global_event_mask |= event_mask;
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	6800      	ldr	r0, [r0, #0]
 800c2b0:	e7f9      	b.n	800c2a6 <net_mgmt_del_event_callback+0x3a>
	parent->next = child;
 800c2b2:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 800c2b4:	685a      	ldr	r2, [r3, #4]
 800c2b6:	4294      	cmp	r4, r2
	list->tail = node;
 800c2b8:	bf08      	it	eq
 800c2ba:	6059      	streq	r1, [r3, #4]
 800c2bc:	e7ea      	b.n	800c294 <net_mgmt_del_event_callback+0x28>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800c2be:	4611      	mov	r1, r2
 800c2c0:	6812      	ldr	r2, [r2, #0]
 800c2c2:	e7dd      	b.n	800c280 <net_mgmt_del_event_callback+0x14>
 800c2c4:	600b      	str	r3, [r1, #0]

	sys_slist_find_and_remove(&event_callbacks, &cb->node);

	mgmt_rebuild_global_event_mask();

	k_sem_give(&net_mgmt_lock);
 800c2c6:	4802      	ldr	r0, [pc, #8]	; (800c2d0 <net_mgmt_del_event_callback+0x64>)
}
 800c2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_sem_give(&net_mgmt_lock);
 800c2cc:	f00a b801 	b.w	80162d2 <k_sem_give>
 800c2d0:	200090bc 	.word	0x200090bc
 800c2d4:	2000088c 	.word	0x2000088c
 800c2d8:	200008a4 	.word	0x200008a4

0800c2dc <net_mgmt_event_notify_with_info>:
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
 800c2dc:	4b21      	ldr	r3, [pc, #132]	; (800c364 <net_mgmt_event_notify_with_info+0x88>)
 800c2de:	681b      	ldr	r3, [r3, #0]

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
 800c2e0:	b570      	push	{r4, r5, r6, lr}
	return (((NET_MGMT_GET_LAYER(mgmt_event) &
 800c2e2:	0f02      	lsrs	r2, r0, #28
{
 800c2e4:	460d      	mov	r5, r1
		((NET_MGMT_GET_LAYER_CODE(mgmt_event) &
 800c2e6:	0c01      	lsrs	r1, r0, #16
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
 800c2e8:	ea22 7213 	bic.w	r2, r2, r3, lsr #28
		  NET_MGMT_GET_LAYER_CODE(global_event_mask)) ==
 800c2ec:	ea21 4113 	bic.w	r1, r1, r3, lsr #16
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
 800c2f0:	f002 0203 	and.w	r2, r2, #3
		  NET_MGMT_GET_LAYER_CODE(global_event_mask)) ==
 800c2f4:	f3c1 010a 	ubfx	r1, r1, #0, #11
		  NET_MGMT_GET_COMMAND(global_event_mask)) ==
 800c2f8:	ea20 0303 	bic.w	r3, r0, r3
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
 800c2fc:	430a      	orrs	r2, r1
		  NET_MGMT_GET_COMMAND(global_event_mask)) ==
 800c2fe:	b29b      	uxth	r3, r3
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
 800c300:	4313      	orrs	r3, r2
{
 800c302:	4604      	mov	r4, r0
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
 800c304:	d12c      	bne.n	800c360 <net_mgmt_event_notify_with_info+0x84>
	k_sem_take(&net_mgmt_lock, K_FOREVER);
 800c306:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c30a:	4817      	ldr	r0, [pc, #92]	; (800c368 <net_mgmt_event_notify_with_info+0x8c>)
	events[i_idx].event = mgmt_event;
 800c30c:	4e17      	ldr	r6, [pc, #92]	; (800c36c <net_mgmt_event_notify_with_info+0x90>)
	k_sem_take(&net_mgmt_lock, K_FOREVER);
 800c30e:	f009 ffde 	bl	80162ce <k_sem_take>
	i_idx = in_event + 1;
 800c312:	4917      	ldr	r1, [pc, #92]	; (800c370 <net_mgmt_event_notify_with_info+0x94>)
	if (i_idx == out_event) {
 800c314:	4817      	ldr	r0, [pc, #92]	; (800c374 <net_mgmt_event_notify_with_info+0x98>)
	i_idx = in_event + 1;
 800c316:	880b      	ldrh	r3, [r1, #0]
 800c318:	3301      	adds	r3, #1
 800c31a:	b21b      	sxth	r3, r3
		i_idx = 0;
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	bf08      	it	eq
 800c320:	2300      	moveq	r3, #0
	events[i_idx].iface = iface;
 800c322:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
	events[i_idx].event = mgmt_event;
 800c326:	f846 4033 	str.w	r4, [r6, r3, lsl #3]
	events[i_idx].iface = iface;
 800c32a:	6055      	str	r5, [r2, #4]
	if (i_idx == out_event) {
 800c32c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c330:	4293      	cmp	r3, r2
 800c332:	d111      	bne.n	800c358 <net_mgmt_event_notify_with_info+0x7c>
		u16_t o_idx = out_event + 1;
 800c334:	1c5a      	adds	r2, r3, #1
 800c336:	b292      	uxth	r2, r2
			o_idx = 0U;
 800c338:	2a02      	cmp	r2, #2
 800c33a:	bf08      	it	eq
 800c33c:	2200      	moveq	r2, #0
		if (events[o_idx].event) {
 800c33e:	f856 4032 	ldr.w	r4, [r6, r2, lsl #3]
 800c342:	b104      	cbz	r4, 800c346 <net_mgmt_event_notify_with_info+0x6a>
			out_event = o_idx;
 800c344:	8002      	strh	r2, [r0, #0]
	k_sem_give(&net_mgmt_lock);
 800c346:	4808      	ldr	r0, [pc, #32]	; (800c368 <net_mgmt_event_notify_with_info+0x8c>)
	in_event = i_idx;
 800c348:	800b      	strh	r3, [r1, #0]
	k_sem_give(&net_mgmt_lock);
 800c34a:	f009 ffc2 	bl	80162d2 <k_sem_give>
			NET_MGMT_GET_LAYER(mgmt_event),
			NET_MGMT_GET_LAYER_CODE(mgmt_event),
			NET_MGMT_GET_COMMAND(mgmt_event));

		mgmt_push_event(mgmt_event, iface, info, length);
		k_sem_give(&network_event);
 800c34e:	480a      	ldr	r0, [pc, #40]	; (800c378 <net_mgmt_event_notify_with_info+0x9c>)
	}
}
 800c350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_sem_give(&network_event);
 800c354:	f009 bfbd 	b.w	80162d2 <k_sem_give>
	} else if (out_event < 0) {
 800c358:	2a00      	cmp	r2, #0
		out_event = i_idx;
 800c35a:	bfb8      	it	lt
 800c35c:	8003      	strhlt	r3, [r0, #0]
 800c35e:	e7f2      	b.n	800c346 <net_mgmt_event_notify_with_info+0x6a>
}
 800c360:	bd70      	pop	{r4, r5, r6, pc}
 800c362:	bf00      	nop
 800c364:	200008a4 	.word	0x200008a4
 800c368:	200090bc 	.word	0x200090bc
 800c36c:	20000894 	.word	0x20000894
 800c370:	200019aa 	.word	0x200019aa
 800c374:	200019ac 	.word	0x200019ac
 800c378:	200090d4 	.word	0x200090d4

0800c37c <net_mgmt_event_init>:
	list->head = NULL;
 800c37c:	4b14      	ldr	r3, [pc, #80]	; (800c3d0 <net_mgmt_event_init+0x54>)
void net_mgmt_event_init(void)
{
	sys_slist_init(&event_callbacks);
	global_event_mask = 0U;

	in_event = -1;
 800c37e:	4a15      	ldr	r2, [pc, #84]	; (800c3d4 <net_mgmt_event_init+0x58>)
	out_event = -1;

	(void)memset(events, 0, CONFIG_NET_MGMT_EVENT_QUEUE_SIZE *
 800c380:	4815      	ldr	r0, [pc, #84]	; (800c3d8 <net_mgmt_event_init+0x5c>)
{
 800c382:	b530      	push	{r4, r5, lr}
 800c384:	2400      	movs	r4, #0
	list->tail = NULL;
 800c386:	e9c3 4400 	strd	r4, r4, [r3]
	global_event_mask = 0U;
 800c38a:	4b14      	ldr	r3, [pc, #80]	; (800c3dc <net_mgmt_event_init+0x60>)
 800c38c:	601c      	str	r4, [r3, #0]
	in_event = -1;
 800c38e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c392:	8013      	strh	r3, [r2, #0]
	out_event = -1;
 800c394:	4a12      	ldr	r2, [pc, #72]	; (800c3e0 <net_mgmt_event_init+0x64>)
{
 800c396:	b087      	sub	sp, #28
	out_event = -1;
 800c398:	8013      	strh	r3, [r2, #0]
	(void)memset(events, 0, CONFIG_NET_MGMT_EVENT_QUEUE_SIZE *
 800c39a:	4621      	mov	r1, r4
 800c39c:	2210      	movs	r2, #16
 800c39e:	f7f8 fae6 	bl	800496e <memset>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800c3a2:	4d10      	ldr	r5, [pc, #64]	; (800c3e4 <net_mgmt_event_init+0x68>)
 800c3a4:	4910      	ldr	r1, [pc, #64]	; (800c3e8 <net_mgmt_event_init+0x6c>)
 800c3a6:	f06f 0308 	mvn.w	r3, #8
 800c3aa:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c3ae:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800c3b2:	e9cd 4400 	strd	r4, r4, [sp]
 800c3b6:	4b0d      	ldr	r3, [pc, #52]	; (800c3ec <net_mgmt_event_init+0x70>)
 800c3b8:	f44f 7240 	mov.w	r2, #768	; 0x300
 800c3bc:	4628      	mov	r0, r5
 800c3be:	f006 fb45 	bl	8012a4c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
 800c3c2:	490b      	ldr	r1, [pc, #44]	; (800c3f0 <net_mgmt_event_init+0x74>)
 800c3c4:	4628      	mov	r0, r5
	k_thread_name_set(&mgmt_thread_data, "net_mgmt");

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
 800c3c6:	b007      	add	sp, #28
 800c3c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3cc:	f00c baf5 	b.w	80189ba <z_impl_k_thread_name_set>
 800c3d0:	2000088c 	.word	0x2000088c
 800c3d4:	200019aa 	.word	0x200019aa
 800c3d8:	20000894 	.word	0x20000894
 800c3dc:	200008a4 	.word	0x200008a4
 800c3e0:	200019ac 	.word	0x200019ac
 800c3e4:	200008a8 	.word	0x200008a8
 800c3e8:	20002848 	.word	0x20002848
 800c3ec:	0800c10d 	.word	0x0800c10d
 800c3f0:	0801ba1a 	.word	0x0801ba1a

0800c3f4 <check_used_port>:
#if defined(CONFIG_NET_UDP) || defined(CONFIG_NET_TCP)
static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
 800c3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3f8:	4c12      	ldr	r4, [pc, #72]	; (800c444 <check_used_port+0x50>)
 800c3fa:	4688      	mov	r8, r1
 800c3fc:	4615      	mov	r5, r2
 800c3fe:	f504 7746 	add.w	r7, r4, #792	; 0x318
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
 800c402:	4681      	mov	r9, r0
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
		    local_addr->sa_family == AF_INET6) {
			if (net_ipv6_addr_cmp(
				    net_sin6_ptr(&contexts[i].local)->
							     sin6_addr,
				    &((struct sockaddr_in6 *)
 800c404:	1d16      	adds	r6, r2, #4
		if (!net_context_is_used(&contexts[i])) {
 800c406:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 800c40a:	07db      	lsls	r3, r3, #31
 800c40c:	d405      	bmi.n	800c41a <check_used_port+0x26>
 800c40e:	3484      	adds	r4, #132	; 0x84
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 800c410:	42a7      	cmp	r7, r4
 800c412:	d1f8      	bne.n	800c406 <check_used_port+0x12>
				return -EEXIST;
			}
		}
	}

	return 0;
 800c414:	2000      	movs	r0, #0
}
 800c416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
 800c41a:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800c41e:	454b      	cmp	r3, r9
 800c420:	d1f5      	bne.n	800c40e <check_used_port+0x1a>
 800c422:	8be3      	ldrh	r3, [r4, #30]
 800c424:	4543      	cmp	r3, r8
 800c426:	d1f2      	bne.n	800c40e <check_used_port+0x1a>
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800c428:	882b      	ldrh	r3, [r5, #0]
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d1ef      	bne.n	800c40e <check_used_port+0x1a>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 800c42e:	2210      	movs	r2, #16
 800c430:	4631      	mov	r1, r6
 800c432:	6a20      	ldr	r0, [r4, #32]
 800c434:	f7f8 fa65 	bl	8004902 <memcmp>
			if (net_ipv6_addr_cmp(
 800c438:	2800      	cmp	r0, #0
 800c43a:	d1e8      	bne.n	800c40e <check_used_port+0x1a>
				return -EEXIST;
 800c43c:	f06f 0010 	mvn.w	r0, #16
 800c440:	e7e9      	b.n	800c416 <check_used_port+0x22>
 800c442:	bf00      	nop
 800c444:	2000090c 	.word	0x2000090c

0800c448 <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
 800c448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u16_t local_port;

	do {
		local_port = sys_rand32_get() | 0x8000;
 800c44a:	4f09      	ldr	r7, [pc, #36]	; (800c470 <find_available_port+0x28>)
{
 800c44c:	4605      	mov	r5, r0
 800c44e:	460e      	mov	r6, r1
		local_port = sys_rand32_get() | 0x8000;
 800c450:	f003 fee2 	bl	8010218 <sys_rand32_get>
 800c454:	ea40 0407 	orr.w	r4, r0, r7
 800c458:	ba64      	rev16	r4, r4
 800c45a:	b2a4      	uxth	r4, r4
		if (local_port <= 1023U) {
			/* 0 - 1023 ports are reserved */
			continue;
		}
	} while (check_used_port(net_context_get_ip_proto(context),
 800c45c:	4632      	mov	r2, r6
 800c45e:	4621      	mov	r1, r4
 800c460:	f895 007c 	ldrb.w	r0, [r5, #124]	; 0x7c
 800c464:	f7ff ffc6 	bl	800c3f4 <check_used_port>
				 htons(local_port), addr) == -EEXIST);
 800c468:	3011      	adds	r0, #17
 800c46a:	d0f1      	beq.n	800c450 <find_available_port+0x8>

	return htons(local_port);
}
 800c46c:	4620      	mov	r0, r4
 800c46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c470:	ffff8000 	.word	0xffff8000

0800c474 <net_context_packet_received>:
enum net_verdict net_context_packet_received(struct net_conn *conn,
					     struct net_pkt *pkt,
					     union net_ip_header *ip_hdr,
					     union net_proto_header *proto_hdr,
					     void *user_data)
{
 800c474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c478:	4c24      	ldr	r4, [pc, #144]	; (800c50c <net_context_packet_received+0x98>)
 800c47a:	460f      	mov	r7, r1
 800c47c:	b085      	sub	sp, #20
 800c47e:	4693      	mov	fp, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 800c480:	2100      	movs	r1, #0
 800c482:	46a1      	mov	r9, r4
 800c484:	2584      	movs	r5, #132	; 0x84
		if (!net_context_is_used(&contexts[i])) {
 800c486:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
 800c48a:	07d2      	lsls	r2, r2, #31
 800c48c:	fb05 f601 	mul.w	r6, r5, r1
 800c490:	d502      	bpl.n	800c498 <net_context_packet_received+0x24>
		if (contexts[i].conn_handler == conn_handler) {
 800c492:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c494:	4290      	cmp	r0, r2
 800c496:	d00e      	beq.n	800c4b6 <net_context_packet_received+0x42>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 800c498:	3101      	adds	r1, #1
 800c49a:	2906      	cmp	r1, #6
 800c49c:	f104 0484 	add.w	r4, r4, #132	; 0x84
 800c4a0:	d1f1      	bne.n	800c486 <net_context_packet_received+0x12>
	enum net_verdict verdict = NET_DROP;

	NET_ASSERT(context);
	NET_ASSERT(net_pkt_iface(pkt));

	k_mutex_lock(&context->lock, K_FOREVER);
 800c4a2:	2008      	movs	r0, #8
 800c4a4:	f009 ff26 	bl	80162f4 <k_mutex_lock.constprop.38>
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
 800c4a8:	6a38      	ldr	r0, [r7, #32]
 800c4aa:	f7ff fb91 	bl	800bbd0 <net_if_get_by_iface>
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	f883 3080 	strb.w	r3, [r3, #128]	; 0x80
 800c4b4:	deff      	udf	#255	; 0xff
 800c4b6:	f106 0808 	add.w	r8, r6, #8
 800c4ba:	44c8      	add	r8, r9
 800c4bc:	4640      	mov	r0, r8
 800c4be:	9303      	str	r3, [sp, #12]
 800c4c0:	f009 ff18 	bl	80162f4 <k_mutex_lock.constprop.38>
 800c4c4:	6a38      	ldr	r0, [r7, #32]
 800c4c6:	f7ff fb83 	bl	800bbd0 <net_if_get_by_iface>
	net_pkt_set_context(pkt, context);

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */
	if (!context->recv_cb) {
 800c4ca:	eb09 0206 	add.w	r2, r9, r6
 800c4ce:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
	pkt->context = ctx;
 800c4d2:	61fc      	str	r4, [r7, #28]
 800c4d4:	f8d2 a044 	ldr.w	sl, [r2, #68]	; 0x44
 800c4d8:	f1ba 0f00 	cmp.w	sl, #0
 800c4dc:	d014      	beq.n	800c508 <net_context_packet_received+0x94>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
		net_stats_update_tcp_recv(net_pkt_iface(pkt),
					  net_pkt_remaining_data(pkt));
	}

	context->recv_cb(context, pkt, ip_hdr, proto_hdr, 0, user_data);
 800c4de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4e0:	9201      	str	r2, [sp, #4]
 800c4e2:	2500      	movs	r5, #0
 800c4e4:	9500      	str	r5, [sp, #0]
 800c4e6:	9b03      	ldr	r3, [sp, #12]
 800c4e8:	465a      	mov	r2, fp
 800c4ea:	4639      	mov	r1, r7
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	47d0      	blx	sl

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
 800c4f0:	f106 0050 	add.w	r0, r6, #80	; 0x50
	z_impl_k_sem_give(sem);
 800c4f4:	4448      	add	r0, r9
 800c4f6:	f006 f9ed 	bl	80128d4 <z_impl_k_sem_give>
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	verdict = NET_OK;

unlock:
	k_mutex_unlock(&context->lock);
 800c4fa:	4640      	mov	r0, r8
 800c4fc:	f009 fef8 	bl	80162f0 <k_mutex_unlock>

	return verdict;
}
 800c500:	4628      	mov	r0, r5
 800c502:	b005      	add	sp, #20
 800c504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	enum net_verdict verdict = NET_DROP;
 800c508:	2502      	movs	r5, #2
 800c50a:	e7f6      	b.n	800c4fa <net_context_packet_received+0x86>
 800c50c:	2000090c 	.word	0x2000090c

0800c510 <net_context_get>:
{
 800c510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (!IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
 800c514:	2801      	cmp	r0, #1
{
 800c516:	4680      	mov	r8, r0
 800c518:	4689      	mov	r9, r1
 800c51a:	4692      	mov	sl, r2
 800c51c:	9301      	str	r3, [sp, #4]
		if (!IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
 800c51e:	f000 80a2 	beq.w	800c666 <net_context_get+0x156>
		if (!IS_ENABLED(CONFIG_NET_SOCKETS_CAN) && family == AF_CAN) {
 800c522:	2804      	cmp	r0, #4
 800c524:	f000 809f 	beq.w	800c666 <net_context_get+0x156>
		if (type == SOCK_RAW) {
 800c528:	2903      	cmp	r1, #3
 800c52a:	d006      	beq.n	800c53a <net_context_get+0x2a>
			if (family == AF_PACKET || family == AF_CAN) {
 800c52c:	1ec3      	subs	r3, r0, #3
 800c52e:	2b01      	cmp	r3, #1
 800c530:	f240 809f 	bls.w	800c672 <net_context_get+0x162>
			if (type == SOCK_STREAM) {
 800c534:	2901      	cmp	r1, #1
 800c536:	f000 809c 	beq.w	800c672 <net_context_get+0x162>
			if (ip_proto == IPPROTO_TCP) {
 800c53a:	f1ba 0f06 	cmp.w	sl, #6
 800c53e:	f000 809b 	beq.w	800c678 <net_context_get+0x168>
		if (family != AF_INET && family != AF_INET6 &&
 800c542:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800c546:	2b03      	cmp	r3, #3
 800c548:	f200 8090 	bhi.w	800c66c <net_context_get+0x15c>
		if (type != SOCK_DGRAM && type != SOCK_STREAM &&
 800c54c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800c550:	2b02      	cmp	r3, #2
 800c552:	f200 808e 	bhi.w	800c672 <net_context_get+0x162>
		if (type != SOCK_RAW && ip_proto != IPPROTO_UDP &&
 800c556:	f1b9 0f03 	cmp.w	r9, #3
 800c55a:	d003      	beq.n	800c564 <net_context_get+0x54>
 800c55c:	f1ba 0f11 	cmp.w	sl, #17
 800c560:	f040 808a 	bne.w	800c678 <net_context_get+0x168>
		if (!context) {
 800c564:	9b01      	ldr	r3, [sp, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	f000 8089 	beq.w	800c67e <net_context_get+0x16e>
	return z_impl_k_sem_take(sem, timeout);
 800c56c:	4c45      	ldr	r4, [pc, #276]	; (800c684 <net_context_get+0x174>)
 800c56e:	4846      	ldr	r0, [pc, #280]	; (800c688 <net_context_get+0x178>)
 800c570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c574:	f006 f9da 	bl	801292c <z_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 800c578:	f04f 0b00 	mov.w	fp, #0
 800c57c:	4627      	mov	r7, r4
 800c57e:	2284      	movs	r2, #132	; 0x84
		if (net_context_is_used(&contexts[i])) {
 800c580:	f8b4 507e 	ldrh.w	r5, [r4, #126]	; 0x7e
 800c584:	f015 0501 	ands.w	r5, r5, #1
 800c588:	fb02 f60b 	mul.w	r6, r2, fp
 800c58c:	d00f      	beq.n	800c5ae <net_context_get+0x9e>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 800c58e:	f10b 0b01 	add.w	fp, fp, #1
 800c592:	f1bb 0f06 	cmp.w	fp, #6
 800c596:	f104 0484 	add.w	r4, r4, #132	; 0x84
 800c59a:	d1f1      	bne.n	800c580 <net_context_get+0x70>
	int i, ret = -ENOENT;
 800c59c:	f06f 0401 	mvn.w	r4, #1
	z_impl_k_sem_give(sem);
 800c5a0:	4839      	ldr	r0, [pc, #228]	; (800c688 <net_context_get+0x178>)
 800c5a2:	f006 f997 	bl	80128d4 <z_impl_k_sem_give>
}
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	b003      	add	sp, #12
 800c5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
__ssp_bos_icheck3(memset, void *, int)
 800c5ae:	2284      	movs	r2, #132	; 0x84
 800c5b0:	4629      	mov	r1, r5
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f7f8 f9db 	bl	800496e <memset>
		if (!net_if_is_ip_offloaded(net_if_get_default())
 800c5b8:	f7fe fa8e 	bl	800aad8 <net_if_get_default>
		contexts[i].iface = -1;
 800c5bc:	19ba      	adds	r2, r7, r6
 800c5be:	21ff      	movs	r1, #255	; 0xff
 800c5c0:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
		contexts[i].flags = 0U;
 800c5c4:	f8a2 507e 	strh.w	r5, [r2, #126]	; 0x7e
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800c5c8:	2101      	movs	r1, #1
 800c5ca:	3204      	adds	r2, #4
 800c5cc:	f3bf 8f5b 	dmb	ish
 800c5d0:	e852 0f00 	ldrex	r0, [r2]
 800c5d4:	e842 1300 	strex	r3, r1, [r2]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1f9      	bne.n	800c5d0 <net_context_get+0xc0>
 800c5dc:	f3bf 8f5b 	dmb	ish
		flag = family << 3;
 800c5e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
	context->flags |= flag;
 800c5e4:	b2d2      	uxtb	r2, r2
	context->flags |= flag;
 800c5e6:	ea42 1989 	orr.w	r9, r2, r9, lsl #6
 800c5ea:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
	context->proto = proto;
 800c5ee:	f8a4 a07c 	strh.w	sl, [r4, #124]	; 0x7c
	context->flags |= flag;
 800c5f2:	ea49 0902 	orr.w	r9, r9, r2
			(void)memset(&contexts[i].remote, 0,
 800c5f6:	f106 0028 	add.w	r0, r6, #40	; 0x28
 800c5fa:	f8a4 907e 	strh.w	r9, [r4, #126]	; 0x7e
 800c5fe:	2218      	movs	r2, #24
 800c600:	4629      	mov	r1, r5
 800c602:	4438      	add	r0, r7
 800c604:	f7f8 f9b3 	bl	800496e <memset>
			(void)memset(&contexts[i].local, 0,
 800c608:	f106 021c 	add.w	r2, r6, #28
 800c60c:	eb07 0902 	add.w	r9, r7, r2
		if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
 800c610:	f1b8 0f02 	cmp.w	r8, #2
 800c614:	50bd      	str	r5, [r7, r2]
 800c616:	e9c9 5501 	strd	r5, r5, [r9, #4]
 800c61a:	d019      	beq.n	800c650 <net_context_get+0x140>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
 800c61c:	f106 0050 	add.w	r0, r6, #80	; 0x50
	z_impl_k_sem_init(sem, initial_count, limit);
 800c620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c624:	2101      	movs	r1, #1
 800c626:	4438      	add	r0, r7
 800c628:	f00c f9af 	bl	801898a <z_impl_k_sem_init>
		k_mutex_init(&contexts[i].lock);
 800c62c:	f106 0008 	add.w	r0, r6, #8
	z_impl_k_mutex_init(mutex);
 800c630:	4438      	add	r0, r7
 800c632:	f00b ffc7 	bl	80185c4 <z_impl_k_mutex_init>
		contexts[i].flags |= NET_CONTEXT_IN_USE;
 800c636:	2284      	movs	r2, #132	; 0x84
 800c638:	fb02 770b 	mla	r7, r2, fp, r7
 800c63c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800c640:	f043 0301 	orr.w	r3, r3, #1
 800c644:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		*context = &contexts[i];
 800c648:	9b01      	ldr	r3, [sp, #4]
 800c64a:	601c      	str	r4, [r3, #0]
		ret = 0;
 800c64c:	2400      	movs	r4, #0
		break;
 800c64e:	e7a7      	b.n	800c5a0 <net_context_get+0x90>
			addr6->sin6_port = find_available_port(&contexts[i],
 800c650:	4649      	mov	r1, r9
 800c652:	4620      	mov	r0, r4
 800c654:	f7ff fef8 	bl	800c448 <find_available_port>
 800c658:	f8a9 0002 	strh.w	r0, [r9, #2]
			if (!addr6->sin6_port) {
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d1dd      	bne.n	800c61c <net_context_get+0x10c>
				ret = -EADDRINUSE;
 800c660:	f06f 046f 	mvn.w	r4, #111	; 0x6f
 800c664:	e79c      	b.n	800c5a0 <net_context_get+0x90>
			return -EPFNOSUPPORT;
 800c666:	f06f 045f 	mvn.w	r4, #95	; 0x5f
 800c66a:	e79c      	b.n	800c5a6 <net_context_get+0x96>
			return -EAFNOSUPPORT;
 800c66c:	f06f 0469 	mvn.w	r4, #105	; 0x69
 800c670:	e799      	b.n	800c5a6 <net_context_get+0x96>
				return -EPROTOTYPE;
 800c672:	f06f 046a 	mvn.w	r4, #106	; 0x6a
 800c676:	e796      	b.n	800c5a6 <net_context_get+0x96>
				return -EPROTONOSUPPORT;
 800c678:	f06f 047a 	mvn.w	r4, #122	; 0x7a
 800c67c:	e793      	b.n	800c5a6 <net_context_get+0x96>
			return -EINVAL;
 800c67e:	f06f 0415 	mvn.w	r4, #21
 800c682:	e790      	b.n	800c5a6 <net_context_get+0x96>
 800c684:	2000090c 	.word	0x2000090c
 800c688:	20000c24 	.word	0x20000c24

0800c68c <net_context_put>:
{
 800c68c:	b570      	push	{r4, r5, r6, lr}
	if (!PART_OF_ARRAY(contexts, context)) {
 800c68e:	4605      	mov	r5, r0
 800c690:	b1b8      	cbz	r0, 800c6c2 <net_context_put+0x36>
 800c692:	4b0d      	ldr	r3, [pc, #52]	; (800c6c8 <net_context_put+0x3c>)
 800c694:	4298      	cmp	r0, r3
 800c696:	d314      	bcc.n	800c6c2 <net_context_put+0x36>
 800c698:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800c69c:	4298      	cmp	r0, r3
 800c69e:	d210      	bcs.n	800c6c2 <net_context_put+0x36>
	k_mutex_lock(&context->lock, K_FOREVER);
 800c6a0:	f100 0608 	add.w	r6, r0, #8
	context->connect_cb = NULL;
 800c6a4:	2400      	movs	r4, #0
	k_mutex_lock(&context->lock, K_FOREVER);
 800c6a6:	4630      	mov	r0, r6
 800c6a8:	f009 fe24 	bl	80162f4 <k_mutex_lock.constprop.38>
	context->connect_cb = NULL;
 800c6ac:	64ec      	str	r4, [r5, #76]	; 0x4c
	context->send_cb = NULL;
 800c6ae:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
	net_context_unref(context);
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	f009 fe30 	bl	8016318 <net_context_unref>
	k_mutex_unlock(&context->lock);
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	f009 fe19 	bl	80162f0 <k_mutex_unlock>
	return ret;
 800c6be:	4620      	mov	r0, r4
}
 800c6c0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 800c6c2:	f06f 0015 	mvn.w	r0, #21
 800c6c6:	e7fb      	b.n	800c6c0 <net_context_put+0x34>
 800c6c8:	2000090c 	.word	0x2000090c

0800c6cc <net_context_bind>:
	if (context->conn_handler) {
 800c6cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 800c6ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6d0:	4606      	mov	r6, r0
 800c6d2:	460d      	mov	r5, r1
	if (context->conn_handler) {
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d173      	bne.n	800c7c0 <net_context_bind+0xf4>
	if (IS_ENABLED(CONFIG_NET_IPV6) && addr->sa_family == AF_INET6) {
 800c6d8:	8809      	ldrh	r1, [r1, #0]
 800c6da:	2902      	cmp	r1, #2
 800c6dc:	d173      	bne.n	800c7c6 <net_context_bind+0xfa>
		if (addrlen < sizeof(struct sockaddr_in6)) {
 800c6de:	2a17      	cmp	r2, #23
		struct net_if *iface = NULL;
 800c6e0:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
 800c6e2:	d970      	bls.n	800c7c6 <net_context_bind+0xfa>
		if (net_ipv6_is_addr_mcast(&addr6->sin6_addr)) {
 800c6e4:	792b      	ldrb	r3, [r5, #4]
 800c6e6:	2bff      	cmp	r3, #255	; 0xff
 800c6e8:	f105 0704 	add.w	r7, r5, #4
 800c6ec:	d109      	bne.n	800c702 <net_context_bind+0x36>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
 800c6ee:	a901      	add	r1, sp, #4
 800c6f0:	4638      	mov	r0, r7
 800c6f2:	f7fe fee5 	bl	800b4c0 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
 800c6f6:	bba0      	cbnz	r0, 800c762 <net_context_bind+0x96>
				return -ENOENT;
 800c6f8:	f06f 0401 	mvn.w	r4, #1
}
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	b003      	add	sp, #12
 800c700:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
 800c702:	4638      	mov	r0, r7
 800c704:	f009 fde7 	bl	80162d6 <net_ipv6_is_addr_unspecified>
 800c708:	b330      	cbz	r0, 800c758 <net_context_bind+0x8c>
			iface = net_if_ipv6_select_src_iface(
 800c70a:	f106 002c 	add.w	r0, r6, #44	; 0x2c
 800c70e:	f009 fc3a 	bl	8015f86 <net_if_ipv6_select_src_iface>
 800c712:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
 800c714:	f7ff fcf6 	bl	800c104 <net_ipv6_unspecified_address>
 800c718:	4604      	mov	r4, r0
		if (!iface) {
 800c71a:	9801      	ldr	r0, [sp, #4]
 800c71c:	bb18      	cbnz	r0, 800c766 <net_context_bind+0x9a>
			NET_ERR("Cannot bind to %s",
 800c71e:	4b2b      	ldr	r3, [pc, #172]	; (800c7cc <net_context_bind+0x100>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	075a      	lsls	r2, r3, #29
 800c724:	d015      	beq.n	800c752 <net_context_bind+0x86>
 800c726:	2301      	movs	r3, #1
 800c728:	f04f 0400 	mov.w	r4, #0
 800c72c:	4a28      	ldr	r2, [pc, #160]	; (800c7d0 <net_context_bind+0x104>)
 800c72e:	f363 0407 	bfi	r4, r3, #0, #8
 800c732:	4b28      	ldr	r3, [pc, #160]	; (800c7d4 <net_context_bind+0x108>)
 800c734:	1a9b      	subs	r3, r3, r2
 800c736:	08db      	lsrs	r3, r3, #3
 800c738:	4639      	mov	r1, r7
 800c73a:	2002      	movs	r0, #2
 800c73c:	f363 148f 	bfi	r4, r3, #6, #10
 800c740:	f7ff fcc8 	bl	800c0d4 <net_sprint_addr>
 800c744:	f7f9 fb2e 	bl	8005da4 <log_strdup>
 800c748:	4622      	mov	r2, r4
 800c74a:	4601      	mov	r1, r0
 800c74c:	4822      	ldr	r0, [pc, #136]	; (800c7d8 <net_context_bind+0x10c>)
 800c74e:	f007 fa65 	bl	8013c1c <log_1>
			return -EADDRNOTAVAIL;
 800c752:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800c756:	e7d1      	b.n	800c6fc <net_context_bind+0x30>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
 800c758:	a901      	add	r1, sp, #4
 800c75a:	4638      	mov	r0, r7
 800c75c:	f7fe fa6c 	bl	800ac38 <net_if_ipv6_addr_lookup>
 800c760:	e7c9      	b.n	800c6f6 <net_context_bind+0x2a>
			ptr = &ifaddr->address.in6_addr;
 800c762:	1d04      	adds	r4, r0, #4
 800c764:	e7d9      	b.n	800c71a <net_context_bind+0x4e>
	context->iface = net_if_get_by_iface(iface);
 800c766:	f7ff fa33 	bl	800bbd0 <net_if_get_by_iface>
 800c76a:	f886 0080 	strb.w	r0, [r6, #128]	; 0x80
		if (addr6->sin6_port) {
 800c76e:	8869      	ldrh	r1, [r5, #2]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
 800c770:	6234      	str	r4, [r6, #32]
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
 800c772:	2002      	movs	r0, #2
 800c774:	83b0      	strh	r0, [r6, #28]
		if (addr6->sin6_port) {
 800c776:	b1f9      	cbz	r1, 800c7b8 <net_context_bind+0xec>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
 800c778:	462a      	mov	r2, r5
 800c77a:	f7ff fe3b 	bl	800c3f4 <check_used_port>
			if (!ret) {
 800c77e:	4604      	mov	r4, r0
 800c780:	b910      	cbnz	r0, 800c788 <net_context_bind+0xbc>
				net_sin6_ptr(&context->local)->sin6_port =
 800c782:	886b      	ldrh	r3, [r5, #2]
 800c784:	83f3      	strh	r3, [r6, #30]
 800c786:	e7b9      	b.n	800c6fc <net_context_bind+0x30>
				NET_ERR("Port %d is in use!",
 800c788:	4b10      	ldr	r3, [pc, #64]	; (800c7cc <net_context_bind+0x100>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	075b      	lsls	r3, r3, #29
 800c78e:	d0b5      	beq.n	800c6fc <net_context_bind+0x30>
 800c790:	2301      	movs	r3, #1
 800c792:	f04f 0200 	mov.w	r2, #0
 800c796:	f363 0207 	bfi	r2, r3, #0, #8
 800c79a:	490d      	ldr	r1, [pc, #52]	; (800c7d0 <net_context_bind+0x104>)
 800c79c:	4b0d      	ldr	r3, [pc, #52]	; (800c7d4 <net_context_bind+0x108>)
 800c79e:	480f      	ldr	r0, [pc, #60]	; (800c7dc <net_context_bind+0x110>)
 800c7a0:	1a5b      	subs	r3, r3, r1
 800c7a2:	08db      	lsrs	r3, r3, #3
 800c7a4:	f363 128f 	bfi	r2, r3, #6, #10
 800c7a8:	886b      	ldrh	r3, [r5, #2]
 800c7aa:	0219      	lsls	r1, r3, #8
 800c7ac:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
 800c7b0:	b289      	uxth	r1, r1
 800c7b2:	f007 fa33 	bl	8013c1c <log_1>
 800c7b6:	e7a1      	b.n	800c6fc <net_context_bind+0x30>
			addr6->sin6_port =
 800c7b8:	8bf3      	ldrh	r3, [r6, #30]
 800c7ba:	806b      	strh	r3, [r5, #2]
		return 0;
 800c7bc:	460c      	mov	r4, r1
 800c7be:	e79d      	b.n	800c6fc <net_context_bind+0x30>
		return -EISCONN;
 800c7c0:	f06f 047e 	mvn.w	r4, #126	; 0x7e
 800c7c4:	e79a      	b.n	800c6fc <net_context_bind+0x30>
	return -EINVAL;
 800c7c6:	f06f 0415 	mvn.w	r4, #21
 800c7ca:	e797      	b.n	800c6fc <net_context_bind+0x30>
 800c7cc:	20009000 	.word	0x20009000
 800c7d0:	08019248 	.word	0x08019248
 800c7d4:	080192a8 	.word	0x080192a8
 800c7d8:	0801ba33 	.word	0x0801ba33
 800c7dc:	0801ba45 	.word	0x0801ba45

0800c7e0 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
 800c7e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7e4:	4698      	mov	r8, r3
	int ret;
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
 800c7e6:	f8b0 307e 	ldrh.w	r3, [r0, #126]	; 0x7e
 800c7ea:	07db      	lsls	r3, r3, #31
{
 800c7ec:	b091      	sub	sp, #68	; 0x44
 800c7ee:	4604      	mov	r4, r0
 800c7f0:	4689      	mov	r9, r1
 800c7f2:	4617      	mov	r7, r2
	if (!net_context_is_used(context)) {
 800c7f4:	d57c      	bpl.n	800c8f0 <net_context_recv+0x110>
		return -EBADF;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
 800c7f6:	f100 0608 	add.w	r6, r0, #8
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f009 fd7a 	bl	80162f4 <k_mutex_lock.constprop.38>
			net_context_get_iface(context),
			context, cb, timeout, user_data);
		goto unlock;
	}

	if (IS_ENABLED(CONFIG_NET_UDP) &&
 800c800:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800c804:	2b11      	cmp	r3, #17
 800c806:	d170      	bne.n	800c8ea <net_context_recv+0x10a>
	struct sockaddr local_addr = {
 800c808:	2216      	movs	r2, #22
 800c80a:	2100      	movs	r1, #0
 800c80c:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 800c810:	f7f8 f8ad 	bl	800496e <memset>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 800c814:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
	if (context->conn_handler) {
 800c818:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800c81a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	struct sockaddr local_addr = {
 800c81e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	if (context->conn_handler) {
 800c822:	b118      	cbz	r0, 800c82c <net_context_recv+0x4c>
		net_conn_unregister(context->conn_handler);
 800c824:	f002 f928 	bl	800ea78 <net_conn_unregister>
		context->conn_handler = NULL;
 800c828:	2300      	movs	r3, #0
 800c82a:	6423      	str	r3, [r4, #64]	; 0x40
	ret = bind_default(context);
 800c82c:	4620      	mov	r0, r4
 800c82e:	f009 fd9b 	bl	8016368 <bind_default>
	if (ret) {
 800c832:	4605      	mov	r5, r0
 800c834:	2800      	cmp	r0, #0
 800c836:	d13f      	bne.n	800c8b8 <net_context_recv+0xd8>
 800c838:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800c83c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800c840:	2b02      	cmp	r3, #2
 800c842:	d150      	bne.n	800c8e6 <net_context_recv+0x106>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
 800c844:	6a23      	ldr	r3, [r4, #32]
 800c846:	b18b      	cbz	r3, 800c86c <net_context_recv+0x8c>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
 800c848:	ad06      	add	r5, sp, #24
 800c84a:	f103 0e10 	add.w	lr, r3, #16
 800c84e:	462a      	mov	r2, r5
 800c850:	6818      	ldr	r0, [r3, #0]
 800c852:	6859      	ldr	r1, [r3, #4]
 800c854:	46ac      	mov	ip, r5
 800c856:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800c85a:	3308      	adds	r3, #8
 800c85c:	4573      	cmp	r3, lr
 800c85e:	4665      	mov	r5, ip
 800c860:	d1f6      	bne.n	800c850 <net_context_recv+0x70>
 800c862:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c864:	ad0b      	add	r5, sp, #44	; 0x2c
 800c866:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
 800c86a:	ab0a      	add	r3, sp, #40	; 0x28
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
 800c86c:	8be5      	ldrh	r5, [r4, #30]
		net_sin6(&local_addr)->sin6_port =
 800c86e:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
				ntohs(net_sin(&context->remote)->sin_port),
 800c872:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
				net_context_get_family(context),
 800c876:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
	context->recv_cb = cb;
 800c87a:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ret = net_conn_register(net_context_get_ip_proto(context),
 800c87e:	ba6d      	rev16	r5, r5
 800c880:	b2ad      	uxth	r5, r5
 800c882:	9501      	str	r5, [sp, #4]
				ntohs(net_sin(&context->remote)->sin_port),
 800c884:	ea4f 250c 	mov.w	r5, ip, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
 800c888:	f104 0e40 	add.w	lr, r4, #64	; 0x40
				ntohs(net_sin(&context->remote)->sin_port),
 800c88c:	ea45 251c 	orr.w	r5, r5, ip, lsr #8
	ret = net_conn_register(net_context_get_ip_proto(context),
 800c890:	f3c2 01c2 	ubfx	r1, r2, #3, #3
 800c894:	e9cd 8e03 	strd	r8, lr, [sp, #12]
 800c898:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800c89c:	f8df e058 	ldr.w	lr, [pc, #88]	; 800c8f8 <net_context_recv+0x118>
 800c8a0:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
 800c8a4:	f8cd e008 	str.w	lr, [sp, #8]
 800c8a8:	b2ad      	uxth	r5, r5
 800c8aa:	9500      	str	r5, [sp, #0]
 800c8ac:	bf18      	it	ne
 800c8ae:	f104 0228 	addne.w	r2, r4, #40	; 0x28
 800c8b2:	f001 ffaf 	bl	800e814 <net_conn_register>
 800c8b6:	4605      	mov	r5, r0
		} else {
			ret = -EPROTOTYPE;
		}
	}

	if (ret < 0) {
 800c8b8:	2d00      	cmp	r5, #0
 800c8ba:	db0d      	blt.n	800c8d8 <net_context_recv+0xf8>
		goto unlock;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (timeout) {
 800c8bc:	b167      	cbz	r7, 800c8d8 <net_context_recv+0xf8>
/**
 * @internal
 */
static inline void z_impl_k_sem_reset(struct k_sem *sem)
{
	sem->count = 0U;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	65a3      	str	r3, [r4, #88]	; 0x58
		 * net_context_packet_received() callback will release the
		 * semaphore when data has been received.
		 */
		k_sem_reset(&context->recv_data_wait);

		k_mutex_unlock(&context->lock);
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	f009 fd14 	bl	80162f0 <k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
 800c8c8:	4639      	mov	r1, r7
 800c8ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c8ce:	f006 f82d 	bl	801292c <z_impl_k_sem_take>

		ret = k_sem_take(&context->recv_data_wait, timeout);

		k_mutex_lock(&context->lock, K_FOREVER);
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	f009 fd0e 	bl	80162f4 <k_mutex_lock.constprop.38>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

unlock:
	k_mutex_unlock(&context->lock);
 800c8d8:	4630      	mov	r0, r6
 800c8da:	f009 fd09 	bl	80162f0 <k_mutex_unlock>

	return ret;
}
 800c8de:	4628      	mov	r0, r5
 800c8e0:	b011      	add	sp, #68	; 0x44
 800c8e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct sockaddr *laddr = NULL;
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	e7c3      	b.n	800c872 <net_context_recv+0x92>
			ret = -EPROTOTYPE;
 800c8ea:	f06f 056a 	mvn.w	r5, #106	; 0x6a
 800c8ee:	e7f3      	b.n	800c8d8 <net_context_recv+0xf8>
		return -EBADF;
 800c8f0:	f06f 0508 	mvn.w	r5, #8
 800c8f4:	e7f3      	b.n	800c8de <net_context_recv+0xfe>
 800c8f6:	bf00      	nop
 800c8f8:	0800c475 	.word	0x0800c475

0800c8fc <net_context_foreach>:

	return ret;
}

void net_context_foreach(net_context_cb_t cb, void *user_data)
{
 800c8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c900:	4607      	mov	r7, r0
 800c902:	4688      	mov	r8, r1
 800c904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c908:	480e      	ldr	r0, [pc, #56]	; (800c944 <net_context_foreach+0x48>)
 800c90a:	4c0f      	ldr	r4, [pc, #60]	; (800c948 <net_context_foreach+0x4c>)
 800c90c:	f006 f80e 	bl	801292c <z_impl_k_sem_take>
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 800c910:	2500      	movs	r5, #0
		if (!net_context_is_used(&contexts[i])) {
 800c912:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 800c916:	07db      	lsls	r3, r3, #31
 800c918:	d50a      	bpl.n	800c930 <net_context_foreach+0x34>
			continue;
		}

		k_mutex_lock(&contexts[i].lock, K_FOREVER);
 800c91a:	f104 0608 	add.w	r6, r4, #8
 800c91e:	4630      	mov	r0, r6
 800c920:	f009 fce8 	bl	80162f4 <k_mutex_lock.constprop.38>

		cb(&contexts[i], user_data);
 800c924:	4620      	mov	r0, r4
 800c926:	4641      	mov	r1, r8
 800c928:	47b8      	blx	r7

		k_mutex_unlock(&contexts[i].lock);
 800c92a:	4630      	mov	r0, r6
 800c92c:	f009 fce0 	bl	80162f0 <k_mutex_unlock>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 800c930:	3501      	adds	r5, #1
 800c932:	2d06      	cmp	r5, #6
 800c934:	f104 0484 	add.w	r4, r4, #132	; 0x84
 800c938:	d1eb      	bne.n	800c912 <net_context_foreach+0x16>
	z_impl_k_sem_give(sem);
 800c93a:	4802      	ldr	r0, [pc, #8]	; (800c944 <net_context_foreach+0x48>)
	}

	k_sem_give(&contexts_lock);
}
 800c93c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c940:	f005 bfc8 	b.w	80128d4 <z_impl_k_sem_give>
 800c944:	20000c24 	.word	0x20000c24
 800c948:	2000090c 	.word	0x2000090c

0800c94c <net_context_init>:
	z_impl_k_sem_init(sem, initial_count, limit);
 800c94c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c950:	2101      	movs	r1, #1
 800c952:	4801      	ldr	r0, [pc, #4]	; (800c958 <net_context_init+0xc>)
 800c954:	f00c b819 	b.w	801898a <z_impl_k_sem_init>
 800c958:	20000c24 	.word	0x20000c24

0800c95c <net_pkt_get_reserve_rx_data>:

#else /* NET_LOG_LEVEL >= LOG_LEVEL_DBG */

struct net_buf *net_pkt_get_reserve_rx_data(s32_t timeout)
{
	return net_pkt_get_reserve_data(&rx_bufs, timeout);
 800c95c:	4601      	mov	r1, r0
 800c95e:	4801      	ldr	r0, [pc, #4]	; (800c964 <net_pkt_get_reserve_rx_data+0x8>)
 800c960:	f009 bfe6 	b.w	8016930 <net_pkt_get_reserve_data>
 800c964:	20009170 	.word	0x20009170

0800c968 <net_pkt_get_reserve_tx_data>:
}

struct net_buf *net_pkt_get_reserve_tx_data(s32_t timeout)
{
	return net_pkt_get_reserve_data(&tx_bufs, timeout);
 800c968:	4601      	mov	r1, r0
 800c96a:	4801      	ldr	r0, [pc, #4]	; (800c970 <net_pkt_get_reserve_tx_data+0x8>)
 800c96c:	f009 bfe0 	b.w	8016930 <net_pkt_get_reserve_data>
 800c970:	20009190 	.word	0x20009190

0800c974 <net_pkt_get_frag>:
	if (pkt->slab == &rx_pkts) {
 800c974:	68c2      	ldr	r2, [r0, #12]
 800c976:	4b04      	ldr	r3, [pc, #16]	; (800c988 <net_pkt_get_frag+0x14>)
 800c978:	429a      	cmp	r2, r3
		return net_pkt_get_reserve_rx_data(timeout);
 800c97a:	4608      	mov	r0, r1
	if (pkt->slab == &rx_pkts) {
 800c97c:	d101      	bne.n	800c982 <net_pkt_get_frag+0xe>
		return net_pkt_get_reserve_rx_data(timeout);
 800c97e:	f7ff bfed 	b.w	800c95c <net_pkt_get_reserve_rx_data>
	return net_pkt_get_reserve_tx_data(timeout);
 800c982:	f7ff bff1 	b.w	800c968 <net_pkt_get_reserve_tx_data>
 800c986:	bf00      	nop
 800c988:	20009050 	.word	0x20009050

0800c98c <net_pkt_get_info>:

void net_pkt_get_info(struct k_mem_slab **rx,
		      struct k_mem_slab **tx,
		      struct net_buf_pool **rx_data,
		      struct net_buf_pool **tx_data)
{
 800c98c:	b510      	push	{r4, lr}
	if (rx) {
 800c98e:	b108      	cbz	r0, 800c994 <net_pkt_get_info+0x8>
		*rx = &rx_pkts;
 800c990:	4c05      	ldr	r4, [pc, #20]	; (800c9a8 <net_pkt_get_info+0x1c>)
 800c992:	6004      	str	r4, [r0, #0]
	}

	if (tx) {
 800c994:	b109      	cbz	r1, 800c99a <net_pkt_get_info+0xe>
		*tx = &tx_pkts;
 800c996:	4805      	ldr	r0, [pc, #20]	; (800c9ac <net_pkt_get_info+0x20>)
 800c998:	6008      	str	r0, [r1, #0]
	}

	if (rx_data) {
 800c99a:	b10a      	cbz	r2, 800c9a0 <net_pkt_get_info+0x14>
		*rx_data = &rx_bufs;
 800c99c:	4904      	ldr	r1, [pc, #16]	; (800c9b0 <net_pkt_get_info+0x24>)
 800c99e:	6011      	str	r1, [r2, #0]
	}

	if (tx_data) {
 800c9a0:	b10b      	cbz	r3, 800c9a6 <net_pkt_get_info+0x1a>
		*tx_data = &tx_bufs;
 800c9a2:	4a04      	ldr	r2, [pc, #16]	; (800c9b4 <net_pkt_get_info+0x28>)
 800c9a4:	601a      	str	r2, [r3, #0]
	}
}
 800c9a6:	bd10      	pop	{r4, pc}
 800c9a8:	20009050 	.word	0x20009050
 800c9ac:	2000906c 	.word	0x2000906c
 800c9b0:	20009170 	.word	0x20009170
 800c9b4:	20009190 	.word	0x20009190

0800c9b8 <net_pkt_alloc_buffer>:
int net_pkt_alloc_buffer(struct net_pkt *pkt,
			 size_t size,
			 enum net_ip_protocol proto,
			 s32_t timeout)
#endif
{
 800c9b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9bc:	4607      	mov	r7, r0
 800c9be:	4689      	mov	r9, r1
 800c9c0:	4614      	mov	r4, r2
 800c9c2:	461e      	mov	r6, r3
	u32_t alloc_start = k_uptime_get_32();
 800c9c4:	f009 ff50 	bl	8016868 <k_uptime_get_32>
 800c9c8:	4680      	mov	r8, r0
	struct net_buf_pool *pool = NULL;
	size_t alloc_len = 0;
	size_t hdr_len = 0;
	struct net_buf *buf;

	if (!size && proto == 0 && net_pkt_family(pkt) == AF_UNSPEC) {
 800c9ca:	f1b9 0f00 	cmp.w	r9, #0
 800c9ce:	d106      	bne.n	800c9de <net_pkt_alloc_buffer+0x26>
 800c9d0:	b92c      	cbnz	r4, 800c9de <net_pkt_alloc_buffer+0x26>
	return pkt->family;
 800c9d2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c9d6:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	d04e      	beq.n	800ca7c <net_pkt_alloc_buffer+0xc4>
		return 0;
	}

	if (k_is_in_isr()) {
 800c9de:	f00b ffe6 	bl	80189ae <k_is_in_isr>
		timeout = K_NO_WAIT;
 800c9e2:	2800      	cmp	r0, #0
	}

	/* Verifying existing buffer and take into account free space there */
	alloc_len = pkt_get_size(pkt) - net_pkt_get_len(pkt);
 800c9e4:	6938      	ldr	r0, [r7, #16]
		timeout = K_NO_WAIT;
 800c9e6:	bf18      	it	ne
 800c9e8:	2600      	movne	r6, #0
	struct net_buf *buf = pkt->buffer;
 800c9ea:	4605      	mov	r5, r0
	size_t size = 0;
 800c9ec:	2100      	movs	r1, #0
	while (buf) {
 800c9ee:	2d00      	cmp	r5, #0
 800c9f0:	d146      	bne.n	800ca80 <net_pkt_alloc_buffer+0xc8>
	return net_buf_frags_len(pkt->frags);
 800c9f2:	f009 fef1 	bl	80167d8 <net_buf_frags_len>
	if (!alloc_len) {
 800c9f6:	f897 c03b 	ldrb.w	ip, [r7, #59]	; 0x3b
 800c9fa:	4288      	cmp	r0, r1
 800c9fc:	f3cc 0c42 	ubfx	ip, ip, #1, #3
 800ca00:	d148      	bne.n	800ca94 <net_pkt_alloc_buffer+0xdc>
		/* In case of no free space, it will account for header
		 * space estimation
		 */
		hdr_len = pkt_estimate_headers_length(pkt,
 800ca02:	fa1f f38c 	uxth.w	r3, ip
	if (family == AF_UNSPEC) {
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d044      	beq.n	800ca94 <net_pkt_alloc_buffer+0xdc>
		hdr_len += NET_IPV6H_LEN;
 800ca0a:	2b02      	cmp	r3, #2
 800ca0c:	bf14      	ite	ne
 800ca0e:	2200      	movne	r2, #0
 800ca10:	2228      	moveq	r2, #40	; 0x28
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 800ca12:	2c11      	cmp	r4, #17
 800ca14:	d138      	bne.n	800ca88 <net_pkt_alloc_buffer+0xd0>
		hdr_len += NET_UDPH_LEN;
 800ca16:	3208      	adds	r2, #8
	if (net_pkt_iface(pkt)) {
 800ca18:	6a3b      	ldr	r3, [r7, #32]
						      net_pkt_family(pkt),
						      proto);
	}

	/* Calculate the maximum that can be allocated depending on size */
	alloc_len = pkt_buffer_length(pkt, size + hdr_len, proto, alloc_len);
 800ca1a:	4491      	add	r9, r2
	if (net_pkt_iface(pkt)) {
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d03b      	beq.n	800ca98 <net_pkt_alloc_buffer+0xe0>
		max_len = net_if_get_mtu(net_pkt_iface(pkt));
 800ca20:	681a      	ldr	r2, [r3, #0]
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
 800ca22:	f1bc 0f02 	cmp.w	ip, #2
		max_len = net_if_get_mtu(net_pkt_iface(pkt));
 800ca26:	8b13      	ldrh	r3, [r2, #24]
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
 800ca28:	d13b      	bne.n	800caa2 <net_pkt_alloc_buffer+0xea>
		max_len = MAX(max_len, NET_IPV6_MTU);
 800ca2a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800ca2e:	bf38      	it	cc
 800ca30:	f44f 63a0 	movcc.w	r3, #1280	; 0x500
	max_len -= existing;
 800ca34:	1a44      	subs	r4, r0, r1
 800ca36:	441c      	add	r4, r3
	if (pkt->context) {
		pool = get_data_pool(pkt->context);
	}

	if (!pool) {
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
 800ca38:	68f9      	ldr	r1, [r7, #12]
 800ca3a:	4b3c      	ldr	r3, [pc, #240]	; (800cb2c <net_pkt_alloc_buffer+0x174>)
 800ca3c:	483c      	ldr	r0, [pc, #240]	; (800cb30 <net_pkt_alloc_buffer+0x178>)
 800ca3e:	4a3d      	ldr	r2, [pc, #244]	; (800cb34 <net_pkt_alloc_buffer+0x17c>)
	return MIN(size, max_len);
 800ca40:	454c      	cmp	r4, r9
 800ca42:	bf28      	it	cs
 800ca44:	464c      	movcs	r4, r9
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
 800ca46:	4281      	cmp	r1, r0
 800ca48:	bf0c      	ite	eq
 800ca4a:	4691      	moveq	r9, r2
 800ca4c:	4699      	movne	r9, r3
	}

	if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
 800ca4e:	1c73      	adds	r3, r6, #1
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d907      	bls.n	800ca64 <net_pkt_alloc_buffer+0xac>
		u32_t diff = k_uptime_get_32() - alloc_start;
 800ca54:	f009 ff08 	bl	8016868 <k_uptime_get_32>
 800ca58:	eba0 0008 	sub.w	r0, r0, r8

		timeout -= MIN(timeout, diff);
 800ca5c:	42b0      	cmp	r0, r6
 800ca5e:	bf94      	ite	ls
 800ca60:	1a36      	subls	r6, r6, r0
 800ca62:	1bb6      	subhi	r6, r6, r6
	u32_t alloc_start = k_uptime_get_32();
 800ca64:	f009 ff00 	bl	8016868 <k_uptime_get_32>
	struct net_buf *current = NULL;
 800ca68:	f04f 0a00 	mov.w	sl, #0
	u32_t alloc_start = k_uptime_get_32();
 800ca6c:	4683      	mov	fp, r0
	while (size) {
 800ca6e:	b9f4      	cbnz	r4, 800caae <net_pkt_alloc_buffer+0xf6>
	buf = pkt_alloc_buffer(pool, alloc_len, timeout, caller, line);
#else
	buf = pkt_alloc_buffer(pool, alloc_len, timeout);
#endif

	if (!buf) {
 800ca70:	b325      	cbz	r5, 800cabc <net_pkt_alloc_buffer+0x104>
		NET_ERR("Data buffer allocation failed.");
		return -ENOMEM;
	}

	net_pkt_append_buffer(pkt, buf);
 800ca72:	4638      	mov	r0, r7
 800ca74:	4629      	mov	r1, r5
 800ca76:	f00a f83f 	bl	8016af8 <net_pkt_append_buffer>

	return 0;
 800ca7a:	4620      	mov	r0, r4
}
 800ca7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		size += buf->size;
 800ca80:	89eb      	ldrh	r3, [r5, #14]
		buf = buf->frags;
 800ca82:	682d      	ldr	r5, [r5, #0]
		size += buf->size;
 800ca84:	4419      	add	r1, r3
		buf = buf->frags;
 800ca86:	e7b2      	b.n	800c9ee <net_pkt_alloc_buffer+0x36>
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
 800ca88:	2c01      	cmp	r4, #1
 800ca8a:	d001      	beq.n	800ca90 <net_pkt_alloc_buffer+0xd8>
 800ca8c:	2c3a      	cmp	r4, #58	; 0x3a
 800ca8e:	d1c3      	bne.n	800ca18 <net_pkt_alloc_buffer+0x60>
		hdr_len += NET_ICMPH_LEN;
 800ca90:	3204      	adds	r2, #4
 800ca92:	e7c1      	b.n	800ca18 <net_pkt_alloc_buffer+0x60>
	size_t hdr_len = 0;
 800ca94:	462a      	mov	r2, r5
 800ca96:	e7bf      	b.n	800ca18 <net_pkt_alloc_buffer+0x60>
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
 800ca98:	f1bc 0f02 	cmp.w	ip, #2
 800ca9c:	d0c5      	beq.n	800ca2a <net_pkt_alloc_buffer+0x72>
			max_len = size;
 800ca9e:	464b      	mov	r3, r9
 800caa0:	e7c8      	b.n	800ca34 <net_pkt_alloc_buffer+0x7c>
		if (net_if_l2(net_pkt_iface(pkt)) ==
 800caa2:	6854      	ldr	r4, [r2, #4]
 800caa4:	4a24      	ldr	r2, [pc, #144]	; (800cb38 <net_pkt_alloc_buffer+0x180>)
 800caa6:	4294      	cmp	r4, r2
 800caa8:	d1f9      	bne.n	800ca9e <net_pkt_alloc_buffer+0xe6>
			max_len += sizeof(struct net_eth_hdr);
 800caaa:	330e      	adds	r3, #14
 800caac:	e7c2      	b.n	800ca34 <net_pkt_alloc_buffer+0x7c>
		new = net_buf_alloc_fixed(pool, timeout);
 800caae:	4631      	mov	r1, r6
 800cab0:	4648      	mov	r0, r9
 800cab2:	f008 ff32 	bl	801591a <net_buf_alloc_fixed>
		if (!new) {
 800cab6:	4680      	mov	r8, r0
 800cab8:	b9a8      	cbnz	r0, 800cae6 <net_pkt_alloc_buffer+0x12e>
	if (first) {
 800caba:	bb95      	cbnz	r5, 800cb22 <net_pkt_alloc_buffer+0x16a>
		NET_ERR("Data buffer allocation failed.");
 800cabc:	4b1f      	ldr	r3, [pc, #124]	; (800cb3c <net_pkt_alloc_buffer+0x184>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	075b      	lsls	r3, r3, #29
 800cac2:	d00d      	beq.n	800cae0 <net_pkt_alloc_buffer+0x128>
 800cac4:	2301      	movs	r3, #1
 800cac6:	f04f 0100 	mov.w	r1, #0
 800caca:	f363 0107 	bfi	r1, r3, #0, #8
 800cace:	4a1c      	ldr	r2, [pc, #112]	; (800cb40 <net_pkt_alloc_buffer+0x188>)
 800cad0:	4b1c      	ldr	r3, [pc, #112]	; (800cb44 <net_pkt_alloc_buffer+0x18c>)
 800cad2:	481d      	ldr	r0, [pc, #116]	; (800cb48 <net_pkt_alloc_buffer+0x190>)
 800cad4:	1a9b      	subs	r3, r3, r2
 800cad6:	08db      	lsrs	r3, r3, #3
 800cad8:	f363 118f 	bfi	r1, r3, #6, #10
 800cadc:	f007 f891 	bl	8013c02 <log_0>
		return -ENOMEM;
 800cae0:	f06f 000b 	mvn.w	r0, #11
 800cae4:	e7ca      	b.n	800ca7c <net_pkt_alloc_buffer+0xc4>
		if (!first && !current) {
 800cae6:	b915      	cbnz	r5, 800caee <net_pkt_alloc_buffer+0x136>
 800cae8:	f1ba 0f00 	cmp.w	sl, #0
 800caec:	d017      	beq.n	800cb1e <net_pkt_alloc_buffer+0x166>
			current->frags = new;
 800caee:	f8ca 8000 	str.w	r8, [sl]
		if (current->size > size) {
 800caf2:	f8b8 300e 	ldrh.w	r3, [r8, #14]
 800caf6:	42a3      	cmp	r3, r4
			current->size = size;
 800caf8:	bf88      	it	hi
 800cafa:	f8a8 400e 	strhhi.w	r4, [r8, #14]
		size -= current->size;
 800cafe:	f8b8 300e 	ldrh.w	r3, [r8, #14]
 800cb02:	1ae4      	subs	r4, r4, r3
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
 800cb04:	1c73      	adds	r3, r6, #1
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d907      	bls.n	800cb1a <net_pkt_alloc_buffer+0x162>
			u32_t diff = k_uptime_get_32() - alloc_start;
 800cb0a:	f009 fead 	bl	8016868 <k_uptime_get_32>
 800cb0e:	eba0 000b 	sub.w	r0, r0, fp
			timeout -= MIN(timeout, diff);
 800cb12:	42b0      	cmp	r0, r6
 800cb14:	bf94      	ite	ls
 800cb16:	1a36      	subls	r6, r6, r0
 800cb18:	1bb6      	subhi	r6, r6, r6
		if (!first && !current) {
 800cb1a:	46c2      	mov	sl, r8
 800cb1c:	e7a7      	b.n	800ca6e <net_pkt_alloc_buffer+0xb6>
 800cb1e:	4605      	mov	r5, r0
 800cb20:	e7e7      	b.n	800caf2 <net_pkt_alloc_buffer+0x13a>
		net_buf_unref(first);
 800cb22:	4628      	mov	r0, r5
 800cb24:	f7fd fd56 	bl	800a5d4 <net_buf_unref>
	if (!buf) {
 800cb28:	e7c8      	b.n	800cabc <net_pkt_alloc_buffer+0x104>
 800cb2a:	bf00      	nop
 800cb2c:	20009170 	.word	0x20009170
 800cb30:	2000906c 	.word	0x2000906c
 800cb34:	20009190 	.word	0x20009190
 800cb38:	08019238 	.word	0x08019238
 800cb3c:	2000901c 	.word	0x2000901c
 800cb40:	08019248 	.word	0x08019248
 800cb44:	080192e0 	.word	0x080192e0
 800cb48:	0801ba60 	.word	0x0801ba60

0800cb4c <net_pkt_alloc_with_buffer>:
					  size_t size,
					  sa_family_t family,
					  enum net_ip_protocol proto,
					  s32_t timeout)
#endif
{
 800cb4c:	b513      	push	{r0, r1, r4, lr}
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
				     proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
 800cb4e:	9c04      	ldr	r4, [sp, #16]
 800cb50:	e9cd 3400 	strd	r3, r4, [sp]
 800cb54:	4613      	mov	r3, r2
 800cb56:	460a      	mov	r2, r1
 800cb58:	4601      	mov	r1, r0
 800cb5a:	4802      	ldr	r0, [pc, #8]	; (800cb64 <net_pkt_alloc_with_buffer+0x18>)
 800cb5c:	f009 ffde 	bl	8016b1c <pkt_alloc_with_buffer>
				     proto, timeout);
#endif
}
 800cb60:	b002      	add	sp, #8
 800cb62:	bd10      	pop	{r4, pc}
 800cb64:	2000906c 	.word	0x2000906c

0800cb68 <net_pkt_rx_alloc_with_buffer>:
					     size_t size,
					     sa_family_t family,
					     enum net_ip_protocol proto,
					     s32_t timeout)
#endif
{
 800cb68:	b513      	push	{r0, r1, r4, lr}
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&rx_pkts, iface, size, family,
					proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&rx_pkts, iface, size, family,
 800cb6a:	9c04      	ldr	r4, [sp, #16]
 800cb6c:	e9cd 3400 	strd	r3, r4, [sp]
 800cb70:	4613      	mov	r3, r2
 800cb72:	460a      	mov	r2, r1
 800cb74:	4601      	mov	r1, r0
 800cb76:	4802      	ldr	r0, [pc, #8]	; (800cb80 <net_pkt_rx_alloc_with_buffer+0x18>)
 800cb78:	f009 ffd0 	bl	8016b1c <pkt_alloc_with_buffer>
					proto, timeout);
#endif
}
 800cb7c:	b002      	add	sp, #8
 800cb7e:	bd10      	pop	{r4, pc}
 800cb80:	20009050 	.word	0x20009050

0800cb84 <net_pkt_get_data>:
	return false;
}

void *net_pkt_get_data(struct net_pkt *pkt,
		       struct net_pkt_data_access *access)
{
 800cb84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb88:	460e      	mov	r6, r1
			return NULL;
		}

		return pkt->cursor.pos;
	} else {
		if (net_pkt_is_contiguous(pkt, access->size)) {
 800cb8a:	6849      	ldr	r1, [r1, #4]
{
 800cb8c:	4604      	mov	r4, r0
		if (net_pkt_is_contiguous(pkt, access->size)) {
 800cb8e:	f00a f90e 	bl	8016dae <net_pkt_is_contiguous>
 800cb92:	4681      	mov	r9, r0
 800cb94:	b118      	cbz	r0, 800cb9e <net_pkt_get_data+0x1a>
			access->data = pkt->cursor.pos;
 800cb96:	69a3      	ldr	r3, [r4, #24]
 800cb98:	6033      	str	r3, [r6, #0]
			}

			net_pkt_cursor_restore(pkt, &backup);
		}

		return access->data;
 800cb9a:	6835      	ldr	r5, [r6, #0]
 800cb9c:	e017      	b.n	800cbce <net_pkt_get_data+0x4a>
}

static inline bool net_pkt_is_being_overwritten(struct net_pkt *pkt)
{
	return pkt->overwrite;
 800cb9e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		} else if (net_pkt_is_being_overwritten(pkt)) {
 800cba2:	07da      	lsls	r2, r3, #31
 800cba4:	d5f9      	bpl.n	800cb9a <net_pkt_get_data+0x16>
 800cba6:	6835      	ldr	r5, [r6, #0]
			if (!access->data) {
 800cba8:	b9a5      	cbnz	r5, 800cbd4 <net_pkt_get_data+0x50>
				NET_ERR("Uncontiguous data"
 800cbaa:	4b11      	ldr	r3, [pc, #68]	; (800cbf0 <net_pkt_get_data+0x6c>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	075b      	lsls	r3, r3, #29
 800cbb0:	d00d      	beq.n	800cbce <net_pkt_get_data+0x4a>
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	f04f 0100 	mov.w	r1, #0
 800cbb8:	f363 0107 	bfi	r1, r3, #0, #8
 800cbbc:	4a0d      	ldr	r2, [pc, #52]	; (800cbf4 <net_pkt_get_data+0x70>)
 800cbbe:	4b0e      	ldr	r3, [pc, #56]	; (800cbf8 <net_pkt_get_data+0x74>)
 800cbc0:	480e      	ldr	r0, [pc, #56]	; (800cbfc <net_pkt_get_data+0x78>)
 800cbc2:	1a9b      	subs	r3, r3, r2
 800cbc4:	08db      	lsrs	r3, r3, #3
 800cbc6:	f363 118f 	bfi	r1, r3, #6, #10
 800cbca:	f007 f81a 	bl	8013c02 <log_0>
	}

	return NULL;
}
 800cbce:	4628      	mov	r0, r5
 800cbd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (net_pkt_read(pkt, access->data, access->size)) {
 800cbd4:	6872      	ldr	r2, [r6, #4]
 800cbd6:	4629      	mov	r1, r5
 800cbd8:	4620      	mov	r0, r4
 */
static inline void net_pkt_cursor_backup(struct net_pkt *pkt,
					 struct net_pkt_cursor *backup)
{
	backup->buf = pkt->cursor.buf;
	backup->pos = pkt->cursor.pos;
 800cbda:	e9d4 8705 	ldrd	r8, r7, [r4, #20]
 800cbde:	f009 ffe3 	bl	8016ba8 <net_pkt_read>
 */
static inline void net_pkt_cursor_restore(struct net_pkt *pkt,
					  struct net_pkt_cursor *backup)
{
	pkt->cursor.buf = backup->buf;
	pkt->cursor.pos = backup->pos;
 800cbe2:	e9c4 8705 	strd	r8, r7, [r4, #20]
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d0d7      	beq.n	800cb9a <net_pkt_get_data+0x16>
				return NULL;
 800cbea:	464d      	mov	r5, r9
 800cbec:	e7ef      	b.n	800cbce <net_pkt_get_data+0x4a>
 800cbee:	bf00      	nop
 800cbf0:	2000901c 	.word	0x2000901c
 800cbf4:	08019248 	.word	0x08019248
 800cbf8:	080192e0 	.word	0x080192e0
 800cbfc:	0801ba7f 	.word	0x0801ba7f

0800cc00 <net_tc_submit_to_tx_queue>:
static struct net_traffic_class tx_classes[NET_TC_TX_COUNT];
static struct net_traffic_class rx_classes[NET_TC_RX_COUNT];

void net_tc_submit_to_tx_queue(u8_t tc, struct net_pkt *pkt)
{
	k_work_submit_to_queue(&tx_classes[tc].work_q, net_pkt_work(pkt));
 800cc00:	4b03      	ldr	r3, [pc, #12]	; (800cc10 <net_tc_submit_to_tx_queue+0x10>)
 800cc02:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800cc06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cc0a:	f00a b90e 	b.w	8016e2a <k_work_submit_to_queue>
 800cc0e:	bf00      	nop
 800cc10:	20000cb8 	.word	0x20000cb8

0800cc14 <net_tc_submit_to_rx_queue>:
}

void net_tc_submit_to_rx_queue(u8_t tc, struct net_pkt *pkt)
{
	k_work_submit_to_queue(&rx_classes[tc].work_q, net_pkt_work(pkt));
 800cc14:	4b03      	ldr	r3, [pc, #12]	; (800cc24 <net_tc_submit_to_rx_queue+0x10>)
 800cc16:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800cc1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cc1e:	f00a b904 	b.w	8016e2a <k_work_submit_to_queue>
 800cc22:	bf00      	nop
 800cc24:	20000c3c 	.word	0x20000c3c

0800cc28 <net_tx_priority2tc>:

int net_tx_priority2tc(enum net_priority prio)
{
	if (prio > NET_PRIORITY_NC) {
		/* Use default value suggested in 802.1Q */
		prio = NET_PRIORITY_BE;
 800cc28:	2807      	cmp	r0, #7
 800cc2a:	bf88      	it	hi
 800cc2c:	2000      	movhi	r0, #0
	}

	return tx_prio2tc_map[prio];
}
 800cc2e:	4b01      	ldr	r3, [pc, #4]	; (800cc34 <net_tx_priority2tc+0xc>)
 800cc30:	5c18      	ldrb	r0, [r3, r0]
 800cc32:	4770      	bx	lr
 800cc34:	0801bac0 	.word	0x0801bac0

0800cc38 <net_tc_tx_init>:
/* Create workqueue for each traffic class we are using. All the network
 * traffic goes through these classes. There needs to be at least one traffic
 * class in the system.
 */
void net_tc_tx_init(void)
{
 800cc38:	b510      	push	{r4, lr}

#if defined(CONFIG_NET_SHELL)
		/* Fix the thread start address so that "net stacks"
		 * command will print correct stack information.
		 */
		NET_STACK_GET_NAME(TX, tx_stack, 0)[i].stack = tx_stack[i];
 800cc3a:	4b0b      	ldr	r3, [pc, #44]	; (800cc68 <net_tc_tx_init+0x30>)
		tx_classes[i].tc = thread_priority;
 800cc3c:	4c0b      	ldr	r4, [pc, #44]	; (800cc6c <net_tc_tx_init+0x34>)
		NET_STACK_GET_NAME(TX, tx_stack, 0)[i].stack = tx_stack[i];
 800cc3e:	490c      	ldr	r1, [pc, #48]	; (800cc70 <net_tc_tx_init+0x38>)
 800cc40:	6019      	str	r1, [r3, #0]
		tx_classes[i].tc = thread_priority;
 800cc42:	2207      	movs	r2, #7
 800cc44:	67a2      	str	r2, [r4, #120]	; 0x78
		NET_STACK_GET_NAME(TX, tx_stack, 0)[i].prio = thread_priority;
 800cc46:	615a      	str	r2, [r3, #20]
		NET_STACK_GET_NAME(TX, tx_stack, 0)[i].idx = i;
 800cc48:	2200      	movs	r2, #0
 800cc4a:	619a      	str	r2, [r3, #24]
			"prio %d (%d)", i,
			&tx_classes[i].work_q.queue, TX_STACK(i),
			K_THREAD_STACK_SIZEOF(tx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&tx_classes[i].work_q,
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f06f 0308 	mvn.w	r3, #8
 800cc52:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800cc56:	f005 ffab 	bl	8012bb0 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
 800cc5a:	4906      	ldr	r1, [pc, #24]	; (800cc74 <net_tc_tx_init+0x3c>)
 800cc5c:	f104 0010 	add.w	r0, r4, #16
			       tx_stack[i],
			       K_THREAD_STACK_SIZEOF(tx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&tx_classes[i].work_q.thread, "tx_workq");
	}
}
 800cc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc64:	f00b bea9 	b.w	80189ba <z_impl_k_thread_name_set>
 800cc68:	20009220 	.word	0x20009220
 800cc6c:	20000cb8 	.word	0x20000cb8
 800cc70:	20002b48 	.word	0x20002b48
 800cc74:	0801bab7 	.word	0x0801bab7

0800cc78 <net_tc_rx_init>:

void net_tc_rx_init(void)
{
 800cc78:	b510      	push	{r4, lr}

#if defined(CONFIG_NET_SHELL)
		/* Fix the thread start address so that "net stacks"
		 * command will print correct stack information.
		 */
		NET_STACK_GET_NAME(RX, rx_stack, 0)[i].stack = rx_stack[i];
 800cc7a:	4b0b      	ldr	r3, [pc, #44]	; (800cca8 <net_tc_rx_init+0x30>)
		rx_classes[i].tc = thread_priority;
 800cc7c:	4c0b      	ldr	r4, [pc, #44]	; (800ccac <net_tc_rx_init+0x34>)
		NET_STACK_GET_NAME(RX, rx_stack, 0)[i].stack = rx_stack[i];
 800cc7e:	490c      	ldr	r1, [pc, #48]	; (800ccb0 <net_tc_rx_init+0x38>)
 800cc80:	6219      	str	r1, [r3, #32]
		rx_classes[i].tc = thread_priority;
 800cc82:	2207      	movs	r2, #7
 800cc84:	67a2      	str	r2, [r4, #120]	; 0x78
		NET_STACK_GET_NAME(RX, rx_stack, 0)[i].prio = thread_priority;
 800cc86:	635a      	str	r2, [r3, #52]	; 0x34
		NET_STACK_GET_NAME(RX, rx_stack, 0)[i].idx = i;
 800cc88:	2200      	movs	r2, #0
 800cc8a:	639a      	str	r2, [r3, #56]	; 0x38
			"prio %d (%d)", i,
			&rx_classes[i].work_q.queue, RX_STACK(i),
			K_THREAD_STACK_SIZEOF(rx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&rx_classes[i].work_q,
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	f06f 0308 	mvn.w	r3, #8
 800cc92:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cc96:	f005 ff8b 	bl	8012bb0 <k_work_q_start>
 800cc9a:	4906      	ldr	r1, [pc, #24]	; (800ccb4 <net_tc_rx_init+0x3c>)
 800cc9c:	f104 0010 	add.w	r0, r4, #16
			       rx_stack[i],
			       K_THREAD_STACK_SIZEOF(rx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&rx_classes[i].work_q.thread, "rx_workq");
	}
}
 800cca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cca4:	f00b be89 	b.w	80189ba <z_impl_k_thread_name_set>
 800cca8:	20009220 	.word	0x20009220
 800ccac:	20000c3c 	.word	0x20000c3c
 800ccb0:	20002ff8 	.word	0x20002ff8
 800ccb4:	0801baae 	.word	0x0801baae

0800ccb8 <net_icmpv6_register_handler>:
Z_GENLIST_PREPEND(slist, snode)
 800ccb8:	4b03      	ldr	r3, [pc, #12]	; (800ccc8 <net_icmpv6_register_handler+0x10>)
 800ccba:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 800ccbc:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
 800ccbe:	685a      	ldr	r2, [r3, #4]
	list->head = node;
 800ccc0:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
 800ccc2:	b902      	cbnz	r2, 800ccc6 <net_icmpv6_register_handler+0xe>
	list->tail = node;
 800ccc4:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
 800ccc6:	4770      	bx	lr
 800ccc8:	20000d34 	.word	0x20000d34

0800cccc <net_icmpv6_unregister_handler>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800cccc:	4b0c      	ldr	r3, [pc, #48]	; (800cd00 <net_icmpv6_unregister_handler+0x34>)
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	2100      	movs	r1, #0
 800ccd2:	b902      	cbnz	r2, 800ccd6 <net_icmpv6_unregister_handler+0xa>

void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_find_and_remove(&handlers, &handler->node);
}
 800ccd4:	4770      	bx	lr
 800ccd6:	4290      	cmp	r0, r2
 800ccd8:	d10f      	bne.n	800ccfa <net_icmpv6_unregister_handler+0x2e>
Z_GENLIST_REMOVE(slist, snode)
 800ccda:	6802      	ldr	r2, [r0, #0]
 800ccdc:	b939      	cbnz	r1, 800ccee <net_icmpv6_unregister_handler+0x22>
 800ccde:	6859      	ldr	r1, [r3, #4]
	list->head = node;
 800cce0:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
 800cce2:	4288      	cmp	r0, r1
 800cce4:	d100      	bne.n	800cce8 <net_icmpv6_unregister_handler+0x1c>
	list->tail = node;
 800cce6:	605a      	str	r2, [r3, #4]
	parent->next = child;
 800cce8:	2300      	movs	r3, #0
 800ccea:	6003      	str	r3, [r0, #0]
 800ccec:	4770      	bx	lr
 800ccee:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 800ccf0:	685a      	ldr	r2, [r3, #4]
 800ccf2:	4290      	cmp	r0, r2
	list->tail = node;
 800ccf4:	bf08      	it	eq
 800ccf6:	6059      	streq	r1, [r3, #4]
 800ccf8:	e7f6      	b.n	800cce8 <net_icmpv6_unregister_handler+0x1c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800ccfa:	4611      	mov	r1, r2
 800ccfc:	6812      	ldr	r2, [r2, #0]
 800ccfe:	e7e8      	b.n	800ccd2 <net_icmpv6_unregister_handler+0x6>
 800cd00:	20000d34 	.word	0x20000d34

0800cd04 <net_icmpv6_input>:
	return ret;
}

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  struct net_ipv6_hdr *ip_hdr)
{
 800cd04:	b573      	push	{r0, r1, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 800cd06:	2200      	movs	r2, #0
 800cd08:	2304      	movs	r3, #4
{
 800cd0a:	460e      	mov	r6, r1
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv6_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 800cd0c:	4669      	mov	r1, sp
{
 800cd0e:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 800cd10:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 800cd14:	f7ff ff36 	bl	800cb84 <net_pkt_get_data>
	if (!icmp_hdr) {
 800cd18:	4604      	mov	r4, r0
 800cd1a:	b910      	cbnz	r0, 800cd22 <net_icmpv6_input+0x1e>
		NET_DBG("DROP: NULL ICMPv6 header");
		return NET_DROP;
 800cd1c:	2002      	movs	r0, #2
	}
drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
 800cd1e:	b002      	add	sp, #8
 800cd20:	bd70      	pop	{r4, r5, r6, pc}
extern u16_t net_calc_chksum_ipv4(struct net_pkt *pkt);
#endif /* CONFIG_NET_IPV4 */

static inline u16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
 800cd22:	213a      	movs	r1, #58	; 0x3a
 800cd24:	4628      	mov	r0, r5
 800cd26:	f009 fa55 	bl	80161d4 <net_calc_chksum>
	if (net_calc_chksum_icmpv6(pkt) != 0U) {
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	d1f6      	bne.n	800cd1c <net_icmpv6_input+0x18>
 * Packet needs to be set to overwrite mode.
 */
static inline int net_pkt_acknowledge_data(struct net_pkt *pkt,
					   struct net_pkt_data_access *access)
{
	return net_pkt_skip(pkt, access->size);
 800cd2e:	9901      	ldr	r1, [sp, #4]
 800cd30:	4628      	mov	r0, r5
 800cd32:	f009 ff23 	bl	8016b7c <net_pkt_skip>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
 800cd36:	4b0b      	ldr	r3, [pc, #44]	; (800cd64 <net_icmpv6_input+0x60>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d0ee      	beq.n	800cd1c <net_icmpv6_input+0x18>
		if (cb->type == icmp_hdr->type &&
 800cd3e:	7821      	ldrb	r1, [r4, #0]
 800cd40:	7a1a      	ldrb	r2, [r3, #8]
 800cd42:	428a      	cmp	r2, r1
 800cd44:	d10a      	bne.n	800cd5c <net_icmpv6_input+0x58>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
 800cd46:	7a5a      	ldrb	r2, [r3, #9]
		if (cb->type == icmp_hdr->type &&
 800cd48:	7860      	ldrb	r0, [r4, #1]
 800cd4a:	4290      	cmp	r0, r2
 800cd4c:	d000      	beq.n	800cd50 <net_icmpv6_input+0x4c>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
 800cd4e:	b92a      	cbnz	r2, 800cd5c <net_icmpv6_input+0x58>
			return cb->handler(pkt, ip_hdr, icmp_hdr);
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	4622      	mov	r2, r4
 800cd54:	4631      	mov	r1, r6
 800cd56:	4628      	mov	r0, r5
 800cd58:	4798      	blx	r3
 800cd5a:	e7e0      	b.n	800cd1e <net_icmpv6_input+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800cd5c:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1ee      	bne.n	800cd40 <net_icmpv6_input+0x3c>
 800cd62:	e7db      	b.n	800cd1c <net_icmpv6_input+0x18>
 800cd64:	20000d34 	.word	0x20000d34

0800cd68 <net_icmpv6_init>:
	.handler = icmpv6_handle_echo_request,
};

void net_icmpv6_init(void)
{
	net_icmpv6_register_handler(&echo_request_handler);
 800cd68:	4801      	ldr	r0, [pc, #4]	; (800cd70 <net_icmpv6_init+0x8>)
 800cd6a:	f7ff bfa5 	b.w	800ccb8 <net_icmpv6_register_handler>
 800cd6e:	bf00      	nop
 800cd70:	200088f0 	.word	0x200088f0

0800cd74 <net_nbr_link>:
	return NULL;
}

int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
 800cd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
 800cd78:	7843      	ldrb	r3, [r0, #1]
 800cd7a:	2bff      	cmp	r3, #255	; 0xff
{
 800cd7c:	4607      	mov	r7, r0
 800cd7e:	4688      	mov	r8, r1
 800cd80:	4616      	mov	r6, r2
	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
 800cd82:	d148      	bne.n	800ce16 <net_nbr_link+0xa2>
 800cd84:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800ce24 <net_nbr_link+0xb0>
	int i, avail = -1;
 800cd88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 800cd8c:	2500      	movs	r5, #0
 800cd8e:	46d1      	mov	r9, sl
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
 800cd90:	1c62      	adds	r2, r4, #1
 800cd92:	f89a 3008 	ldrb.w	r3, [sl, #8]
 800cd96:	d115      	bne.n	800cdc4 <net_nbr_link+0x50>
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d03a      	beq.n	800ce12 <net_nbr_link+0x9e>
			avail = i;
		}

		if (net_neighbor_lladdr[i].ref &&
		    !memcmp(lladdr->addr,
 800cd9c:	7932      	ldrb	r2, [r6, #4]
 800cd9e:	6830      	ldr	r0, [r6, #0]
 800cda0:	f10a 0102 	add.w	r1, sl, #2
 800cda4:	f7f7 fdad 	bl	8004902 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
 800cda8:	b970      	cbnz	r0, 800cdc8 <net_nbr_link+0x54>
			    net_neighbor_lladdr[i].lladdr.addr,
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
 800cdaa:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800cdae:	4499      	add	r9, r3
 800cdb0:	f899 3008 	ldrb.w	r3, [r9, #8]
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	f889 3008 	strb.w	r3, [r9, #8]

			nbr->idx = i;
 800cdba:	707d      	strb	r5, [r7, #1]
			nbr->iface = iface;
 800cdbc:	f8c7 8008 	str.w	r8, [r7, #8]
	net_neighbor_lladdr[avail].lladdr.type = lladdr->type;

	nbr->iface = iface;

	return 0;
}
 800cdc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (net_neighbor_lladdr[i].ref &&
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d1e9      	bne.n	800cd9c <net_nbr_link+0x28>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 800cdc8:	3501      	adds	r5, #1
 800cdca:	2d08      	cmp	r5, #8
 800cdcc:	f10a 0a09 	add.w	sl, sl, #9
 800cdd0:	d1de      	bne.n	800cd90 <net_nbr_link+0x1c>
	if (avail < 0) {
 800cdd2:	1c63      	adds	r3, r4, #1
 800cdd4:	d022      	beq.n	800ce1c <net_nbr_link+0xa8>
	net_neighbor_lladdr[avail].ref++;
 800cdd6:	00e5      	lsls	r5, r4, #3
 800cdd8:	1928      	adds	r0, r5, r4
 800cdda:	eb09 0300 	add.w	r3, r9, r0
 800cdde:	7a1a      	ldrb	r2, [r3, #8]
 800cde0:	3201      	adds	r2, #1
 800cde2:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
 800cde4:	707c      	strb	r4, [r7, #1]
	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
 800cde6:	6831      	ldr	r1, [r6, #0]
 800cde8:	7932      	ldrb	r2, [r6, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
 800cdea:	b131      	cbz	r1, 800cdfa <net_nbr_link+0x86>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
 800cdec:	2a06      	cmp	r2, #6
 800cdee:	d804      	bhi.n	800cdfa <net_nbr_link+0x86>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
 800cdf0:	3002      	adds	r0, #2
	lladdr_store->len = new_len;
 800cdf2:	705a      	strb	r2, [r3, #1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800cdf4:	4448      	add	r0, r9
 800cdf6:	f7f7 fd92 	bl	800491e <memcpy>
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
 800cdfa:	442c      	add	r4, r5
 800cdfc:	eb09 0304 	add.w	r3, r9, r4
 800ce00:	7932      	ldrb	r2, [r6, #4]
 800ce02:	705a      	strb	r2, [r3, #1]
	net_neighbor_lladdr[avail].lladdr.type = lladdr->type;
 800ce04:	7973      	ldrb	r3, [r6, #5]
 800ce06:	f809 3004 	strb.w	r3, [r9, r4]
	return 0;
 800ce0a:	2000      	movs	r0, #0
	nbr->iface = iface;
 800ce0c:	f8c7 8008 	str.w	r8, [r7, #8]
	return 0;
 800ce10:	e7d6      	b.n	800cdc0 <net_nbr_link+0x4c>
 800ce12:	462c      	mov	r4, r5
 800ce14:	e7d8      	b.n	800cdc8 <net_nbr_link+0x54>
		return -EALREADY;
 800ce16:	f06f 0077 	mvn.w	r0, #119	; 0x77
 800ce1a:	e7d1      	b.n	800cdc0 <net_nbr_link+0x4c>
		return -ENOENT;
 800ce1c:	f06f 0001 	mvn.w	r0, #1
 800ce20:	e7ce      	b.n	800cdc0 <net_nbr_link+0x4c>
 800ce22:	bf00      	nop
 800ce24:	20001b6a 	.word	0x20001b6a

0800ce28 <net_nbr_unlink>:

int net_nbr_unlink(struct net_nbr *nbr, struct net_linkaddr *lladdr)
{
 800ce28:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(lladdr);

	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
 800ce2a:	7841      	ldrb	r1, [r0, #1]
 800ce2c:	29ff      	cmp	r1, #255	; 0xff
 800ce2e:	d015      	beq.n	800ce5c <net_nbr_unlink+0x34>
	}

	NET_ASSERT(nbr->idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
	NET_ASSERT(net_neighbor_lladdr[nbr->idx].ref > 0);

	net_neighbor_lladdr[nbr->idx].ref--;
 800ce30:	4c0c      	ldr	r4, [pc, #48]	; (800ce64 <net_nbr_unlink+0x3c>)
 800ce32:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 800ce36:	4422      	add	r2, r4
 800ce38:	7a13      	ldrb	r3, [r2, #8]
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	7213      	strb	r3, [r2, #8]

	if (!net_neighbor_lladdr[nbr->idx].ref) {
 800ce40:	b933      	cbnz	r3, 800ce50 <net_nbr_unlink+0x28>
		(void)memset(net_neighbor_lladdr[nbr->idx].lladdr.addr, 0,
 800ce42:	2209      	movs	r2, #9
 800ce44:	2502      	movs	r5, #2
 800ce46:	fb12 5201 	smlabb	r2, r2, r1, r5
 800ce4a:	18a1      	adds	r1, r4, r2
__ssp_bos_icheck3(memset, void *, int)
 800ce4c:	50a3      	str	r3, [r4, r2]
 800ce4e:	808b      	strh	r3, [r1, #4]
			     sizeof(net_neighbor_lladdr[nbr->idx].lladdr.addr));
	}

	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
 800ce50:	23ff      	movs	r3, #255	; 0xff
 800ce52:	7043      	strb	r3, [r0, #1]
	nbr->iface = NULL;
 800ce54:	2300      	movs	r3, #0
 800ce56:	6083      	str	r3, [r0, #8]

	return 0;
 800ce58:	4618      	mov	r0, r3
}
 800ce5a:	bd30      	pop	{r4, r5, pc}
		return -EALREADY;
 800ce5c:	f06f 0077 	mvn.w	r0, #119	; 0x77
 800ce60:	e7fb      	b.n	800ce5a <net_nbr_unlink+0x32>
 800ce62:	bf00      	nop
 800ce64:	20001b6a 	.word	0x20001b6a

0800ce68 <net_nbr_get_lladdr>:
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
}
 800ce68:	4b02      	ldr	r3, [pc, #8]	; (800ce74 <net_nbr_get_lladdr+0xc>)
	return &net_neighbor_lladdr[idx].lladdr;
 800ce6a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
 800ce6e:	4418      	add	r0, r3
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	20001b6a 	.word	0x20001b6a

0800ce78 <net_ipv6_input>:
}

#endif /* CONFIG_NET_ROUTE */

enum net_verdict net_ipv6_input(struct net_pkt *pkt, bool is_loopback)
{
 800ce78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 800ce7c:	2328      	movs	r3, #40	; 0x28
{
 800ce7e:	b08b      	sub	sp, #44	; 0x2c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 800ce80:	2600      	movs	r6, #0
 800ce82:	e9cd 6304 	strd	r6, r3, [sp, #16]
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 800ce86:	ab06      	add	r3, sp, #24
 800ce88:	9308      	str	r3, [sp, #32]
 800ce8a:	2308      	movs	r3, #8
 800ce8c:	9309      	str	r3, [sp, #36]	; 0x24
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
	enum net_verdict verdict = NET_DROP;
	int real_len = net_pkt_get_len(pkt);
 800ce8e:	6903      	ldr	r3, [r0, #16]
{
 800ce90:	4604      	mov	r4, r0
 800ce92:	4688      	mov	r8, r1
	while (buf) {
 800ce94:	b93b      	cbnz	r3, 800cea6 <net_ipv6_input+0x2e>
	union net_ip_header ip;
	int pkt_len;

	net_stats_update_ipv6_recv(net_pkt_iface(pkt));

	hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 800ce96:	a904      	add	r1, sp, #16
 800ce98:	4620      	mov	r0, r4
 800ce9a:	f7ff fe73 	bl	800cb84 <net_pkt_get_data>
	if (!hdr) {
 800ce9e:	4605      	mov	r5, r0
 800cea0:	b928      	cbnz	r0, 800ceae <net_ipv6_input+0x36>
			      net_pkt_get_current_offset(pkt) - 1);

	NET_DBG("DROP: Unknown/wrong nexthdr type");
	net_stats_update_ip_errors_protoerr(net_pkt_iface(pkt));

	return NET_DROP;
 800cea2:	2002      	movs	r0, #2
 800cea4:	e08e      	b.n	800cfc4 <net_ipv6_input+0x14c>
		bytes += buf->len;
 800cea6:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
 800cea8:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
 800ceaa:	4416      	add	r6, r2
		buf = buf->frags;
 800ceac:	e7f2      	b.n	800ce94 <net_ipv6_input+0x1c>
	pkt_len = ntohs(hdr->len) + sizeof(struct net_ipv6_hdr);
 800ceae:	8883      	ldrh	r3, [r0, #4]
 800ceb0:	021f      	lsls	r7, r3, #8
 800ceb2:	ea47 2713 	orr.w	r7, r7, r3, lsr #8
 800ceb6:	b2bf      	uxth	r7, r7
 800ceb8:	3728      	adds	r7, #40	; 0x28
	if (real_len < pkt_len) {
 800ceba:	42b7      	cmp	r7, r6
 800cebc:	dcf1      	bgt.n	800cea2 <net_ipv6_input+0x2a>
	} else if (real_len > pkt_len) {
 800cebe:	da03      	bge.n	800cec8 <net_ipv6_input+0x50>
		net_pkt_update_length(pkt, pkt_len);
 800cec0:	4639      	mov	r1, r7
 800cec2:	4620      	mov	r0, r4
 800cec4:	f009 fee2 	bl	8016c8c <net_pkt_update_length>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 800cec8:	68ab      	ldr	r3, [r5, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800ceca:	b933      	cbnz	r3, 800ceda <net_ipv6_input+0x62>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 800cecc:	68eb      	ldr	r3, [r5, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 800cece:	b923      	cbnz	r3, 800ceda <net_ipv6_input+0x62>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800ced0:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 800ced2:	b913      	cbnz	r3, 800ceda <net_ipv6_input+0x62>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
 800ced4:	696b      	ldr	r3, [r5, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d0e3      	beq.n	800cea2 <net_ipv6_input+0x2a>
	if (net_ipv6_is_addr_mcast(&hdr->src) ||
 800ceda:	7a2b      	ldrb	r3, [r5, #8]
 800cedc:	2bff      	cmp	r3, #255	; 0xff
 800cede:	d0e0      	beq.n	800cea2 <net_ipv6_input+0x2a>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 800cee0:	7e29      	ldrb	r1, [r5, #24]
 800cee2:	29ff      	cmp	r1, #255	; 0xff
	    net_ipv6_is_addr_mcast_scope(&hdr->dst, 0)) {
 800cee4:	f105 0618 	add.w	r6, r5, #24
 800cee8:	d102      	bne.n	800cef0 <net_ipv6_input+0x78>
 800ceea:	7e6b      	ldrb	r3, [r5, #25]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d0d8      	beq.n	800cea2 <net_ipv6_input+0x2a>
	if (!is_loopback) {
 800cef0:	f1b8 0f00 	cmp.w	r8, #0
 800cef4:	d130      	bne.n	800cf58 <net_ipv6_input+0xe0>
		if (net_ipv6_is_addr_loopback(&hdr->dst) ||
 800cef6:	4630      	mov	r0, r6
 800cef8:	f00a f953 	bl	80171a2 <net_ipv6_is_addr_loopback>
 800cefc:	2800      	cmp	r0, #0
 800cefe:	d1d0      	bne.n	800cea2 <net_ipv6_input+0x2a>
		    net_ipv6_is_addr_loopback(&hdr->src)) {
 800cf00:	f105 0008 	add.w	r0, r5, #8
 800cf04:	f00a f94d 	bl	80171a2 <net_ipv6_is_addr_loopback>
		if (net_ipv6_is_addr_loopback(&hdr->dst) ||
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d1ca      	bne.n	800cea2 <net_ipv6_input+0x2a>
 800cf0c:	29ff      	cmp	r1, #255	; 0xff
 800cf0e:	d102      	bne.n	800cf16 <net_ipv6_input+0x9e>
 800cf10:	7e6b      	ldrb	r3, [r5, #25]
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d0c5      	beq.n	800cea2 <net_ipv6_input+0x2a>
		    (net_ipv6_is_addr_mcast_group(
 800cf16:	f7ff f8f5 	bl	800c104 <net_ipv6_unspecified_address>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 800cf1a:	8b6a      	ldrh	r2, [r5, #26]
 800cf1c:	8843      	ldrh	r3, [r0, #2]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d11a      	bne.n	800cf58 <net_ipv6_input+0xe0>
	return UNALIGNED_GET(&addr->s6_addr16[1]) == group->s6_addr16[1] &&
 800cf22:	8baa      	ldrh	r2, [r5, #28]
 800cf24:	8883      	ldrh	r3, [r0, #4]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d116      	bne.n	800cf58 <net_ipv6_input+0xe0>
		UNALIGNED_GET(&addr->s6_addr16[2]) == group->s6_addr16[2] &&
 800cf2a:	8bea      	ldrh	r2, [r5, #30]
 800cf2c:	88c3      	ldrh	r3, [r0, #6]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d112      	bne.n	800cf58 <net_ipv6_input+0xe0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == group->s6_addr32[1] &&
 800cf32:	6842      	ldr	r2, [r0, #4]
 800cf34:	69eb      	ldr	r3, [r5, #28]
		UNALIGNED_GET(&addr->s6_addr16[3]) == group->s6_addr16[3] &&
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d10e      	bne.n	800cf58 <net_ipv6_input+0xe0>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 800cf3a:	6a2a      	ldr	r2, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == group->s6_addr32[1] &&
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d10b      	bne.n	800cf58 <net_ipv6_input+0xe0>
		UNALIGNED_GET(&addr->s6_addr32[3]) == group->s6_addr32[3];
 800cf40:	6a6a      	ldr	r2, [r5, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 800cf42:	68c3      	ldr	r3, [r0, #12]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d107      	bne.n	800cf58 <net_ipv6_input+0xe0>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 800cf48:	7e2b      	ldrb	r3, [r5, #24]
 800cf4a:	2bff      	cmp	r3, #255	; 0xff
 800cf4c:	d104      	bne.n	800cf58 <net_ipv6_input+0xe0>
 800cf4e:	7e6b      	ldrb	r3, [r5, #25]
 800cf50:	2b05      	cmp	r3, #5
 800cf52:	d0a6      	beq.n	800cea2 <net_ipv6_input+0x2a>
 800cf54:	2b08      	cmp	r3, #8
 800cf56:	d0a4      	beq.n	800cea2 <net_ipv6_input+0x2a>
	net_pkt_set_ipv6_next_hdr(pkt, hdr->nexthdr);
 800cf58:	79ab      	ldrb	r3, [r5, #6]
	pkt->ipv6_next_hdr = next_hdr;
 800cf5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	pkt->ip_hdr_len = len;
 800cf5e:	2328      	movs	r3, #40	; 0x28
 800cf60:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ipv6_ext_len = len;
 800cf64:	2100      	movs	r1, #0
	return pkt->frags->data;
 800cf66:	6923      	ldr	r3, [r4, #16]
	pkt->ipv6_ext_len = len;
 800cf68:	87e1      	strh	r1, [r4, #62]	; 0x3e
	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_HDR(pkt)->hop_limit);
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	79db      	ldrb	r3, [r3, #7]
	pkt->ipv6_hop_limit = hop_limit;
 800cf6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
 800cf72:	4630      	mov	r0, r6
 800cf74:	f7fd fe60 	bl	800ac38 <net_if_ipv6_addr_lookup>
	if (!net_ipv6_is_my_addr(&hdr->dst) &&
 800cf78:	4601      	mov	r1, r0
 800cf7a:	bb30      	cbnz	r0, 800cfca <net_ipv6_input+0x152>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	f7fe fa9f 	bl	800b4c0 <net_if_ipv6_maddr_lookup>
 800cf82:	bb10      	cbnz	r0, 800cfca <net_ipv6_input+0x152>
	    !net_ipv6_is_my_maddr(&hdr->dst) &&
 800cf84:	7e2b      	ldrb	r3, [r5, #24]
 800cf86:	2bff      	cmp	r3, #255	; 0xff
 800cf88:	d01f      	beq.n	800cfca <net_ipv6_input+0x152>
		found = net_route_get_info(net_pkt_iface(pkt),
 800cf8a:	ab03      	add	r3, sp, #12
 800cf8c:	aa02      	add	r2, sp, #8
 800cf8e:	4631      	mov	r1, r6
 800cf90:	6a20      	ldr	r0, [r4, #32]
 800cf92:	f00a fd71 	bl	8017a78 <net_route_get_info>
	if (found) {
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d083      	beq.n	800cea2 <net_ipv6_input+0x2a>
		if (route) {
 800cf9a:	9b02      	ldr	r3, [sp, #8]
 800cf9c:	b153      	cbz	r3, 800cfb4 <net_ipv6_input+0x13c>
			net_pkt_set_iface(pkt, route->iface);
 800cf9e:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
 800cfa0:	6223      	str	r3, [r4, #32]
	if (iface) {
 800cfa2:	b13b      	cbz	r3, 800cfb4 <net_ipv6_input+0x13c>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	7d52      	ldrb	r2, [r2, #21]
 800cfa8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	7d5b      	ldrb	r3, [r3, #21]
 800cfb0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		ret = net_route_packet(pkt, nexthop);
 800cfb4:	9903      	ldr	r1, [sp, #12]
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f001 fbba 	bl	800e730 <net_route_packet>
		if (ret < 0) {
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	f6ff af70 	blt.w	800cea2 <net_ipv6_input+0x2a>
			return NET_OK;
 800cfc2:	2000      	movs	r0, #0
}
 800cfc4:	b00b      	add	sp, #44	; 0x2c
 800cfc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_pkt_skip(pkt, access->size);
 800cfca:	9905      	ldr	r1, [sp, #20]
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f009 fdd5 	bl	8016b7c <net_pkt_skip>
	u16_t ext_len = 0U;
 800cfd2:	f04f 0900 	mov.w	r9, #0
	nexthdr = hdr->nexthdr;
 800cfd6:	79ae      	ldrb	r6, [r5, #6]
	u8_t ext_bitmap = 0U;
 800cfd8:	46c8      	mov	r8, r9
		     u8_t flags);


static inline bool net_ipv6_is_nexthdr_upper_layer(u8_t nexthdr)
{
	return (nexthdr == IPPROTO_ICMPV6 || nexthdr == IPPROTO_UDP ||
 800cfda:	2e3a      	cmp	r6, #58	; 0x3a
 800cfdc:	d003      	beq.n	800cfe6 <net_ipv6_input+0x16e>
 800cfde:	2e11      	cmp	r6, #17
 800cfe0:	d001      	beq.n	800cfe6 <net_ipv6_input+0x16e>
	while (!net_ipv6_is_nexthdr_upper_layer(nexthdr)) {
 800cfe2:	2e06      	cmp	r6, #6
 800cfe4:	d113      	bne.n	800d00e <net_ipv6_input+0x196>
	pkt->family = family;
 800cfe6:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
	pkt->ipv6_ext_len = len;
 800cfea:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
	pkt->family = family;
 800cfee:	2202      	movs	r2, #2
 800cff0:	f362 0343 	bfi	r3, r2, #1, #3
	switch (nexthdr) {
 800cff4:	2e11      	cmp	r6, #17
 800cff6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
 800cffa:	f000 80a7 	beq.w	800d14c <net_ipv6_input+0x2d4>
 800cffe:	2e3a      	cmp	r6, #58	; 0x3a
 800d000:	f47f af4f 	bne.w	800cea2 <net_ipv6_input+0x2a>
		verdict = net_icmpv6_input(pkt, hdr);
 800d004:	4629      	mov	r1, r5
 800d006:	4620      	mov	r0, r4
 800d008:	f7ff fe7c 	bl	800cd04 <net_icmpv6_input>
	if (verdict == NET_DROP) {
 800d00c:	e7da      	b.n	800cfc4 <net_ipv6_input+0x14c>
	return net_pkt_read(pkt, data, 1);
 800d00e:	2201      	movs	r2, #1
 800d010:	f10d 0106 	add.w	r1, sp, #6
 800d014:	4620      	mov	r0, r4
 800d016:	f009 fdc7 	bl	8016ba8 <net_pkt_read>
		if (net_pkt_read_u8(pkt, &next_nexthdr)) {
 800d01a:	2800      	cmp	r0, #0
 800d01c:	f47f af41 	bne.w	800cea2 <net_ipv6_input+0x2a>
		switch (nexthdr) {
 800d020:	2e3b      	cmp	r6, #59	; 0x3b
 800d022:	f43f af3e 	beq.w	800cea2 <net_ipv6_input+0x2a>
 800d026:	2e3c      	cmp	r6, #60	; 0x3c
 800d028:	d040      	beq.n	800d0ac <net_ipv6_input+0x234>
 800d02a:	2e00      	cmp	r6, #0
 800d02c:	f040 809e 	bne.w	800d16c <net_ipv6_input+0x2f4>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
 800d030:	f018 0f01 	tst.w	r8, #1
 800d034:	d013      	beq.n	800d05e <net_ipv6_input+0x1e6>
				NET_ERR("DROP: multiple hop-by-hop");
 800d036:	4b50      	ldr	r3, [pc, #320]	; (800d178 <net_ipv6_input+0x300>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	075b      	lsls	r3, r3, #29
 800d03c:	f43f af31 	beq.w	800cea2 <net_ipv6_input+0x2a>
 800d040:	2301      	movs	r3, #1
 800d042:	f04f 0100 	mov.w	r1, #0
 800d046:	f363 0107 	bfi	r1, r3, #0, #8
 800d04a:	4a4c      	ldr	r2, [pc, #304]	; (800d17c <net_ipv6_input+0x304>)
 800d04c:	4b4c      	ldr	r3, [pc, #304]	; (800d180 <net_ipv6_input+0x308>)
 800d04e:	484d      	ldr	r0, [pc, #308]	; (800d184 <net_ipv6_input+0x30c>)
 800d050:	1a9b      	subs	r3, r3, r2
 800d052:	08db      	lsrs	r3, r3, #3
 800d054:	f363 118f 	bfi	r1, r3, #6, #10
 800d058:	f006 fdd3 	bl	8013c02 <log_0>
 800d05c:	e721      	b.n	800cea2 <net_ipv6_input+0x2a>
			if (nexthdr != hdr->nexthdr) {
 800d05e:	79ab      	ldrb	r3, [r5, #6]
 800d060:	2b00      	cmp	r3, #0
 800d062:	f040 8083 	bne.w	800d16c <net_ipv6_input+0x2f4>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
 800d066:	f048 0801 	orr.w	r8, r8, #1
	u16_t exthdr_len = 0U;
 800d06a:	2300      	movs	r3, #0
 800d06c:	2201      	movs	r2, #1
 800d06e:	a903      	add	r1, sp, #12
 800d070:	4620      	mov	r0, r4
		exthdr_len = ipv6_handle_ext_hdr_options(pkt, hdr, pkt_len);
 800d072:	b2be      	uxth	r6, r7
	u16_t exthdr_len = 0U;
 800d074:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d078:	f009 fd96 	bl	8016ba8 <net_pkt_read>
	if (net_pkt_read_u8(pkt, (u8_t *)&exthdr_len)) {
 800d07c:	2800      	cmp	r0, #0
 800d07e:	f47f af10 	bne.w	800cea2 <net_ipv6_input+0x2a>
	exthdr_len = exthdr_len * 8U + 8;
 800d082:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d086:	3301      	adds	r3, #1
 800d088:	00db      	lsls	r3, r3, #3
 800d08a:	b29b      	uxth	r3, r3
	if (exthdr_len > pkt_len) {
 800d08c:	429e      	cmp	r6, r3
	exthdr_len = exthdr_len * 8U + 8;
 800d08e:	f8ad 300c 	strh.w	r3, [sp, #12]
	if (exthdr_len > pkt_len) {
 800d092:	f4ff af06 	bcc.w	800cea2 <net_ipv6_input+0x2a>
	length += 2U;
 800d096:	2602      	movs	r6, #2
	while (length < exthdr_len) {
 800d098:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d09c:	429e      	cmp	r6, r3
 800d09e:	d310      	bcc.n	800d0c2 <net_ipv6_input+0x24a>
		ext_len += exthdr_len;
 800d0a0:	4499      	add	r9, r3
 800d0a2:	fa1f f989 	uxth.w	r9, r9
		nexthdr = next_nexthdr;
 800d0a6:	f89d 6006 	ldrb.w	r6, [sp, #6]
 800d0aa:	e796      	b.n	800cfda <net_ipv6_input+0x162>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_DESTO2) {
 800d0ac:	f018 0f40 	tst.w	r8, #64	; 0x40
 800d0b0:	d15c      	bne.n	800d16c <net_ipv6_input+0x2f4>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_DESTO1) {
 800d0b2:	f018 0f02 	tst.w	r8, #2
				ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_DESTO2;
 800d0b6:	bf14      	ite	ne
 800d0b8:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
				ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_DESTO1;
 800d0bc:	f048 0802 	orreq.w	r8, r8, #2
 800d0c0:	e7d3      	b.n	800d06a <net_ipv6_input+0x1f2>
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	f10d 0107 	add.w	r1, sp, #7
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f009 fd6d 	bl	8016ba8 <net_pkt_read>
		if (net_pkt_read_u8(pkt, &opt_type)) {
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	f47f aee7 	bne.w	800cea2 <net_ipv6_input+0x2a>
		if (opt_type != NET_IPV6_EXT_HDR_OPT_PAD1) {
 800d0d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d0d8:	b9fb      	cbnz	r3, 800d11a <net_ipv6_input+0x2a2>
		switch (opt_type) {
 800d0da:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d0de:	b322      	cbz	r2, 800d12a <net_ipv6_input+0x2b2>
 800d0e0:	2a01      	cmp	r2, #1
 800d0e2:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800d0e6:	d023      	beq.n	800d130 <net_ipv6_input+0x2b8>
			if (opt_len > (exthdr_len - (1 + 1 + 1 + 1))) {
 800d0e8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d0ec:	3b04      	subs	r3, #4
 800d0ee:	4299      	cmp	r1, r3
 800d0f0:	f73f aed7 	bgt.w	800cea2 <net_ipv6_input+0x2a>
	switch (opt_type & 0xc0) {
 800d0f4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800d0f8:	2a80      	cmp	r2, #128	; 0x80
 800d0fa:	d020      	beq.n	800d13e <net_ipv6_input+0x2c6>
 800d0fc:	2ac0      	cmp	r2, #192	; 0xc0
 800d0fe:	d01a      	beq.n	800d136 <net_ipv6_input+0x2be>
 800d100:	2a00      	cmp	r2, #0
 800d102:	f47f aece 	bne.w	800cea2 <net_ipv6_input+0x2a>
			if (net_pkt_skip(pkt, opt_len)) {
 800d106:	4620      	mov	r0, r4
 800d108:	f009 fd38 	bl	8016b7c <net_pkt_skip>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	f47f aec8 	bne.w	800cea2 <net_ipv6_input+0x2a>
			length += opt_len + 2;
 800d112:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d116:	441e      	add	r6, r3
 800d118:	e00b      	b.n	800d132 <net_ipv6_input+0x2ba>
 800d11a:	2201      	movs	r2, #1
 800d11c:	a902      	add	r1, sp, #8
 800d11e:	4620      	mov	r0, r4
 800d120:	f009 fd42 	bl	8016ba8 <net_pkt_read>
			if (net_pkt_read_u8(pkt, &opt_len)) {
 800d124:	2800      	cmp	r0, #0
 800d126:	d0d8      	beq.n	800d0da <net_ipv6_input+0x262>
 800d128:	e6bb      	b.n	800cea2 <net_ipv6_input+0x2a>
			length++;
 800d12a:	3601      	adds	r6, #1
			length += opt_len + 2;
 800d12c:	b2b6      	uxth	r6, r6
			break;
 800d12e:	e7b3      	b.n	800d098 <net_ipv6_input+0x220>
			length += opt_len + 2;
 800d130:	440e      	add	r6, r1
			length += opt_len + 2;
 800d132:	3602      	adds	r6, #2
 800d134:	e7fa      	b.n	800d12c <net_ipv6_input+0x2b4>
		if (net_ipv6_is_addr_mcast(&hdr->dst)) {
 800d136:	7e2b      	ldrb	r3, [r5, #24]
 800d138:	2bff      	cmp	r3, #255	; 0xff
 800d13a:	f43f aeb2 	beq.w	800cea2 <net_ipv6_input+0x2a>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
 800d13e:	4633      	mov	r3, r6
 800d140:	2202      	movs	r2, #2
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
 800d142:	2104      	movs	r1, #4
 800d144:	4620      	mov	r0, r4
 800d146:	f009 ff0c 	bl	8016f62 <net_icmpv6_send_error>
 800d14a:	e6aa      	b.n	800cea2 <net_ipv6_input+0x2a>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
 800d14c:	a908      	add	r1, sp, #32
 800d14e:	4620      	mov	r0, r4
 800d150:	f00a fd11 	bl	8017b76 <net_udp_input>
 800d154:	9002      	str	r0, [sp, #8]
		if (proto_hdr.udp) {
 800d156:	2800      	cmp	r0, #0
 800d158:	f43f aea3 	beq.w	800cea2 <net_ipv6_input+0x2a>
	verdict = net_conn_input(pkt, &ip, nexthdr, &proto_hdr);
 800d15c:	ab02      	add	r3, sp, #8
 800d15e:	4632      	mov	r2, r6
 800d160:	a903      	add	r1, sp, #12
 800d162:	4620      	mov	r0, r4
	ip.ipv6 = hdr;
 800d164:	9503      	str	r5, [sp, #12]
	verdict = net_conn_input(pkt, &ip, nexthdr, &proto_hdr);
 800d166:	f001 fcb9 	bl	800eadc <net_conn_input>
	if (verdict != NET_DROP) {
 800d16a:	e72b      	b.n	800cfc4 <net_ipv6_input+0x14c>
			      net_pkt_get_current_offset(pkt) - 1);
 800d16c:	4620      	mov	r0, r4
 800d16e:	f009 fd9d 	bl	8016cac <net_pkt_get_current_offset>
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
 800d172:	2201      	movs	r2, #1
 800d174:	1e43      	subs	r3, r0, #1
 800d176:	e7e4      	b.n	800d142 <net_ipv6_input+0x2ca>
 800d178:	20009010 	.word	0x20009010
 800d17c:	08019248 	.word	0x08019248
 800d180:	080192c8 	.word	0x080192c8
 800d184:	0801bafa 	.word	0x0801bafa

0800d188 <iface_cb>:
	net_nbr_cb_t cb;
	void *user_data;
};

static void iface_cb(struct net_if *iface, void *user_data)
{
 800d188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d18a:	4c09      	ldr	r4, [pc, #36]	; (800d1b0 <iface_cb+0x28>)
 800d18c:	4607      	mov	r7, r0
 800d18e:	460e      	mov	r6, r1
	struct iface_cb_data *data = user_data;
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 800d190:	2500      	movs	r5, #0
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref || nbr->iface != iface) {
 800d192:	7823      	ldrb	r3, [r4, #0]
 800d194:	b133      	cbz	r3, 800d1a4 <iface_cb+0x1c>
 800d196:	68a3      	ldr	r3, [r4, #8]
 800d198:	42bb      	cmp	r3, r7
 800d19a:	d103      	bne.n	800d1a4 <iface_cb+0x1c>
			continue;
		}

		data->cb(nbr, data->user_data);
 800d19c:	e9d6 3100 	ldrd	r3, r1, [r6]
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	4798      	blx	r3
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 800d1a4:	3501      	adds	r5, #1
 800d1a6:	2d08      	cmp	r5, #8
 800d1a8:	f104 0454 	add.w	r4, r4, #84	; 0x54
 800d1ac:	d1f1      	bne.n	800d192 <iface_cb+0xa>
	}
}
 800d1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1b0:	20008914 	.word	0x20008914

0800d1b4 <nbr_lookup.isra.16>:
}
#else
#define nbr_print(...)
#endif

static struct net_nbr *nbr_lookup(struct net_nbr_table *table,
 800d1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1b8:	4c0e      	ldr	r4, [pc, #56]	; (800d1f4 <nbr_lookup.isra.16+0x40>)
 800d1ba:	4607      	mov	r7, r0
 800d1bc:	4688      	mov	r8, r1
				  struct net_if *iface,
				  struct in6_addr *addr)
{
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 800d1be:	2500      	movs	r5, #0
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
 800d1c0:	7823      	ldrb	r3, [r4, #0]
 800d1c2:	4626      	mov	r6, r4
 800d1c4:	b943      	cbnz	r3, 800d1d8 <nbr_lookup.isra.16+0x24>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 800d1c6:	3501      	adds	r5, #1
 800d1c8:	2d08      	cmp	r5, #8
 800d1ca:	f104 0454 	add.w	r4, r4, #84	; 0x54
 800d1ce:	d1f7      	bne.n	800d1c0 <nbr_lookup.isra.16+0xc>
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
			return nbr;
		}
	}

	return NULL;
 800d1d0:	2600      	movs	r6, #0
}
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (iface && nbr->iface != iface) {
 800d1d8:	b117      	cbz	r7, 800d1e0 <nbr_lookup.isra.16+0x2c>
 800d1da:	68a3      	ldr	r3, [r4, #8]
 800d1dc:	429f      	cmp	r7, r3
 800d1de:	d1f2      	bne.n	800d1c6 <nbr_lookup.isra.16+0x12>
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
 800d1e0:	68e0      	ldr	r0, [r4, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 800d1e2:	2210      	movs	r2, #16
 800d1e4:	4641      	mov	r1, r8
 800d1e6:	3004      	adds	r0, #4
 800d1e8:	f7f7 fb8b 	bl	8004902 <memcmp>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	d1ea      	bne.n	800d1c6 <nbr_lookup.isra.16+0x12>
 800d1f0:	e7ef      	b.n	800d1d2 <nbr_lookup.isra.16+0x1e>
 800d1f2:	bf00      	nop
 800d1f4:	20008914 	.word	0x20008914

0800d1f8 <dad_failed>:
				&ifaddr->address.in6_addr, true);
}

static inline bool dad_failed(struct net_if *iface, struct in6_addr *addr)
{
	if (net_ipv6_is_ll_addr(addr)) {
 800d1f8:	880a      	ldrh	r2, [r1, #0]
{
 800d1fa:	b508      	push	{r3, lr}
	if (net_ipv6_is_ll_addr(addr)) {
 800d1fc:	f248 03fe 	movw	r3, #33022	; 0x80fe
 800d200:	429a      	cmp	r2, r3
 800d202:	d114      	bne.n	800d22e <dad_failed+0x36>
		NET_ERR("DAD failed, no ll IPv6 address!");
 800d204:	4b0c      	ldr	r3, [pc, #48]	; (800d238 <dad_failed+0x40>)
 800d206:	6818      	ldr	r0, [r3, #0]
 800d208:	f010 0007 	ands.w	r0, r0, #7
 800d20c:	d00e      	beq.n	800d22c <dad_failed+0x34>
 800d20e:	2301      	movs	r3, #1
 800d210:	f04f 0100 	mov.w	r1, #0
 800d214:	f363 0107 	bfi	r1, r3, #0, #8
 800d218:	4a08      	ldr	r2, [pc, #32]	; (800d23c <dad_failed+0x44>)
 800d21a:	4b09      	ldr	r3, [pc, #36]	; (800d240 <dad_failed+0x48>)
 800d21c:	4809      	ldr	r0, [pc, #36]	; (800d244 <dad_failed+0x4c>)
 800d21e:	1a9b      	subs	r3, r3, r2
 800d220:	08db      	lsrs	r3, r3, #3
 800d222:	f363 118f 	bfi	r1, r3, #6, #10
 800d226:	f006 fcec 	bl	8013c02 <log_0>
 800d22a:	2000      	movs	r0, #0
	}

	net_if_ipv6_dad_failed(iface, addr);

	return true;
}
 800d22c:	bd08      	pop	{r3, pc}
	net_if_ipv6_dad_failed(iface, addr);
 800d22e:	f7fe f899 	bl	800b364 <net_if_ipv6_dad_failed>
	return true;
 800d232:	2001      	movs	r0, #1
 800d234:	e7fa      	b.n	800d22c <dad_failed+0x34>
 800d236:	bf00      	nop
 800d238:	20009010 	.word	0x20009010
 800d23c:	08019248 	.word	0x08019248
 800d240:	080192c8 	.word	0x080192c8
 800d244:	0801bb1d 	.word	0x0801bb1d

0800d248 <dbg_update_neighbor_lladdr.isra.18>:
static void dbg_update_neighbor_lladdr(struct net_linkaddr *new_lladdr,
 800d248:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
 800d24a:	2318      	movs	r3, #24
 800d24c:	7841      	ldrb	r1, [r0, #1]
 800d24e:	4a06      	ldr	r2, [pc, #24]	; (800d268 <dbg_update_neighbor_lladdr.isra.18+0x20>)
 800d250:	3002      	adds	r0, #2
 800d252:	f7fe fe3b 	bl	800becc <net_sprint_ll_addr_buf>
	snprintk(out, sizeof(out), "%s",
 800d256:	4a05      	ldr	r2, [pc, #20]	; (800d26c <dbg_update_neighbor_lladdr.isra.18+0x24>)
 800d258:	4603      	mov	r3, r0
 800d25a:	2118      	movs	r1, #24
 800d25c:	4668      	mov	r0, sp
 800d25e:	f006 fabc 	bl	80137da <snprintk>
}
 800d262:	b007      	add	sp, #28
 800d264:	f85d fb04 	ldr.w	pc, [sp], #4
 800d268:	20001bb2 	.word	0x20001bb2
 800d26c:	0801d406 	.word	0x0801d406

0800d270 <ipv6_nbr_set_state>:
{
 800d270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
 800d272:	68c3      	ldr	r3, [r0, #12]
 800d274:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d278:	428a      	cmp	r2, r1
{
 800d27a:	4604      	mov	r4, r0
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
 800d27c:	d00d      	beq.n	800d29a <ipv6_nbr_set_state+0x2a>
 800d27e:	2a05      	cmp	r2, #5
 800d280:	d00b      	beq.n	800d29a <ipv6_nbr_set_state+0x2a>
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
 800d282:	2902      	cmp	r1, #2
	net_ipv6_nbr_data(nbr)->state = new_state;
 800d284:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
 800d288:	d107      	bne.n	800d29a <ipv6_nbr_set_state+0x2a>
		if (stale_counter + 1 != UINT32_MAX) {
 800d28a:	4916      	ldr	r1, [pc, #88]	; (800d2e4 <ipv6_nbr_set_state+0x74>)
 800d28c:	680a      	ldr	r2, [r1, #0]
 800d28e:	1c90      	adds	r0, r2, #2
 800d290:	460d      	mov	r5, r1
 800d292:	d003      	beq.n	800d29c <ipv6_nbr_set_state+0x2c>
			net_ipv6_nbr_data(nbr)->stale_counter = stale_counter++;
 800d294:	1c50      	adds	r0, r2, #1
 800d296:	6008      	str	r0, [r1, #0]
 800d298:	639a      	str	r2, [r3, #56]	; 0x38
}
 800d29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
 800d29c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d2a0:	4811      	ldr	r0, [pc, #68]	; (800d2e8 <ipv6_nbr_set_state+0x78>)
				if (!n || !n->ref) {
 800d2a2:	4e12      	ldr	r6, [pc, #72]	; (800d2ec <ipv6_nbr_set_state+0x7c>)
 800d2a4:	f005 fb42 	bl	801292c <z_impl_k_sem_take>
			stale_counter = 0U;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	602b      	str	r3, [r5, #0]
 800d2ac:	461a      	mov	r2, r3
			for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 800d2ae:	4619      	mov	r1, r3
				if (!n || !n->ref) {
 800d2b0:	2754      	movs	r7, #84	; 0x54
 800d2b2:	fb07 f001 	mul.w	r0, r7, r1
 800d2b6:	5d80      	ldrb	r0, [r0, r6]
 800d2b8:	b148      	cbz	r0, 800d2ce <ipv6_nbr_set_state+0x5e>
				data = net_ipv6_nbr_data(nbr);
 800d2ba:	68e0      	ldr	r0, [r4, #12]
				if (!data) {
 800d2bc:	b138      	cbz	r0, 800d2ce <ipv6_nbr_set_state+0x5e>
				if (data->state != NET_IPV6_NBR_STATE_STALE) {
 800d2be:	f890 c030 	ldrb.w	ip, [r0, #48]	; 0x30
 800d2c2:	f1bc 0f02 	cmp.w	ip, #2
				data->stale_counter = stale_counter++;
 800d2c6:	bf02      	ittt	eq
 800d2c8:	6382      	streq	r2, [r0, #56]	; 0x38
 800d2ca:	2301      	moveq	r3, #1
 800d2cc:	3201      	addeq	r2, #1
			for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 800d2ce:	3101      	adds	r1, #1
 800d2d0:	2908      	cmp	r1, #8
 800d2d2:	d1ee      	bne.n	800d2b2 <ipv6_nbr_set_state+0x42>
 800d2d4:	b103      	cbz	r3, 800d2d8 <ipv6_nbr_set_state+0x68>
 800d2d6:	602a      	str	r2, [r5, #0]
	z_impl_k_sem_give(sem);
 800d2d8:	4803      	ldr	r0, [pc, #12]	; (800d2e8 <ipv6_nbr_set_state+0x78>)
}
 800d2da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d2de:	f005 baf9 	b.w	80128d4 <z_impl_k_sem_give>
 800d2e2:	bf00      	nop
 800d2e4:	20000d94 	.word	0x20000d94
 800d2e8:	20000d7c 	.word	0x20000d7c
 800d2ec:	20008914 	.word	0x20008914

0800d2f0 <ipv6_nd_restart_reachable_timer>:
}
#endif /* CONFIG_NET_IPV6_NBR_CACHE */

#if defined(CONFIG_NET_IPV6_ND)
static void ipv6_nd_restart_reachable_timer(struct net_nbr *nbr, s64_t time)
{
 800d2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f2:	4614      	mov	r4, r2
 800d2f4:	461d      	mov	r5, r3
	s64_t remaining;

	if (nbr) {
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	b130      	cbz	r0, 800d308 <ipv6_nd_restart_reachable_timer+0x18>
		net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
 800d2fa:	68c7      	ldr	r7, [r0, #12]
	return z_impl_k_uptime_get();
 800d2fc:	f00b fc4d 	bl	8018b9a <z_impl_k_uptime_get>
		net_ipv6_nbr_data(nbr)->reachable_timeout = time;
 800d300:	68f3      	ldr	r3, [r6, #12]
		net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
 800d302:	e9c7 0106 	strd	r0, r1, [r7, #24]
		net_ipv6_nbr_data(nbr)->reachable_timeout = time;
 800d306:	621c      	str	r4, [r3, #32]
	return k_ticks_to_ms_floor64(z_timeout_remaining(&work->timeout));
 800d308:	480a      	ldr	r0, [pc, #40]	; (800d334 <ipv6_nd_restart_reachable_timer+0x44>)
 800d30a:	f005 fd2b 	bl	8012d64 <z_timeout_remaining>
 800d30e:	2300      	movs	r3, #0
 800d310:	220a      	movs	r2, #10
 800d312:	17c1      	asrs	r1, r0, #31
 800d314:	f7f4 fcb6 	bl	8001c84 <__aeabi_uldivmod>
	}

	remaining = k_delayed_work_remaining_get(&ipv6_nd_reachable_timer);
	if (!remaining || remaining > time) {
 800d318:	17c3      	asrs	r3, r0, #31
 800d31a:	b118      	cbz	r0, 800d324 <ipv6_nd_restart_reachable_timer+0x34>
 800d31c:	4284      	cmp	r4, r0
 800d31e:	eb75 0303 	sbcs.w	r3, r5, r3
 800d322:	da06      	bge.n	800d332 <ipv6_nd_restart_reachable_timer+0x42>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 800d324:	4622      	mov	r2, r4
 800d326:	4904      	ldr	r1, [pc, #16]	; (800d338 <ipv6_nd_restart_reachable_timer+0x48>)
 800d328:	4804      	ldr	r0, [pc, #16]	; (800d33c <ipv6_nd_restart_reachable_timer+0x4c>)
		k_delayed_work_submit(&ipv6_nd_reachable_timer, time);
	}
}
 800d32a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d32e:	f005 bc63 	b.w	8012bf8 <k_delayed_work_submit_to_queue>
 800d332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d334:	20000d48 	.word	0x20000d48
 800d338:	20000d3c 	.word	0x20000d3c
 800d33c:	20001930 	.word	0x20001930

0800d340 <ipv6_ns_reply_timeout>:
{
 800d340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d344:	f00b fc29 	bl	8018b9a <z_impl_k_uptime_get>
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
 800d348:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800d34c:	1a23      	subs	r3, r4, r0
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 800d34e:	f04f 0a00 	mov.w	sl, #0
 800d352:	4d20      	ldr	r5, [pc, #128]	; (800d3d4 <ipv6_ns_reply_timeout+0x94>)
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
 800d354:	9301      	str	r3, [sp, #4]
 800d356:	eb6a 0b01 	sbc.w	fp, sl, r1
		data->send_ns = 0;
 800d35a:	f04f 0800 	mov.w	r8, #0
 800d35e:	f04f 0900 	mov.w	r9, #0
		if (!nbr || !nbr->ref) {
 800d362:	782b      	ldrb	r3, [r5, #0]
 800d364:	b1e3      	cbz	r3, 800d3a0 <ipv6_ns_reply_timeout+0x60>
		data = net_ipv6_nbr_data(nbr);
 800d366:	68ec      	ldr	r4, [r5, #12]
		if (!data) {
 800d368:	b1d4      	cbz	r4, 800d3a0 <ipv6_ns_reply_timeout+0x60>
		if (!data->send_ns) {
 800d36a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 800d36e:	ea50 0301 	orrs.w	r3, r0, r1
 800d372:	d015      	beq.n	800d3a0 <ipv6_ns_reply_timeout+0x60>
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
 800d374:	9b01      	ldr	r3, [sp, #4]
 800d376:	181e      	adds	r6, r3, r0
 800d378:	eb4b 0701 	adc.w	r7, fp, r1
		if (remaining > 0) {
 800d37c:	2e01      	cmp	r6, #1
 800d37e:	f177 0300 	sbcs.w	r3, r7, #0
 800d382:	db17      	blt.n	800d3b4 <ipv6_ns_reply_timeout+0x74>
	return k_ticks_to_ms_floor64(z_timeout_remaining(&work->timeout));
 800d384:	4814      	ldr	r0, [pc, #80]	; (800d3d8 <ipv6_ns_reply_timeout+0x98>)
 800d386:	f005 fced 	bl	8012d64 <z_timeout_remaining>
 800d38a:	220a      	movs	r2, #10
 800d38c:	2300      	movs	r3, #0
 800d38e:	17c1      	asrs	r1, r0, #31
 800d390:	f7f4 fc78 	bl	8001c84 <__aeabi_uldivmod>
			if (!k_delayed_work_remaining_get(
 800d394:	b920      	cbnz	r0, 800d3a0 <ipv6_ns_reply_timeout+0x60>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 800d396:	4632      	mov	r2, r6
 800d398:	4910      	ldr	r1, [pc, #64]	; (800d3dc <ipv6_ns_reply_timeout+0x9c>)
 800d39a:	4811      	ldr	r0, [pc, #68]	; (800d3e0 <ipv6_ns_reply_timeout+0xa0>)
 800d39c:	f005 fc2c 	bl	8012bf8 <k_delayed_work_submit_to_queue>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 800d3a0:	f10a 0a01 	add.w	sl, sl, #1
 800d3a4:	f1ba 0f08 	cmp.w	sl, #8
 800d3a8:	f105 0554 	add.w	r5, r5, #84	; 0x54
 800d3ac:	d1d9      	bne.n	800d362 <ipv6_ns_reply_timeout+0x22>
}
 800d3ae:	b003      	add	sp, #12
 800d3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!data->pending) {
 800d3b4:	6820      	ldr	r0, [r4, #0]
		data->send_ns = 0;
 800d3b6:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
		if (!data->pending) {
 800d3ba:	2800      	cmp	r0, #0
 800d3bc:	d0f0      	beq.n	800d3a0 <ipv6_ns_reply_timeout+0x60>
		net_pkt_unref(data->pending);
 800d3be:	f009 fae5 	bl	801698c <net_pkt_unref>
		net_pkt_unref(data->pending);
 800d3c2:	6820      	ldr	r0, [r4, #0]
 800d3c4:	f009 fae2 	bl	801698c <net_pkt_unref>
		data->pending = NULL;
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	6022      	str	r2, [r4, #0]
		net_nbr_unref(nbr);
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	f009 fec6 	bl	801715e <net_nbr_unref>
 800d3d2:	e7e5      	b.n	800d3a0 <ipv6_ns_reply_timeout+0x60>
 800d3d4:	20008914 	.word	0x20008914
 800d3d8:	20000d68 	.word	0x20000d68
 800d3dc:	20000d5c 	.word	0x20000d5c
 800d3e0:	20001930 	.word	0x20001930

0800d3e4 <net_ipv6_nbr_state2str>:
	switch (state) {
 800d3e4:	2805      	cmp	r0, #5
 800d3e6:	bf9a      	itte	ls
 800d3e8:	4b02      	ldrls	r3, [pc, #8]	; (800d3f4 <net_ipv6_nbr_state2str+0x10>)
 800d3ea:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
 800d3ee:	4802      	ldrhi	r0, [pc, #8]	; (800d3f8 <net_ipv6_nbr_state2str+0x14>)
}
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	08019c44 	.word	0x08019c44
 800d3f8:	0801bc61 	.word	0x0801bc61

0800d3fc <net_ipv6_nbr_foreach>:
{
 800d3fc:	b507      	push	{r0, r1, r2, lr}
	struct iface_cb_data cb_data = {
 800d3fe:	e9cd 0100 	strd	r0, r1, [sp]
	net_if_foreach(iface_cb, &cb_data);
 800d402:	4669      	mov	r1, sp
 800d404:	4802      	ldr	r0, [pc, #8]	; (800d410 <net_ipv6_nbr_foreach+0x14>)
 800d406:	f7fe fbf5 	bl	800bbf4 <net_if_foreach>
}
 800d40a:	b003      	add	sp, #12
 800d40c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d410:	0800d189 	.word	0x0800d189

0800d414 <net_ipv6_nbr_rm>:
{
 800d414:	b570      	push	{r4, r5, r6, lr}
 800d416:	4605      	mov	r5, r0
 800d418:	460e      	mov	r6, r1
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
 800d41a:	f7ff fecb 	bl	800d1b4 <nbr_lookup.isra.16>
	if (!nbr) {
 800d41e:	4604      	mov	r4, r0
 800d420:	b168      	cbz	r0, 800d43e <net_ipv6_nbr_rm+0x2a>
	net_route_del_by_nexthop(iface, addr);
 800d422:	4631      	mov	r1, r6
 800d424:	4628      	mov	r0, r5
 800d426:	f001 f915 	bl	800e654 <net_route_del_by_nexthop>
	nbr_free(nbr);
 800d42a:	4620      	mov	r0, r4
 800d42c:	f009 ff91 	bl	8017352 <nbr_free>
 800d430:	2300      	movs	r3, #0
 800d432:	4803      	ldr	r0, [pc, #12]	; (800d440 <net_ipv6_nbr_rm+0x2c>)
 800d434:	461a      	mov	r2, r3
 800d436:	4629      	mov	r1, r5
 800d438:	f7fe ff50 	bl	800c2dc <net_mgmt_event_notify_with_info>
	return true;
 800d43c:	2001      	movs	r0, #1
}
 800d43e:	bd70      	pop	{r4, r5, r6, pc}
 800d440:	e0600010 	.word	0xe0600010

0800d444 <add_nbr>:
{
 800d444:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d448:	4605      	mov	r5, r0
 800d44a:	460e      	mov	r6, r1
 800d44c:	4617      	mov	r7, r2
 800d44e:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
 800d450:	f7ff feb0 	bl	800d1b4 <nbr_lookup.isra.16>
	if (nbr) {
 800d454:	4604      	mov	r4, r0
 800d456:	2800      	cmp	r0, #0
 800d458:	d140      	bne.n	800d4dc <add_nbr+0x98>
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
 800d45a:	4824      	ldr	r0, [pc, #144]	; (800d4ec <add_nbr+0xa8>)
 800d45c:	f009 fe88 	bl	8017170 <net_nbr_get>
	if (!nbr) {
 800d460:	4604      	mov	r4, r0
 800d462:	bba0      	cbnz	r0, 800d4ce <add_nbr+0x8a>
	return z_impl_k_sem_take(sem, timeout);
 800d464:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d468:	4821      	ldr	r0, [pc, #132]	; (800d4f0 <add_nbr+0xac>)
 800d46a:	f005 fa5f 	bl	801292c <z_impl_k_sem_take>
 800d46e:	4a21      	ldr	r2, [pc, #132]	; (800d4f4 <add_nbr+0xb0>)
	u32_t oldest = UINT32_MAX;
 800d470:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	int nbr_idx = -1;
 800d474:	460b      	mov	r3, r1
 800d476:	4694      	mov	ip, r2
		if (!nbr || !nbr->ref) {
 800d478:	7810      	ldrb	r0, [r2, #0]
 800d47a:	b188      	cbz	r0, 800d4a0 <add_nbr+0x5c>
		data = net_ipv6_nbr_data(nbr);
 800d47c:	68d0      	ldr	r0, [r2, #12]
		if (!data || data->is_router ||
 800d47e:	b178      	cbz	r0, 800d4a0 <add_nbr+0x5c>
 800d480:	f890 e035 	ldrb.w	lr, [r0, #53]	; 0x35
 800d484:	f1be 0f00 	cmp.w	lr, #0
 800d488:	d10a      	bne.n	800d4a0 <add_nbr+0x5c>
 800d48a:	f890 e030 	ldrb.w	lr, [r0, #48]	; 0x30
 800d48e:	f1be 0f02 	cmp.w	lr, #2
 800d492:	d105      	bne.n	800d4a0 <add_nbr+0x5c>
		if (nbr_idx == -1) {
 800d494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d498:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800d49a:	d023      	beq.n	800d4e4 <add_nbr+0xa0>
		if (oldest == MIN(oldest, data->stale_counter)) {
 800d49c:	4288      	cmp	r0, r1
 800d49e:	d321      	bcc.n	800d4e4 <add_nbr+0xa0>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 800d4a0:	3401      	adds	r4, #1
 800d4a2:	2c08      	cmp	r4, #8
 800d4a4:	f102 0254 	add.w	r2, r2, #84	; 0x54
 800d4a8:	d1e6      	bne.n	800d478 <add_nbr+0x34>
	if (nbr_idx != -1) {
 800d4aa:	1c5a      	adds	r2, r3, #1
 800d4ac:	d007      	beq.n	800d4be <add_nbr+0x7a>
				&net_ipv6_nbr_data(nbr)->addr);
 800d4ae:	2254      	movs	r2, #84	; 0x54
 800d4b0:	fb02 c303 	mla	r3, r2, r3, ip
		net_ipv6_nbr_rm(nbr->iface,
 800d4b4:	68d9      	ldr	r1, [r3, #12]
 800d4b6:	6898      	ldr	r0, [r3, #8]
 800d4b8:	3104      	adds	r1, #4
 800d4ba:	f7ff ffab 	bl	800d414 <net_ipv6_nbr_rm>
	z_impl_k_sem_give(sem);
 800d4be:	480c      	ldr	r0, [pc, #48]	; (800d4f0 <add_nbr+0xac>)
 800d4c0:	f005 fa08 	bl	80128d4 <z_impl_k_sem_give>
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
 800d4c4:	4809      	ldr	r0, [pc, #36]	; (800d4ec <add_nbr+0xa8>)
 800d4c6:	f009 fe53 	bl	8017170 <net_nbr_get>
	if (!nbr) {
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	b130      	cbz	r0, 800d4dc <add_nbr+0x98>
	nbr_init(nbr, iface, addr, is_router, state);
 800d4ce:	f8cd 8000 	str.w	r8, [sp]
 800d4d2:	463b      	mov	r3, r7
 800d4d4:	4632      	mov	r2, r6
 800d4d6:	4629      	mov	r1, r5
 800d4d8:	f009 ff9b 	bl	8017412 <nbr_init>
}
 800d4dc:	4620      	mov	r0, r4
 800d4de:	b002      	add	sp, #8
 800d4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (oldest == MIN(oldest, data->stale_counter)) {
 800d4e4:	4601      	mov	r1, r0
 800d4e6:	4623      	mov	r3, r4
 800d4e8:	e7da      	b.n	800d4a0 <add_nbr+0x5c>
 800d4ea:	bf00      	nop
 800d4ec:	20008908 	.word	0x20008908
 800d4f0:	20000d7c 	.word	0x20000d7c
 800d4f4:	20008914 	.word	0x20008914

0800d4f8 <handle_na_input>:
}

static enum net_verdict handle_na_input(struct net_pkt *pkt,
					struct net_ipv6_hdr *ip_hdr,
					struct net_icmp_hdr *icmp_hdr)
{
 800d4f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
 800d4fc:	2300      	movs	r3, #0
{
 800d4fe:	b08b      	sub	sp, #44	; 0x2c
 800d500:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
 800d502:	2214      	movs	r2, #20
 800d504:	e9cd 3202 	strd	r3, r2, [sp, #8]
					      struct net_icmpv6_na_hdr);
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
 800d508:	aa01      	add	r2, sp, #4
{
 800d50a:	460e      	mov	r6, r1
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
 800d50c:	9204      	str	r2, [sp, #16]
	u16_t length = net_pkt_get_len(pkt);
 800d50e:	6901      	ldr	r1, [r0, #16]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
 800d510:	2202      	movs	r2, #2
{
 800d512:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
 800d514:	9205      	str	r2, [sp, #20]
	while (buf) {
 800d516:	b971      	cbnz	r1, 800d536 <handle_na_input+0x3e>
	u16_t tllao_offset = 0U;
	struct net_icmpv6_nd_opt_hdr *nd_opt_hdr;
	struct net_icmpv6_na_hdr *na_hdr;
	struct net_if_addr *ifaddr;

	na_hdr = (struct net_icmpv6_na_hdr *)net_pkt_get_data(pkt, &na_access);
 800d518:	a902      	add	r1, sp, #8
 800d51a:	4620      	mov	r0, r4
	u16_t length = net_pkt_get_len(pkt);
 800d51c:	b29d      	uxth	r5, r3
	na_hdr = (struct net_icmpv6_na_hdr *)net_pkt_get_data(pkt, &na_access);
 800d51e:	f7ff fb31 	bl	800cb84 <net_pkt_get_data>
	if (!na_hdr) {
 800d522:	4607      	mov	r7, r0
 800d524:	b9d0      	cbnz	r0, 800d55c <handle_na_input+0x64>
		NET_ERR("DROP: NULL NA header");
 800d526:	4ba8      	ldr	r3, [pc, #672]	; (800d7c8 <handle_na_input+0x2d0>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	075a      	lsls	r2, r3, #29
 800d52c:	d107      	bne.n	800d53e <handle_na_input+0x46>
	return NET_OK;

drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));

	return NET_DROP;
 800d52e:	2002      	movs	r0, #2
}
 800d530:	b00b      	add	sp, #44	; 0x2c
 800d532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes += buf->len;
 800d536:	898a      	ldrh	r2, [r1, #12]
		buf = buf->frags;
 800d538:	6809      	ldr	r1, [r1, #0]
		bytes += buf->len;
 800d53a:	4413      	add	r3, r2
		buf = buf->frags;
 800d53c:	e7eb      	b.n	800d516 <handle_na_input+0x1e>
		NET_ERR("DROP: NULL NA header");
 800d53e:	2301      	movs	r3, #1
 800d540:	f04f 0100 	mov.w	r1, #0
 800d544:	f363 0107 	bfi	r1, r3, #0, #8
 800d548:	4aa0      	ldr	r2, [pc, #640]	; (800d7cc <handle_na_input+0x2d4>)
 800d54a:	4ba1      	ldr	r3, [pc, #644]	; (800d7d0 <handle_na_input+0x2d8>)
 800d54c:	48a1      	ldr	r0, [pc, #644]	; (800d7d4 <handle_na_input+0x2dc>)
 800d54e:	1a9b      	subs	r3, r3, r2
 800d550:	08db      	lsrs	r3, r3, #3
 800d552:	f363 118f 	bfi	r1, r3, #6, #10
			NET_ERR("DROP: Corrupted NA message");
 800d556:	f006 fb54 	bl	8013c02 <log_0>
 800d55a:	e7e8      	b.n	800d52e <handle_na_input+0x36>
	if (((length < (sizeof(struct net_ipv6_hdr) +
 800d55c:	2d41      	cmp	r5, #65	; 0x41
 800d55e:	d90b      	bls.n	800d578 <handle_na_input+0x80>
			sizeof(struct net_icmpv6_nd_opt_hdr))) ||
 800d560:	79f3      	ldrb	r3, [r6, #7]
 800d562:	2bff      	cmp	r3, #255	; 0xff
 800d564:	d108      	bne.n	800d578 <handle_na_input+0x80>
	     (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
 800d566:	7903      	ldrb	r3, [r0, #4]
 800d568:	2bff      	cmp	r3, #255	; 0xff
 800d56a:	d005      	beq.n	800d578 <handle_na_input+0x80>
	     net_ipv6_is_addr_mcast(&na_hdr->tgt) ||
 800d56c:	7803      	ldrb	r3, [r0, #0]
 800d56e:	065b      	lsls	r3, r3, #25
 800d570:	d506      	bpl.n	800d580 <handle_na_input+0x88>
	     (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED &&
 800d572:	7e33      	ldrb	r3, [r6, #24]
 800d574:	2bff      	cmp	r3, #255	; 0xff
 800d576:	d103      	bne.n	800d580 <handle_na_input+0x88>
	      net_ipv6_is_addr_mcast(&ip_hdr->dst))) &&
 800d578:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d1d6      	bne.n	800d52e <handle_na_input+0x36>
	return net_pkt_skip(pkt, access->size);
 800d580:	9903      	ldr	r1, [sp, #12]
 800d582:	4620      	mov	r0, r4
 800d584:	f009 fafa 	bl	8016b7c <net_pkt_skip>
	pkt->ipv6_ext_opt_len = len;
 800d588:	2314      	movs	r3, #20
 800d58a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
				net_pkt_get_data(pkt, &nd_access);
 800d58e:	a904      	add	r1, sp, #16
 800d590:	4620      	mov	r0, r4
 800d592:	f7ff faf7 	bl	800cb84 <net_pkt_get_data>
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));
 800d596:	3d2c      	subs	r5, #44	; 0x2c
 800d598:	b2ad      	uxth	r5, r5
	u16_t tllao_offset = 0U;
 800d59a:	f04f 0800 	mov.w	r8, #0
	while (nd_opt_hdr && nd_opt_hdr->len &&
 800d59e:	b130      	cbz	r0, 800d5ae <handle_na_input+0xb6>
 800d5a0:	7843      	ldrb	r3, [r0, #1]
 800d5a2:	b123      	cbz	r3, 800d5ae <handle_na_input+0xb6>
	       net_pkt_ipv6_ext_opt_len(pkt) < length) {
 800d5a4:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 800d5a8:	b28a      	uxth	r2, r1
	while (nd_opt_hdr && nd_opt_hdr->len &&
 800d5aa:	42aa      	cmp	r2, r5
 800d5ac:	d30f      	bcc.n	800d5ce <handle_na_input+0xd6>
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
 800d5ae:	1d3d      	adds	r5, r7, #4
 800d5b0:	4629      	mov	r1, r5
 800d5b2:	6a20      	ldr	r0, [r4, #32]
 800d5b4:	f008 fbf9 	bl	8015daa <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	d036      	beq.n	800d62a <handle_na_input+0x132>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
 800d5bc:	f990 302d 	ldrsb.w	r3, [r0, #45]	; 0x2d
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1b4      	bne.n	800d52e <handle_na_input+0x36>
			dad_failed(net_pkt_iface(pkt), &na_hdr->tgt);
 800d5c4:	4629      	mov	r1, r5
 800d5c6:	6a20      	ldr	r0, [r4, #32]
 800d5c8:	f7ff fe16 	bl	800d1f8 <dad_failed>
 800d5cc:	e7af      	b.n	800d52e <handle_na_input+0x36>
		switch (nd_opt_hdr->type) {
 800d5ce:	7800      	ldrb	r0, [r0, #0]
 800d5d0:	2802      	cmp	r0, #2
 800d5d2:	d109      	bne.n	800d5e8 <handle_na_input+0xf0>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
 800d5d4:	f8b4 803e 	ldrh.w	r8, [r4, #62]	; 0x3e
 800d5d8:	f108 0806 	add.w	r8, r8, #6
 800d5dc:	4442      	add	r2, r8
 800d5de:	f894 8038 	ldrb.w	r8, [r4, #56]	; 0x38
 800d5e2:	4442      	add	r2, r8
 800d5e4:	fa1f f882 	uxth.w	r8, r2
					     net_pkt_ipv6_ext_opt_len(pkt) +
 800d5e8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
		net_pkt_set_ipv6_ext_opt_len(pkt,
 800d5ec:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
 800d5ee:	4299      	cmp	r1, r3
 800d5f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5f4:	d310      	bcc.n	800d618 <handle_na_input+0x120>
			NET_ERR("DROP: Corrupted NA message");
 800d5f6:	4b74      	ldr	r3, [pc, #464]	; (800d7c8 <handle_na_input+0x2d0>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	0758      	lsls	r0, r3, #29
 800d5fc:	d097      	beq.n	800d52e <handle_na_input+0x36>
 800d5fe:	2301      	movs	r3, #1
 800d600:	f04f 0100 	mov.w	r1, #0
 800d604:	f363 0107 	bfi	r1, r3, #0, #8
 800d608:	4a70      	ldr	r2, [pc, #448]	; (800d7cc <handle_na_input+0x2d4>)
 800d60a:	4b71      	ldr	r3, [pc, #452]	; (800d7d0 <handle_na_input+0x2d8>)
 800d60c:	4872      	ldr	r0, [pc, #456]	; (800d7d8 <handle_na_input+0x2e0>)
 800d60e:	1a9b      	subs	r3, r3, r2
 800d610:	08db      	lsrs	r3, r3, #3
 800d612:	f363 118f 	bfi	r1, r3, #6, #10
 800d616:	e79e      	b.n	800d556 <handle_na_input+0x5e>
	return net_pkt_skip(pkt, access->size);
 800d618:	9905      	ldr	r1, [sp, #20]
 800d61a:	4620      	mov	r0, r4
 800d61c:	f009 faae 	bl	8016b7c <net_pkt_skip>
					net_pkt_get_data(pkt, &nd_access);
 800d620:	a904      	add	r1, sp, #16
 800d622:	4620      	mov	r0, r4
 800d624:	f7ff faae 	bl	800cb84 <net_pkt_get_data>
 800d628:	e7b9      	b.n	800d59e <handle_na_input+0xa6>
	struct net_linkaddr_storage lladdr = { 0 };
 800d62a:	e9cd 0006 	strd	r0, r0, [sp, #24]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &na_hdr->tgt);
 800d62e:	4629      	mov	r1, r5
 800d630:	6a20      	ldr	r0, [r4, #32]
 800d632:	f7ff fdbf 	bl	800d1b4 <nbr_lookup.isra.16>
	if (!nbr) {
 800d636:	4605      	mov	r5, r0
 800d638:	2800      	cmp	r0, #0
 800d63a:	f43f af78 	beq.w	800d52e <handle_na_input+0x36>
	if (tllao_offset) {
 800d63e:	f1b8 0f00 	cmp.w	r8, #0
 800d642:	d142      	bne.n	800d6ca <handle_na_input+0x1d2>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
 800d644:	786b      	ldrb	r3, [r5, #1]
 800d646:	2bff      	cmp	r3, #255	; 0xff
 800d648:	d057      	beq.n	800d6fa <handle_na_input+0x202>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
 800d64a:	7868      	ldrb	r0, [r5, #1]
 800d64c:	f7ff fc0c 	bl	800ce68 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
 800d650:	4606      	mov	r6, r0
 800d652:	2800      	cmp	r0, #0
 800d654:	f43f af6b 	beq.w	800d52e <handle_na_input+0x36>
	if (tllao_offset) {
 800d658:	f1b8 0f00 	cmp.w	r8, #0
 800d65c:	d063      	beq.n	800d726 <handle_na_input+0x22e>
		lladdr_changed = memcmp(lladdr.addr,
 800d65e:	7842      	ldrb	r2, [r0, #1]
 800d660:	1c81      	adds	r1, r0, #2
 800d662:	f10d 001a 	add.w	r0, sp, #26
 800d666:	f7f7 f94c 	bl	8004902 <memcmp>
 800d66a:	f110 0900 	adds.w	r9, r0, #0
 800d66e:	bf18      	it	ne
 800d670:	f04f 0901 	movne.w	r9, #1
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
 800d674:	68eb      	ldr	r3, [r5, #12]
 800d676:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d155      	bne.n	800d72a <handle_na_input+0x232>
		if (!tllao_offset) {
 800d67e:	f1b8 0f00 	cmp.w	r8, #0
 800d682:	f43f af54 	beq.w	800d52e <handle_na_input+0x36>
		if (lladdr_changed) {
 800d686:	f1b9 0f00 	cmp.w	r9, #0
 800d68a:	d008      	beq.n	800d69e <handle_na_input+0x1a6>
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
 800d68c:	4630      	mov	r0, r6
 800d68e:	f7ff fddb 	bl	800d248 <dbg_update_neighbor_lladdr.isra.18>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
 800d692:	7872      	ldrb	r2, [r6, #1]
 800d694:	f10d 011a 	add.w	r1, sp, #26
 800d698:	4630      	mov	r0, r6
 800d69a:	f009 fe92 	bl	80173c2 <net_linkaddr_set>
		if (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED) {
 800d69e:	783b      	ldrb	r3, [r7, #0]
 800d6a0:	0659      	lsls	r1, r3, #25
 800d6a2:	f140 8088 	bpl.w	800d7b6 <handle_na_input+0x2be>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
 800d6a6:	2101      	movs	r1, #1
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	f7ff fde1 	bl	800d270 <ipv6_nbr_set_state>
			net_ipv6_nbr_data(nbr)->ns_count = 0U;
 800d6ae:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->reachable = 0;
 800d6b0:	2000      	movs	r0, #0
 800d6b2:	2100      	movs	r1, #0
 800d6b4:	e9c3 0106 	strd	r0, r1, [r3, #24]
			net_ipv6_nbr_data(nbr)->ns_count = 0U;
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
 800d6be:	621a      	str	r2, [r3, #32]
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	6a20      	ldr	r0, [r4, #32]
 800d6c4:	f009 ff59 	bl	801757a <net_ipv6_nbr_set_reachable_timer>
 800d6c8:	e040      	b.n	800d74c <handle_na_input+0x254>
		lladdr.len = net_pkt_lladdr_src(pkt)->len;
 800d6ca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800d6ce:	f88d 3019 	strb.w	r3, [sp, #25]
		net_pkt_cursor_init(pkt);
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	f009 f9d8 	bl	8016a88 <net_pkt_cursor_init>
		if (net_pkt_skip(pkt, tllao_offset) ||
 800d6d8:	4641      	mov	r1, r8
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f009 fa4e 	bl	8016b7c <net_pkt_skip>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	f47f af24 	bne.w	800d52e <handle_na_input+0x36>
		    net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
 800d6e6:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800d6ea:	f10d 011a 	add.w	r1, sp, #26
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f009 fa5a 	bl	8016ba8 <net_pkt_read>
		if (net_pkt_skip(pkt, tllao_offset) ||
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	d0a5      	beq.n	800d644 <handle_na_input+0x14c>
 800d6f8:	e719      	b.n	800d52e <handle_na_input+0x36>
		if (!tllao_offset) {
 800d6fa:	f1b8 0f00 	cmp.w	r8, #0
 800d6fe:	f43f af16 	beq.w	800d52e <handle_na_input+0x36>
		nbr_lladdr.len = lladdr.len;
 800d702:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d706:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
 800d70a:	aa08      	add	r2, sp, #32
		nbr_lladdr.addr = lladdr.addr;
 800d70c:	f10d 031a 	add.w	r3, sp, #26
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
 800d710:	6a21      	ldr	r1, [r4, #32]
		nbr_lladdr.addr = lladdr.addr;
 800d712:	9308      	str	r3, [sp, #32]
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
 800d714:	4628      	mov	r0, r5
 800d716:	f7ff fb2d 	bl	800cd74 <net_nbr_link>
 800d71a:	2800      	cmp	r0, #0
 800d71c:	d095      	beq.n	800d64a <handle_na_input+0x152>
			nbr_free(nbr);
 800d71e:	4628      	mov	r0, r5
 800d720:	f009 fe17 	bl	8017352 <nbr_free>
			return false;
 800d724:	e703      	b.n	800d52e <handle_na_input+0x36>
	bool lladdr_changed = false;
 800d726:	46c1      	mov	r9, r8
 800d728:	e7a4      	b.n	800d674 <handle_na_input+0x17c>
	if (!(na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE) && lladdr_changed) {
 800d72a:	783a      	ldrb	r2, [r7, #0]
 800d72c:	0692      	lsls	r2, r2, #26
 800d72e:	d425      	bmi.n	800d77c <handle_na_input+0x284>
 800d730:	f1b9 0f00 	cmp.w	r9, #0
 800d734:	d007      	beq.n	800d746 <handle_na_input+0x24e>
		if (net_ipv6_nbr_data(nbr)->state ==
 800d736:	2b01      	cmp	r3, #1
 800d738:	f47f aef9 	bne.w	800d52e <handle_na_input+0x36>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
 800d73c:	2102      	movs	r1, #2
 800d73e:	4628      	mov	r0, r5
 800d740:	f7ff fd96 	bl	800d270 <ipv6_nbr_set_state>
 800d744:	e6f3      	b.n	800d52e <handle_na_input+0x36>
	if (na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE ||
 800d746:	f1b8 0f00 	cmp.w	r8, #0
 800d74a:	d123      	bne.n	800d794 <handle_na_input+0x29c>
		(na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER);
 800d74c:	783b      	ldrb	r3, [r7, #0]
	net_ipv6_nbr_data(nbr)->is_router =
 800d74e:	68ea      	ldr	r2, [r5, #12]
		(na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER);
 800d750:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router =
 800d752:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	pending = net_ipv6_nbr_data(nbr)->pending;
 800d756:	68eb      	ldr	r3, [r5, #12]
 800d758:	681e      	ldr	r6, [r3, #0]
	if (pending) {
 800d75a:	b156      	cbz	r6, 800d772 <handle_na_input+0x27a>
		if (net_send_data(pending) < 0) {
 800d75c:	4630      	mov	r0, r6
 800d75e:	f008 fa02 	bl	8015b66 <net_send_data>
 800d762:	2800      	cmp	r0, #0
 800d764:	da2c      	bge.n	800d7c0 <handle_na_input+0x2c8>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
 800d766:	68e8      	ldr	r0, [r5, #12]
 800d768:	f009 fde6 	bl	8017338 <nbr_clear_ns_pending>
		net_pkt_unref(pending);
 800d76c:	4630      	mov	r0, r6
 800d76e:	f009 f90d 	bl	801698c <net_pkt_unref>
	net_pkt_unref(pkt);
 800d772:	4620      	mov	r0, r4
 800d774:	f009 f90a 	bl	801698c <net_pkt_unref>
	return NET_OK;
 800d778:	2000      	movs	r0, #0
 800d77a:	e6d9      	b.n	800d530 <handle_na_input+0x38>
		if (lladdr_changed) {
 800d77c:	f1b9 0f00 	cmp.w	r9, #0
 800d780:	d008      	beq.n	800d794 <handle_na_input+0x29c>
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
 800d782:	4630      	mov	r0, r6
 800d784:	f7ff fd60 	bl	800d248 <dbg_update_neighbor_lladdr.isra.18>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
 800d788:	7872      	ldrb	r2, [r6, #1]
 800d78a:	f10d 011a 	add.w	r1, sp, #26
 800d78e:	4630      	mov	r0, r6
 800d790:	f009 fe17 	bl	80173c2 <net_linkaddr_set>
		if (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED) {
 800d794:	783b      	ldrb	r3, [r7, #0]
 800d796:	065b      	lsls	r3, r3, #25
 800d798:	d50a      	bpl.n	800d7b0 <handle_na_input+0x2b8>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
 800d79a:	2101      	movs	r1, #1
 800d79c:	4628      	mov	r0, r5
 800d79e:	f7ff fd67 	bl	800d270 <ipv6_nbr_set_state>
			net_ipv6_nbr_data(nbr)->reachable = 0;
 800d7a2:	68eb      	ldr	r3, [r5, #12]
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	e9c3 0106 	strd	r0, r1, [r3, #24]
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	e786      	b.n	800d6be <handle_na_input+0x1c6>
			if (lladdr_changed) {
 800d7b0:	f1b9 0f00 	cmp.w	r9, #0
 800d7b4:	d0ca      	beq.n	800d74c <handle_na_input+0x254>
				ipv6_nbr_set_state(nbr,
 800d7b6:	2102      	movs	r1, #2
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	f7ff fd59 	bl	800d270 <ipv6_nbr_set_state>
 800d7be:	e7c5      	b.n	800d74c <handle_na_input+0x254>
			net_ipv6_nbr_data(nbr)->pending = NULL;
 800d7c0:	68eb      	ldr	r3, [r5, #12]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	601a      	str	r2, [r3, #0]
 800d7c6:	e7d1      	b.n	800d76c <handle_na_input+0x274>
 800d7c8:	20009010 	.word	0x20009010
 800d7cc:	08019248 	.word	0x08019248
 800d7d0:	080192c8 	.word	0x080192c8
 800d7d4:	0801bb3d 	.word	0x0801bb3d
 800d7d8:	0801bb52 	.word	0x0801bb52

0800d7dc <net_ipv6_send_ns>:
		     struct net_pkt *pending,
		     const struct in6_addr *src,
		     const struct in6_addr *dst,
		     const struct in6_addr *tgt,
		     bool is_my_address)
{
 800d7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e0:	b08d      	sub	sp, #52	; 0x34
 800d7e2:	460e      	mov	r6, r1
 800d7e4:	4693      	mov	fp, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
 800d7e6:	2100      	movs	r1, #0
 800d7e8:	2214      	movs	r2, #20
{
 800d7ea:	4607      	mov	r7, r0
 800d7ec:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 800d7f0:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
 800d7f4:	e9cd 1202 	strd	r1, r2, [sp, #8]
	struct net_icmpv6_ns_hdr *ns_hdr;
	struct in6_addr node_dst;
	struct net_nbr *nbr;
	u8_t llao_len;

	if (!dst) {
 800d7f8:	469a      	mov	sl, r3
 800d7fa:	b9eb      	cbnz	r3, 800d838 <net_ipv6_send_ns+0x5c>
	dst->s6_addr[0]   = 0xFF;
 800d7fc:	f240 23ff 	movw	r3, #767	; 0x2ff
 800d800:	9304      	str	r3, [sp, #16]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
 800d802:	f8ad a014 	strh.w	sl, [sp, #20]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
 800d806:	f8ad a016 	strh.w	sl, [sp, #22]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
 800d80a:	f8ad a018 	strh.w	sl, [sp, #24]
	dst->s6_addr[10]  = 0U;
 800d80e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d812:	f8ad 301a 	strh.w	r3, [sp, #26]
	dst->s6_addr[12]  = 0xFF;
 800d816:	23ff      	movs	r3, #255	; 0xff
 800d818:	f88d 301c 	strb.w	r3, [sp, #28]
	dst->s6_addr[13]  = src->s6_addr[13];
 800d81c:	f899 300d 	ldrb.w	r3, [r9, #13]
 800d820:	f88d 301d 	strb.w	r3, [sp, #29]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
 800d824:	f899 200f 	ldrb.w	r2, [r9, #15]
 800d828:	f899 300e 	ldrb.w	r3, [r9, #14]
 800d82c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d830:	f8ad 301e 	strh.w	r3, [sp, #30]
		net_ipv6_addr_create_solicited_node(tgt, &node_dst);
		dst = &node_dst;
 800d834:	f10d 0a10 	add.w	sl, sp, #16
	}

	llao_len = get_llao_len(iface);

	if (is_my_address) {
 800d838:	f1b8 0f00 	cmp.w	r8, #0
 800d83c:	d072      	beq.n	800d924 <net_ipv6_send_ns+0x148>
		src = net_ipv6_unspecified_address();
 800d83e:	f7fe fc61 	bl	800c104 <net_ipv6_unspecified_address>
		llao_len = 0U;
 800d842:	2500      	movs	r5, #0
		src = net_ipv6_unspecified_address();
 800d844:	4683      	mov	fp, r0

			goto drop;
		}
	}

	pkt = net_pkt_alloc_with_buffer(iface,
 800d846:	2364      	movs	r3, #100	; 0x64
 800d848:	9300      	str	r3, [sp, #0]
 800d84a:	2202      	movs	r2, #2
 800d84c:	233a      	movs	r3, #58	; 0x3a
 800d84e:	f105 0114 	add.w	r1, r5, #20
 800d852:	4638      	mov	r0, r7
 800d854:	f7ff f97a 	bl	800cb4c <net_pkt_alloc_with_buffer>
					sizeof(struct net_icmpv6_ns_hdr) +
					llao_len,
					AF_INET6, IPPROTO_ICMPV6,
					ND_NET_BUF_TIMEOUT);
	if (!pkt) {
 800d858:	4604      	mov	r4, r0
 800d85a:	2800      	cmp	r0, #0
 800d85c:	f000 80ae 	beq.w	800d9bc <net_ipv6_send_ns+0x1e0>
	pkt->ipv6_hop_limit = hop_limit;
 800d860:	23ff      	movs	r3, #255	; 0xff
		goto drop;
	}

	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_ND_HOP_LIMIT);

	if (net_ipv6_create(pkt, src, dst) ||
 800d862:	4652      	mov	r2, sl
 800d864:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800d868:	4659      	mov	r1, fp
 800d86a:	f009 fca8 	bl	80171be <net_ipv6_create>
 800d86e:	4602      	mov	r2, r0
 800d870:	2800      	cmp	r0, #0
 800d872:	d148      	bne.n	800d906 <net_ipv6_send_ns+0x12a>
	    net_icmpv6_create(pkt, NET_ICMPV6_NS, 0)) {
 800d874:	2187      	movs	r1, #135	; 0x87
 800d876:	4620      	mov	r0, r4
 800d878:	f009 fb0a 	bl	8016e90 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, dst) ||
 800d87c:	4682      	mov	sl, r0
 800d87e:	2800      	cmp	r0, #0
 800d880:	d141      	bne.n	800d906 <net_ipv6_send_ns+0x12a>
		goto drop;
	}

	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
 800d882:	a902      	add	r1, sp, #8
 800d884:	4620      	mov	r0, r4
 800d886:	f7ff f97d 	bl	800cb84 <net_pkt_get_data>
	if (!ns_hdr) {
 800d88a:	4603      	mov	r3, r0
 800d88c:	b3d8      	cbz	r0, 800d906 <net_ipv6_send_ns+0x12a>
		goto drop;
	}

	ns_hdr->reserved = 0U;
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
 800d88e:	f10d 0e20 	add.w	lr, sp, #32
	ns_hdr->reserved = 0U;
 800d892:	f880 a000 	strb.w	sl, [r0]
 800d896:	f880 a001 	strb.w	sl, [r0, #1]
 800d89a:	f880 a002 	strb.w	sl, [r0, #2]
 800d89e:	f880 a003 	strb.w	sl, [r0, #3]
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
 800d8a2:	464a      	mov	r2, r9
 800d8a4:	f109 0a10 	add.w	sl, r9, #16
 800d8a8:	46f4      	mov	ip, lr
 800d8aa:	6810      	ldr	r0, [r2, #0]
 800d8ac:	6851      	ldr	r1, [r2, #4]
 800d8ae:	46f1      	mov	r9, lr
 800d8b0:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 800d8b4:	3208      	adds	r2, #8
 800d8b6:	4552      	cmp	r2, sl
 800d8b8:	46ce      	mov	lr, r9
 800d8ba:	d1f6      	bne.n	800d8aa <net_ipv6_send_ns+0xce>
 800d8bc:	3304      	adds	r3, #4
 800d8be:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 800d8c2:	469a      	mov	sl, r3
 800d8c4:	4662      	mov	r2, ip
 800d8c6:	ca03      	ldmia	r2!, {r0, r1}
 800d8c8:	4572      	cmp	r2, lr
 800d8ca:	6018      	str	r0, [r3, #0]
 800d8cc:	6059      	str	r1, [r3, #4]
 800d8ce:	4694      	mov	ip, r2
 800d8d0:	f103 0308 	add.w	r3, r3, #8
 800d8d4:	d1f6      	bne.n	800d8c4 <net_ipv6_send_ns+0xe8>

	if (net_pkt_set_data(pkt, &ns_access)) {
 800d8d6:	a902      	add	r1, sp, #8
 800d8d8:	4620      	mov	r0, r4
 800d8da:	f009 faa1 	bl	8016e20 <net_pkt_set_data>
 800d8de:	4681      	mov	r9, r0
 800d8e0:	b988      	cbnz	r0, 800d906 <net_ipv6_send_ns+0x12a>
		goto drop;
	}

	if (!is_my_address) {
 800d8e2:	f1b8 0f00 	cmp.w	r8, #0
 800d8e6:	d030      	beq.n	800d94a <net_ipv6_send_ns+0x16e>
			      llao_len, NET_ICMPV6_ND_OPT_SLLAO)) {
			goto drop;
		}
	}

	net_pkt_cursor_init(pkt);
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	f009 f8cd 	bl	8016a88 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 800d8ee:	213a      	movs	r1, #58	; 0x3a
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f009 fcc7 	bl	8017284 <net_ipv6_finalize>

	nbr = add_nbr(iface, &ns_hdr->tgt, false,
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	4651      	mov	r1, sl
 800d8fc:	4638      	mov	r0, r7
 800d8fe:	f7ff fda1 	bl	800d444 <add_nbr>
		      NET_IPV6_NBR_STATE_INCOMPLETE);
	if (!nbr) {
 800d902:	4605      	mov	r5, r0
 800d904:	bb58      	cbnz	r0, 800d95e <net_ipv6_send_ns+0x182>
	net_stats_update_ipv6_nd_sent(iface);

	return 0;

drop:
	if (pending) {
 800d906:	2e00      	cmp	r6, #0
 800d908:	d04f      	beq.n	800d9aa <net_ipv6_send_ns+0x1ce>
 800d90a:	f06f 0968 	mvn.w	r9, #104	; 0x68
		net_pkt_unref(pending);
 800d90e:	4630      	mov	r0, r6
 800d910:	f009 f83c 	bl	801698c <net_pkt_unref>
	}

	if (pkt) {
 800d914:	b114      	cbz	r4, 800d91c <net_ipv6_send_ns+0x140>
		net_pkt_unref(pkt);
 800d916:	4620      	mov	r0, r4
 800d918:	f009 f838 	bl	801698c <net_pkt_unref>
	}

	net_stats_update_ipv6_nd_drop(iface);

	return ret;
}
 800d91c:	4648      	mov	r0, r9
 800d91e:	b00d      	add	sp, #52	; 0x34
 800d920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t total_len = net_if_get_link_addr(iface)->len +
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	7d1d      	ldrb	r5, [r3, #20]
		if (!src) {
 800d928:	f1bb 0f00 	cmp.w	fp, #0
 800d92c:	d104      	bne.n	800d938 <net_ipv6_send_ns+0x15c>
			src = net_if_ipv6_select_src_addr(iface, dst);
 800d92e:	4651      	mov	r1, sl
 800d930:	4638      	mov	r0, r7
 800d932:	f7fe f81d 	bl	800b970 <net_if_ipv6_select_src_addr>
 800d936:	4683      	mov	fp, r0
		if (net_ipv6_is_addr_unspecified(src)) {
 800d938:	4658      	mov	r0, fp
 800d93a:	f009 fcef 	bl	801731c <net_ipv6_is_addr_unspecified>
 800d93e:	2800      	cmp	r0, #0
 800d940:	d136      	bne.n	800d9b0 <net_ipv6_send_ns+0x1d4>
	return ROUND_UP(total_len, 8U);
 800d942:	3509      	adds	r5, #9
 800d944:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 800d948:	e77d      	b.n	800d846 <net_ipv6_send_ns+0x6a>
	return &iface->if_dev->link_addr;
 800d94a:	6839      	ldr	r1, [r7, #0]
		if (!set_llao(pkt, net_if_get_link_addr(iface),
 800d94c:	2301      	movs	r3, #1
 800d94e:	462a      	mov	r2, r5
 800d950:	3110      	adds	r1, #16
 800d952:	4620      	mov	r0, r4
 800d954:	f009 fd12 	bl	801737c <set_llao>
 800d958:	2800      	cmp	r0, #0
 800d95a:	d1c5      	bne.n	800d8e8 <net_ipv6_send_ns+0x10c>
 800d95c:	e7d3      	b.n	800d906 <net_ipv6_send_ns+0x12a>
	if (pending) {
 800d95e:	b1de      	cbz	r6, 800d998 <net_ipv6_send_ns+0x1bc>
		if (!net_ipv6_nbr_data(nbr)->pending) {
 800d960:	68c7      	ldr	r7, [r0, #12]
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d1d0      	bne.n	800d90a <net_ipv6_send_ns+0x12e>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
 800d968:	4630      	mov	r0, r6
 800d96a:	f008 ffef 	bl	801694c <net_pkt_ref>
 800d96e:	6038      	str	r0, [r7, #0]
		net_ipv6_nbr_data(nbr)->send_ns = k_uptime_get();
 800d970:	68ef      	ldr	r7, [r5, #12]
	return z_impl_k_uptime_get();
 800d972:	f00b f912 	bl	8018b9a <z_impl_k_uptime_get>
 800d976:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	return k_ticks_to_ms_floor64(z_timeout_remaining(&work->timeout));
 800d97a:	4812      	ldr	r0, [pc, #72]	; (800d9c4 <net_ipv6_send_ns+0x1e8>)
 800d97c:	f005 f9f2 	bl	8012d64 <z_timeout_remaining>
 800d980:	220a      	movs	r2, #10
 800d982:	2300      	movs	r3, #0
 800d984:	17c1      	asrs	r1, r0, #31
 800d986:	f7f4 f97d 	bl	8001c84 <__aeabi_uldivmod>
		if (!k_delayed_work_remaining_get(&ipv6_ns_reply_timer)) {
 800d98a:	b928      	cbnz	r0, 800d998 <net_ipv6_send_ns+0x1bc>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 800d98c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d990:	490d      	ldr	r1, [pc, #52]	; (800d9c8 <net_ipv6_send_ns+0x1ec>)
 800d992:	480e      	ldr	r0, [pc, #56]	; (800d9cc <net_ipv6_send_ns+0x1f0>)
 800d994:	f005 f930 	bl	8012bf8 <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
 800d998:	4620      	mov	r0, r4
 800d99a:	f008 f8e4 	bl	8015b66 <net_send_data>
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	dabc      	bge.n	800d91c <net_ipv6_send_ns+0x140>
		if (pending) {
 800d9a2:	b116      	cbz	r6, 800d9aa <net_ipv6_send_ns+0x1ce>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
 800d9a4:	68e8      	ldr	r0, [r5, #12]
 800d9a6:	f009 fcc7 	bl	8017338 <nbr_clear_ns_pending>
	if (pending) {
 800d9aa:	f06f 0968 	mvn.w	r9, #104	; 0x68
 800d9ae:	e7b2      	b.n	800d916 <net_ipv6_send_ns+0x13a>
			ret = -EINVAL;
 800d9b0:	f06f 0915 	mvn.w	r9, #21
	if (pending) {
 800d9b4:	2e00      	cmp	r6, #0
 800d9b6:	d0b1      	beq.n	800d91c <net_ipv6_send_ns+0x140>
 800d9b8:	2400      	movs	r4, #0
 800d9ba:	e7a8      	b.n	800d90e <net_ipv6_send_ns+0x132>
		ret = -ENOMEM;
 800d9bc:	f06f 090b 	mvn.w	r9, #11
 800d9c0:	e7f8      	b.n	800d9b4 <net_ipv6_send_ns+0x1d8>
 800d9c2:	bf00      	nop
 800d9c4:	20000d68 	.word	0x20000d68
 800d9c8:	20000d5c 	.word	0x20000d5c
 800d9cc:	20001930 	.word	0x20001930

0800d9d0 <net_ipv6_nbr_add>:
{
 800d9d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d9d4:	4615      	mov	r5, r2
 800d9d6:	461a      	mov	r2, r3
	nbr = add_nbr(iface, addr, is_router, state);
 800d9d8:	f89d 3020 	ldrb.w	r3, [sp, #32]
{
 800d9dc:	4606      	mov	r6, r0
 800d9de:	460f      	mov	r7, r1
	nbr = add_nbr(iface, addr, is_router, state);
 800d9e0:	f7ff fd30 	bl	800d444 <add_nbr>
	if (!nbr) {
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	bb38      	cbnz	r0, 800da38 <net_ipv6_nbr_add+0x68>
		NET_ERR("Could not add router neighbor %s [%s]",
 800d9e8:	4b30      	ldr	r3, [pc, #192]	; (800daac <net_ipv6_nbr_add+0xdc>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	075b      	lsls	r3, r3, #29
 800d9ee:	d01f      	beq.n	800da30 <net_ipv6_nbr_add+0x60>
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	f04f 0600 	mov.w	r6, #0
 800d9f6:	4a2e      	ldr	r2, [pc, #184]	; (800dab0 <net_ipv6_nbr_add+0xe0>)
 800d9f8:	f363 0607 	bfi	r6, r3, #0, #8
 800d9fc:	4b2d      	ldr	r3, [pc, #180]	; (800dab4 <net_ipv6_nbr_add+0xe4>)
 800d9fe:	1a9b      	subs	r3, r3, r2
 800da00:	08db      	lsrs	r3, r3, #3
 800da02:	4639      	mov	r1, r7
 800da04:	2002      	movs	r0, #2
 800da06:	f363 168f 	bfi	r6, r3, #6, #10
 800da0a:	f7fe fb63 	bl	800c0d4 <net_sprint_addr>
 800da0e:	f7f8 f9c9 	bl	8005da4 <log_strdup>
 800da12:	2318      	movs	r3, #24
 800da14:	4a28      	ldr	r2, [pc, #160]	; (800dab8 <net_ipv6_nbr_add+0xe8>)
 800da16:	7929      	ldrb	r1, [r5, #4]
 800da18:	4607      	mov	r7, r0
 800da1a:	6828      	ldr	r0, [r5, #0]
 800da1c:	f7fe fa56 	bl	800becc <net_sprint_ll_addr_buf>
 800da20:	f7f8 f9c0 	bl	8005da4 <log_strdup>
 800da24:	4633      	mov	r3, r6
 800da26:	4602      	mov	r2, r0
 800da28:	4639      	mov	r1, r7
 800da2a:	4824      	ldr	r0, [pc, #144]	; (800dabc <net_ipv6_nbr_add+0xec>)
 800da2c:	f006 f90a 	bl	8013c44 <log_2>
}
 800da30:	4620      	mov	r0, r4
 800da32:	b002      	add	sp, #8
 800da34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
 800da38:	462a      	mov	r2, r5
 800da3a:	4631      	mov	r1, r6
 800da3c:	f7ff f99a 	bl	800cd74 <net_nbr_link>
 800da40:	3078      	adds	r0, #120	; 0x78
 800da42:	d11a      	bne.n	800da7a <net_ipv6_nbr_add+0xaa>
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
 800da44:	68e3      	ldr	r3, [r4, #12]
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
 800da46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da4a:	2b05      	cmp	r3, #5
 800da4c:	d026      	beq.n	800da9c <net_ipv6_nbr_add+0xcc>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
 800da4e:	7860      	ldrb	r0, [r4, #1]
 800da50:	f7ff fa0a 	bl	800ce68 <net_nbr_get_lladdr>
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
 800da54:	792a      	ldrb	r2, [r5, #4]
 800da56:	6829      	ldr	r1, [r5, #0]
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
 800da58:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
 800da5a:	3002      	adds	r0, #2
 800da5c:	f7f6 ff51 	bl	8004902 <memcmp>
 800da60:	b1b8      	cbz	r0, 800da92 <net_ipv6_nbr_add+0xc2>
			dbg_update_neighbor_lladdr(lladdr, cached_lladdr, addr);
 800da62:	4640      	mov	r0, r8
 800da64:	f7ff fbf0 	bl	800d248 <dbg_update_neighbor_lladdr.isra.18>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
 800da68:	792a      	ldrb	r2, [r5, #4]
 800da6a:	6829      	ldr	r1, [r5, #0]
 800da6c:	4640      	mov	r0, r8
 800da6e:	f009 fca8 	bl	80173c2 <net_linkaddr_set>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
 800da72:	2102      	movs	r1, #2
 800da74:	4620      	mov	r0, r4
 800da76:	f7ff fbfb 	bl	800d270 <ipv6_nbr_set_state>
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
 800da7a:	68e3      	ldr	r3, [r4, #12]
 800da7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da80:	b963      	cbnz	r3, 800da9c <net_ipv6_nbr_add+0xcc>
		ret = net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
 800da82:	e9cd 7300 	strd	r7, r3, [sp]
 800da86:	461a      	mov	r2, r3
 800da88:	4619      	mov	r1, r3
 800da8a:	4630      	mov	r0, r6
 800da8c:	f7ff fea6 	bl	800d7dc <net_ipv6_send_ns>
		if (ret < 0) {
 800da90:	e004      	b.n	800da9c <net_ipv6_nbr_add+0xcc>
		} else if (net_ipv6_nbr_data(nbr)->state ==
 800da92:	68e3      	ldr	r3, [r4, #12]
 800da94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d0ea      	beq.n	800da72 <net_ipv6_nbr_add+0xa2>
 800da9c:	2300      	movs	r3, #0
 800da9e:	461a      	mov	r2, r3
 800daa0:	4631      	mov	r1, r6
 800daa2:	4807      	ldr	r0, [pc, #28]	; (800dac0 <net_ipv6_nbr_add+0xf0>)
 800daa4:	f7fe fc1a 	bl	800c2dc <net_mgmt_event_notify_with_info>
 800daa8:	e7c2      	b.n	800da30 <net_ipv6_nbr_add+0x60>
 800daaa:	bf00      	nop
 800daac:	20009010 	.word	0x20009010
 800dab0:	08019248 	.word	0x08019248
 800dab4:	080192c8 	.word	0x080192c8
 800dab8:	20001bb2 	.word	0x20001bb2
 800dabc:	0801bc3b 	.word	0x0801bc3b
 800dac0:	e060000f 	.word	0xe060000f

0800dac4 <handle_ra_input>:
#endif

static enum net_verdict handle_ra_input(struct net_pkt *pkt,
					struct net_ipv6_hdr *ip_hdr,
					struct net_icmp_hdr *icmp_hdr)
{
 800dac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
 800dac8:	2300      	movs	r3, #0
{
 800daca:	b09b      	sub	sp, #108	; 0x6c
 800dacc:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
 800dace:	220c      	movs	r2, #12
 800dad0:	e9cd 3208 	strd	r3, r2, [sp, #32]
					      struct net_icmpv6_ra_hdr);
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
 800dad4:	aa06      	add	r2, sp, #24
 800dad6:	920a      	str	r2, [sp, #40]	; 0x28
	u16_t length = net_pkt_get_len(pkt);
 800dad8:	6906      	ldr	r6, [r0, #16]
{
 800dada:	9103      	str	r1, [sp, #12]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
 800dadc:	2202      	movs	r2, #2
{
 800dade:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
 800dae0:	920b      	str	r2, [sp, #44]	; 0x2c
	while (buf) {
 800dae2:	b976      	cbnz	r6, 800db02 <handle_ra_input+0x3e>
	struct net_icmpv6_ra_hdr *ra_hdr;
	struct net_if_router *router;
	u32_t mtu, reachable_time, retrans_timer;
	u16_t router_lifetime;

	ra_hdr = (struct net_icmpv6_ra_hdr *)net_pkt_get_data(pkt, &ra_access);
 800dae4:	a908      	add	r1, sp, #32
 800dae6:	4620      	mov	r0, r4
	u16_t length = net_pkt_get_len(pkt);
 800dae8:	b29d      	uxth	r5, r3
	ra_hdr = (struct net_icmpv6_ra_hdr *)net_pkt_get_data(pkt, &ra_access);
 800daea:	f7ff f84b 	bl	800cb84 <net_pkt_get_data>
	if (!ra_hdr) {
 800daee:	4607      	mov	r7, r0
 800daf0:	b9d0      	cbnz	r0, 800db28 <handle_ra_input+0x64>
		NET_ERR("DROP: NULL RA header");
 800daf2:	4b84      	ldr	r3, [pc, #528]	; (800dd04 <handle_ra_input+0x240>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	075c      	lsls	r4, r3, #29
 800daf8:	d107      	bne.n	800db0a <handle_ra_input+0x46>
	return NET_OK;

drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));

	return NET_DROP;
 800dafa:	2002      	movs	r0, #2
}
 800dafc:	b01b      	add	sp, #108	; 0x6c
 800dafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bytes += buf->len;
 800db02:	89b2      	ldrh	r2, [r6, #12]
		buf = buf->frags;
 800db04:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
 800db06:	4413      	add	r3, r2
		buf = buf->frags;
 800db08:	e7eb      	b.n	800dae2 <handle_ra_input+0x1e>
		NET_ERR("DROP: NULL RA header");
 800db0a:	2301      	movs	r3, #1
 800db0c:	f04f 0100 	mov.w	r1, #0
 800db10:	f363 0107 	bfi	r1, r3, #0, #8
 800db14:	4a7c      	ldr	r2, [pc, #496]	; (800dd08 <handle_ra_input+0x244>)
 800db16:	4b7d      	ldr	r3, [pc, #500]	; (800dd0c <handle_ra_input+0x248>)
 800db18:	487d      	ldr	r0, [pc, #500]	; (800dd10 <handle_ra_input+0x24c>)
 800db1a:	1a9b      	subs	r3, r3, r2
 800db1c:	08db      	lsrs	r3, r3, #3
 800db1e:	f363 118f 	bfi	r1, r3, #6, #10
 800db22:	f006 f86e 	bl	8013c02 <log_0>
 800db26:	e7e8      	b.n	800dafa <handle_ra_input+0x36>
	if (((length < (sizeof(struct net_ipv6_hdr) +
 800db28:	2d39      	cmp	r5, #57	; 0x39
 800db2a:	d909      	bls.n	800db40 <handle_ra_input+0x7c>
			sizeof(struct net_icmpv6_nd_opt_hdr))) ||
 800db2c:	9b03      	ldr	r3, [sp, #12]
 800db2e:	79db      	ldrb	r3, [r3, #7]
 800db30:	2bff      	cmp	r3, #255	; 0xff
 800db32:	d105      	bne.n	800db40 <handle_ra_input+0x7c>
	     (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
 800db34:	9b03      	ldr	r3, [sp, #12]
 800db36:	891a      	ldrh	r2, [r3, #8]
 800db38:	f248 03fe 	movw	r3, #33022	; 0x80fe
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d003      	beq.n	800db48 <handle_ra_input+0x84>
	     !net_ipv6_is_ll_addr(&ip_hdr->src)) &&
 800db40:	f898 3001 	ldrb.w	r3, [r8, #1]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d1d8      	bne.n	800dafa <handle_ra_input+0x36>
	return net_pkt_skip(pkt, access->size);
 800db48:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db4a:	4620      	mov	r0, r4
 800db4c:	f009 f816 	bl	8016b7c <net_pkt_skip>
	router_lifetime = ntohs(ra_hdr->router_lifetime);
 800db50:	887b      	ldrh	r3, [r7, #2]
 800db52:	9304      	str	r3, [sp, #16]
	reachable_time = ntohl(ra_hdr->reachable_time);
 800db54:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800db58:	687b      	ldr	r3, [r7, #4]
	if (ra_hdr->cur_hop_limit) {
 800db5a:	7839      	ldrb	r1, [r7, #0]
 800db5c:	ba1b      	rev	r3, r3
	retrans_timer = ntohl(ra_hdr->retrans_timer);
 800db5e:	fa98 f888 	rev.w	r8, r8
	if (ra_hdr->cur_hop_limit) {
 800db62:	b121      	cbz	r1, 800db6e <handle_ra_input+0xaa>
		net_ipv6_set_hop_limit(net_pkt_iface(pkt),
 800db64:	6a22      	ldr	r2, [r4, #32]
 800db66:	6852      	ldr	r2, [r2, #4]
	if (!iface->config.ip.ipv6) {
 800db68:	b10a      	cbz	r2, 800db6e <handle_ra_input+0xaa>
	iface->config.ip.ipv6->hop_limit = hop_limit;
 800db6a:	f882 110d 	strb.w	r1, [r2, #269]	; 0x10d
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
 800db6e:	4a69      	ldr	r2, [pc, #420]	; (800dd14 <handle_ra_input+0x250>)
 800db70:	1e59      	subs	r1, r3, #1
 800db72:	4291      	cmp	r1, r2
 800db74:	d80d      	bhi.n	800db92 <handle_ra_input+0xce>
	    (net_if_ipv6_get_reachable_time(net_pkt_iface(pkt)) !=
 800db76:	6a22      	ldr	r2, [r4, #32]
 800db78:	6855      	ldr	r5, [r2, #4]
	if (!iface->config.ip.ipv6) {
 800db7a:	b12d      	cbz	r5, 800db88 <handle_ra_input+0xc4>
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
 800db7c:	f8d5 20fc 	ldr.w	r2, [r5, #252]	; 0xfc
 800db80:	429a      	cmp	r2, r3
 800db82:	d006      	beq.n	800db92 <handle_ra_input+0xce>
	iface->config.ip.ipv6->base_reachable_time = reachable_time;
 800db84:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
 800db88:	4628      	mov	r0, r5
 800db8a:	f008 fa12 	bl	8015fb2 <net_if_ipv6_calc_reachable_time>
 800db8e:	f8c5 00fc 	str.w	r0, [r5, #252]	; 0xfc
	if (retrans_timer) {
 800db92:	f1b8 0f00 	cmp.w	r8, #0
 800db96:	d005      	beq.n	800dba4 <handle_ra_input+0xe0>
		net_if_ipv6_set_retrans_timer(net_pkt_iface(pkt),
 800db98:	6a23      	ldr	r3, [r4, #32]
 800db9a:	685b      	ldr	r3, [r3, #4]
 */
static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
						 u32_t retrans_timer)
{
#if defined(CONFIG_NET_NATIVE_IPV6)
	if (!iface->config.ip.ipv6) {
 800db9c:	b113      	cbz	r3, 800dba4 <handle_ra_input+0xe0>
 800db9e:	68ba      	ldr	r2, [r7, #8]
		return;
	}

	iface->config.ip.ipv6->retrans_timer = retrans_timer;
 800dba0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	pkt->ipv6_ext_opt_len = len;
 800dba4:	230c      	movs	r3, #12
 800dba6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
				net_pkt_get_data(pkt, &nd_access);
 800dbaa:	a90a      	add	r1, sp, #40	; 0x28
 800dbac:	4620      	mov	r0, r4
 800dbae:	f7fe ffe9 	bl	800cb84 <net_pkt_get_data>
			NET_ERR("Prefix %s/%d could not be added to iface %p",
 800dbb2:	4b56      	ldr	r3, [pc, #344]	; (800dd0c <handle_ra_input+0x248>)
 800dbb4:	4a54      	ldr	r2, [pc, #336]	; (800dd08 <handle_ra_input+0x244>)
 800dbb6:	1a9b      	subs	r3, r3, r2
 800dbb8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
				net_pkt_get_data(pkt, &nd_access);
 800dbbc:	4605      	mov	r5, r0
			NET_ERR("Prefix %s/%d could not be added to iface %p",
 800dbbe:	9305      	str	r3, [sp, #20]
	while (nd_opt_hdr) {
 800dbc0:	bb55      	cbnz	r5, 800dc18 <handle_ra_input+0x154>
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt), &ip_hdr->src);
 800dbc2:	9f03      	ldr	r7, [sp, #12]
	router_lifetime = ntohs(ra_hdr->router_lifetime);
 800dbc4:	9b04      	ldr	r3, [sp, #16]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt), &ip_hdr->src);
 800dbc6:	6a20      	ldr	r0, [r4, #32]
 800dbc8:	3708      	adds	r7, #8
	router_lifetime = ntohs(ra_hdr->router_lifetime);
 800dbca:	021d      	lsls	r5, r3, #8
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt), &ip_hdr->src);
 800dbcc:	4639      	mov	r1, r7
	router_lifetime = ntohs(ra_hdr->router_lifetime);
 800dbce:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt), &ip_hdr->src);
 800dbd2:	f7fd fe27 	bl	800b824 <net_if_ipv6_router_lookup>
	router_lifetime = ntohs(ra_hdr->router_lifetime);
 800dbd6:	b2ad      	uxth	r5, r5
	if (router) {
 800dbd8:	4603      	mov	r3, r0
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	f000 81ca 	beq.w	800df74 <handle_ra_input+0x4b0>
		if (!router_lifetime) {
 800dbe0:	2d00      	cmp	r5, #0
 800dbe2:	f040 81bd 	bne.w	800df60 <handle_ra_input+0x49c>
			net_if_ipv6_router_rm(router);
 800dbe6:	f7fd fe9d 	bl	800b924 <net_if_ipv6_router_rm>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
 800dbea:	b16e      	cbz	r6, 800dc08 <handle_ra_input+0x144>
 800dbec:	68f3      	ldr	r3, [r6, #12]
 800dbee:	6818      	ldr	r0, [r3, #0]
 800dbf0:	b150      	cbz	r0, 800dc08 <handle_ra_input+0x144>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
 800dbf2:	f007 ffb8 	bl	8015b66 <net_send_data>
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	da03      	bge.n	800dc02 <handle_ra_input+0x13e>
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
 800dbfa:	68f3      	ldr	r3, [r6, #12]
 800dbfc:	6818      	ldr	r0, [r3, #0]
 800dbfe:	f008 fec5 	bl	801698c <net_pkt_unref>
		nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
 800dc02:	68f0      	ldr	r0, [r6, #12]
 800dc04:	f009 fb98 	bl	8017338 <nbr_clear_ns_pending>
	net_if_stop_rs(net_pkt_iface(pkt));
 800dc08:	6a20      	ldr	r0, [r4, #32]
 800dc0a:	f7fd f80b 	bl	800ac24 <net_if_stop_rs>
	net_pkt_unref(pkt);
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f008 febc 	bl	801698c <net_pkt_unref>
	return NET_OK;
 800dc14:	2000      	movs	r0, #0
 800dc16:	e771      	b.n	800dafc <handle_ra_input+0x38>
	return net_pkt_skip(pkt, access->size);
 800dc18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	f008 ffae 	bl	8016b7c <net_pkt_skip>
		switch (nd_opt_hdr->type) {
 800dc20:	782b      	ldrb	r3, [r5, #0]
 800dc22:	2b03      	cmp	r3, #3
 800dc24:	d07a      	beq.n	800dd1c <handle_ra_input+0x258>
 800dc26:	2b05      	cmp	r3, #5
 800dc28:	d03c      	beq.n	800dca4 <handle_ra_input+0x1e0>
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	786d      	ldrb	r5, [r5, #1]
 800dc2e:	f040 818c 	bne.w	800df4a <handle_ra_input+0x486>
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
 800dc32:	2306      	movs	r3, #6
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
 800dc34:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
 800dc38:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	if (net_pkt_lladdr_src(pkt)->len < lladdr.len) {
 800dc3c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800dc40:	2b05      	cmp	r3, #5
		lladdr.len = net_pkt_lladdr_src(pkt)->len;
 800dc42:	bf98      	it	ls
 800dc44:	f88d 303c 	strbls.w	r3, [sp, #60]	; 0x3c
	lladdr.addr = llstorage.addr;
 800dc48:	f10d 014a 	add.w	r1, sp, #74	; 0x4a
	if (net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
 800dc4c:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
	lladdr.addr = llstorage.addr;
 800dc50:	910e      	str	r1, [sp, #56]	; 0x38
	if (net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
 800dc52:	4620      	mov	r0, r4
 800dc54:	f008 ffa8 	bl	8016ba8 <net_pkt_read>
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	f47f af4e 	bne.w	800dafa <handle_ra_input+0x36>
	padding = len * 8U - 2 - lladdr.len;
 800dc5e:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800dc62:	f1c1 01fe 	rsb	r1, r1, #254	; 0xfe
 800dc66:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
	if (padding) {
 800dc6a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800dc6e:	d005      	beq.n	800dc7c <handle_ra_input+0x1b8>
		if (net_pkt_skip(pkt, padding)) {
 800dc70:	4620      	mov	r0, r4
 800dc72:	f008 ff83 	bl	8016b7c <net_pkt_skip>
 800dc76:	2800      	cmp	r0, #0
 800dc78:	f47f af3f 	bne.w	800dafa <handle_ra_input+0x36>
	return pkt->frags->data;
 800dc7c:	6923      	ldr	r3, [r4, #16]
	return net_ipv6_nbr_add(net_pkt_iface(pkt),
 800dc7e:	6899      	ldr	r1, [r3, #8]
 800dc80:	2302      	movs	r3, #2
 800dc82:	9300      	str	r3, [sp, #0]
 800dc84:	aa0e      	add	r2, sp, #56	; 0x38
 800dc86:	2301      	movs	r3, #1
 800dc88:	3108      	adds	r1, #8
 800dc8a:	6a20      	ldr	r0, [r4, #32]
 800dc8c:	f7ff fea0 	bl	800d9d0 <net_ipv6_nbr_add>
			if (!nbr) {
 800dc90:	4606      	mov	r6, r0
 800dc92:	2800      	cmp	r0, #0
 800dc94:	f43f af31 	beq.w	800dafa <handle_ra_input+0x36>
					net_pkt_get_data(pkt, &nd_access);
 800dc98:	a90a      	add	r1, sp, #40	; 0x28
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f7fe ff72 	bl	800cb84 <net_pkt_get_data>
 800dca0:	4605      	mov	r5, r0
 800dca2:	e78d      	b.n	800dbc0 <handle_ra_input+0xfc>
			if (net_pkt_skip(pkt, 2) ||
 800dca4:	2102      	movs	r1, #2
 800dca6:	4620      	mov	r0, r4
 800dca8:	f008 ff68 	bl	8016b7c <net_pkt_skip>
 800dcac:	2800      	cmp	r0, #0
 800dcae:	f47f af24 	bne.w	800dafa <handle_ra_input+0x36>
			    net_pkt_read_be32(pkt, &mtu)) {
 800dcb2:	a907      	add	r1, sp, #28
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f008 ff80 	bl	8016bba <net_pkt_read_be32>
			if (net_pkt_skip(pkt, 2) ||
 800dcba:	2800      	cmp	r0, #0
 800dcbc:	f47f af1d 	bne.w	800dafa <handle_ra_input+0x36>
			if (mtu < MIN_IPV6_MTU || mtu > MAX_IPV6_MTU) {
 800dcc0:	9907      	ldr	r1, [sp, #28]
 800dcc2:	f5a1 63a0 	sub.w	r3, r1, #1280	; 0x500
 800dcc6:	f5b3 4f7b 	cmp.w	r3, #64256	; 0xfb00
 800dcca:	d316      	bcc.n	800dcfa <handle_ra_input+0x236>
				NET_ERR("DROP: Unsupported MTU %u, min is %u, "
 800dccc:	4b0d      	ldr	r3, [pc, #52]	; (800dd04 <handle_ra_input+0x240>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	0758      	lsls	r0, r3, #29
 800dcd2:	f43f af12 	beq.w	800dafa <handle_ra_input+0x36>
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	f04f 0300 	mov.w	r3, #0
 800dcdc:	f362 0307 	bfi	r3, r2, #0, #8
 800dce0:	9a05      	ldr	r2, [sp, #20]
 800dce2:	480d      	ldr	r0, [pc, #52]	; (800dd18 <handle_ra_input+0x254>)
 800dce4:	f362 138f 	bfi	r3, r2, #6, #10
 800dce8:	f8ad 3000 	strh.w	r3, [sp]
 800dcec:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800dcf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dcf4:	f005 ffbe 	bl	8013c74 <log_3>
 800dcf8:	e6ff      	b.n	800dafa <handle_ra_input+0x36>
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
 800dcfa:	6a23      	ldr	r3, [r4, #32]
	iface->if_dev->mtu = mtu;
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	8319      	strh	r1, [r3, #24]
 800dd00:	e7ca      	b.n	800dc98 <handle_ra_input+0x1d4>
 800dd02:	bf00      	nop
 800dd04:	20009010 	.word	0x20009010
 800dd08:	08019248 	.word	0x08019248
 800dd0c:	080192c8 	.word	0x080192c8
 800dd10:	0801bbcb 	.word	0x0801bbcb
 800dd14:	0036ee7f 	.word	0x0036ee7f
 800dd18:	0801bbe0 	.word	0x0801bbe0
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
 800dd1c:	ab12      	add	r3, sp, #72	; 0x48
 800dd1e:	930c      	str	r3, [sp, #48]	; 0x30
				net_pkt_get_data(pkt, &rapfx_access);
 800dd20:	a90c      	add	r1, sp, #48	; 0x30
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
 800dd22:	231e      	movs	r3, #30
				net_pkt_get_data(pkt, &rapfx_access);
 800dd24:	4620      	mov	r0, r4
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
 800dd26:	930d      	str	r3, [sp, #52]	; 0x34
				net_pkt_get_data(pkt, &rapfx_access);
 800dd28:	f7fe ff2c 	bl	800cb84 <net_pkt_get_data>
	if (!pfx_info) {
 800dd2c:	4605      	mov	r5, r0
 800dd2e:	2800      	cmp	r0, #0
 800dd30:	f43f aee3 	beq.w	800dafa <handle_ra_input+0x36>
	return net_pkt_skip(pkt, access->size);
 800dd34:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dd36:	4620      	mov	r0, r4
 800dd38:	f008 ff20 	bl	8016b7c <net_pkt_skip>
	valid_lifetime = ntohl(pfx_info->valid_lifetime);
 800dd3c:	f8d5 8002 	ldr.w	r8, [r5, #2]
 800dd40:	f8d5 3006 	ldr.w	r3, [r5, #6]
 800dd44:	fa98 f888 	rev.w	r8, r8
	preferred_lifetime = ntohl(pfx_info->preferred_lifetime);
 800dd48:	ba1b      	rev	r3, r3
	if (valid_lifetime >= preferred_lifetime &&
 800dd4a:	4598      	cmp	r8, r3
 800dd4c:	d3a4      	bcc.n	800dc98 <handle_ra_input+0x1d4>
 800dd4e:	89ea      	ldrh	r2, [r5, #14]
 800dd50:	f248 03fe 	movw	r3, #33022	; 0x80fe
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d09f      	beq.n	800dc98 <handle_ra_input+0x1d4>
		if (pfx_info->flags & NET_ICMPV6_RA_FLAG_ONLINK) {
 800dd58:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	da2d      	bge.n	800ddbc <handle_ra_input+0x2f8>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
 800dd60:	462f      	mov	r7, r5
 800dd62:	6a20      	ldr	r0, [r4, #32]
 800dd64:	f817 2b0e 	ldrb.w	r2, [r7], #14
 800dd68:	4639      	mov	r1, r7
 800dd6a:	f008 f8ac 	bl	8015ec6 <net_if_ipv6_prefix_lookup>
	if (!prefix) {
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	d176      	bne.n	800de60 <handle_ra_input+0x39c>
		if (!prefix_info->valid_lifetime) {
 800dd72:	f8d5 3002 	ldr.w	r3, [r5, #2]
 800dd76:	b30b      	cbz	r3, 800ddbc <handle_ra_input+0x2f8>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
 800dd78:	782a      	ldrb	r2, [r5, #0]
 800dd7a:	6a20      	ldr	r0, [r4, #32]
 800dd7c:	4639      	mov	r1, r7
 800dd7e:	f7fd fbf5 	bl	800b56c <net_if_ipv6_prefix_add>
		if (prefix) {
 800dd82:	2800      	cmp	r0, #0
 800dd84:	d16c      	bne.n	800de60 <handle_ra_input+0x39c>
			NET_ERR("Prefix %s/%d could not be added to iface %p",
 800dd86:	4b7e      	ldr	r3, [pc, #504]	; (800df80 <handle_ra_input+0x4bc>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	0759      	lsls	r1, r3, #29
 800dd8c:	d016      	beq.n	800ddbc <handle_ra_input+0x2f8>
 800dd8e:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
 800dd92:	f043 0301 	orr.w	r3, r3, #1
 800dd96:	f363 0b07 	bfi	fp, r3, #0, #8
 800dd9a:	9b05      	ldr	r3, [sp, #20]
 800dd9c:	4639      	mov	r1, r7
 800dd9e:	2002      	movs	r0, #2
 800dda0:	f363 1b8f 	bfi	fp, r3, #6, #10
 800dda4:	f7fe f996 	bl	800c0d4 <net_sprint_addr>
 800dda8:	f7f7 fffc 	bl	8005da4 <log_strdup>
 800ddac:	782a      	ldrb	r2, [r5, #0]
 800ddae:	f8ad b000 	strh.w	fp, [sp]
 800ddb2:	4601      	mov	r1, r0
 800ddb4:	6a23      	ldr	r3, [r4, #32]
 800ddb6:	4873      	ldr	r0, [pc, #460]	; (800df84 <handle_ra_input+0x4c0>)
 800ddb8:	f005 ff5c 	bl	8013c74 <log_3>
		if ((pfx_info->flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
 800ddbc:	786b      	ldrb	r3, [r5, #1]
 800ddbe:	065b      	lsls	r3, r3, #25
 800ddc0:	f57f af6a 	bpl.w	800dc98 <handle_ra_input+0x1d4>
 800ddc4:	f1b8 0f00 	cmp.w	r8, #0
 800ddc8:	f43f af66 	beq.w	800dc98 <handle_ra_input+0x1d4>
		    valid_lifetime &&
 800ddcc:	782b      	ldrb	r3, [r5, #0]
 800ddce:	2b40      	cmp	r3, #64	; 0x40
 800ddd0:	f47f af62 	bne.w	800dc98 <handle_ra_input+0x1d4>
	struct in6_addr addr = { };
 800ddd4:	220e      	movs	r2, #14
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	f10d 003a 	add.w	r0, sp, #58	; 0x3a
 800dddc:	f7f6 fdc7 	bl	800496e <memset>
	net_ipv6_addr_create_iid(&addr,
 800dde0:	6a23      	ldr	r3, [r4, #32]
 800dde2:	681a      	ldr	r2, [r3, #0]
	addr->s6_addr[0] = 0xfe;
 800dde4:	f248 03fe 	movw	r3, #33022	; 0x80fe
 800dde8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
 800ddec:	2300      	movs	r3, #0
 800ddee:	930f      	str	r3, [sp, #60]	; 0x3c
	switch (lladdr->len) {
 800ddf0:	7d13      	ldrb	r3, [r2, #20]
 800ddf2:	2b06      	cmp	r3, #6
 800ddf4:	d04f      	beq.n	800de96 <handle_ra_input+0x3d2>
 800ddf6:	2b08      	cmp	r3, #8
 800ddf8:	d06b      	beq.n	800ded2 <handle_ra_input+0x40e>
 800ddfa:	2b02      	cmp	r3, #2
 800ddfc:	d113      	bne.n	800de26 <handle_ra_input+0x362>
		if (lladdr->type == NET_LINK_IEEE802154 ||
 800ddfe:	7d53      	ldrb	r3, [r2, #21]
 800de00:	2b01      	cmp	r3, #1
 800de02:	d001      	beq.n	800de08 <handle_ra_input+0x344>
 800de04:	2b06      	cmp	r3, #6
 800de06:	d10e      	bne.n	800de26 <handle_ra_input+0x362>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
 800de08:	2300      	movs	r3, #0
 800de0a:	9310      	str	r3, [sp, #64]	; 0x40
			addr->s6_addr[11] = 0xff;
 800de0c:	23ff      	movs	r3, #255	; 0xff
 800de0e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
			addr->s6_addr[12] = 0xfe;
 800de12:	23fe      	movs	r3, #254	; 0xfe
 800de14:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
			addr->s6_addr[14] = lladdr->addr[0];
 800de18:	6913      	ldr	r3, [r2, #16]
 800de1a:	781a      	ldrb	r2, [r3, #0]
 800de1c:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
			addr->s6_addr[15] = lladdr->addr[1];
 800de20:	785b      	ldrb	r3, [r3, #1]
 800de22:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
 800de26:	462a      	mov	r2, r5
 800de28:	ab0e      	add	r3, sp, #56	; 0x38
 800de2a:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 800de2e:	6851      	ldr	r1, [r2, #4]
 800de30:	c303      	stmia	r3!, {r0, r1}
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
 800de32:	2100      	movs	r1, #0
 800de34:	a80e      	add	r0, sp, #56	; 0x38
 800de36:	f7fc feff 	bl	800ac38 <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
 800de3a:	f8d5 a002 	ldr.w	sl, [r5, #2]
 800de3e:	4607      	mov	r7, r0
 800de40:	2800      	cmp	r0, #0
 800de42:	d077      	beq.n	800df34 <handle_ra_input+0x470>
 800de44:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d173      	bne.n	800df34 <handle_ra_input+0x470>
		if (prefix_info->valid_lifetime ==
 800de4c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800de50:	d145      	bne.n	800dede <handle_ra_input+0x41a>
	ifaddr->is_infinite = is_infinite;
 800de52:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800de56:	f043 0301 	orr.w	r3, r3, #1
 800de5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800de5e:	e71b      	b.n	800dc98 <handle_ra_input+0x1d4>
	switch (prefix_info->valid_lifetime) {
 800de60:	f8d5 1002 	ldr.w	r1, [r5, #2]
 800de64:	b151      	cbz	r1, 800de7c <handle_ra_input+0x3b8>
 800de66:	1c4a      	adds	r2, r1, #1
 800de68:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800de6c:	d00e      	beq.n	800de8c <handle_ra_input+0x3c8>
	prefix->is_infinite = is_infinite;
 800de6e:	f36f 0300 	bfc	r3, #0, #1
 800de72:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
		net_if_ipv6_prefix_set_timer(prefix,
 800de76:	f7fd fc3b 	bl	800b6f0 <net_if_ipv6_prefix_set_timer>
		break;
 800de7a:	e79f      	b.n	800ddbc <handle_ra_input+0x2f8>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
 800de7c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800de80:	f100 0110 	add.w	r1, r0, #16
 800de84:	6a20      	ldr	r0, [r4, #32]
 800de86:	f7fd fc83 	bl	800b790 <net_if_ipv6_prefix_rm>
		break;
 800de8a:	e797      	b.n	800ddbc <handle_ra_input+0x2f8>
 800de8c:	f043 0301 	orr.w	r3, r3, #1
 800de90:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 800de94:	e792      	b.n	800ddbc <handle_ra_input+0x2f8>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
 800de96:	6913      	ldr	r3, [r2, #16]
 800de98:	7899      	ldrb	r1, [r3, #2]
 800de9a:	8818      	ldrh	r0, [r3, #0]
 800de9c:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
		addr->s6_addr[11] = 0xff;
 800dea0:	21ff      	movs	r1, #255	; 0xff
 800dea2:	f88d 1043 	strb.w	r1, [sp, #67]	; 0x43
		addr->s6_addr[12] = 0xfe;
 800dea6:	21fe      	movs	r1, #254	; 0xfe
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
 800dea8:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
		addr->s6_addr[12] = 0xfe;
 800deac:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
 800deb0:	f833 1f03 	ldrh.w	r1, [r3, #3]!
 800deb4:	f8ad 1045 	strh.w	r1, [sp, #69]	; 0x45
 800deb8:	789b      	ldrb	r3, [r3, #2]
 800deba:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
		if (lladdr->type == NET_LINK_ETHERNET) {
 800debe:	7d53      	ldrb	r3, [r2, #21]
 800dec0:	2b03      	cmp	r3, #3
 800dec2:	d1b0      	bne.n	800de26 <handle_ra_input+0x362>
		addr->s6_addr[8] ^= 0x02;
 800dec4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800dec8:	f083 0302 	eor.w	r3, r3, #2
 800decc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
 800ded0:	e7a9      	b.n	800de26 <handle_ra_input+0x362>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
 800ded2:	6912      	ldr	r2, [r2, #16]
 800ded4:	6810      	ldr	r0, [r2, #0]
 800ded6:	6851      	ldr	r1, [r2, #4]
 800ded8:	ab10      	add	r3, sp, #64	; 0x40
 800deda:	c303      	stmia	r3!, {r0, r1}
 800dedc:	e7f2      	b.n	800dec4 <handle_ra_input+0x400>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
 800dede:	f5ba 5fe1 	cmp.w	sl, #7200	; 0x1c20
 800dee2:	d909      	bls.n	800def8 <handle_ra_input+0x434>
			net_if_ipv6_addr_update_lifetime(
 800dee4:	f8d5 1002 	ldr.w	r1, [r5, #2]
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
 800dee8:	4638      	mov	r0, r7
 800deea:	f7fc ff2b 	bl	800ad44 <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
 800deee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800def2:	f36f 0300 	bfc	r3, #0, #1
 800def6:	e7b0      	b.n	800de5a <handle_ra_input+0x396>
	if (ifaddr->lifetime.timer_timeout == 0) {
 800def8:	69c0      	ldr	r0, [r0, #28]
 800defa:	b1b0      	cbz	r0, 800df2a <handle_ra_input+0x466>
	remaining = (u64_t)ifaddr->lifetime.timer_timeout +
 800defc:	6a3b      	ldr	r3, [r7, #32]
 800defe:	4a22      	ldr	r2, [pc, #136]	; (800df88 <handle_ra_input+0x4c4>)
 800df00:	4680      	mov	r8, r0
 800df02:	ea4f 79e0 	mov.w	r9, r0, asr #31
 800df06:	fbc2 8903 	smlal	r8, r9, r2, r3
 800df0a:	f00a fe46 	bl	8018b9a <z_impl_k_uptime_get>
	return (u32_t)abs((s32_t)time1 - (s32_t)time2);
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	1ac0      	subs	r0, r0, r3
 800df12:	f7f6 fcea 	bl	80048ea <abs>
	return (u32_t)(remaining / K_MSEC(1000));
 800df16:	ebb8 0000 	subs.w	r0, r8, r0
 800df1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800df1e:	f04f 0300 	mov.w	r3, #0
 800df22:	f169 0100 	sbc.w	r1, r9, #0
 800df26:	f7f3 fead 	bl	8001c84 <__aeabi_uldivmod>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
 800df2a:	4582      	cmp	sl, r0
 800df2c:	d8da      	bhi.n	800dee4 <handle_ra_input+0x420>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
 800df2e:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 800df32:	e7d9      	b.n	800dee8 <handle_ra_input+0x424>
		if (prefix_info->valid_lifetime ==
 800df34:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
	return pkt->iface;
 800df38:	6a20      	ldr	r0, [r4, #32]
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
 800df3a:	bf0c      	ite	eq
 800df3c:	2300      	moveq	r3, #0
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
 800df3e:	4653      	movne	r3, sl
 800df40:	2201      	movs	r2, #1
 800df42:	a90e      	add	r1, sp, #56	; 0x38
 800df44:	f7fc ff42 	bl	800adcc <net_if_ipv6_addr_add>
 800df48:	e6a6      	b.n	800dc98 <handle_ra_input+0x1d4>
			if (net_pkt_skip(pkt, nd_opt_hdr->len * 8U - 2)) {
 800df4a:	f06f 0101 	mvn.w	r1, #1
 800df4e:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800df52:	4620      	mov	r0, r4
 800df54:	f008 fe12 	bl	8016b7c <net_pkt_skip>
 800df58:	2800      	cmp	r0, #0
 800df5a:	f43f ae9d 	beq.w	800dc98 <handle_ra_input+0x1d4>
 800df5e:	e5cc      	b.n	800dafa <handle_ra_input+0x36>
			if (nbr) {
 800df60:	b11e      	cbz	r6, 800df6a <handle_ra_input+0x4a6>
				net_ipv6_nbr_data(nbr)->is_router = true;
 800df62:	68f2      	ldr	r2, [r6, #12]
 800df64:	2101      	movs	r1, #1
 800df66:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
			net_if_ipv6_router_update_lifetime(
 800df6a:	4629      	mov	r1, r5
 800df6c:	4618      	mov	r0, r3
 800df6e:	f007 ffcf 	bl	8015f10 <net_if_ipv6_router_update_lifetime>
 800df72:	e63a      	b.n	800dbea <handle_ra_input+0x126>
		net_if_ipv6_router_add(net_pkt_iface(pkt),
 800df74:	462a      	mov	r2, r5
 800df76:	4639      	mov	r1, r7
 800df78:	6a20      	ldr	r0, [r4, #32]
 800df7a:	f7fd fc8f 	bl	800b89c <net_if_ipv6_router_add>
 800df7e:	e634      	b.n	800dbea <handle_ra_input+0x126>
 800df80:	20009010 	.word	0x20009010
 800df84:	0801bc0f 	.word	0x0801bc0f
 800df88:	7fffff9b 	.word	0x7fffff9b

0800df8c <handle_ns_input>:
{
 800df8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
 800df90:	2314      	movs	r3, #20
{
 800df92:	b09c      	sub	sp, #112	; 0x70
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
 800df94:	2500      	movs	r5, #0
 800df96:	e9cd 5304 	strd	r5, r3, [sp, #16]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
 800df9a:	ab03      	add	r3, sp, #12
 800df9c:	9306      	str	r3, [sp, #24]
 800df9e:	2302      	movs	r3, #2
 800dfa0:	9307      	str	r3, [sp, #28]
	u16_t length = net_pkt_get_len(pkt);
 800dfa2:	6903      	ldr	r3, [r0, #16]
{
 800dfa4:	4604      	mov	r4, r0
 800dfa6:	460e      	mov	r6, r1
 800dfa8:	4690      	mov	r8, r2
	while (buf) {
 800dfaa:	b973      	cbnz	r3, 800dfca <handle_ns_input+0x3e>
	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
 800dfac:	a904      	add	r1, sp, #16
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f7fe fde8 	bl	800cb84 <net_pkt_get_data>
	u16_t length = net_pkt_get_len(pkt);
 800dfb4:	b2ad      	uxth	r5, r5
	if (!ns_hdr) {
 800dfb6:	4607      	mov	r7, r0
 800dfb8:	b9d0      	cbnz	r0, 800dff0 <handle_ns_input+0x64>
		NET_ERR("DROP: NULL NS header");
 800dfba:	4bad      	ldr	r3, [pc, #692]	; (800e270 <handle_ns_input+0x2e4>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	0759      	lsls	r1, r3, #29
 800dfc0:	d107      	bne.n	800dfd2 <handle_ns_input+0x46>
	return NET_DROP;
 800dfc2:	2002      	movs	r0, #2
}
 800dfc4:	b01c      	add	sp, #112	; 0x70
 800dfc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
 800dfca:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
 800dfcc:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
 800dfce:	4415      	add	r5, r2
		buf = buf->frags;
 800dfd0:	e7eb      	b.n	800dfaa <handle_ns_input+0x1e>
		NET_ERR("DROP: NULL NS header");
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	f04f 0100 	mov.w	r1, #0
 800dfd8:	f363 0107 	bfi	r1, r3, #0, #8
 800dfdc:	4aa5      	ldr	r2, [pc, #660]	; (800e274 <handle_ns_input+0x2e8>)
 800dfde:	4ba6      	ldr	r3, [pc, #664]	; (800e278 <handle_ns_input+0x2ec>)
 800dfe0:	48a6      	ldr	r0, [pc, #664]	; (800e27c <handle_ns_input+0x2f0>)
 800dfe2:	1a9b      	subs	r3, r3, r2
 800dfe4:	08db      	lsrs	r3, r3, #3
 800dfe6:	f363 118f 	bfi	r1, r3, #6, #10
			NET_ERR("DROP: Corrupted NS message");
 800dfea:	f005 fe0a 	bl	8013c02 <log_0>
 800dfee:	e7e8      	b.n	800dfc2 <handle_ns_input+0x36>
	if (((length < (sizeof(struct net_ipv6_hdr) +
 800dff0:	2d3f      	cmp	r5, #63	; 0x3f
 800dff2:	d902      	bls.n	800dffa <handle_ns_input+0x6e>
			  sizeof(struct net_icmpv6_ns_hdr))) ||
 800dff4:	79f3      	ldrb	r3, [r6, #7]
 800dff6:	2bff      	cmp	r3, #255	; 0xff
 800dff8:	d006      	beq.n	800e008 <handle_ns_input+0x7c>
	    (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT)) &&
 800dffa:	793b      	ldrb	r3, [r7, #4]
 800dffc:	2bff      	cmp	r3, #255	; 0xff
 800dffe:	d103      	bne.n	800e008 <handle_ns_input+0x7c>
	    (net_ipv6_is_addr_mcast(&ns_hdr->tgt) && icmp_hdr->code != 0U)) {
 800e000:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d1dc      	bne.n	800dfc2 <handle_ns_input+0x36>
	return net_pkt_skip(pkt, access->size);
 800e008:	9905      	ldr	r1, [sp, #20]
 800e00a:	4620      	mov	r0, r4
 800e00c:	f008 fdb6 	bl	8016b7c <net_pkt_skip>
	pkt->ipv6_ext_opt_len = len;
 800e010:	2314      	movs	r3, #20
 800e012:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
				net_pkt_get_data(pkt, &nd_access);
 800e016:	a906      	add	r1, sp, #24
 800e018:	4620      	mov	r0, r4
 800e01a:	f7fe fdb3 	bl	800cb84 <net_pkt_get_data>
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));
 800e01e:	3d2c      	subs	r5, #44	; 0x2c
 800e020:	b2ad      	uxth	r5, r5
				net_pkt_get_data(pkt, &nd_access);
 800e022:	4680      	mov	r8, r0
			if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
 800e024:	f106 0a08 	add.w	sl, r6, #8
	if (net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
 800e028:	f10d 0952 	add.w	r9, sp, #82	; 0x52
	while (nd_opt_hdr && nd_opt_hdr->len > 0 &&
 800e02c:	f1b8 0f00 	cmp.w	r8, #0
 800e030:	d006      	beq.n	800e040 <handle_ns_input+0xb4>
 800e032:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e036:	b11b      	cbz	r3, 800e040 <handle_ns_input+0xb4>
 800e038:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800e03c:	42ab      	cmp	r3, r5
 800e03e:	d32b      	bcc.n	800e098 <handle_ns_input+0x10c>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
 800e040:	1d3d      	adds	r5, r7, #4
 800e042:	4629      	mov	r1, r5
 800e044:	6a20      	ldr	r0, [r4, #32]
 800e046:	f007 feb0 	bl	8015daa <net_if_ipv6_addr_lookup_by_iface>
	if (!ifaddr) {
 800e04a:	4682      	mov	sl, r0
 800e04c:	2800      	cmp	r0, #0
 800e04e:	d0b8      	beq.n	800dfc2 <handle_ns_input+0x36>
		src = &ip_hdr->src;
 800e050:	f106 0808 	add.w	r8, r6, #8
		tgt = &ifaddr->address.in6_addr;
 800e054:	f100 0904 	add.w	r9, r0, #4
	if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
 800e058:	4640      	mov	r0, r8
 800e05a:	f009 f95f 	bl	801731c <net_ipv6_is_addr_unspecified>
 800e05e:	4601      	mov	r1, r0
 800e060:	2800      	cmp	r0, #0
 800e062:	f000 80b5 	beq.w	800e1d0 <handle_ns_input+0x244>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
 800e066:	69b2      	ldr	r2, [r6, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 800e068:	f240 23ff 	movw	r3, #767	; 0x2ff
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d1a8      	bne.n	800dfc2 <handle_ns_input+0x36>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
 800e070:	69f3      	ldr	r3, [r6, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
 800e072:	2b00      	cmp	r3, #0
 800e074:	d1a5      	bne.n	800dfc2 <handle_ns_input+0x36>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 800e076:	6a33      	ldr	r3, [r6, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
 800e078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e07c:	d1a1      	bne.n	800dfc2 <handle_ns_input+0x36>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
 800e07e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e080:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 800e082:	2bff      	cmp	r3, #255	; 0xff
 800e084:	d19d      	bne.n	800dfc2 <handle_ns_input+0x36>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
 800e086:	f99a 302d 	ldrsb.w	r3, [sl, #45]	; 0x2d
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d16e      	bne.n	800e16c <handle_ns_input+0x1e0>
			dad_failed(net_pkt_iface(pkt),
 800e08e:	4649      	mov	r1, r9
 800e090:	6a20      	ldr	r0, [r4, #32]
 800e092:	f7ff f8b1 	bl	800d1f8 <dad_failed>
			goto drop;
 800e096:	e794      	b.n	800dfc2 <handle_ns_input+0x36>
	return net_pkt_skip(pkt, access->size);
 800e098:	9907      	ldr	r1, [sp, #28]
 800e09a:	4620      	mov	r0, r4
 800e09c:	f008 fd6e 	bl	8016b7c <net_pkt_skip>
		switch (nd_opt_hdr->type) {
 800e0a0:	f898 3000 	ldrb.w	r3, [r8]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d01c      	beq.n	800e0e2 <handle_ns_input+0x156>
		prev_opt_len = net_pkt_ipv6_ext_opt_len(pkt);
 800e0a8:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
					     (nd_opt_hdr->len << 3));
 800e0ac:	f898 3001 	ldrb.w	r3, [r8, #1]
					     net_pkt_ipv6_ext_opt_len(pkt) +
 800e0b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		net_pkt_set_ipv6_ext_opt_len(pkt,
 800e0b4:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
 800e0b6:	4293      	cmp	r3, r2
	pkt->ipv6_ext_opt_len = len;
 800e0b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e0bc:	d850      	bhi.n	800e160 <handle_ns_input+0x1d4>
			NET_ERR("DROP: Corrupted NS message");
 800e0be:	4b6c      	ldr	r3, [pc, #432]	; (800e270 <handle_ns_input+0x2e4>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	075b      	lsls	r3, r3, #29
 800e0c4:	f43f af7d 	beq.w	800dfc2 <handle_ns_input+0x36>
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	f04f 0100 	mov.w	r1, #0
 800e0ce:	f363 0107 	bfi	r1, r3, #0, #8
 800e0d2:	4a68      	ldr	r2, [pc, #416]	; (800e274 <handle_ns_input+0x2e8>)
 800e0d4:	4b68      	ldr	r3, [pc, #416]	; (800e278 <handle_ns_input+0x2ec>)
 800e0d6:	486a      	ldr	r0, [pc, #424]	; (800e280 <handle_ns_input+0x2f4>)
 800e0d8:	1a9b      	subs	r3, r3, r2
 800e0da:	08db      	lsrs	r3, r3, #3
 800e0dc:	f363 118f 	bfi	r1, r3, #6, #10
 800e0e0:	e783      	b.n	800dfea <handle_ns_input+0x5e>
			if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
 800e0e2:	4650      	mov	r0, sl
 800e0e4:	f009 f91a 	bl	801731c <net_ipv6_is_addr_unspecified>
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	f47f af6a 	bne.w	800dfc2 <handle_ns_input+0x36>
			if (nd_opt_hdr->len > 2) {
 800e0ee:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e0f2:	2a02      	cmp	r2, #2
 800e0f4:	d911      	bls.n	800e11a <handle_ns_input+0x18e>
				NET_ERR("DROP: Too long source ll address "
 800e0f6:	4b5e      	ldr	r3, [pc, #376]	; (800e270 <handle_ns_input+0x2e4>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	075a      	lsls	r2, r3, #29
 800e0fc:	f43f af61 	beq.w	800dfc2 <handle_ns_input+0x36>
 800e100:	2301      	movs	r3, #1
 800e102:	f04f 0100 	mov.w	r1, #0
 800e106:	f363 0107 	bfi	r1, r3, #0, #8
 800e10a:	4a5a      	ldr	r2, [pc, #360]	; (800e274 <handle_ns_input+0x2e8>)
 800e10c:	4b5a      	ldr	r3, [pc, #360]	; (800e278 <handle_ns_input+0x2ec>)
 800e10e:	485d      	ldr	r0, [pc, #372]	; (800e284 <handle_ns_input+0x2f8>)
 800e110:	1a9b      	subs	r3, r3, r2
 800e112:	08db      	lsrs	r3, r3, #3
 800e114:	f363 118f 	bfi	r1, r3, #6, #10
 800e118:	e767      	b.n	800dfea <handle_ns_input+0x5e>
	lladdr.len = ll_len * 8U - 2;
 800e11a:	00d2      	lsls	r2, r2, #3
 800e11c:	3a02      	subs	r2, #2
 800e11e:	b2d2      	uxtb	r2, r2
	if (net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
 800e120:	4649      	mov	r1, r9
 800e122:	4620      	mov	r0, r4
	lladdr.len = ll_len * 8U - 2;
 800e124:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
	if (net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
 800e128:	f008 fd3e 	bl	8016ba8 <net_pkt_read>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2800      	cmp	r0, #0
 800e130:	f47f af47 	bne.w	800dfc2 <handle_ns_input+0x36>
	nbr_lladdr.len = lladdr.len;
 800e134:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
	if (net_pkt_lladdr_src(pkt)->len < nbr_lladdr.len) {
 800e138:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
	nbr_lladdr.addr = lladdr.addr;
 800e13c:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
		nbr_lladdr.len = net_pkt_lladdr_src(pkt)->len;
 800e140:	428a      	cmp	r2, r1
 800e142:	bf28      	it	cs
 800e144:	460a      	movcs	r2, r1
 800e146:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
	return pkt->frags->data;
 800e14a:	6922      	ldr	r2, [r4, #16]
	return net_ipv6_nbr_add(net_pkt_iface(pkt),
 800e14c:	6891      	ldr	r1, [r2, #8]
 800e14e:	9000      	str	r0, [sp, #0]
 800e150:	aa18      	add	r2, sp, #96	; 0x60
 800e152:	3108      	adds	r1, #8
 800e154:	6a20      	ldr	r0, [r4, #32]
 800e156:	f7ff fc3b 	bl	800d9d0 <net_ipv6_nbr_add>
			if (!handle_ns_neighbor(pkt, nd_opt_hdr->len)) {
 800e15a:	2800      	cmp	r0, #0
 800e15c:	d1a4      	bne.n	800e0a8 <handle_ns_input+0x11c>
 800e15e:	e730      	b.n	800dfc2 <handle_ns_input+0x36>
					net_pkt_get_data(pkt, &nd_access);
 800e160:	a906      	add	r1, sp, #24
 800e162:	4620      	mov	r0, r4
 800e164:	f7fe fd0e 	bl	800cb84 <net_pkt_get_data>
 800e168:	4680      	mov	r8, r0
 800e16a:	e75f      	b.n	800e02c <handle_ns_input+0xa0>
		if (!net_ipv6_is_addr_solicited_node(&ip_hdr->dst)) {
 800e16c:	f106 0118 	add.w	r1, r6, #24
		net_ipv6_addr_create_ll_allnodes_mcast(&ip_hdr->dst);
 800e170:	4608      	mov	r0, r1
 800e172:	f009 f937 	bl	80173e4 <net_ipv6_addr_create_ll_allnodes_mcast>
		net_ipaddr_copy(&ip_hdr->src,
 800e176:	6a20      	ldr	r0, [r4, #32]
 800e178:	f7fd fbfa 	bl	800b970 <net_if_ipv6_select_src_addr>
 800e17c:	ad08      	add	r5, sp, #32
 800e17e:	4603      	mov	r3, r0
 800e180:	f100 0c10 	add.w	ip, r0, #16
 800e184:	462a      	mov	r2, r5
 800e186:	6818      	ldr	r0, [r3, #0]
 800e188:	6859      	ldr	r1, [r3, #4]
 800e18a:	462f      	mov	r7, r5
 800e18c:	c703      	stmia	r7!, {r0, r1}
 800e18e:	3308      	adds	r3, #8
 800e190:	4563      	cmp	r3, ip
 800e192:	463d      	mov	r5, r7
 800e194:	d1f7      	bne.n	800e186 <handle_ns_input+0x1fa>
 800e196:	4645      	mov	r5, r8
 800e198:	af0c      	add	r7, sp, #48	; 0x30
 800e19a:	4613      	mov	r3, r2
 800e19c:	cb03      	ldmia	r3!, {r0, r1}
 800e19e:	42bb      	cmp	r3, r7
 800e1a0:	6028      	str	r0, [r5, #0]
 800e1a2:	6069      	str	r1, [r5, #4]
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	f105 0508 	add.w	r5, r5, #8
 800e1aa:	d1f6      	bne.n	800e19a <handle_ns_input+0x20e>
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
 800e1ac:	2320      	movs	r3, #32
	if (!net_ipv6_send_na(net_pkt_iface(pkt), src,
 800e1ae:	9300      	str	r3, [sp, #0]
 800e1b0:	f106 0218 	add.w	r2, r6, #24
 800e1b4:	464b      	mov	r3, r9
 800e1b6:	4641      	mov	r1, r8
 800e1b8:	6a20      	ldr	r0, [r4, #32]
 800e1ba:	f009 f95f 	bl	801747c <net_ipv6_send_na>
 800e1be:	4605      	mov	r5, r0
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	f47f aefe 	bne.w	800dfc2 <handle_ns_input+0x36>
		net_pkt_unref(pkt);
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f008 fbe0 	bl	801698c <net_pkt_unref>
		return NET_OK;
 800e1cc:	4628      	mov	r0, r5
 800e1ce:	e6f9      	b.n	800dfc4 <handle_ns_input+0x38>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
 800e1d0:	4640      	mov	r0, r8
 800e1d2:	f7fc fd31 	bl	800ac38 <net_if_ipv6_addr_lookup>
	if (net_ipv6_is_my_addr(&ip_hdr->src)) {
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	f47f aef3 	bne.w	800dfc2 <handle_ns_input+0x36>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
 800e1dc:	69b2      	ldr	r2, [r6, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 800e1de:	f240 23ff 	movw	r3, #767	; 0x2ff
 800e1e2:	429a      	cmp	r2, r3
	if (net_ipv6_is_addr_solicited_node(&ip_hdr->dst)) {
 800e1e4:	f106 0a18 	add.w	sl, r6, #24
 800e1e8:	d109      	bne.n	800e1fe <handle_ns_input+0x272>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
 800e1ea:	69f3      	ldr	r3, [r6, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
 800e1ec:	b93b      	cbnz	r3, 800e1fe <handle_ns_input+0x272>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 800e1ee:	6a33      	ldr	r3, [r6, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
 800e1f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e1f4:	d103      	bne.n	800e1fe <handle_ns_input+0x272>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
 800e1f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e1f8:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 800e1fa:	2bff      	cmp	r3, #255	; 0xff
 800e1fc:	d044      	beq.n	800e288 <handle_ns_input+0x2fc>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
 800e1fe:	4651      	mov	r1, sl
 800e200:	6a20      	ldr	r0, [r4, #32]
 800e202:	f007 fdd2 	bl	8015daa <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
 800e206:	4681      	mov	r9, r0
 800e208:	2800      	cmp	r0, #0
 800e20a:	f43f aeda 	beq.w	800dfc2 <handle_ns_input+0x36>
		net_ipaddr_copy(&ip_hdr->dst, &ip_hdr->src);
 800e20e:	4642      	mov	r2, r8
 800e210:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 800e214:	6810      	ldr	r0, [r2, #0]
 800e216:	6851      	ldr	r1, [r2, #4]
 800e218:	4663      	mov	r3, ip
 800e21a:	c303      	stmia	r3!, {r0, r1}
 800e21c:	3208      	adds	r2, #8
 800e21e:	4552      	cmp	r2, sl
 800e220:	469c      	mov	ip, r3
 800e222:	d1f7      	bne.n	800e214 <handle_ns_input+0x288>
 800e224:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
 800e228:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
 800e22c:	4673      	mov	r3, lr
 800e22e:	cb03      	ldmia	r3!, {r0, r1}
 800e230:	4563      	cmp	r3, ip
 800e232:	6010      	str	r0, [r2, #0]
 800e234:	6051      	str	r1, [r2, #4]
 800e236:	469e      	mov	lr, r3
 800e238:	f102 0208 	add.w	r2, r2, #8
 800e23c:	d1f6      	bne.n	800e22c <handle_ns_input+0x2a0>
		net_ipaddr_copy(&ip_hdr->src, &ns_hdr->tgt);
 800e23e:	4662      	mov	r2, ip
 800e240:	3714      	adds	r7, #20
 800e242:	6828      	ldr	r0, [r5, #0]
 800e244:	6869      	ldr	r1, [r5, #4]
 800e246:	4613      	mov	r3, r2
 800e248:	c303      	stmia	r3!, {r0, r1}
 800e24a:	3508      	adds	r5, #8
 800e24c:	42bd      	cmp	r5, r7
 800e24e:	461a      	mov	r2, r3
 800e250:	d1f7      	bne.n	800e242 <handle_ns_input+0x2b6>
 800e252:	4662      	mov	r2, ip
 800e254:	4645      	mov	r5, r8
 800e256:	af1c      	add	r7, sp, #112	; 0x70
 800e258:	4613      	mov	r3, r2
 800e25a:	cb03      	ldmia	r3!, {r0, r1}
 800e25c:	42bb      	cmp	r3, r7
 800e25e:	6028      	str	r0, [r5, #0]
 800e260:	6069      	str	r1, [r5, #4]
 800e262:	461a      	mov	r2, r3
 800e264:	f105 0508 	add.w	r5, r5, #8
 800e268:	d1f6      	bne.n	800e258 <handle_ns_input+0x2cc>
		tgt = &ifaddr->address.in6_addr;
 800e26a:	f109 0904 	add.w	r9, r9, #4
 800e26e:	e039      	b.n	800e2e4 <handle_ns_input+0x358>
 800e270:	20009010 	.word	0x20009010
 800e274:	08019248 	.word	0x08019248
 800e278:	080192c8 	.word	0x080192c8
 800e27c:	0801bb6d 	.word	0x0801bb6d
 800e280:	0801bbb0 	.word	0x0801bbb0
 800e284:	0801bb82 	.word	0x0801bb82
		net_ipaddr_copy(&ip_hdr->dst, &ip_hdr->src);
 800e288:	4643      	mov	r3, r8
 800e28a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800e28e:	6818      	ldr	r0, [r3, #0]
 800e290:	6859      	ldr	r1, [r3, #4]
 800e292:	4662      	mov	r2, ip
 800e294:	c203      	stmia	r2!, {r0, r1}
 800e296:	3308      	adds	r3, #8
 800e298:	4553      	cmp	r3, sl
 800e29a:	4694      	mov	ip, r2
 800e29c:	d1f7      	bne.n	800e28e <handle_ns_input+0x302>
 800e29e:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 800e2a2:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 800e2a6:	4672      	mov	r2, lr
 800e2a8:	ca03      	ldmia	r2!, {r0, r1}
 800e2aa:	4562      	cmp	r2, ip
 800e2ac:	6018      	str	r0, [r3, #0]
 800e2ae:	6059      	str	r1, [r3, #4]
 800e2b0:	4696      	mov	lr, r2
 800e2b2:	f103 0308 	add.w	r3, r3, #8
 800e2b6:	d1f6      	bne.n	800e2a6 <handle_ns_input+0x31a>
		net_ipaddr_copy(&ip_hdr->src, &ns_hdr->tgt);
 800e2b8:	4663      	mov	r3, ip
 800e2ba:	3714      	adds	r7, #20
 800e2bc:	6828      	ldr	r0, [r5, #0]
 800e2be:	6869      	ldr	r1, [r5, #4]
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	c203      	stmia	r2!, {r0, r1}
 800e2c4:	3508      	adds	r5, #8
 800e2c6:	42bd      	cmp	r5, r7
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	d1f7      	bne.n	800e2bc <handle_ns_input+0x330>
 800e2cc:	4663      	mov	r3, ip
 800e2ce:	4645      	mov	r5, r8
 800e2d0:	af14      	add	r7, sp, #80	; 0x50
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	ca03      	ldmia	r2!, {r0, r1}
 800e2d6:	42ba      	cmp	r2, r7
 800e2d8:	6028      	str	r0, [r5, #0]
 800e2da:	6069      	str	r1, [r5, #4]
 800e2dc:	4613      	mov	r3, r2
 800e2de:	f105 0508 	add.w	r5, r5, #8
 800e2e2:	d1f6      	bne.n	800e2d2 <handle_ns_input+0x346>
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
 800e2e4:	2360      	movs	r3, #96	; 0x60
		goto send_na;
 800e2e6:	e762      	b.n	800e1ae <handle_ns_input+0x222>

0800e2e8 <ipv6_nd_reachable_timeout>:
{
 800e2e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ec:	f00a fc55 	bl	8018b9a <z_impl_k_uptime_get>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 800e2f0:	2500      	movs	r5, #0
 800e2f2:	4c37      	ldr	r4, [pc, #220]	; (800e3d0 <ipv6_nd_reachable_timeout+0xe8>)
 800e2f4:	4607      	mov	r7, r0
 800e2f6:	468a      	mov	sl, r1
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
 800e2f8:	462e      	mov	r6, r5
		if (!nbr || !nbr->ref) {
 800e2fa:	7823      	ldrb	r3, [r4, #0]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d03c      	beq.n	800e37a <ipv6_nd_reachable_timeout+0x92>
		data = net_ipv6_nbr_data(nbr);
 800e300:	f8d4 c00c 	ldr.w	ip, [r4, #12]
		if (!data) {
 800e304:	f1bc 0f00 	cmp.w	ip, #0
 800e308:	d037      	beq.n	800e37a <ipv6_nd_reachable_timeout+0x92>
		if (!data->reachable) {
 800e30a:	e9dc 2306 	ldrd	r2, r3, [ip, #24]
 800e30e:	ea52 0103 	orrs.w	r1, r2, r3
 800e312:	d032      	beq.n	800e37a <ipv6_nd_reachable_timeout+0x92>
		remaining = data->reachable + data->reachable_timeout - current;
 800e314:	f8dc 0020 	ldr.w	r0, [ip, #32]
 800e318:	ebb2 0807 	subs.w	r8, r2, r7
 800e31c:	eb63 090a 	sbc.w	r9, r3, sl
 800e320:	eb18 0200 	adds.w	r2, r8, r0
 800e324:	eb49 73e0 	adc.w	r3, r9, r0, asr #31
		if (remaining > 0) {
 800e328:	2a01      	cmp	r2, #1
 800e32a:	f173 0100 	sbcs.w	r1, r3, #0
 800e32e:	db03      	blt.n	800e338 <ipv6_nd_reachable_timeout+0x50>
			ipv6_nd_restart_reachable_timer(NULL, remaining);
 800e330:	2000      	movs	r0, #0
				ipv6_nd_restart_reachable_timer(nbr,
 800e332:	f7fe ffdd 	bl	800d2f0 <ipv6_nd_restart_reachable_timer>
 800e336:	e020      	b.n	800e37a <ipv6_nd_reachable_timeout+0x92>
		data->reachable = 0;
 800e338:	2300      	movs	r3, #0
 800e33a:	2200      	movs	r2, #0
 800e33c:	e9cc 2306 	strd	r2, r3, [ip, #24]
		switch (data->state) {
 800e340:	f89c 3030 	ldrb.w	r3, [ip, #48]	; 0x30
 800e344:	2b04      	cmp	r3, #4
 800e346:	d818      	bhi.n	800e37a <ipv6_nd_reachable_timeout+0x92>
 800e348:	e8df f003 	tbb	[pc, r3]
 800e34c:	27231f03 	.word	0x27231f03
 800e350:	2c          	.byte	0x2c
 800e351:	00          	.byte	0x00
			if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
 800e352:	f89c 3034 	ldrb.w	r3, [ip, #52]	; 0x34
 800e356:	68a0      	ldr	r0, [r4, #8]
 800e358:	2b02      	cmp	r3, #2
 800e35a:	f10c 0104 	add.w	r1, ip, #4
 800e35e:	d902      	bls.n	800e366 <ipv6_nd_reachable_timeout+0x7e>
				net_ipv6_nbr_rm(nbr->iface, &data->addr);
 800e360:	f7ff f858 	bl	800d414 <net_ipv6_nbr_rm>
 800e364:	e009      	b.n	800e37a <ipv6_nd_reachable_timeout+0x92>
				data->ns_count++;
 800e366:	3301      	adds	r3, #1
 800e368:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
 800e36c:	2300      	movs	r3, #0
 800e36e:	e9cd 1600 	strd	r1, r6, [sp]
 800e372:	461a      	mov	r2, r3
 800e374:	4619      	mov	r1, r3
 800e376:	f7ff fa31 	bl	800d7dc <net_ipv6_send_ns>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 800e37a:	3501      	adds	r5, #1
 800e37c:	2d08      	cmp	r5, #8
 800e37e:	f104 0454 	add.w	r4, r4, #84	; 0x54
 800e382:	d1ba      	bne.n	800e2fa <ipv6_nd_reachable_timeout+0x12>
}
 800e384:	b002      	add	sp, #8
 800e386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			data->state = NET_IPV6_NBR_STATE_STALE;
 800e38a:	2302      	movs	r3, #2
 800e38c:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
			NET_DBG("nbr %p moving %s state to STALE (%d)",
 800e390:	e7f3      	b.n	800e37a <ipv6_nd_reachable_timeout+0x92>
			net_ipv6_nbr_rm(nbr->iface, &data->addr);
 800e392:	f10c 0104 	add.w	r1, ip, #4
 800e396:	68a0      	ldr	r0, [r4, #8]
 800e398:	e7e2      	b.n	800e360 <ipv6_nd_reachable_timeout+0x78>
			data->state = NET_IPV6_NBR_STATE_PROBE;
 800e39a:	2304      	movs	r3, #4
 800e39c:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
			data->ns_count = 0U;
 800e3a0:	f88c 6034 	strb.w	r6, [ip, #52]	; 0x34
			if (data->ns_count >= MAX_UNICAST_SOLICIT) {
 800e3a4:	f89c 3034 	ldrb.w	r3, [ip, #52]	; 0x34
 800e3a8:	68a0      	ldr	r0, [r4, #8]
 800e3aa:	2b02      	cmp	r3, #2
 800e3ac:	f10c 0104 	add.w	r1, ip, #4
 800e3b0:	d8d6      	bhi.n	800e360 <ipv6_nd_reachable_timeout+0x78>
				data->ns_count++;
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	e9cd 1600 	strd	r1, r6, [sp]
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	f7ff fa0b 	bl	800d7dc <net_ipv6_send_ns>
				ipv6_nd_restart_reachable_timer(nbr,
 800e3c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	e7b0      	b.n	800e332 <ipv6_nd_reachable_timeout+0x4a>
 800e3d0:	20008914 	.word	0x20008914

0800e3d4 <net_ipv6_nbr_init>:
	.handler = handle_ra_input,
};
#endif /* CONFIG_NET_IPV6_ND */

void net_ipv6_nbr_init(void)
{
 800e3d4:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
 800e3d6:	480c      	ldr	r0, [pc, #48]	; (800e408 <net_ipv6_nbr_init+0x34>)
 800e3d8:	f7fe fc6e 	bl	800ccb8 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
 800e3dc:	480b      	ldr	r0, [pc, #44]	; (800e40c <net_ipv6_nbr_init+0x38>)
 800e3de:	f7fe fc6b 	bl	800ccb8 <net_icmpv6_register_handler>
	k_delayed_work_init(&ipv6_ns_reply_timer, ipv6_ns_reply_timeout);
 800e3e2:	490b      	ldr	r1, [pc, #44]	; (800e410 <net_ipv6_nbr_init+0x3c>)
 800e3e4:	480b      	ldr	r0, [pc, #44]	; (800e414 <net_ipv6_nbr_init+0x40>)
 800e3e6:	f00a fb77 	bl	8018ad8 <k_delayed_work_init>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
 800e3ea:	480b      	ldr	r0, [pc, #44]	; (800e418 <net_ipv6_nbr_init+0x44>)
 800e3ec:	f7fe fc64 	bl	800ccb8 <net_icmpv6_register_handler>
	k_delayed_work_init(&ipv6_nd_reachable_timer,
 800e3f0:	490a      	ldr	r1, [pc, #40]	; (800e41c <net_ipv6_nbr_init+0x48>)
 800e3f2:	480b      	ldr	r0, [pc, #44]	; (800e420 <net_ipv6_nbr_init+0x4c>)
 800e3f4:	f00a fb70 	bl	8018ad8 <k_delayed_work_init>
	z_impl_k_sem_init(sem, initial_count, limit);
 800e3f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3fc:	2101      	movs	r1, #1
 800e3fe:	4809      	ldr	r0, [pc, #36]	; (800e424 <net_ipv6_nbr_init+0x50>)
			    ipv6_nd_reachable_timeout);
	k_sem_init(&nbr_lock, 1, UINT_MAX);
#endif
}
 800e400:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e404:	f00a bac1 	b.w	801898a <z_impl_k_sem_init>
 800e408:	20008bb4 	.word	0x20008bb4
 800e40c:	200088fc 	.word	0x200088fc
 800e410:	0800d341 	.word	0x0800d341
 800e414:	20000d5c 	.word	0x20000d5c
 800e418:	20008bc0 	.word	0x20008bc0
 800e41c:	0800e2e9 	.word	0x0800e2e9
 800e420:	20000d3c 	.word	0x20000d3c
 800e424:	20000d7c 	.word	0x20000d7c

0800e428 <net_ipv6_mld_join>:

	return ret;
}

int net_ipv6_mld_join(struct net_if *iface, const struct in6_addr *addr)
{
 800e428:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e42a:	460d      	mov	r5, r1
 800e42c:	9001      	str	r0, [sp, #4]
	struct net_if_mcast_addr *maddr;
	int ret;

	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
 800e42e:	a901      	add	r1, sp, #4
 800e430:	4628      	mov	r0, r5
 800e432:	f7fd f845 	bl	800b4c0 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
 800e436:	4604      	mov	r4, r0
 800e438:	b128      	cbz	r0, 800e446 <net_ipv6_mld_join+0x1e>
	return addr->is_joined;
 800e43a:	7d03      	ldrb	r3, [r0, #20]
 800e43c:	079b      	lsls	r3, r3, #30
 800e43e:	d508      	bpl.n	800e452 <net_ipv6_mld_join+0x2a>
		return -EALREADY;
 800e440:	f06f 0677 	mvn.w	r6, #119	; 0x77
 800e444:	e01b      	b.n	800e47e <net_ipv6_mld_join+0x56>
	}

	if (!maddr) {
		maddr = net_if_ipv6_maddr_add(iface, addr);
 800e446:	4629      	mov	r1, r5
 800e448:	9801      	ldr	r0, [sp, #4]
 800e44a:	f7fc fea3 	bl	800b194 <net_if_ipv6_maddr_add>
		if (!maddr) {
 800e44e:	4604      	mov	r4, r0
 800e450:	b1c0      	cbz	r0, 800e484 <net_ipv6_mld_join+0x5c>
			return -ENOMEM;
		}
	}

	ret = mld_send_generic(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
 800e452:	2202      	movs	r2, #2
 800e454:	4629      	mov	r1, r5
 800e456:	9801      	ldr	r0, [sp, #4]
 800e458:	f009 fa5b 	bl	8017912 <mld_send_generic>
	if (ret < 0) {
 800e45c:	1e06      	subs	r6, r0, #0
 800e45e:	db0e      	blt.n	800e47e <net_ipv6_mld_join+0x56>
	addr->is_joined = true;
 800e460:	7d23      	ldrb	r3, [r4, #20]
		return ret;
	}

	net_if_ipv6_maddr_join(maddr);

	net_if_mcast_monitor(iface, addr, true);
 800e462:	9801      	ldr	r0, [sp, #4]
 800e464:	f043 0302 	orr.w	r3, r3, #2
 800e468:	7523      	strb	r3, [r4, #20]
 800e46a:	2201      	movs	r2, #1
 800e46c:	4629      	mov	r1, r5
 800e46e:	f7fd f865 	bl	800b53c <net_if_mcast_monitor>

	net_mgmt_event_notify_with_info(NET_EVENT_IPV6_MCAST_JOIN, iface,
 800e472:	2310      	movs	r3, #16
 800e474:	1d22      	adds	r2, r4, #4
 800e476:	9901      	ldr	r1, [sp, #4]
 800e478:	4804      	ldr	r0, [pc, #16]	; (800e48c <net_ipv6_mld_join+0x64>)
 800e47a:	f7fd ff2f 	bl	800c2dc <net_mgmt_event_notify_with_info>
					&maddr->address.in6_addr,
					sizeof(struct in6_addr));

	return ret;
}
 800e47e:	4630      	mov	r0, r6
 800e480:	b002      	add	sp, #8
 800e482:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
 800e484:	f06f 060b 	mvn.w	r6, #11
 800e488:	e7f9      	b.n	800e47e <net_ipv6_mld_join+0x56>
 800e48a:	bf00      	nop
 800e48c:	e0600007 	.word	0xe0600007

0800e490 <net_ipv6_mld_leave>:

int net_ipv6_mld_leave(struct net_if *iface, const struct in6_addr *addr)
{
 800e490:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e492:	460c      	mov	r4, r1
 800e494:	9001      	str	r0, [sp, #4]
	struct net_if_mcast_addr *maddr;
	int ret;

	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
 800e496:	a901      	add	r1, sp, #4
 800e498:	4620      	mov	r0, r4
 800e49a:	f7fd f811 	bl	800b4c0 <net_if_ipv6_maddr_lookup>
	if (!maddr) {
 800e49e:	4606      	mov	r6, r0
 800e4a0:	b1c8      	cbz	r0, 800e4d6 <net_ipv6_mld_leave+0x46>
		return -ENOENT;
	}

	if (!net_if_ipv6_maddr_rm(iface, addr)) {
 800e4a2:	4621      	mov	r1, r4
 800e4a4:	9801      	ldr	r0, [sp, #4]
 800e4a6:	f7fc febb 	bl	800b220 <net_if_ipv6_maddr_rm>
 800e4aa:	b1b8      	cbz	r0, 800e4dc <net_ipv6_mld_leave+0x4c>
		return -EINVAL;
	}

	ret = mld_send_generic(iface, addr, NET_IPV6_MLDv2_MODE_IS_INCLUDE);
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	4621      	mov	r1, r4
 800e4b0:	9801      	ldr	r0, [sp, #4]
 800e4b2:	f009 fa2e 	bl	8017912 <mld_send_generic>
	if (ret < 0) {
 800e4b6:	1e05      	subs	r5, r0, #0
 800e4b8:	db0a      	blt.n	800e4d0 <net_ipv6_mld_leave+0x40>
		return ret;
	}

	net_if_mcast_monitor(iface, addr, false);
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	4621      	mov	r1, r4
 800e4be:	9801      	ldr	r0, [sp, #4]
 800e4c0:	f7fd f83c 	bl	800b53c <net_if_mcast_monitor>

	net_mgmt_event_notify_with_info(NET_EVENT_IPV6_MCAST_LEAVE, iface,
 800e4c4:	2310      	movs	r3, #16
 800e4c6:	1d32      	adds	r2, r6, #4
 800e4c8:	9901      	ldr	r1, [sp, #4]
 800e4ca:	4806      	ldr	r0, [pc, #24]	; (800e4e4 <net_ipv6_mld_leave+0x54>)
 800e4cc:	f7fd ff06 	bl	800c2dc <net_mgmt_event_notify_with_info>
					&maddr->address.in6_addr,
					sizeof(struct in6_addr));

	return ret;
}
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	b002      	add	sp, #8
 800e4d4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
 800e4d6:	f06f 0501 	mvn.w	r5, #1
 800e4da:	e7f9      	b.n	800e4d0 <net_ipv6_mld_leave+0x40>
		return -EINVAL;
 800e4dc:	f06f 0515 	mvn.w	r5, #21
 800e4e0:	e7f6      	b.n	800e4d0 <net_ipv6_mld_leave+0x40>
 800e4e2:	bf00      	nop
 800e4e4:	e0600008 	.word	0xe0600008

0800e4e8 <net_ipv6_mld_init>:
	.handler = handle_mld_query,
};

void net_ipv6_mld_init(void)
{
	net_icmpv6_register_handler(&mld_query_input_handler);
 800e4e8:	4801      	ldr	r0, [pc, #4]	; (800e4f0 <net_ipv6_mld_init+0x8>)
 800e4ea:	f7fe bbe5 	b.w	800ccb8 <net_icmpv6_register_handler>
 800e4ee:	bf00      	nop
 800e4f0:	20008bcc 	.word	0x20008bcc

0800e4f4 <sys_slist_find_and_remove.constprop.11>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800e4f4:	4a0d      	ldr	r2, [pc, #52]	; (800e52c <sys_slist_find_and_remove.constprop.11+0x38>)
 800e4f6:	6813      	ldr	r3, [r2, #0]
 800e4f8:	2100      	movs	r1, #0
 800e4fa:	b90b      	cbnz	r3, 800e500 <sys_slist_find_and_remove.constprop.11+0xc>
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	4770      	bx	lr
 800e500:	4283      	cmp	r3, r0
 800e502:	d110      	bne.n	800e526 <sys_slist_find_and_remove.constprop.11+0x32>
Z_GENLIST_REMOVE(slist, snode)
 800e504:	6803      	ldr	r3, [r0, #0]
 800e506:	b941      	cbnz	r1, 800e51a <sys_slist_find_and_remove.constprop.11+0x26>
 800e508:	6851      	ldr	r1, [r2, #4]
	list->head = node;
 800e50a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
 800e50c:	4288      	cmp	r0, r1
 800e50e:	d100      	bne.n	800e512 <sys_slist_find_and_remove.constprop.11+0x1e>
	list->tail = node;
 800e510:	6053      	str	r3, [r2, #4]
	parent->next = child;
 800e512:	2300      	movs	r3, #0
 800e514:	6003      	str	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800e516:	2001      	movs	r0, #1
 800e518:	4770      	bx	lr
	parent->next = child;
 800e51a:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 800e51c:	6853      	ldr	r3, [r2, #4]
 800e51e:	4298      	cmp	r0, r3
	list->tail = node;
 800e520:	bf08      	it	eq
 800e522:	6051      	streq	r1, [r2, #4]
 800e524:	e7f5      	b.n	800e512 <sys_slist_find_and_remove.constprop.11+0x1e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800e526:	4619      	mov	r1, r3
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	e7e6      	b.n	800e4fa <sys_slist_find_and_remove.constprop.11+0x6>
 800e52c:	20000d98 	.word	0x20000d98

0800e530 <net_route_get_nbr>:
{
	return (struct net_route_entry *)nbr->data;
}

struct net_nbr *net_route_get_nbr(struct net_route_entry *route)
{
 800e530:	b510      	push	{r4, lr}
 800e532:	4a09      	ldr	r2, [pc, #36]	; (800e558 <net_route_get_nbr+0x28>)
	int i;

	NET_ASSERT(route);

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
 800e534:	2300      	movs	r3, #0
 800e536:	4611      	mov	r1, r2
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
 800e538:	7814      	ldrb	r4, [r2, #0]
 800e53a:	b114      	cbz	r4, 800e542 <net_route_get_nbr+0x12>
			continue;
		}

		if (nbr->data == (u8_t *)route) {
 800e53c:	68d4      	ldr	r4, [r2, #12]
 800e53e:	4284      	cmp	r4, r0
 800e540:	d006      	beq.n	800e550 <net_route_get_nbr+0x20>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
 800e542:	3301      	adds	r3, #1
 800e544:	2b08      	cmp	r3, #8
 800e546:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800e54a:	d1f5      	bne.n	800e538 <net_route_get_nbr+0x8>

			return nbr;
		}
	}

	return NULL;
 800e54c:	2000      	movs	r0, #0
}
 800e54e:	bd10      	pop	{r4, pc}
	return &net_route_entries_pool[idx].nbr;
 800e550:	2038      	movs	r0, #56	; 0x38
 800e552:	fb00 1003 	mla	r0, r0, r3, r1
 800e556:	e7fa      	b.n	800e54e <net_route_get_nbr+0x1e>
 800e558:	20008bd8 	.word	0x20008bd8

0800e55c <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
 800e55c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0U;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
 800e560:	2700      	movs	r7, #0
 800e562:	4e27      	ldr	r6, [pc, #156]	; (800e600 <net_route_lookup+0xa4>)
{
 800e564:	9000      	str	r0, [sp, #0]
 800e566:	460b      	mov	r3, r1
	u8_t longest_match = 0U;
 800e568:	46b9      	mov	r9, r7
	struct net_route_entry *route, *found = NULL;
 800e56a:	463d      	mov	r5, r7
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
 800e56c:	7832      	ldrb	r2, [r6, #0]
 800e56e:	b382      	cbz	r2, 800e5d2 <net_route_lookup+0x76>
			continue;
		}

		if (iface && nbr->iface != iface) {
 800e570:	9a00      	ldr	r2, [sp, #0]
 800e572:	b11a      	cbz	r2, 800e57c <net_route_lookup+0x20>
 800e574:	68b2      	ldr	r2, [r6, #8]
 800e576:	9900      	ldr	r1, [sp, #0]
 800e578:	428a      	cmp	r2, r1
 800e57a:	d12a      	bne.n	800e5d2 <net_route_lookup+0x76>
			continue;
		}

		route = net_route_data(nbr);
 800e57c:	f8d6 800c 	ldr.w	r8, [r6, #12]

		if (route->prefix_len >= longest_match &&
 800e580:	f898 4020 	ldrb.w	r4, [r8, #32]
 800e584:	454c      	cmp	r4, r9
 800e586:	d324      	bcc.n	800e5d2 <net_route_lookup+0x76>
	if (length > 128) {
 800e588:	2c80      	cmp	r4, #128	; 0x80
 800e58a:	d822      	bhi.n	800e5d2 <net_route_lookup+0x76>
		    net_ipv6_is_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
 800e58c:	f108 0b10 	add.w	fp, r8, #16
	if (memcmp(addr1, addr2, bytes)) {
 800e590:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
 800e594:	4618      	mov	r0, r3
 800e596:	4652      	mov	r2, sl
 800e598:	4659      	mov	r1, fp
 800e59a:	9301      	str	r3, [sp, #4]
 800e59c:	f7f6 f9b1 	bl	8004902 <memcmp>
 800e5a0:	9b01      	ldr	r3, [sp, #4]
 800e5a2:	b9b0      	cbnz	r0, 800e5d2 <net_route_lookup+0x76>
	u8_t bits = 128 - length;
 800e5a4:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
 800e5a8:	f014 0407 	ands.w	r4, r4, #7
 800e5ac:	d00e      	beq.n	800e5cc <net_route_lookup+0x70>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
 800e5ae:	f81b 200a 	ldrb.w	r2, [fp, sl]
 800e5b2:	f813 100a 	ldrb.w	r1, [r3, sl]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
 800e5b6:	20ff      	movs	r0, #255	; 0xff
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
 800e5b8:	4051      	eors	r1, r2
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
 800e5ba:	f1c4 0208 	rsb	r2, r4, #8
 800e5be:	fa00 f202 	lsl.w	r2, r0, r2
 800e5c2:	4042      	eors	r2, r0
 800e5c4:	fa02 f404 	lsl.w	r4, r2, r4
		if (route->prefix_len >= longest_match &&
 800e5c8:	4221      	tst	r1, r4
 800e5ca:	d102      	bne.n	800e5d2 <net_route_lookup+0x76>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
 800e5cc:	f898 9020 	ldrb.w	r9, [r8, #32]
 800e5d0:	4645      	mov	r5, r8
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
 800e5d2:	3701      	adds	r7, #1
 800e5d4:	2f08      	cmp	r7, #8
 800e5d6:	d004      	beq.n	800e5e2 <net_route_lookup+0x86>
 800e5d8:	f019 0f80 	tst.w	r9, #128	; 0x80
 800e5dc:	f106 0638 	add.w	r6, r6, #56	; 0x38
 800e5e0:	d0c4      	beq.n	800e56c <net_route_lookup+0x10>
		}
	}

	if (found) {
 800e5e2:	b14d      	cbz	r5, 800e5f8 <net_route_lookup+0x9c>
	sys_slist_find_and_remove(&routes, &route->node);
 800e5e4:	4628      	mov	r0, r5
 800e5e6:	f7ff ff85 	bl	800e4f4 <sys_slist_find_and_remove.constprop.11>
Z_GENLIST_PREPEND(slist, snode)
 800e5ea:	4b06      	ldr	r3, [pc, #24]	; (800e604 <net_route_lookup+0xa8>)
 800e5ec:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 800e5ee:	602a      	str	r2, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
 800e5f0:	685a      	ldr	r2, [r3, #4]
	list->head = node;
 800e5f2:	601d      	str	r5, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
 800e5f4:	b902      	cbnz	r2, 800e5f8 <net_route_lookup+0x9c>
	list->tail = node;
 800e5f6:	605d      	str	r5, [r3, #4]

		update_route_access(found);
	}

	return found;
}
 800e5f8:	4628      	mov	r0, r5
 800e5fa:	b003      	add	sp, #12
 800e5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e600:	20008bd8 	.word	0x20008bd8
 800e604:	20000d98 	.word	0x20000d98

0800e608 <net_route_del>:

	return route;
}

int net_route_del(struct net_route_entry *route)
{
 800e608:	b538      	push	{r3, r4, r5, lr}
	struct net_route_nexthop *nexthop_route;
#if defined(CONFIG_NET_MGMT_EVENT_INFO)
       struct net_event_ipv6_route info;
#endif

	if (!route) {
 800e60a:	4604      	mov	r4, r0
 800e60c:	b1d0      	cbz	r0, 800e644 <net_route_del+0x3c>
 800e60e:	2300      	movs	r3, #0
 800e610:	68c1      	ldr	r1, [r0, #12]
 800e612:	480f      	ldr	r0, [pc, #60]	; (800e650 <net_route_del+0x48>)
 800e614:	461a      	mov	r2, r3
 800e616:	f7fd fe61 	bl	800c2dc <net_mgmt_event_notify_with_info>
					sizeof(struct net_event_ipv6_route));
#else
	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, route->iface);
#endif

	sys_slist_find_and_remove(&routes, &route->node);
 800e61a:	4620      	mov	r0, r4
 800e61c:	f7ff ff6a 	bl	800e4f4 <sys_slist_find_and_remove.constprop.11>

	nbr = net_route_get_nbr(route);
 800e620:	4620      	mov	r0, r4
 800e622:	f7ff ff85 	bl	800e530 <net_route_get_nbr>
	if (!nbr) {
 800e626:	4605      	mov	r5, r0
 800e628:	b178      	cbz	r0, 800e64a <net_route_del+0x42>
		return -ENOENT;
	}

	net_route_info("Deleted", route, &route->addr);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
 800e62a:	6864      	ldr	r4, [r4, #4]
 800e62c:	b924      	cbnz	r4, 800e638 <net_route_del+0x30>
	net_nbr_unref(nbr);
 800e62e:	4628      	mov	r0, r5
 800e630:	f008 fd95 	bl	801715e <net_nbr_unref>
		nbr_nexthop_put(nexthop_route->nbr);
	}

	nbr_free(nbr);

	return 0;
 800e634:	2000      	movs	r0, #0
}
 800e636:	bd38      	pop	{r3, r4, r5, pc}
		if (!nexthop_route->nbr) {
 800e638:	6860      	ldr	r0, [r4, #4]
 800e63a:	b108      	cbz	r0, 800e640 <net_route_del+0x38>
	net_nbr_unref(nbr);
 800e63c:	f008 fd8f 	bl	801715e <net_nbr_unref>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800e640:	6824      	ldr	r4, [r4, #0]
	return node->next;
 800e642:	e7f3      	b.n	800e62c <net_route_del+0x24>
		return -EINVAL;
 800e644:	f06f 0015 	mvn.w	r0, #21
 800e648:	e7f5      	b.n	800e636 <net_route_del+0x2e>
		return -ENOENT;
 800e64a:	f06f 0001 	mvn.w	r0, #1
 800e64e:	e7f2      	b.n	800e636 <net_route_del+0x2e>
 800e650:	e060000c 	.word	0xe060000c

0800e654 <net_route_del_by_nexthop>:

int net_route_del_by_nexthop(struct net_if *iface, struct in6_addr *nexthop)
{
 800e654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, ret;

	NET_ASSERT(iface);
	NET_ASSERT(nexthop);

	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
 800e658:	f008 ff0e 	bl	8017478 <net_ipv6_nbr_lookup>
 800e65c:	4d0e      	ldr	r5, [pc, #56]	; (800e698 <net_route_del_by_nexthop+0x44>)
	int count = 0, status = 0;
 800e65e:	2600      	movs	r6, #0
	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
 800e660:	4680      	mov	r8, r0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
 800e662:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
	int count = 0, status = 0;
 800e666:	4634      	mov	r4, r6
		struct net_nbr *nbr = get_nbr(i);
		struct net_route_entry *route = net_route_data(nbr);
 800e668:	68e8      	ldr	r0, [r5, #12]

		if (!route) {
 800e66a:	b140      	cbz	r0, 800e67e <net_route_del_by_nexthop+0x2a>
			continue;
		}

		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
 800e66c:	6843      	ldr	r3, [r0, #4]
 800e66e:	b133      	cbz	r3, 800e67e <net_route_del_by_nexthop+0x2a>
					     node) {
			if (nexthop_route->nbr == nbr_nexthop) {
 800e670:	685a      	ldr	r2, [r3, #4]
 800e672:	4542      	cmp	r2, r8
 800e674:	d10c      	bne.n	800e690 <net_route_del_by_nexthop+0x3c>
				/* This route contains this nexthop */
				ret = net_route_del(route);
 800e676:	f7ff ffc7 	bl	800e608 <net_route_del>
				if (!ret) {
 800e67a:	b958      	cbnz	r0, 800e694 <net_route_del_by_nexthop+0x40>
					count++;
 800e67c:	3401      	adds	r4, #1
 800e67e:	3538      	adds	r5, #56	; 0x38
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
 800e680:	42af      	cmp	r7, r5
 800e682:	d1f1      	bne.n	800e668 <net_route_del_by_nexthop+0x14>
				break;
			}
		}
	}

	if (count) {
 800e684:	b90c      	cbnz	r4, 800e68a <net_route_del_by_nexthop+0x36>
		return count;
	} else if (status < 0) {
 800e686:	ea06 74e6 	and.w	r4, r6, r6, asr #31
		return status;
	}

	return 0;
}
 800e68a:	4620      	mov	r0, r4
 800e68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800e690:	681b      	ldr	r3, [r3, #0]
	return node->next;
 800e692:	e7ec      	b.n	800e66e <net_route_del_by_nexthop+0x1a>
 800e694:	4606      	mov	r6, r0
 800e696:	e7f2      	b.n	800e67e <net_route_del_by_nexthop+0x2a>
 800e698:	20008bd8 	.word	0x20008bd8

0800e69c <net_route_get_nexthop>:

	return status;
}

struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
 800e69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
 800e6a0:	b910      	cbnz	r0, 800e6a8 <net_route_get_nexthop+0xc>
		return NULL;
 800e6a2:	2000      	movs	r0, #0
			NET_ERR("could not get neighbor data from next hop");
		}
	}

	return NULL;
}
 800e6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
 800e6a8:	6844      	ldr	r4, [r0, #4]
 800e6aa:	2c00      	cmp	r4, #0
 800e6ac:	d0f9      	beq.n	800e6a2 <net_route_get_nexthop+0x6>
 800e6ae:	4d11      	ldr	r5, [pc, #68]	; (800e6f4 <net_route_get_nexthop+0x58>)
			NET_ERR("could not get neighbor data from next hop");
 800e6b0:	4b11      	ldr	r3, [pc, #68]	; (800e6f8 <net_route_get_nexthop+0x5c>)
 800e6b2:	4f12      	ldr	r7, [pc, #72]	; (800e6fc <net_route_get_nexthop+0x60>)
 800e6b4:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800e700 <net_route_get_nexthop+0x64>
 800e6b8:	1aed      	subs	r5, r5, r3
 800e6ba:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
 800e6be:	6863      	ldr	r3, [r4, #4]
 800e6c0:	785a      	ldrb	r2, [r3, #1]
 800e6c2:	2aff      	cmp	r2, #255	; 0xff
 800e6c4:	d012      	beq.n	800e6ec <net_route_get_nexthop+0x50>
		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
 800e6c6:	68d8      	ldr	r0, [r3, #12]
		if (ipv6_nbr_data) {
 800e6c8:	b108      	cbz	r0, 800e6ce <net_route_get_nexthop+0x32>
			addr = &ipv6_nbr_data->addr;
 800e6ca:	3004      	adds	r0, #4
			return addr;
 800e6cc:	e7ea      	b.n	800e6a4 <net_route_get_nexthop+0x8>
			NET_ERR("could not get neighbor data from next hop");
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	075b      	lsls	r3, r3, #29
 800e6d2:	d00b      	beq.n	800e6ec <net_route_get_nexthop+0x50>
 800e6d4:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
 800e6d8:	f043 0301 	orr.w	r3, r3, #1
 800e6dc:	f363 0607 	bfi	r6, r3, #0, #8
 800e6e0:	f365 168f 	bfi	r6, r5, #6, #10
 800e6e4:	4631      	mov	r1, r6
 800e6e6:	4640      	mov	r0, r8
 800e6e8:	f005 fa8b 	bl	8013c02 <log_0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800e6ec:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
 800e6ee:	2c00      	cmp	r4, #0
 800e6f0:	d1e5      	bne.n	800e6be <net_route_get_nexthop+0x22>
 800e6f2:	e7d6      	b.n	800e6a2 <net_route_get_nexthop+0x6>
 800e6f4:	080192e8 	.word	0x080192e8
 800e6f8:	08019248 	.word	0x08019248
 800e6fc:	20009020 	.word	0x20009020
 800e700:	0801bc9f 	.word	0x0801bc9f

0800e704 <net_route_foreach>:

int net_route_foreach(net_route_cb_t cb, void *user_data)
{
 800e704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e708:	4c08      	ldr	r4, [pc, #32]	; (800e72c <net_route_foreach+0x28>)
 800e70a:	4607      	mov	r7, r0
 800e70c:	4688      	mov	r8, r1
 800e70e:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
	int i, ret = 0;
 800e712:	2500      	movs	r5, #0
		nbr = get_nbr(i);
		if (!nbr) {
			continue;
		}

		route = net_route_data(nbr);
 800e714:	68e0      	ldr	r0, [r4, #12]
		if (!route) {
 800e716:	b110      	cbz	r0, 800e71e <net_route_foreach+0x1a>
			continue;
		}

		cb(route, user_data);
 800e718:	4641      	mov	r1, r8
 800e71a:	47b8      	blx	r7

		ret++;
 800e71c:	3501      	adds	r5, #1
 800e71e:	3438      	adds	r4, #56	; 0x38
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
 800e720:	42b4      	cmp	r4, r6
 800e722:	d1f7      	bne.n	800e714 <net_route_foreach+0x10>
	}

	return ret;
}
 800e724:	4628      	mov	r0, r5
 800e726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e72a:	bf00      	nop
 800e72c:	20008bd8 	.word	0x20008bd8

0800e730 <net_route_packet>:

	return false;
}

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
 800e730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e732:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(NULL, nexthop);
 800e734:	2000      	movs	r0, #0
 800e736:	f008 fe9f 	bl	8017478 <net_ipv6_nbr_lookup>
	if (!nbr) {
 800e73a:	4606      	mov	r6, r0
 800e73c:	2800      	cmp	r0, #0
 800e73e:	d04a      	beq.n	800e7d6 <net_route_packet+0xa6>
		NET_DBG("Cannot find %s neighbor",
			log_strdup(net_sprint_ipv6_addr(nexthop)));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
 800e740:	7840      	ldrb	r0, [r0, #1]
 800e742:	f7fe fb91 	bl	800ce68 <net_nbr_get_lladdr>
	if (!lladdr) {
 800e746:	4605      	mov	r5, r0
 800e748:	2800      	cmp	r0, #0
 800e74a:	d047      	beq.n	800e7dc <net_route_packet+0xac>
	 * link layer. This is done at runtime because we can have multiple
	 * network technologies enabled.
	 */
	if (net_if_l2(net_pkt_iface(pkt)) != &NET_L2_GET_NAME(DUMMY)) {
#endif
		if (!net_pkt_lladdr_src(pkt)->addr) {
 800e74c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e74e:	b910      	cbnz	r0, 800e756 <net_route_packet+0x26>
		 * same, then something went wrong in route lookup.
		 */
		if (!memcmp(net_pkt_lladdr_src(pkt)->addr, lladdr->addr,
			    lladdr->len)) {
			NET_ERR("Src ll and Dst ll are same");
			return -EINVAL;
 800e750:	f06f 0015 	mvn.w	r0, #21
	net_pkt_lladdr_dst(pkt)->len = lladdr->len;

	net_pkt_set_iface(pkt, nbr->iface);

	return net_send_data(pkt);
}
 800e754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!memcmp(net_pkt_lladdr_src(pkt)->addr, lladdr->addr,
 800e756:	1caf      	adds	r7, r5, #2
 800e758:	786a      	ldrb	r2, [r5, #1]
 800e75a:	4639      	mov	r1, r7
 800e75c:	f7f6 f8d1 	bl	8004902 <memcmp>
 800e760:	b990      	cbnz	r0, 800e788 <net_route_packet+0x58>
			NET_ERR("Src ll and Dst ll are same");
 800e762:	4b20      	ldr	r3, [pc, #128]	; (800e7e4 <net_route_packet+0xb4>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	075b      	lsls	r3, r3, #29
 800e768:	d0f2      	beq.n	800e750 <net_route_packet+0x20>
 800e76a:	2301      	movs	r3, #1
 800e76c:	f04f 0100 	mov.w	r1, #0
 800e770:	f363 0107 	bfi	r1, r3, #0, #8
 800e774:	4a1c      	ldr	r2, [pc, #112]	; (800e7e8 <net_route_packet+0xb8>)
 800e776:	4b1d      	ldr	r3, [pc, #116]	; (800e7ec <net_route_packet+0xbc>)
 800e778:	481d      	ldr	r0, [pc, #116]	; (800e7f0 <net_route_packet+0xc0>)
 800e77a:	1a9b      	subs	r3, r3, r2
 800e77c:	08db      	lsrs	r3, r3, #3
 800e77e:	f363 118f 	bfi	r1, r3, #6, #10
 800e782:	f005 fa3e 	bl	8013c02 <log_0>
 800e786:	e7e3      	b.n	800e750 <net_route_packet+0x20>
	pkt->forwarding = forward;
 800e788:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 800e78c:	f043 0301 	orr.w	r3, r3, #1
 800e790:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return net_if_get_link_addr(pkt->iface);
 800e794:	6a23      	ldr	r3, [r4, #32]
 800e796:	681b      	ldr	r3, [r3, #0]
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
 800e798:	691a      	ldr	r2, [r3, #16]
 800e79a:	62a2      	str	r2, [r4, #40]	; 0x28
	net_pkt_lladdr_src(pkt)->type = net_pkt_lladdr_if(pkt)->type;
 800e79c:	7d5a      	ldrb	r2, [r3, #21]
 800e79e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
 800e7a2:	7d1b      	ldrb	r3, [r3, #20]
 800e7a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
 800e7a8:	6327      	str	r7, [r4, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->type = lladdr->type;
 800e7aa:	782b      	ldrb	r3, [r5, #0]
 800e7ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	net_pkt_lladdr_dst(pkt)->len = lladdr->len;
 800e7b0:	786b      	ldrb	r3, [r5, #1]
 800e7b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	net_pkt_set_iface(pkt, nbr->iface);
 800e7b6:	68b3      	ldr	r3, [r6, #8]
	pkt->iface = iface;
 800e7b8:	6223      	str	r3, [r4, #32]
	if (iface) {
 800e7ba:	b13b      	cbz	r3, 800e7cc <net_route_packet+0x9c>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	7d52      	ldrb	r2, [r2, #21]
 800e7c0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	7d5b      	ldrb	r3, [r3, #21]
 800e7c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return net_send_data(pkt);
 800e7cc:	4620      	mov	r0, r4
}
 800e7ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return net_send_data(pkt);
 800e7d2:	f007 b9c8 	b.w	8015b66 <net_send_data>
		return -ENOENT;
 800e7d6:	f06f 0001 	mvn.w	r0, #1
 800e7da:	e7bb      	b.n	800e754 <net_route_packet+0x24>
		return -ESRCH;
 800e7dc:	f06f 0002 	mvn.w	r0, #2
 800e7e0:	e7b8      	b.n	800e754 <net_route_packet+0x24>
 800e7e2:	bf00      	nop
 800e7e4:	20009020 	.word	0x20009020
 800e7e8:	08019248 	.word	0x08019248
 800e7ec:	080192e8 	.word	0x080192e8
 800e7f0:	0801bcc9 	.word	0x0801bcc9

0800e7f4 <conn_set_unused>:

	sys_slist_prepend(&conn_used, &conn->node);
}

static void conn_set_unused(struct net_conn *conn)
{
 800e7f4:	b510      	push	{r4, lr}
 800e7f6:	2240      	movs	r2, #64	; 0x40
 800e7f8:	2100      	movs	r1, #0
 800e7fa:	4604      	mov	r4, r0
 800e7fc:	f7f6 f8b7 	bl	800496e <memset>
Z_GENLIST_PREPEND(slist, snode)
 800e800:	4b03      	ldr	r3, [pc, #12]	; (800e810 <conn_set_unused+0x1c>)
 800e802:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 800e804:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
 800e806:	685a      	ldr	r2, [r3, #4]
	list->head = node;
 800e808:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
 800e80a:	b902      	cbnz	r2, 800e80e <conn_set_unused+0x1a>
	list->tail = node;
 800e80c:	605c      	str	r4, [r3, #4]
	(void)memset(conn, 0, sizeof(*conn));

	sys_slist_prepend(&conn_unused, &conn->node);
}
 800e80e:	bd10      	pop	{r4, pc}
 800e810:	20000da0 	.word	0x20000da0

0800e814 <net_conn_register>:
		      u16_t remote_port,
		      u16_t local_port,
		      net_conn_cb_t cb,
		      void *user_data,
		      struct net_conn_handle **handle)
{
 800e814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e818:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
 800e81a:	4a8e      	ldr	r2, [pc, #568]	; (800ea54 <net_conn_register+0x240>)
{
 800e81c:	b085      	sub	sp, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
 800e81e:	6814      	ldr	r4, [r2, #0]
{
 800e820:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800e824:	f8bd 703c 	ldrh.w	r7, [sp, #60]	; 0x3c
 800e828:	4680      	mov	r8, r0
 800e82a:	4689      	mov	r9, r1
 800e82c:	469a      	mov	sl, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
 800e82e:	b184      	cbz	r4, 800e852 <net_conn_register+0x3e>
 800e830:	ba72      	rev16	r2, r6
 800e832:	b293      	uxth	r3, r2
 800e834:	ba7a      	rev16	r2, r7
 800e836:	9302      	str	r3, [sp, #8]
 800e838:	b293      	uxth	r3, r2
 800e83a:	9301      	str	r3, [sp, #4]
					    &net_sin6(local_addr)->sin6_addr,
 800e83c:	f10a 0304 	add.w	r3, sl, #4
 800e840:	9303      	str	r3, [sp, #12]
					    &net_sin6(remote_addr)->sin6_addr,
 800e842:	f105 0b04 	add.w	fp, r5, #4
		if (conn->proto != proto) {
 800e846:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800e848:	4542      	cmp	r2, r8
 800e84a:	d009      	beq.n	800e860 <net_conn_register+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800e84c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
 800e84e:	2c00      	cmp	r4, #0
 800e850:	d1f9      	bne.n	800e846 <net_conn_register+0x32>
	node = sys_slist_peek_head(&conn_unused);
 800e852:	4a81      	ldr	r2, [pc, #516]	; (800ea58 <net_conn_register+0x244>)
 800e854:	6814      	ldr	r4, [r2, #0]
	if (!node) {
 800e856:	2c00      	cmp	r4, #0
 800e858:	d156      	bne.n	800e908 <net_conn_register+0xf4>
		return -EALREADY;
	}

	conn = conn_get_unused();
	if (!conn) {
		return -ENOENT;
 800e85a:	f06f 0001 	mvn.w	r0, #1
 800e85e:	e0f3      	b.n	800ea48 <net_conn_register+0x234>
		if (conn->family != family) {
 800e860:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800e864:	454a      	cmp	r2, r9
 800e866:	d1f1      	bne.n	800e84c <net_conn_register+0x38>
		if (remote_addr) {
 800e868:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 800e86c:	f002 0202 	and.w	r2, r2, #2
 800e870:	b1c5      	cbz	r5, 800e8a4 <net_conn_register+0x90>
			if (!(conn->flags & NET_CONN_REMOTE_ADDR_SET)) {
 800e872:	2a00      	cmp	r2, #0
 800e874:	d0ea      	beq.n	800e84c <net_conn_register+0x38>
			if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800e876:	882a      	ldrh	r2, [r5, #0]
 800e878:	2a02      	cmp	r2, #2
 800e87a:	d1e7      	bne.n	800e84c <net_conn_register+0x38>
			    remote_addr->sa_family == AF_INET6 &&
 800e87c:	88a2      	ldrh	r2, [r4, #4]
 800e87e:	2a02      	cmp	r2, #2
 800e880:	d1e4      	bne.n	800e84c <net_conn_register+0x38>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 800e882:	2210      	movs	r2, #16
 800e884:	f104 0108 	add.w	r1, r4, #8
 800e888:	4658      	mov	r0, fp
 800e88a:	f7f6 f83a 	bl	8004902 <memcmp>
				if (!net_ipv6_addr_cmp(
 800e88e:	2800      	cmp	r0, #0
 800e890:	d1dc      	bne.n	800e84c <net_conn_register+0x38>
		if (local_addr) {
 800e892:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 800e896:	f002 0204 	and.w	r2, r2, #4
 800e89a:	f1ba 0f00 	cmp.w	sl, #0
 800e89e:	d104      	bne.n	800e8aa <net_conn_register+0x96>
		} else if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
 800e8a0:	b1a2      	cbz	r2, 800e8cc <net_conn_register+0xb8>
 800e8a2:	e7d3      	b.n	800e84c <net_conn_register+0x38>
		} else if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
 800e8a4:	2a00      	cmp	r2, #0
 800e8a6:	d0f4      	beq.n	800e892 <net_conn_register+0x7e>
 800e8a8:	e7d0      	b.n	800e84c <net_conn_register+0x38>
			if (!(conn->flags & NET_CONN_LOCAL_ADDR_SET)) {
 800e8aa:	2a00      	cmp	r2, #0
 800e8ac:	d0ce      	beq.n	800e84c <net_conn_register+0x38>
			if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800e8ae:	f8ba 2000 	ldrh.w	r2, [sl]
 800e8b2:	2a02      	cmp	r2, #2
 800e8b4:	d1ca      	bne.n	800e84c <net_conn_register+0x38>
			    local_addr->sa_family == AF_INET6 &&
 800e8b6:	8ba2      	ldrh	r2, [r4, #28]
 800e8b8:	2a02      	cmp	r2, #2
 800e8ba:	d1c7      	bne.n	800e84c <net_conn_register+0x38>
 800e8bc:	2210      	movs	r2, #16
 800e8be:	f104 0120 	add.w	r1, r4, #32
 800e8c2:	9803      	ldr	r0, [sp, #12]
 800e8c4:	f7f6 f81d 	bl	8004902 <memcmp>
				if (!net_ipv6_addr_cmp(
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	d1bf      	bne.n	800e84c <net_conn_register+0x38>
		if (net_sin(&conn->remote_addr)->sin_port !=
 800e8cc:	88e2      	ldrh	r2, [r4, #6]
 800e8ce:	9b02      	ldr	r3, [sp, #8]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d1bb      	bne.n	800e84c <net_conn_register+0x38>
		if (net_sin(&conn->local_addr)->sin_port !=
 800e8d4:	8be2      	ldrh	r2, [r4, #30]
 800e8d6:	9b01      	ldr	r3, [sp, #4]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d1b7      	bne.n	800e84c <net_conn_register+0x38>
		NET_ERR("Identical connection handler %p already found.", conn);
 800e8dc:	4b5f      	ldr	r3, [pc, #380]	; (800ea5c <net_conn_register+0x248>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	075b      	lsls	r3, r3, #29
 800e8e2:	d00e      	beq.n	800e902 <net_conn_register+0xee>
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	f04f 0200 	mov.w	r2, #0
 800e8ea:	f363 0207 	bfi	r2, r3, #0, #8
 800e8ee:	495c      	ldr	r1, [pc, #368]	; (800ea60 <net_conn_register+0x24c>)
 800e8f0:	4b5c      	ldr	r3, [pc, #368]	; (800ea64 <net_conn_register+0x250>)
 800e8f2:	485d      	ldr	r0, [pc, #372]	; (800ea68 <net_conn_register+0x254>)
 800e8f4:	1a5b      	subs	r3, r3, r1
 800e8f6:	08db      	lsrs	r3, r3, #3
 800e8f8:	f363 128f 	bfi	r2, r3, #6, #10
 800e8fc:	4621      	mov	r1, r4
 800e8fe:	f005 f98d 	bl	8013c1c <log_1>
		return -EALREADY;
 800e902:	f06f 0077 	mvn.w	r0, #119	; 0x77
 800e906:	e09f      	b.n	800ea48 <net_conn_register+0x234>
Z_GENLIST_REMOVE(slist, snode)
 800e908:	6851      	ldr	r1, [r2, #4]
 800e90a:	6820      	ldr	r0, [r4, #0]
	list->head = node;
 800e90c:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
 800e90e:	428c      	cmp	r4, r1
	list->tail = node;
 800e910:	bf08      	it	eq
 800e912:	6050      	streq	r0, [r2, #4]
	parent->next = child;
 800e914:	2200      	movs	r2, #0
 800e916:	6022      	str	r2, [r4, #0]
	}

	if (remote_addr) {
 800e918:	2d00      	cmp	r5, #0
 800e91a:	d05e      	beq.n	800e9da <net_conn_register+0x1c6>
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800e91c:	882a      	ldrh	r2, [r5, #0]
 800e91e:	2a02      	cmp	r2, #2
 800e920:	d143      	bne.n	800e9aa <net_conn_register+0x196>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800e922:	462a      	mov	r2, r5
 800e924:	1d21      	adds	r1, r4, #4
 800e926:	f105 0018 	add.w	r0, r5, #24
 800e92a:	f852 cb04 	ldr.w	ip, [r2], #4
 800e92e:	f841 cb04 	str.w	ip, [r1], #4
 800e932:	4282      	cmp	r2, r0
 800e934:	d1f9      	bne.n	800e92a <net_conn_register+0x116>
		    remote_addr->sa_family == AF_INET6) {
			memcpy(&conn->remote_addr, remote_addr,
			       sizeof(struct sockaddr_in6));

			if (!net_ipv6_is_addr_unspecified(
 800e936:	1d28      	adds	r0, r5, #4
 800e938:	f009 f8c1 	bl	8017abe <net_ipv6_is_addr_unspecified>
				    &net_sin6(remote_addr)->
				    sin6_addr)) {
				flags |= NET_CONN_REMOTE_ADDR_SPEC;
 800e93c:	2800      	cmp	r0, #0
		} else {
			NET_ERR("Remote address family not set");
			goto error;
		}

		flags |= NET_CONN_REMOTE_ADDR_SET;
 800e93e:	bf14      	ite	ne
 800e940:	2102      	movne	r1, #2
 800e942:	2122      	moveq	r1, #34	; 0x22
	}

	if (local_addr) {
 800e944:	f1ba 0f00 	cmp.w	sl, #0
 800e948:	d05a      	beq.n	800ea00 <net_conn_register+0x1ec>
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800e94a:	f8ba 2000 	ldrh.w	r2, [sl]
 800e94e:	2a02      	cmp	r2, #2
 800e950:	d145      	bne.n	800e9de <net_conn_register+0x1ca>
 800e952:	4652      	mov	r2, sl
 800e954:	f104 001c 	add.w	r0, r4, #28
 800e958:	f10a 0c18 	add.w	ip, sl, #24
 800e95c:	f852 eb04 	ldr.w	lr, [r2], #4
 800e960:	f840 eb04 	str.w	lr, [r0], #4
 800e964:	4562      	cmp	r2, ip
 800e966:	d1f9      	bne.n	800e95c <net_conn_register+0x148>
		    local_addr->sa_family == AF_INET6) {
			memcpy(&conn->local_addr, local_addr,
			       sizeof(struct sockaddr_in6));

			if (!net_ipv6_is_addr_unspecified(
 800e968:	f10a 0004 	add.w	r0, sl, #4
 800e96c:	f009 f8a7 	bl	8017abe <net_ipv6_is_addr_unspecified>
 800e970:	b908      	cbnz	r0, 800e976 <net_conn_register+0x162>
				    &net_sin6(local_addr)->
				    sin6_addr)) {
				flags |= NET_CONN_LOCAL_ADDR_SPEC;
 800e972:	f041 0140 	orr.w	r1, r1, #64	; 0x40
		} else {
			NET_ERR("Local address family not set");
			goto error;
		}

		flags |= NET_CONN_LOCAL_ADDR_SET;
 800e976:	f041 0104 	orr.w	r1, r1, #4
	}

	if (remote_addr && local_addr) {
 800e97a:	2d00      	cmp	r5, #0
 800e97c:	d040      	beq.n	800ea00 <net_conn_register+0x1ec>
		if (remote_addr->sa_family != local_addr->sa_family) {
 800e97e:	882a      	ldrh	r2, [r5, #0]
 800e980:	f8ba 3000 	ldrh.w	r3, [sl]
 800e984:	429a      	cmp	r2, r3
 800e986:	d03b      	beq.n	800ea00 <net_conn_register+0x1ec>
			NET_ERR("Address families different");
 800e988:	4b34      	ldr	r3, [pc, #208]	; (800ea5c <net_conn_register+0x248>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	075a      	lsls	r2, r3, #29
 800e98e:	d01e      	beq.n	800e9ce <net_conn_register+0x1ba>
 800e990:	2301      	movs	r3, #1
 800e992:	f04f 0100 	mov.w	r1, #0
 800e996:	f363 0107 	bfi	r1, r3, #0, #8
 800e99a:	4a31      	ldr	r2, [pc, #196]	; (800ea60 <net_conn_register+0x24c>)
 800e99c:	4b31      	ldr	r3, [pc, #196]	; (800ea64 <net_conn_register+0x250>)
 800e99e:	4833      	ldr	r0, [pc, #204]	; (800ea6c <net_conn_register+0x258>)
 800e9a0:	1a9b      	subs	r3, r3, r2
 800e9a2:	08db      	lsrs	r3, r3, #3
 800e9a4:	f363 118f 	bfi	r1, r3, #6, #10
 800e9a8:	e00f      	b.n	800e9ca <net_conn_register+0x1b6>
			NET_ERR("Remote address family not set");
 800e9aa:	4b2c      	ldr	r3, [pc, #176]	; (800ea5c <net_conn_register+0x248>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	0758      	lsls	r0, r3, #29
 800e9b0:	d00d      	beq.n	800e9ce <net_conn_register+0x1ba>
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	f04f 0100 	mov.w	r1, #0
 800e9b8:	f363 0107 	bfi	r1, r3, #0, #8
 800e9bc:	4a28      	ldr	r2, [pc, #160]	; (800ea60 <net_conn_register+0x24c>)
 800e9be:	4b29      	ldr	r3, [pc, #164]	; (800ea64 <net_conn_register+0x250>)
 800e9c0:	482b      	ldr	r0, [pc, #172]	; (800ea70 <net_conn_register+0x25c>)
 800e9c2:	1a9b      	subs	r3, r3, r2
 800e9c4:	08db      	lsrs	r3, r3, #3
 800e9c6:	f363 118f 	bfi	r1, r3, #6, #10
			NET_ERR("Local address family not set");
 800e9ca:	f005 f91a 	bl	8013c02 <log_0>

	conn_register_debug(conn, remote_port, local_port);

	return 0;
error:
	conn_set_unused(conn);
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	f7ff ff10 	bl	800e7f4 <conn_set_unused>
	return -EINVAL;
 800e9d4:	f06f 0015 	mvn.w	r0, #21
 800e9d8:	e036      	b.n	800ea48 <net_conn_register+0x234>
	u8_t flags = 0U;
 800e9da:	4629      	mov	r1, r5
 800e9dc:	e7b2      	b.n	800e944 <net_conn_register+0x130>
			NET_ERR("Local address family not set");
 800e9de:	4b1f      	ldr	r3, [pc, #124]	; (800ea5c <net_conn_register+0x248>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	0759      	lsls	r1, r3, #29
 800e9e4:	d0f3      	beq.n	800e9ce <net_conn_register+0x1ba>
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	f04f 0100 	mov.w	r1, #0
 800e9ec:	f363 0107 	bfi	r1, r3, #0, #8
 800e9f0:	4a1b      	ldr	r2, [pc, #108]	; (800ea60 <net_conn_register+0x24c>)
 800e9f2:	4b1c      	ldr	r3, [pc, #112]	; (800ea64 <net_conn_register+0x250>)
 800e9f4:	481f      	ldr	r0, [pc, #124]	; (800ea74 <net_conn_register+0x260>)
 800e9f6:	1a9b      	subs	r3, r3, r2
 800e9f8:	08db      	lsrs	r3, r3, #3
 800e9fa:	f363 118f 	bfi	r1, r3, #6, #10
 800e9fe:	e7e4      	b.n	800e9ca <net_conn_register+0x1b6>
	if (remote_port) {
 800ea00:	b11e      	cbz	r6, 800ea0a <net_conn_register+0x1f6>
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
 800ea02:	ba76      	rev16	r6, r6
		flags |= NET_CONN_REMOTE_PORT_SPEC;
 800ea04:	f041 0108 	orr.w	r1, r1, #8
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
 800ea08:	80e6      	strh	r6, [r4, #6]
	if (local_port) {
 800ea0a:	b11f      	cbz	r7, 800ea14 <net_conn_register+0x200>
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
 800ea0c:	ba7f      	rev16	r7, r7
		flags |= NET_CONN_LOCAL_PORT_SPEC;
 800ea0e:	f041 0110 	orr.w	r1, r1, #16
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
 800ea12:	83e7      	strh	r7, [r4, #30]
	conn->cb = cb;
 800ea14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea16:	6363      	str	r3, [r4, #52]	; 0x34
	conn->user_data = user_data;
 800ea18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea1a:	63a3      	str	r3, [r4, #56]	; 0x38
	if (handle) {
 800ea1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
	conn->flags = flags;
 800ea1e:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
	conn->proto = proto;
 800ea22:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
	conn->family = family;
 800ea26:	f884 903e 	strb.w	r9, [r4, #62]	; 0x3e
	if (handle) {
 800ea2a:	b103      	cbz	r3, 800ea2e <net_conn_register+0x21a>
		*handle = (struct net_conn_handle *)conn;
 800ea2c:	601c      	str	r4, [r3, #0]
	conn->flags |= NET_CONN_IN_USE;
 800ea2e:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800ea32:	f043 0301 	orr.w	r3, r3, #1
 800ea36:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
Z_GENLIST_PREPEND(slist, snode)
 800ea3a:	4b06      	ldr	r3, [pc, #24]	; (800ea54 <net_conn_register+0x240>)
 800ea3c:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 800ea3e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
 800ea40:	6858      	ldr	r0, [r3, #4]
	list->head = node;
 800ea42:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
 800ea44:	b918      	cbnz	r0, 800ea4e <net_conn_register+0x23a>
	list->tail = node;
 800ea46:	605c      	str	r4, [r3, #4]
}
 800ea48:	b005      	add	sp, #20
 800ea4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return 0;
 800ea4e:	2000      	movs	r0, #0
 800ea50:	e7fa      	b.n	800ea48 <net_conn_register+0x234>
 800ea52:	bf00      	nop
 800ea54:	20000da8 	.word	0x20000da8
 800ea58:	20000da0 	.word	0x20000da0
 800ea5c:	20008ff8 	.word	0x20008ff8
 800ea60:	08019248 	.word	0x08019248
 800ea64:	08019298 	.word	0x08019298
 800ea68:	0801bcee 	.word	0x0801bcee
 800ea6c:	0801bd58 	.word	0x0801bd58
 800ea70:	0801bd1d 	.word	0x0801bd1d
 800ea74:	0801bd3b 	.word	0x0801bd3b

0800ea78 <net_conn_unregister>:

int net_conn_unregister(struct net_conn_handle *handle)
{
 800ea78:	b508      	push	{r3, lr}
	struct net_conn *conn = (struct net_conn *)handle;

	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
 800ea7a:	4b16      	ldr	r3, [pc, #88]	; (800ead4 <net_conn_unregister+0x5c>)
 800ea7c:	4298      	cmp	r0, r3
 800ea7e:	d323      	bcc.n	800eac8 <net_conn_unregister+0x50>
 800ea80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ea84:	4298      	cmp	r0, r3
 800ea86:	d81f      	bhi.n	800eac8 <net_conn_unregister+0x50>
		return -EINVAL;
	}

	if (!(conn->flags & NET_CONN_IN_USE)) {
 800ea88:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800ea8c:	07db      	lsls	r3, r3, #31
 800ea8e:	d51e      	bpl.n	800eace <net_conn_unregister+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800ea90:	4b11      	ldr	r3, [pc, #68]	; (800ead8 <net_conn_unregister+0x60>)
 800ea92:	681a      	ldr	r2, [r3, #0]
 800ea94:	2100      	movs	r1, #0
 800ea96:	b152      	cbz	r2, 800eaae <net_conn_unregister+0x36>
 800ea98:	4290      	cmp	r0, r2
 800ea9a:	d112      	bne.n	800eac2 <net_conn_unregister+0x4a>
Z_GENLIST_REMOVE(slist, snode)
 800ea9c:	6802      	ldr	r2, [r0, #0]
 800ea9e:	b951      	cbnz	r1, 800eab6 <net_conn_unregister+0x3e>
 800eaa0:	6859      	ldr	r1, [r3, #4]
	list->head = node;
 800eaa2:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
 800eaa4:	4288      	cmp	r0, r1
 800eaa6:	d100      	bne.n	800eaaa <net_conn_unregister+0x32>
	list->tail = node;
 800eaa8:	605a      	str	r2, [r3, #4]
	parent->next = child;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	6003      	str	r3, [r0, #0]

	NET_DBG("Connection handler %p removed", conn);

	sys_slist_find_and_remove(&conn_used, &conn->node);

	conn_set_unused(conn);
 800eaae:	f7ff fea1 	bl	800e7f4 <conn_set_unused>

	return 0;
 800eab2:	2000      	movs	r0, #0
}
 800eab4:	bd08      	pop	{r3, pc}
 800eab6:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 800eab8:	685a      	ldr	r2, [r3, #4]
 800eaba:	4290      	cmp	r0, r2
	list->tail = node;
 800eabc:	bf08      	it	eq
 800eabe:	6059      	streq	r1, [r3, #4]
 800eac0:	e7f3      	b.n	800eaaa <net_conn_unregister+0x32>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800eac2:	4611      	mov	r1, r2
 800eac4:	6812      	ldr	r2, [r2, #0]
 800eac6:	e7e6      	b.n	800ea96 <net_conn_unregister+0x1e>
		return -EINVAL;
 800eac8:	f06f 0015 	mvn.w	r0, #21
 800eacc:	e7f2      	b.n	800eab4 <net_conn_unregister+0x3c>
		return -ENOENT;
 800eace:	f06f 0001 	mvn.w	r0, #1
 800ead2:	e7ef      	b.n	800eab4 <net_conn_unregister+0x3c>
 800ead4:	20000db0 	.word	0x20000db0
 800ead8:	20000da8 	.word	0x20000da8

0800eadc <net_conn_input>:

enum net_verdict net_conn_input(struct net_pkt *pkt,
				union net_ip_header *ip_hdr,
				u8_t proto,
				union net_proto_header *proto_hdr)
{
 800eadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	s16_t best_rank = -1;
	struct net_conn *conn;
	u16_t src_port;
	u16_t dst_port;

	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 800eae0:	2a11      	cmp	r2, #17
{
 800eae2:	b087      	sub	sp, #28
 800eae4:	4605      	mov	r5, r0
 800eae6:	4689      	mov	r9, r1
 800eae8:	469a      	mov	sl, r3
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 800eaea:	d003      	beq.n	800eaf4 <net_conn_input+0x18>
		}

		src_port = dst_port = 0U;
	} else {
		NET_DBG("No suitable protocol handler configured");
		return NET_DROP;
 800eaec:	2002      	movs	r0, #2

drop:
	net_stats_update_per_proto_drop(pkt_iface, proto);

	return NET_DROP;
}
 800eaee:	b007      	add	sp, #28
 800eaf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		src_port = proto_hdr->udp->src_port;
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	881a      	ldrh	r2, [r3, #0]
 800eaf8:	9205      	str	r2, [sp, #20]
		dst_port = proto_hdr->udp->dst_port;
 800eafa:	885b      	ldrh	r3, [r3, #2]
 800eafc:	9304      	str	r3, [sp, #16]
	return pkt->family;
 800eafe:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800eb02:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800eb06:	2b02      	cmp	r3, #2
 800eb08:	d050      	beq.n	800ebac <net_conn_input+0xd0>
	bool is_mcast_pkt = false, mcast_pkt_delivered = false;
 800eb0a:	2600      	movs	r6, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
 800eb0c:	4b6a      	ldr	r3, [pc, #424]	; (800ecb8 <net_conn_input+0x1dc>)
 800eb0e:	681c      	ldr	r4, [r3, #0]
 800eb10:	2c00      	cmp	r4, #0
 800eb12:	f000 80c0 	beq.w	800ec96 <net_conn_input+0x1ba>
 800eb16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb1a:	2700      	movs	r7, #0
 800eb1c:	9303      	str	r3, [sp, #12]
 800eb1e:	46b8      	mov	r8, r7
		if (conn->proto != proto) {
 800eb20:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800eb22:	2b11      	cmp	r3, #17
 800eb24:	d17e      	bne.n	800ec24 <net_conn_input+0x148>
		if (conn->family != AF_UNSPEC &&
 800eb26:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800eb2a:	b12a      	cbz	r2, 800eb38 <net_conn_input+0x5c>
 800eb2c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
 800eb30:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800eb34:	4293      	cmp	r3, r2
 800eb36:	d175      	bne.n	800ec24 <net_conn_input+0x148>
			if (net_sin(&conn->remote_addr)->sin_port) {
 800eb38:	88e3      	ldrh	r3, [r4, #6]
 800eb3a:	b113      	cbz	r3, 800eb42 <net_conn_input+0x66>
				if (net_sin(&conn->remote_addr)->sin_port !=
 800eb3c:	9a05      	ldr	r2, [sp, #20]
 800eb3e:	4293      	cmp	r3, r2
 800eb40:	d170      	bne.n	800ec24 <net_conn_input+0x148>
			if (net_sin(&conn->local_addr)->sin_port) {
 800eb42:	8be3      	ldrh	r3, [r4, #30]
 800eb44:	b113      	cbz	r3, 800eb4c <net_conn_input+0x70>
				if (net_sin(&conn->local_addr)->sin_port !=
 800eb46:	9a04      	ldr	r2, [sp, #16]
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	d16b      	bne.n	800ec24 <net_conn_input+0x148>
			if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
 800eb4c:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800eb50:	0799      	lsls	r1, r3, #30
 800eb52:	d44e      	bmi.n	800ebf2 <net_conn_input+0x116>
			if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
 800eb54:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800eb58:	075a      	lsls	r2, r3, #29
 800eb5a:	d517      	bpl.n	800eb8c <net_conn_input+0xb0>
 800eb5c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	if (addr->sa_family != net_pkt_family(pkt)) {
 800eb60:	8ba2      	ldrh	r2, [r4, #28]
 800eb62:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d15c      	bne.n	800ec24 <net_conn_input+0x148>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800eb6a:	2b02      	cmp	r3, #2
 800eb6c:	d10e      	bne.n	800eb8c <net_conn_input+0xb0>
			    &net_sin6(addr)->sin6_addr)) {
 800eb6e:	f104 0b20 	add.w	fp, r4, #32
		if (!net_ipv6_is_addr_unspecified(
 800eb72:	4658      	mov	r0, fp
 800eb74:	f008 ffa3 	bl	8017abe <net_ipv6_is_addr_unspecified>
 800eb78:	b940      	cbnz	r0, 800eb8c <net_conn_input+0xb0>
			addr6 = &ip_hdr->ipv6->dst;
 800eb7a:	f8d9 1000 	ldr.w	r1, [r9]
 800eb7e:	2210      	movs	r2, #16
 800eb80:	3118      	adds	r1, #24
 800eb82:	4658      	mov	r0, fp
 800eb84:	f7f5 febd 	bl	8004902 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	d14b      	bne.n	800ec24 <net_conn_input+0x148>
			if (best_match != NULL &&
 800eb8c:	f1b8 0f00 	cmp.w	r8, #0
 800eb90:	d153      	bne.n	800ec3a <net_conn_input+0x15e>
			if (best_rank < NET_CONN_RANK(conn->flags)) {
 800eb92:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800eb96:	9a03      	ldr	r2, [sp, #12]
 800eb98:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	da41      	bge.n	800ec24 <net_conn_input+0x148>
				if (!is_mcast_pkt) {
 800eba0:	2e00      	cmp	r6, #0
 800eba2:	d14f      	bne.n	800ec44 <net_conn_input+0x168>
					best_rank = NET_CONN_RANK(conn->flags);
 800eba4:	b21b      	sxth	r3, r3
 800eba6:	9303      	str	r3, [sp, #12]
					continue;
 800eba8:	46a0      	mov	r8, r4
 800ebaa:	e03b      	b.n	800ec24 <net_conn_input+0x148>
		if (net_ipv6_addr_cmp(&ip_hdr->ipv6->src,
 800ebac:	6808      	ldr	r0, [r1, #0]
 800ebae:	2210      	movs	r2, #16
 800ebb0:	f100 0118 	add.w	r1, r0, #24
 800ebb4:	3008      	adds	r0, #8
 800ebb6:	f7f5 fea4 	bl	8004902 <memcmp>
 800ebba:	b988      	cbnz	r0, 800ebe0 <net_conn_input+0x104>
	if (!conn_are_end_points_valid(pkt, ip_hdr, src_port, dst_port)) {
 800ebbc:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	d093      	beq.n	800eaec <net_conn_input+0x10>
 800ebc4:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800ebc8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800ebcc:	2b02      	cmp	r3, #2
 800ebce:	d19c      	bne.n	800eb0a <net_conn_input+0x2e>
		if (net_ipv6_is_addr_mcast(&ip_hdr->ipv6->dst)) {
 800ebd0:	f8d9 3000 	ldr.w	r3, [r9]
 800ebd4:	7e1e      	ldrb	r6, [r3, #24]
 800ebd6:	f1a6 00ff 	sub.w	r0, r6, #255	; 0xff
 800ebda:	4246      	negs	r6, r0
 800ebdc:	4146      	adcs	r6, r0
 800ebde:	e795      	b.n	800eb0c <net_conn_input+0x30>
		    net_ipv6_is_my_addr(&ip_hdr->ipv6->src)) {
 800ebe0:	f8d9 0000 	ldr.w	r0, [r9]
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	3008      	adds	r0, #8
 800ebe8:	f7fc f826 	bl	800ac38 <net_if_ipv6_addr_lookup>
				      &ip_hdr->ipv6->dst) ||
 800ebec:	2800      	cmp	r0, #0
 800ebee:	d1e5      	bne.n	800ebbc <net_conn_input+0xe0>
 800ebf0:	e7e8      	b.n	800ebc4 <net_conn_input+0xe8>
 800ebf2:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	if (addr->sa_family != net_pkt_family(pkt)) {
 800ebf6:	88a2      	ldrh	r2, [r4, #4]
 800ebf8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d111      	bne.n	800ec24 <net_conn_input+0x148>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800ec00:	2b02      	cmp	r3, #2
 800ec02:	d1a7      	bne.n	800eb54 <net_conn_input+0x78>
			    &net_sin6(addr)->sin6_addr)) {
 800ec04:	f104 0b08 	add.w	fp, r4, #8
		if (!net_ipv6_is_addr_unspecified(
 800ec08:	4658      	mov	r0, fp
 800ec0a:	f008 ff58 	bl	8017abe <net_ipv6_is_addr_unspecified>
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	d1a0      	bne.n	800eb54 <net_conn_input+0x78>
			addr6 = &ip_hdr->ipv6->src;
 800ec12:	f8d9 1000 	ldr.w	r1, [r9]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 800ec16:	2210      	movs	r2, #16
 800ec18:	3108      	adds	r1, #8
 800ec1a:	4658      	mov	r0, fp
 800ec1c:	f7f5 fe71 	bl	8004902 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
 800ec20:	2800      	cmp	r0, #0
 800ec22:	d097      	beq.n	800eb54 <net_conn_input+0x78>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800ec24:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
 800ec26:	2c00      	cmp	r4, #0
 800ec28:	f47f af7a 	bne.w	800eb20 <net_conn_input+0x44>
	if (is_mcast_pkt && mcast_pkt_delivered) {
 800ec2c:	b30e      	cbz	r6, 800ec72 <net_conn_input+0x196>
 800ec2e:	b307      	cbz	r7, 800ec72 <net_conn_input+0x196>
		net_pkt_unref(pkt);
 800ec30:	4628      	mov	r0, r5
 800ec32:	f007 feab 	bl	801698c <net_pkt_unref>
	return NET_DROP;
 800ec36:	4620      	mov	r0, r4
 800ec38:	e759      	b.n	800eaee <net_conn_input+0x12>
			if (best_match != NULL &&
 800ec3a:	f898 303f 	ldrb.w	r3, [r8, #63]	; 0x3f
 800ec3e:	071b      	lsls	r3, r3, #28
 800ec40:	d4f0      	bmi.n	800ec24 <net_conn_input+0x148>
 800ec42:	e7a6      	b.n	800eb92 <net_conn_input+0xb6>
				mcast_pkt = net_pkt_clone(pkt, CLONE_TIMEOUT);
 800ec44:	2164      	movs	r1, #100	; 0x64
 800ec46:	4628      	mov	r0, r5
 800ec48:	f008 f847 	bl	8016cda <net_pkt_clone>
				if (!mcast_pkt) {
 800ec4c:	4683      	mov	fp, r0
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	f43f af4c 	beq.w	800eaec <net_conn_input+0x10>
				if (conn->cb(conn, mcast_pkt, ip_hdr,
 800ec54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ec56:	9300      	str	r3, [sp, #0]
 800ec58:	4601      	mov	r1, r0
 800ec5a:	4653      	mov	r3, sl
 800ec5c:	464a      	mov	r2, r9
 800ec5e:	4620      	mov	r0, r4
 800ec60:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800ec62:	47b8      	blx	r7
 800ec64:	2802      	cmp	r0, #2
 800ec66:	d102      	bne.n	800ec6e <net_conn_input+0x192>
					net_pkt_unref(mcast_pkt);
 800ec68:	4658      	mov	r0, fp
 800ec6a:	f007 fe8f 	bl	801698c <net_pkt_unref>
				mcast_pkt_delivered = true;
 800ec6e:	4637      	mov	r7, r6
 800ec70:	e7d8      	b.n	800ec24 <net_conn_input+0x148>
	if (conn) {
 800ec72:	f1b8 0f00 	cmp.w	r8, #0
 800ec76:	d00e      	beq.n	800ec96 <net_conn_input+0x1ba>
		if (conn->cb(conn, pkt, ip_hdr, proto_hdr,
 800ec78:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800ec7c:	9300      	str	r3, [sp, #0]
 800ec7e:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
 800ec82:	4653      	mov	r3, sl
 800ec84:	464a      	mov	r2, r9
 800ec86:	4629      	mov	r1, r5
 800ec88:	4640      	mov	r0, r8
 800ec8a:	47a0      	blx	r4
 800ec8c:	2802      	cmp	r0, #2
 800ec8e:	f43f af2d 	beq.w	800eaec <net_conn_input+0x10>
		return NET_OK;
 800ec92:	2000      	movs	r0, #0
 800ec94:	e72b      	b.n	800eaee <net_conn_input+0x12>
 800ec96:	f895 003b 	ldrb.w	r0, [r5, #59]	; 0x3b
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800ec9a:	f3c0 0442 	ubfx	r4, r0, #1, #3
 800ec9e:	2c02      	cmp	r4, #2
 800eca0:	f47f af24 	bne.w	800eaec <net_conn_input+0x10>
	    net_pkt_family(pkt) == AF_INET6 && is_mcast_pkt) {
 800eca4:	2e00      	cmp	r6, #0
 800eca6:	f47f af21 	bne.w	800eaec <net_conn_input+0x10>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
 800ecaa:	4633      	mov	r3, r6
 800ecac:	2204      	movs	r2, #4
 800ecae:	2101      	movs	r1, #1
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	f008 f956 	bl	8016f62 <net_icmpv6_send_error>
 800ecb6:	e7be      	b.n	800ec36 <net_conn_input+0x15a>
 800ecb8:	20000da8 	.word	0x20000da8

0800ecbc <net_conn_init>:
	list->head = NULL;
 800ecbc:	4b09      	ldr	r3, [pc, #36]	; (800ece4 <net_conn_init+0x28>)
 800ecbe:	2200      	movs	r2, #0
	list->tail = NULL;
 800ecc0:	e9c3 2200 	strd	r2, r2, [r3]
	parent->next = child;
 800ecc4:	4b08      	ldr	r3, [pc, #32]	; (800ece8 <net_conn_init+0x2c>)
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	601a      	str	r2, [r3, #0]
 800ecca:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800ecce:	f841 2f80 	str.w	r2, [r1, #128]!
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	641b      	str	r3, [r3, #64]	; 0x40
 800ecd6:	f842 1fc0 	str.w	r1, [r2, #192]!
	return list->tail;
 800ecda:	4904      	ldr	r1, [pc, #16]	; (800ecec <net_conn_init+0x30>)
 800ecdc:	e9c1 2300 	strd	r2, r3, [r1]
	sys_slist_init(&conn_used);

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
		sys_slist_prepend(&conn_unused, &conns[i].node);
	}
}
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop
 800ece4:	20000da8 	.word	0x20000da8
 800ece8:	20000db0 	.word	0x20000db0
 800ecec:	20000da0 	.word	0x20000da0

0800ecf0 <cmd_net_websocket>:
}
#endif /* CONFIG_WEBSOCKET_CLIENT */

static int cmd_net_websocket(const struct shell *shell, size_t argc,
			     char *argv[])
{
 800ecf0:	b507      	push	{r0, r1, r2, lr}

	if (count == 0) {
		PR("No connections\n");
	}
#else
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_WEBSOCKET_CLIENT",
 800ecf2:	4b05      	ldr	r3, [pc, #20]	; (800ed08 <cmd_net_websocket+0x18>)
 800ecf4:	9300      	str	r3, [sp, #0]
 800ecf6:	4a05      	ldr	r2, [pc, #20]	; (800ed0c <cmd_net_websocket+0x1c>)
 800ecf8:	4b05      	ldr	r3, [pc, #20]	; (800ed10 <cmd_net_websocket+0x20>)
 800ecfa:	2103      	movs	r1, #3
 800ecfc:	f005 fb3a 	bl	8014374 <shell_fprintf>
		"Websocket");
#endif /* CONFIG_WEBSOCKET_CLIENT */

	return 0;
}
 800ed00:	2000      	movs	r0, #0
 800ed02:	b003      	add	sp, #12
 800ed04:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed08:	0801c567 	.word	0x0801c567
 800ed0c:	0801c549 	.word	0x0801c549
 800ed10:	0801c531 	.word	0x0801c531

0800ed14 <cmd_net_vlan>:
{
 800ed14:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_VLAN", "VLAN");
 800ed16:	4b05      	ldr	r3, [pc, #20]	; (800ed2c <cmd_net_vlan+0x18>)
 800ed18:	9300      	str	r3, [sp, #0]
 800ed1a:	4a05      	ldr	r2, [pc, #20]	; (800ed30 <cmd_net_vlan+0x1c>)
 800ed1c:	4b05      	ldr	r3, [pc, #20]	; (800ed34 <cmd_net_vlan+0x20>)
 800ed1e:	2103      	movs	r1, #3
 800ed20:	f005 fb28 	bl	8014374 <shell_fprintf>
}
 800ed24:	2000      	movs	r0, #0
 800ed26:	b003      	add	sp, #12
 800ed28:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed2c:	0801c52c 	.word	0x0801c52c
 800ed30:	0801c549 	.word	0x0801c549
 800ed34:	0801c521 	.word	0x0801c521

0800ed38 <cmd_net_tcp_connect>:
{
 800ed38:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
 800ed3a:	4b05      	ldr	r3, [pc, #20]	; (800ed50 <cmd_net_tcp_connect+0x18>)
 800ed3c:	9300      	str	r3, [sp, #0]
 800ed3e:	4a05      	ldr	r2, [pc, #20]	; (800ed54 <cmd_net_tcp_connect+0x1c>)
 800ed40:	4b05      	ldr	r3, [pc, #20]	; (800ed58 <cmd_net_tcp_connect+0x20>)
 800ed42:	2103      	movs	r1, #3
 800ed44:	f005 fb16 	bl	8014374 <shell_fprintf>
}
 800ed48:	2000      	movs	r0, #0
 800ed4a:	b003      	add	sp, #12
 800ed4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed50:	0801c51d 	.word	0x0801c51d
 800ed54:	0801c549 	.word	0x0801c549
 800ed58:	0801c4f8 	.word	0x0801c4f8

0800ed5c <cmd_net_stats_all>:
{
 800ed5c:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_STATISTICS",
 800ed5e:	4b05      	ldr	r3, [pc, #20]	; (800ed74 <cmd_net_stats_all+0x18>)
 800ed60:	9300      	str	r3, [sp, #0]
 800ed62:	4a05      	ldr	r2, [pc, #20]	; (800ed78 <cmd_net_stats_all+0x1c>)
 800ed64:	4b05      	ldr	r3, [pc, #20]	; (800ed7c <cmd_net_stats_all+0x20>)
 800ed66:	2103      	movs	r1, #3
 800ed68:	f005 fb04 	bl	8014374 <shell_fprintf>
}
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	b003      	add	sp, #12
 800ed70:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed74:	0801c4ed 	.word	0x0801c4ed
 800ed78:	0801c549 	.word	0x0801c549
 800ed7c:	0801c4d7 	.word	0x0801c4d7

0800ed80 <cmd_net_stacks>:
{
 800ed80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	for (info = __net_stack_start; info != __net_stack_end; info++) {
 800ed82:	4c0e      	ldr	r4, [pc, #56]	; (800edbc <cmd_net_stacks+0x3c>)
 800ed84:	4e0e      	ldr	r6, [pc, #56]	; (800edc0 <cmd_net_stacks+0x40>)
		PR("%s [%s] stack size %zu usage not available\n",
 800ed86:	4f0f      	ldr	r7, [pc, #60]	; (800edc4 <cmd_net_stacks+0x44>)
{
 800ed88:	4605      	mov	r5, r0
	for (info = __net_stack_start; info != __net_stack_end; info++) {
 800ed8a:	42b4      	cmp	r4, r6
 800ed8c:	d10a      	bne.n	800eda4 <cmd_net_stacks+0x24>
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_INIT_STACKS",
 800ed8e:	4b0e      	ldr	r3, [pc, #56]	; (800edc8 <cmd_net_stacks+0x48>)
 800ed90:	9300      	str	r3, [sp, #0]
 800ed92:	4628      	mov	r0, r5
 800ed94:	4b0d      	ldr	r3, [pc, #52]	; (800edcc <cmd_net_stacks+0x4c>)
 800ed96:	4a0e      	ldr	r2, [pc, #56]	; (800edd0 <cmd_net_stacks+0x50>)
 800ed98:	2103      	movs	r1, #3
 800ed9a:	f005 faeb 	bl	8014374 <shell_fprintf>
}
 800ed9e:	2000      	movs	r0, #0
 800eda0:	b003      	add	sp, #12
 800eda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR("%s [%s] stack size %zu usage not available\n",
 800eda4:	68e3      	ldr	r3, [r4, #12]
 800eda6:	9301      	str	r3, [sp, #4]
 800eda8:	68a3      	ldr	r3, [r4, #8]
 800edaa:	9300      	str	r3, [sp, #0]
 800edac:	463a      	mov	r2, r7
 800edae:	6863      	ldr	r3, [r4, #4]
 800edb0:	2100      	movs	r1, #0
 800edb2:	4628      	mov	r0, r5
 800edb4:	f005 fade 	bl	8014374 <shell_fprintf>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
 800edb8:	3420      	adds	r4, #32
 800edba:	e7e6      	b.n	800ed8a <cmd_net_stacks+0xa>
 800edbc:	20009200 	.word	0x20009200
 800edc0:	20009260 	.word	0x20009260
 800edc4:	0801c486 	.word	0x0801c486
 800edc8:	0801c4c5 	.word	0x0801c4c5
 800edcc:	0801c4b2 	.word	0x0801c4b2
 800edd0:	0801c549 	.word	0x0801c549

0800edd4 <cmd_net_ppp_status>:
{
 800edd4:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
 800edd6:	4b05      	ldr	r3, [pc, #20]	; (800edec <cmd_net_ppp_status+0x18>)
 800edd8:	9300      	str	r3, [sp, #0]
 800edda:	4a05      	ldr	r2, [pc, #20]	; (800edf0 <cmd_net_ppp_status+0x1c>)
 800eddc:	4b05      	ldr	r3, [pc, #20]	; (800edf4 <cmd_net_ppp_status+0x20>)
 800edde:	2103      	movs	r1, #3
 800ede0:	f005 fac8 	bl	8014374 <shell_fprintf>
}
 800ede4:	2000      	movs	r0, #0
 800ede6:	b003      	add	sp, #12
 800ede8:	f85d fb04 	ldr.w	pc, [sp], #4
 800edec:	0801c45d 	.word	0x0801c45d
 800edf0:	0801c549 	.word	0x0801c549
 800edf4:	0801c461 	.word	0x0801c461

0800edf8 <cmd_net_ppp_ping>:
{
 800edf8:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_L2_PPP", "PPP");
 800edfa:	4b05      	ldr	r3, [pc, #20]	; (800ee10 <cmd_net_ppp_ping+0x18>)
 800edfc:	9300      	str	r3, [sp, #0]
 800edfe:	4a05      	ldr	r2, [pc, #20]	; (800ee14 <cmd_net_ppp_ping+0x1c>)
 800ee00:	4b05      	ldr	r3, [pc, #20]	; (800ee18 <cmd_net_ppp_ping+0x20>)
 800ee02:	2103      	movs	r1, #3
 800ee04:	f005 fab6 	bl	8014374 <shell_fprintf>
}
 800ee08:	2000      	movs	r0, #0
 800ee0a:	b003      	add	sp, #12
 800ee0c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee10:	0801c45d 	.word	0x0801c45d
 800ee14:	0801c549 	.word	0x0801c549
 800ee18:	0801c44f 	.word	0x0801c44f

0800ee1c <cmd_net_gptp_port>:
{
 800ee1c:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_GPTP", "gPTP");
 800ee1e:	4b05      	ldr	r3, [pc, #20]	; (800ee34 <cmd_net_gptp_port+0x18>)
 800ee20:	9300      	str	r3, [sp, #0]
 800ee22:	4a05      	ldr	r2, [pc, #20]	; (800ee38 <cmd_net_gptp_port+0x1c>)
 800ee24:	4b05      	ldr	r3, [pc, #20]	; (800ee3c <cmd_net_gptp_port+0x20>)
 800ee26:	2103      	movs	r1, #3
 800ee28:	f005 faa4 	bl	8014374 <shell_fprintf>
}
 800ee2c:	2000      	movs	r0, #0
 800ee2e:	b003      	add	sp, #12
 800ee30:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee34:	0801bf8b 	.word	0x0801bf8b
 800ee38:	0801c549 	.word	0x0801c549
 800ee3c:	0801bf7b 	.word	0x0801bf7b

0800ee40 <cmd_net_dns_query>:
{
 800ee40:	b508      	push	{r3, lr}
	PR_INFO("DNS resolver not supported. Set CONFIG_DNS_RESOLVER to "
 800ee42:	4a03      	ldr	r2, [pc, #12]	; (800ee50 <cmd_net_dns_query+0x10>)
 800ee44:	2103      	movs	r1, #3
 800ee46:	f005 fa95 	bl	8014374 <shell_fprintf>
}
 800ee4a:	2000      	movs	r0, #0
 800ee4c:	bd08      	pop	{r3, pc}
 800ee4e:	bf00      	nop
 800ee50:	0801bf38 	.word	0x0801bf38

0800ee54 <cmd_net_dns_cancel>:
{
 800ee54:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_DNS_RESOLVER",
 800ee56:	4b05      	ldr	r3, [pc, #20]	; (800ee6c <cmd_net_dns_cancel+0x18>)
 800ee58:	9300      	str	r3, [sp, #0]
 800ee5a:	4a05      	ldr	r2, [pc, #20]	; (800ee70 <cmd_net_dns_cancel+0x1c>)
 800ee5c:	4b05      	ldr	r3, [pc, #20]	; (800ee74 <cmd_net_dns_cancel+0x20>)
 800ee5e:	2103      	movs	r1, #3
 800ee60:	f005 fa88 	bl	8014374 <shell_fprintf>
}
 800ee64:	2000      	movs	r0, #0
 800ee66:	b003      	add	sp, #12
 800ee68:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee6c:	0801bf2b 	.word	0x0801bf2b
 800ee70:	0801c549 	.word	0x0801c549
 800ee74:	0801bf17 	.word	0x0801bf17

0800ee78 <cmd_net_allocs>:
{
 800ee78:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
 800ee7a:	4b05      	ldr	r3, [pc, #20]	; (800ee90 <cmd_net_allocs+0x18>)
 800ee7c:	9300      	str	r3, [sp, #0]
 800ee7e:	4a05      	ldr	r2, [pc, #20]	; (800ee94 <cmd_net_allocs+0x1c>)
 800ee80:	4b05      	ldr	r3, [pc, #20]	; (800ee98 <cmd_net_allocs+0x20>)
 800ee82:	2103      	movs	r1, #3
 800ee84:	f005 fa76 	bl	8014374 <shell_fprintf>
}
 800ee88:	2000      	movs	r0, #0
 800ee8a:	b003      	add	sp, #12
 800ee8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee90:	0801be65 	.word	0x0801be65
 800ee94:	0801c549 	.word	0x0801c549
 800ee98:	0801be46 	.word	0x0801be46

0800ee9c <cmd_net_route>:
{
 800ee9c:	b507      	push	{r0, r1, r2, lr}
	user_data.shell = shell;
 800ee9e:	9000      	str	r0, [sp, #0]
	net_if_foreach(iface_per_route_cb, &user_data);
 800eea0:	4669      	mov	r1, sp
 800eea2:	4803      	ldr	r0, [pc, #12]	; (800eeb0 <cmd_net_route+0x14>)
 800eea4:	f7fc fea6 	bl	800bbf4 <net_if_foreach>
}
 800eea8:	2000      	movs	r0, #0
 800eeaa:	b003      	add	sp, #12
 800eeac:	f85d fb04 	ldr.w	pc, [sp], #4
 800eeb0:	0800fc01 	.word	0x0800fc01

0800eeb4 <cmd_net_ipv6>:
{
 800eeb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	PR("IPv6 support                              : %s\n",
 800eeb6:	4d2a      	ldr	r5, [pc, #168]	; (800ef60 <cmd_net_ipv6+0xac>)
	PR("IPv6 fragmentation support                : %s\n",
 800eeb8:	4e2a      	ldr	r6, [pc, #168]	; (800ef64 <cmd_net_ipv6+0xb0>)
	PR("IPv6 support                              : %s\n",
 800eeba:	4a2b      	ldr	r2, [pc, #172]	; (800ef68 <cmd_net_ipv6+0xb4>)
{
 800eebc:	4604      	mov	r4, r0
	PR("IPv6 support                              : %s\n",
 800eebe:	462b      	mov	r3, r5
 800eec0:	2100      	movs	r1, #0
 800eec2:	f005 fa57 	bl	8014374 <shell_fprintf>
	PR("IPv6 fragmentation support                : %s\n",
 800eec6:	4633      	mov	r3, r6
 800eec8:	4620      	mov	r0, r4
 800eeca:	4a28      	ldr	r2, [pc, #160]	; (800ef6c <cmd_net_ipv6+0xb8>)
 800eecc:	2100      	movs	r1, #0
 800eece:	f005 fa51 	bl	8014374 <shell_fprintf>
	PR("Multicast Listener Discovery support      : %s\n",
 800eed2:	462b      	mov	r3, r5
 800eed4:	4620      	mov	r0, r4
 800eed6:	4a26      	ldr	r2, [pc, #152]	; (800ef70 <cmd_net_ipv6+0xbc>)
 800eed8:	2100      	movs	r1, #0
 800eeda:	f005 fa4b 	bl	8014374 <shell_fprintf>
	PR("Neighbor cache support                    : %s\n",
 800eede:	462b      	mov	r3, r5
 800eee0:	4620      	mov	r0, r4
 800eee2:	4a24      	ldr	r2, [pc, #144]	; (800ef74 <cmd_net_ipv6+0xc0>)
 800eee4:	2100      	movs	r1, #0
 800eee6:	f005 fa45 	bl	8014374 <shell_fprintf>
	PR("Neighbor discovery support                : %s\n",
 800eeea:	462b      	mov	r3, r5
 800eeec:	4620      	mov	r0, r4
 800eeee:	4a22      	ldr	r2, [pc, #136]	; (800ef78 <cmd_net_ipv6+0xc4>)
 800eef0:	2100      	movs	r1, #0
 800eef2:	f005 fa3f 	bl	8014374 <shell_fprintf>
	PR("Duplicate address detection (DAD) support : %s\n",
 800eef6:	462b      	mov	r3, r5
 800eef8:	4620      	mov	r0, r4
 800eefa:	4a20      	ldr	r2, [pc, #128]	; (800ef7c <cmd_net_ipv6+0xc8>)
 800eefc:	2100      	movs	r1, #0
 800eefe:	f005 fa39 	bl	8014374 <shell_fprintf>
	PR("Router advertisement RDNSS option support : %s\n",
 800ef02:	462b      	mov	r3, r5
 800ef04:	4620      	mov	r0, r4
 800ef06:	4a1e      	ldr	r2, [pc, #120]	; (800ef80 <cmd_net_ipv6+0xcc>)
 800ef08:	2100      	movs	r1, #0
 800ef0a:	f005 fa33 	bl	8014374 <shell_fprintf>
	PR("6lo header compression support            : %s\n",
 800ef0e:	4633      	mov	r3, r6
 800ef10:	4620      	mov	r0, r4
 800ef12:	4a1c      	ldr	r2, [pc, #112]	; (800ef84 <cmd_net_ipv6+0xd0>)
 800ef14:	2100      	movs	r1, #0
 800ef16:	f005 fa2d 	bl	8014374 <shell_fprintf>
	PR("Max number of IPv6 network interfaces "
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	2302      	movs	r3, #2
 800ef1e:	4a1a      	ldr	r2, [pc, #104]	; (800ef88 <cmd_net_ipv6+0xd4>)
 800ef20:	2100      	movs	r1, #0
 800ef22:	f005 fa27 	bl	8014374 <shell_fprintf>
	PR("Max number of unicast IPv6 addresses "
 800ef26:	4620      	mov	r0, r4
 800ef28:	2302      	movs	r3, #2
 800ef2a:	4a18      	ldr	r2, [pc, #96]	; (800ef8c <cmd_net_ipv6+0xd8>)
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	f005 fa21 	bl	8014374 <shell_fprintf>
	PR("Max number of multicast IPv6 addresses "
 800ef32:	4620      	mov	r0, r4
 800ef34:	2303      	movs	r3, #3
 800ef36:	4a16      	ldr	r2, [pc, #88]	; (800ef90 <cmd_net_ipv6+0xdc>)
 800ef38:	2100      	movs	r1, #0
 800ef3a:	f005 fa1b 	bl	8014374 <shell_fprintf>
	PR("Max number of IPv6 prefixes per network "
 800ef3e:	2302      	movs	r3, #2
 800ef40:	4a14      	ldr	r2, [pc, #80]	; (800ef94 <cmd_net_ipv6+0xe0>)
 800ef42:	4620      	mov	r0, r4
 800ef44:	2100      	movs	r1, #0
 800ef46:	f005 fa15 	bl	8014374 <shell_fprintf>
	user_data.shell = shell;
 800ef4a:	9400      	str	r4, [sp, #0]
	net_if_foreach(address_lifetime_cb, &user_data);
 800ef4c:	4669      	mov	r1, sp
	user_data.user_data = NULL;
 800ef4e:	2400      	movs	r4, #0
	net_if_foreach(address_lifetime_cb, &user_data);
 800ef50:	4811      	ldr	r0, [pc, #68]	; (800ef98 <cmd_net_ipv6+0xe4>)
	user_data.user_data = NULL;
 800ef52:	9401      	str	r4, [sp, #4]
	net_if_foreach(address_lifetime_cb, &user_data);
 800ef54:	f7fc fe4e 	bl	800bbf4 <net_if_foreach>
}
 800ef58:	4620      	mov	r0, r4
 800ef5a:	b002      	add	sp, #8
 800ef5c:	bd70      	pop	{r4, r5, r6, pc}
 800ef5e:	bf00      	nop
 800ef60:	0801a762 	.word	0x0801a762
 800ef64:	0801a76a 	.word	0x0801a76a
 800ef68:	0801c03c 	.word	0x0801c03c
 800ef6c:	0801c06c 	.word	0x0801c06c
 800ef70:	0801c09c 	.word	0x0801c09c
 800ef74:	0801c0cc 	.word	0x0801c0cc
 800ef78:	0801c0fc 	.word	0x0801c0fc
 800ef7c:	0801c12c 	.word	0x0801c12c
 800ef80:	0801c15c 	.word	0x0801c15c
 800ef84:	0801c18c 	.word	0x0801c18c
 800ef88:	0801c1bc 	.word	0x0801c1bc
 800ef8c:	0801c1ff 	.word	0x0801c1ff
 800ef90:	0801c242 	.word	0x0801c242
 800ef94:	0801c285 	.word	0x0801c285
 800ef98:	0800fc75 	.word	0x0800fc75

0800ef9c <nbr_address_get>:

#define NBR_ADDRESS_CMD &nbr_address

static void nbr_address_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
 800ef9c:	2300      	movs	r3, #0
{
 800ef9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	entry->handler = NULL;
 800efa0:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
 800efa2:	604b      	str	r3, [r1, #4]
	entry->subcmd = &nbr_address;
 800efa4:	4b0e      	ldr	r3, [pc, #56]	; (800efe0 <nbr_address_get+0x44>)
 800efa6:	608b      	str	r3, [r1, #8]
{
 800efa8:	460d      	mov	r5, r1
	if (idx == 0) {
 800efaa:	4604      	mov	r4, r0
 800efac:	b988      	cbnz	r0, 800efd2 <nbr_address_get+0x36>
		memset(nbr_address_buffer, 0, sizeof(nbr_address_buffer));
 800efae:	4601      	mov	r1, r0
 800efb0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800efb4:	480b      	ldr	r0, [pc, #44]	; (800efe4 <nbr_address_get+0x48>)
 800efb6:	f7f5 fcda 	bl	800496e <memset>
	net_ipv6_nbr_foreach(nbr_address_cb, &count);
 800efba:	a901      	add	r1, sp, #4
 800efbc:	480a      	ldr	r0, [pc, #40]	; (800efe8 <nbr_address_get+0x4c>)
	int count = 0;
 800efbe:	9401      	str	r4, [sp, #4]
	net_ipv6_nbr_foreach(nbr_address_cb, &count);
 800efc0:	f7fe fa1c 	bl	800d3fc <net_ipv6_nbr_foreach>
	if (!nbr_address_buffer[idx][0]) {
 800efc4:	2328      	movs	r3, #40	; 0x28
 800efc6:	4a07      	ldr	r2, [pc, #28]	; (800efe4 <nbr_address_get+0x48>)
 800efc8:	435c      	muls	r4, r3
 800efca:	1913      	adds	r3, r2, r4
 800efcc:	5d12      	ldrb	r2, [r2, r4]
 800efce:	b91a      	cbnz	r2, 800efd8 <nbr_address_get+0x3c>
 800efd0:	e001      	b.n	800efd6 <nbr_address_get+0x3a>
	if (idx >= CONFIG_NET_IPV6_MAX_NEIGHBORS) {
 800efd2:	2807      	cmp	r0, #7
 800efd4:	d9f6      	bls.n	800efc4 <nbr_address_get+0x28>
		return NULL;
 800efd6:	2300      	movs	r3, #0
	entry->syntax = set_nbr_address(idx);
 800efd8:	602b      	str	r3, [r5, #0]
}
 800efda:	b003      	add	sp, #12
 800efdc:	bd30      	pop	{r4, r5, pc}
 800efde:	bf00      	nop
 800efe0:	08019d0c 	.word	0x08019d0c
 800efe4:	20001c02 	.word	0x20001c02
 800efe8:	0800efed 	.word	0x0800efed

0800efec <nbr_address_cb>:
{
 800efec:	b538      	push	{r3, r4, r5, lr}
	if (*count >= CONFIG_NET_IPV6_MAX_NEIGHBORS) {
 800efee:	680d      	ldr	r5, [r1, #0]
 800eff0:	2d07      	cmp	r5, #7
{
 800eff2:	460c      	mov	r4, r1
	if (*count >= CONFIG_NET_IPV6_MAX_NEIGHBORS) {
 800eff4:	dc0f      	bgt.n	800f016 <nbr_address_cb+0x2a>
		 "%s", net_sprint_ipv6_addr(&net_ipv6_nbr_data(nbr)->addr));
 800eff6:	68c1      	ldr	r1, [r0, #12]
	snprintk(nbr_address_buffer[*count], NET_IPV6_ADDR_LEN,
 800eff8:	2002      	movs	r0, #2
 800effa:	3104      	adds	r1, #4
 800effc:	f7fd f86a 	bl	800c0d4 <net_sprint_addr>
 800f000:	4603      	mov	r3, r0
 800f002:	4805      	ldr	r0, [pc, #20]	; (800f018 <nbr_address_cb+0x2c>)
 800f004:	4a05      	ldr	r2, [pc, #20]	; (800f01c <nbr_address_cb+0x30>)
 800f006:	2128      	movs	r1, #40	; 0x28
 800f008:	fb01 0005 	mla	r0, r1, r5, r0
 800f00c:	f004 fbe5 	bl	80137da <snprintk>
	(*count)++;
 800f010:	6823      	ldr	r3, [r4, #0]
 800f012:	3301      	adds	r3, #1
 800f014:	6023      	str	r3, [r4, #0]
}
 800f016:	bd38      	pop	{r3, r4, r5, pc}
 800f018:	20001c02 	.word	0x20001c02
 800f01c:	0801d406 	.word	0x0801d406

0800f020 <cmd_net_mem>:
{
 800f020:	b510      	push	{r4, lr}
 800f022:	b086      	sub	sp, #24
 800f024:	4604      	mov	r4, r0
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
 800f026:	ab05      	add	r3, sp, #20
 800f028:	aa04      	add	r2, sp, #16
 800f02a:	a903      	add	r1, sp, #12
 800f02c:	a802      	add	r0, sp, #8
 800f02e:	f7fd fcad 	bl	800c98c <net_pkt_get_info>
	PR("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
 800f032:	2380      	movs	r3, #128	; 0x80
 800f034:	4620      	mov	r0, r4
 800f036:	4a1c      	ldr	r2, [pc, #112]	; (800f0a8 <cmd_net_mem+0x88>)
 800f038:	2100      	movs	r1, #0
 800f03a:	f005 f99b 	bl	8014374 <shell_fprintf>
	PR("Network buffer pools:\n");
 800f03e:	4620      	mov	r0, r4
 800f040:	4a1a      	ldr	r2, [pc, #104]	; (800f0ac <cmd_net_mem+0x8c>)
 800f042:	2100      	movs	r1, #0
 800f044:	f005 f996 	bl	8014374 <shell_fprintf>
	PR("Address\t\tTotal\tName\n");
 800f048:	4620      	mov	r0, r4
 800f04a:	4a19      	ldr	r2, [pc, #100]	; (800f0b0 <cmd_net_mem+0x90>)
 800f04c:	2100      	movs	r1, #0
 800f04e:	f005 f991 	bl	8014374 <shell_fprintf>
	PR("%p\t%d\tRX\n", rx, rx->num_blocks);
 800f052:	9b02      	ldr	r3, [sp, #8]
 800f054:	689a      	ldr	r2, [r3, #8]
 800f056:	9200      	str	r2, [sp, #0]
 800f058:	4620      	mov	r0, r4
 800f05a:	4a16      	ldr	r2, [pc, #88]	; (800f0b4 <cmd_net_mem+0x94>)
 800f05c:	2100      	movs	r1, #0
 800f05e:	f005 f989 	bl	8014374 <shell_fprintf>
	PR("%p\t%d\tTX\n", tx, tx->num_blocks);
 800f062:	9b03      	ldr	r3, [sp, #12]
 800f064:	689a      	ldr	r2, [r3, #8]
 800f066:	9200      	str	r2, [sp, #0]
 800f068:	4620      	mov	r0, r4
 800f06a:	4a13      	ldr	r2, [pc, #76]	; (800f0b8 <cmd_net_mem+0x98>)
 800f06c:	2100      	movs	r1, #0
 800f06e:	f005 f981 	bl	8014374 <shell_fprintf>
	PR("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
 800f072:	9b04      	ldr	r3, [sp, #16]
 800f074:	8a1a      	ldrh	r2, [r3, #16]
 800f076:	9200      	str	r2, [sp, #0]
 800f078:	4620      	mov	r0, r4
 800f07a:	4a10      	ldr	r2, [pc, #64]	; (800f0bc <cmd_net_mem+0x9c>)
 800f07c:	2100      	movs	r1, #0
 800f07e:	f005 f979 	bl	8014374 <shell_fprintf>
	PR("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
 800f082:	9b05      	ldr	r3, [sp, #20]
 800f084:	8a1a      	ldrh	r2, [r3, #16]
 800f086:	9200      	str	r2, [sp, #0]
 800f088:	4620      	mov	r0, r4
 800f08a:	4a0d      	ldr	r2, [pc, #52]	; (800f0c0 <cmd_net_mem+0xa0>)
 800f08c:	2100      	movs	r1, #0
 800f08e:	f005 f971 	bl	8014374 <shell_fprintf>
	PR_INFO("Set %s to enable %s support.\n",
 800f092:	4b0c      	ldr	r3, [pc, #48]	; (800f0c4 <cmd_net_mem+0xa4>)
 800f094:	9300      	str	r3, [sp, #0]
 800f096:	4620      	mov	r0, r4
 800f098:	4b0b      	ldr	r3, [pc, #44]	; (800f0c8 <cmd_net_mem+0xa8>)
 800f09a:	4a0c      	ldr	r2, [pc, #48]	; (800f0cc <cmd_net_mem+0xac>)
 800f09c:	2103      	movs	r1, #3
 800f09e:	f005 f969 	bl	8014374 <shell_fprintf>
}
 800f0a2:	2000      	movs	r0, #0
 800f0a4:	b006      	add	sp, #24
 800f0a6:	bd10      	pop	{r4, pc}
 800f0a8:	0801c2c8 	.word	0x0801c2c8
 800f0ac:	0801c2e2 	.word	0x0801c2e2
 800f0b0:	0801c2f9 	.word	0x0801c2f9
 800f0b4:	0801c30e 	.word	0x0801c30e
 800f0b8:	0801c318 	.word	0x0801c318
 800f0bc:	0801c322 	.word	0x0801c322
 800f0c0:	0801c331 	.word	0x0801c331
 800f0c4:	0801c35a 	.word	0x0801c35a
 800f0c8:	0801c340 	.word	0x0801c340
 800f0cc:	0801c549 	.word	0x0801c549

0800f0d0 <get_iface_idx>:
{
 800f0d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f0d2:	4605      	mov	r5, r0
	if (!index_str) {
 800f0d4:	460c      	mov	r4, r1
 800f0d6:	b939      	cbnz	r1, 800f0e8 <get_iface_idx+0x18>
		PR_WARNING("Interface index is missing.\n");
 800f0d8:	4a11      	ldr	r2, [pc, #68]	; (800f120 <get_iface_idx+0x50>)
 800f0da:	2104      	movs	r1, #4
 800f0dc:	f005 f94a 	bl	8014374 <shell_fprintf>
 800f0e0:	f06f 0015 	mvn.w	r0, #21
}
 800f0e4:	b003      	add	sp, #12
 800f0e6:	bd30      	pop	{r4, r5, pc}
	idx = strtol(index_str, &endptr, 10);
 800f0e8:	220a      	movs	r2, #10
 800f0ea:	a901      	add	r1, sp, #4
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	f7f3 fe05 	bl	8002cfc <strtol>
	if (*endptr != '\0') {
 800f0f2:	9b01      	ldr	r3, [sp, #4]
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	b143      	cbz	r3, 800f10a <get_iface_idx+0x3a>
		PR_WARNING("Invalid index %s\n", index_str);
 800f0f8:	4628      	mov	r0, r5
 800f0fa:	4623      	mov	r3, r4
 800f0fc:	4a09      	ldr	r2, [pc, #36]	; (800f124 <get_iface_idx+0x54>)
 800f0fe:	2104      	movs	r1, #4
 800f100:	f005 f938 	bl	8014374 <shell_fprintf>
		return -ENOENT;
 800f104:	f06f 0001 	mvn.w	r0, #1
 800f108:	e7ec      	b.n	800f0e4 <get_iface_idx+0x14>
	if (idx < 0 || idx > 255) {
 800f10a:	28ff      	cmp	r0, #255	; 0xff
 800f10c:	d9ea      	bls.n	800f0e4 <get_iface_idx+0x14>
		PR_WARNING("Invalid index %d\n", idx);
 800f10e:	4603      	mov	r3, r0
 800f110:	4a05      	ldr	r2, [pc, #20]	; (800f128 <get_iface_idx+0x58>)
 800f112:	4628      	mov	r0, r5
 800f114:	2104      	movs	r1, #4
 800f116:	f005 f92d 	bl	8014374 <shell_fprintf>
		return -ERANGE;
 800f11a:	f06f 0021 	mvn.w	r0, #33	; 0x21
 800f11e:	e7e1      	b.n	800f0e4 <get_iface_idx+0x14>
 800f120:	0801c5a7 	.word	0x0801c5a7
 800f124:	0801c5c4 	.word	0x0801c5c4
 800f128:	0801c5d6 	.word	0x0801c5d6

0800f12c <cmd_net_iface>:
{
 800f12c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (argv[1]) {
 800f12e:	6851      	ldr	r1, [r2, #4]
{
 800f130:	4604      	mov	r4, r0
	if (argv[1]) {
 800f132:	b181      	cbz	r1, 800f156 <cmd_net_iface+0x2a>
		idx = get_iface_idx(shell, argv[1]);
 800f134:	f7ff ffcc 	bl	800f0d0 <get_iface_idx>
		if (idx < 0) {
 800f138:	1e05      	subs	r5, r0, #0
 800f13a:	db09      	blt.n	800f150 <cmd_net_iface+0x24>
		iface = net_if_get_by_index(idx);
 800f13c:	f7fc fd36 	bl	800bbac <net_if_get_by_index>
		if (!iface) {
 800f140:	4601      	mov	r1, r0
 800f142:	b940      	cbnz	r0, 800f156 <cmd_net_iface+0x2a>
			PR_WARNING("No such interface in index %d\n", idx);
 800f144:	462b      	mov	r3, r5
 800f146:	4a08      	ldr	r2, [pc, #32]	; (800f168 <cmd_net_iface+0x3c>)
 800f148:	2104      	movs	r1, #4
 800f14a:	4620      	mov	r0, r4
 800f14c:	f005 f912 	bl	8014374 <shell_fprintf>
			return -ENOEXEC;
 800f150:	f06f 0007 	mvn.w	r0, #7
 800f154:	e006      	b.n	800f164 <cmd_net_iface+0x38>
	user_data.user_data = iface;
 800f156:	e9cd 4100 	strd	r4, r1, [sp]
	net_if_foreach(iface_cb, &user_data);
 800f15a:	4804      	ldr	r0, [pc, #16]	; (800f16c <cmd_net_iface+0x40>)
 800f15c:	4669      	mov	r1, sp
 800f15e:	f7fc fd49 	bl	800bbf4 <net_if_foreach>
	return 0;
 800f162:	2000      	movs	r0, #0
}
 800f164:	b003      	add	sp, #12
 800f166:	bd30      	pop	{r4, r5, pc}
 800f168:	0801bf90 	.word	0x0801bf90
 800f16c:	0800f399 	.word	0x0800f399

0800f170 <cmd_net_iface_down>:
{
 800f170:	b573      	push	{r0, r1, r4, r5, r6, lr}
	idx = get_iface_idx(shell, argv[1]);
 800f172:	6851      	ldr	r1, [r2, #4]
{
 800f174:	4605      	mov	r5, r0
	idx = get_iface_idx(shell, argv[1]);
 800f176:	f7ff ffab 	bl	800f0d0 <get_iface_idx>
	if (idx < 0) {
 800f17a:	1e06      	subs	r6, r0, #0
 800f17c:	db08      	blt.n	800f190 <cmd_net_iface_down+0x20>
	iface = net_if_get_by_index(idx);
 800f17e:	f7fc fd15 	bl	800bbac <net_if_get_by_index>
	if (!iface) {
 800f182:	b940      	cbnz	r0, 800f196 <cmd_net_iface_down+0x26>
		PR_WARNING("No such interface in index %d\n", idx);
 800f184:	4633      	mov	r3, r6
 800f186:	4a0e      	ldr	r2, [pc, #56]	; (800f1c0 <cmd_net_iface_down+0x50>)
 800f188:	2104      	movs	r1, #4
 800f18a:	4628      	mov	r0, r5
 800f18c:	f005 f8f2 	bl	8014374 <shell_fprintf>
		return -ENOEXEC;
 800f190:	f06f 0407 	mvn.w	r4, #7
 800f194:	e011      	b.n	800f1ba <cmd_net_iface_down+0x4a>
	ret = net_if_down(iface);
 800f196:	f7fc fd77 	bl	800bc88 <net_if_down>
	if (ret) {
 800f19a:	4604      	mov	r4, r0
 800f19c:	b138      	cbz	r0, 800f1ae <cmd_net_iface_down+0x3e>
		PR_WARNING("Cannot take interface %d down (%d)\n", idx, ret);
 800f19e:	9000      	str	r0, [sp, #0]
 800f1a0:	4633      	mov	r3, r6
 800f1a2:	4a08      	ldr	r2, [pc, #32]	; (800f1c4 <cmd_net_iface_down+0x54>)
 800f1a4:	2104      	movs	r1, #4
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	f005 f8e4 	bl	8014374 <shell_fprintf>
		return -ENOEXEC;
 800f1ac:	e7f0      	b.n	800f190 <cmd_net_iface_down+0x20>
		PR("Interface %d is down\n", idx);
 800f1ae:	4601      	mov	r1, r0
 800f1b0:	4633      	mov	r3, r6
 800f1b2:	4a05      	ldr	r2, [pc, #20]	; (800f1c8 <cmd_net_iface_down+0x58>)
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	f005 f8dd 	bl	8014374 <shell_fprintf>
}
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	b002      	add	sp, #8
 800f1be:	bd70      	pop	{r4, r5, r6, pc}
 800f1c0:	0801bf90 	.word	0x0801bf90
 800f1c4:	0801bfaf 	.word	0x0801bfaf
 800f1c8:	0801bfd3 	.word	0x0801bfd3

0800f1cc <cmd_net_nbr>:
{
 800f1cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int count = 0;
 800f1ce:	2300      	movs	r3, #0
	user_data.shell = shell;
 800f1d0:	e9cd 3001 	strd	r3, r0, [sp, #4]
	net_ipv6_nbr_foreach(nbr_cb, &user_data);
 800f1d4:	a902      	add	r1, sp, #8
	user_data.user_data = &count;
 800f1d6:	ab01      	add	r3, sp, #4
{
 800f1d8:	4604      	mov	r4, r0
	net_ipv6_nbr_foreach(nbr_cb, &user_data);
 800f1da:	4806      	ldr	r0, [pc, #24]	; (800f1f4 <cmd_net_nbr+0x28>)
	user_data.user_data = &count;
 800f1dc:	9303      	str	r3, [sp, #12]
	net_ipv6_nbr_foreach(nbr_cb, &user_data);
 800f1de:	f7fe f90d 	bl	800d3fc <net_ipv6_nbr_foreach>
	if (count == 0) {
 800f1e2:	9901      	ldr	r1, [sp, #4]
 800f1e4:	b919      	cbnz	r1, 800f1ee <cmd_net_nbr+0x22>
		PR("No neighbors.\n");
 800f1e6:	4a04      	ldr	r2, [pc, #16]	; (800f1f8 <cmd_net_nbr+0x2c>)
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f005 f8c3 	bl	8014374 <shell_fprintf>
}
 800f1ee:	2000      	movs	r0, #0
 800f1f0:	b004      	add	sp, #16
 800f1f2:	bd10      	pop	{r4, pc}
 800f1f4:	0800faf5 	.word	0x0800faf5
 800f1f8:	0801c36d 	.word	0x0801c36d

0800f1fc <cmd_net_conn>:
{
 800f1fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int count = 0;
 800f1fe:	2100      	movs	r1, #0
	PR("     Context   \tIface         Flags Local           \tRemote\n");
 800f200:	4a0a      	ldr	r2, [pc, #40]	; (800f22c <cmd_net_conn+0x30>)
	int count = 0;
 800f202:	9101      	str	r1, [sp, #4]
{
 800f204:	4604      	mov	r4, r0
	PR("     Context   \tIface         Flags Local           \tRemote\n");
 800f206:	f005 f8b5 	bl	8014374 <shell_fprintf>
	user_data.user_data = &count;
 800f20a:	ab01      	add	r3, sp, #4
	net_context_foreach(context_cb, &user_data);
 800f20c:	a902      	add	r1, sp, #8
 800f20e:	4808      	ldr	r0, [pc, #32]	; (800f230 <cmd_net_conn+0x34>)
	user_data.shell = shell;
 800f210:	9402      	str	r4, [sp, #8]
	user_data.user_data = &count;
 800f212:	9303      	str	r3, [sp, #12]
	net_context_foreach(context_cb, &user_data);
 800f214:	f7fd fb72 	bl	800c8fc <net_context_foreach>
	if (count == 0) {
 800f218:	9901      	ldr	r1, [sp, #4]
 800f21a:	b919      	cbnz	r1, 800f224 <cmd_net_conn+0x28>
		PR("No connections\n");
 800f21c:	4a05      	ldr	r2, [pc, #20]	; (800f234 <cmd_net_conn+0x38>)
 800f21e:	4620      	mov	r0, r4
 800f220:	f005 f8a8 	bl	8014374 <shell_fprintf>
}
 800f224:	2000      	movs	r0, #0
 800f226:	b004      	add	sp, #16
 800f228:	bd10      	pop	{r4, pc}
 800f22a:	bf00      	nop
 800f22c:	0801beca 	.word	0x0801beca
 800f230:	0800f239 	.word	0x0800f239
 800f234:	0801bf07 	.word	0x0801bf07

0800f238 <context_cb>:
{
 800f238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f23c:	4604      	mov	r4, r0
 800f23e:	b0a1      	sub	sp, #132	; 0x84
	int *count = data->user_data;
 800f240:	e9d1 9700 	ldrd	r9, r7, [r1]
	char addr_remote[ADDR_LEN + 7] = "";
 800f244:	222b      	movs	r2, #43	; 0x2b
 800f246:	2100      	movs	r1, #0
 800f248:	a815      	add	r0, sp, #84	; 0x54
 800f24a:	9114      	str	r1, [sp, #80]	; 0x50
 800f24c:	f7f5 fb8f 	bl	800496e <memset>
	if (context->local.family == AF_INET6) {
 800f250:	8ba5      	ldrh	r5, [r4, #28]
 800f252:	2d02      	cmp	r5, #2
 800f254:	ae08      	add	r6, sp, #32
 800f256:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800f25a:	d157      	bne.n	800f30c <context_cb+0xd4>
		snprintk(addr_local, local_len, "[%s]:%u",
 800f25c:	6a21      	ldr	r1, [r4, #32]
 800f25e:	4628      	mov	r0, r5
 800f260:	f7fc ff38 	bl	800c0d4 <net_sprint_addr>
			 ntohs(net_sin6_ptr(&context->local)->sin6_port));
 800f264:	8be2      	ldrh	r2, [r4, #30]
 800f266:	0213      	lsls	r3, r2, #8
 800f268:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		snprintk(addr_local, local_len, "[%s]:%u",
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	4a36      	ldr	r2, [pc, #216]	; (800f348 <context_cb+0x110>)
 800f270:	9300      	str	r3, [sp, #0]
 800f272:	212f      	movs	r1, #47	; 0x2f
 800f274:	4603      	mov	r3, r0
 800f276:	4630      	mov	r0, r6
 800f278:	f004 faaf 	bl	80137da <snprintk>
		snprintk(addr_remote, remote_len, "[%s]:%u",
 800f27c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 800f280:	4628      	mov	r0, r5
 800f282:	f7fc ff27 	bl	800c0d4 <net_sprint_addr>
			 ntohs(net_sin6(&context->remote)->sin6_port));
 800f286:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800f288:	0213      	lsls	r3, r2, #8
 800f28a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		snprintk(addr_remote, remote_len, "[%s]:%u",
 800f28e:	b29b      	uxth	r3, r3
 800f290:	9300      	str	r3, [sp, #0]
 800f292:	4a2d      	ldr	r2, [pc, #180]	; (800f348 <context_cb+0x110>)
 800f294:	4603      	mov	r3, r0
 800f296:	212f      	movs	r1, #47	; 0x2f
 800f298:	4640      	mov	r0, r8
 800f29a:	f004 fa9e 	bl	80137da <snprintk>
	return net_if_get_by_index(context->iface);
 800f29e:	f994 0080 	ldrsb.w	r0, [r4, #128]	; 0x80
	PR("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
 800f2a2:	683d      	ldr	r5, [r7, #0]
 800f2a4:	f7fc fc82 	bl	800bbac <net_if_get_by_index>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 800f2a8:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
 800f2ac:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 800f2b0:	2b02      	cmp	r3, #2
 800f2b2:	f105 0501 	add.w	r5, r5, #1
 800f2b6:	d03f      	beq.n	800f338 <context_cb+0x100>
 800f2b8:	2b01      	cmp	r3, #1
 800f2ba:	bf0c      	ite	eq
 800f2bc:	2134      	moveq	r1, #52	; 0x34
 800f2be:	2120      	movne	r1, #32
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
 800f2c0:	f3c2 1281 	ubfx	r2, r2, #6, #2
 800f2c4:	2a02      	cmp	r2, #2
 800f2c6:	d039      	beq.n	800f33c <context_cb+0x104>
 800f2c8:	2a01      	cmp	r2, #1
 800f2ca:	b2d3      	uxtb	r3, r2
 800f2cc:	d038      	beq.n	800f340 <context_cb+0x108>
 800f2ce:	2b03      	cmp	r3, #3
 800f2d0:	bf0c      	ite	eq
 800f2d2:	2352      	moveq	r3, #82	; 0x52
 800f2d4:	2320      	movne	r3, #32
 800f2d6:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
 800f2da:	2a11      	cmp	r2, #17
 800f2dc:	d032      	beq.n	800f344 <context_cb+0x10c>
 800f2de:	2a06      	cmp	r2, #6
 800f2e0:	bf0c      	ite	eq
 800f2e2:	2254      	moveq	r2, #84	; 0x54
 800f2e4:	2220      	movne	r2, #32
 800f2e6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f2ea:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800f2ee:	462b      	mov	r3, r5
 800f2f0:	e9cd 6805 	strd	r6, r8, [sp, #20]
 800f2f4:	9400      	str	r4, [sp, #0]
 800f2f6:	4a15      	ldr	r2, [pc, #84]	; (800f34c <context_cb+0x114>)
 800f2f8:	2100      	movs	r1, #0
 800f2fa:	4648      	mov	r0, r9
 800f2fc:	f005 f83a 	bl	8014374 <shell_fprintf>
	(*count)++;
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	3301      	adds	r3, #1
 800f304:	603b      	str	r3, [r7, #0]
}
 800f306:	b021      	add	sp, #132	; 0x84
 800f308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (context->local.family == AF_UNSPEC) {
 800f30c:	b92d      	cbnz	r5, 800f31a <context_cb+0xe2>
		snprintk(addr_local, local_len, "AF_UNSPEC");
 800f30e:	4a10      	ldr	r2, [pc, #64]	; (800f350 <context_cb+0x118>)
		snprintk(addr_local, local_len, "AF_PACKET");
 800f310:	212f      	movs	r1, #47	; 0x2f
 800f312:	4630      	mov	r0, r6
 800f314:	f004 fa61 	bl	80137da <snprintk>
 800f318:	e7c1      	b.n	800f29e <context_cb+0x66>
	} else if (context->local.family == AF_PACKET) {
 800f31a:	2d03      	cmp	r5, #3
 800f31c:	d101      	bne.n	800f322 <context_cb+0xea>
		snprintk(addr_local, local_len, "AF_PACKET");
 800f31e:	4a0d      	ldr	r2, [pc, #52]	; (800f354 <context_cb+0x11c>)
 800f320:	e7f6      	b.n	800f310 <context_cb+0xd8>
	} else if (context->local.family == AF_CAN) {
 800f322:	2d04      	cmp	r5, #4
 800f324:	d101      	bne.n	800f32a <context_cb+0xf2>
		snprintk(addr_local, local_len, "AF_CAN");
 800f326:	4a0c      	ldr	r2, [pc, #48]	; (800f358 <context_cb+0x120>)
 800f328:	e7f2      	b.n	800f310 <context_cb+0xd8>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
 800f32a:	462b      	mov	r3, r5
 800f32c:	4a0b      	ldr	r2, [pc, #44]	; (800f35c <context_cb+0x124>)
 800f32e:	212f      	movs	r1, #47	; 0x2f
 800f330:	4630      	mov	r0, r6
 800f332:	f004 fa52 	bl	80137da <snprintk>
 800f336:	e7b2      	b.n	800f29e <context_cb+0x66>
	PR("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
 800f338:	2136      	movs	r1, #54	; 0x36
 800f33a:	e7c1      	b.n	800f2c0 <context_cb+0x88>
 800f33c:	2344      	movs	r3, #68	; 0x44
 800f33e:	e7ca      	b.n	800f2d6 <context_cb+0x9e>
 800f340:	2353      	movs	r3, #83	; 0x53
 800f342:	e7c8      	b.n	800f2d6 <context_cb+0x9e>
 800f344:	2255      	movs	r2, #85	; 0x55
 800f346:	e7ce      	b.n	800f2e6 <context_cb+0xae>
 800f348:	0801c571 	.word	0x0801c571
 800f34c:	0801c584 	.word	0x0801c584
 800f350:	0801b9e4 	.word	0x0801b9e4
 800f354:	0801b9ff 	.word	0x0801b9ff
 800f358:	0801ba09 	.word	0x0801ba09
 800f35c:	0801c579 	.word	0x0801c579

0800f360 <cmd_net_arp_flush>:
 800f360:	b507      	push	{r0, r1, r2, lr}
 800f362:	4b05      	ldr	r3, [pc, #20]	; (800f378 <cmd_net_arp_flush+0x18>)
 800f364:	9300      	str	r3, [sp, #0]
 800f366:	4a05      	ldr	r2, [pc, #20]	; (800f37c <cmd_net_arp_flush+0x1c>)
 800f368:	4b05      	ldr	r3, [pc, #20]	; (800f380 <cmd_net_arp_flush+0x20>)
 800f36a:	2103      	movs	r1, #3
 800f36c:	f005 f802 	bl	8014374 <shell_fprintf>
 800f370:	2000      	movs	r0, #0
 800f372:	b003      	add	sp, #12
 800f374:	f85d fb04 	ldr.w	pc, [sp], #4
 800f378:	0801bec6 	.word	0x0801bec6
 800f37c:	0801c549 	.word	0x0801c549
 800f380:	0801be78 	.word	0x0801be78

0800f384 <cmd_net_dns>:
 800f384:	b508      	push	{r3, lr}
 800f386:	4a03      	ldr	r2, [pc, #12]	; (800f394 <cmd_net_dns+0x10>)
 800f388:	2103      	movs	r1, #3
 800f38a:	f004 fff3 	bl	8014374 <shell_fprintf>
 800f38e:	2000      	movs	r0, #0
 800f390:	bd08      	pop	{r3, pc}
 800f392:	bf00      	nop
 800f394:	0801bf38 	.word	0x0801bf38

0800f398 <iface_cb>:
{
 800f398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (data->user_data && data->user_data != iface) {
 800f39c:	684b      	ldr	r3, [r1, #4]
{
 800f39e:	b085      	sub	sp, #20
 800f3a0:	4606      	mov	r6, r0
	if (data->user_data && data->user_data != iface) {
 800f3a2:	b383      	cbz	r3, 800f406 <iface_cb+0x6e>
 800f3a4:	4283      	cmp	r3, r0
 800f3a6:	f040 8173 	bne.w	800f690 <iface_cb+0x2f8>
	return iface->if_dev->l2;
 800f3aa:	6833      	ldr	r3, [r6, #0]
			*extra = "========";
 800f3ac:	4dba      	ldr	r5, [pc, #744]	; (800f698 <iface_cb+0x300>)
	if (net_if_l2(iface) == &NET_L2_GET_NAME(ETHERNET)) {
 800f3ae:	685a      	ldr	r2, [r3, #4]
			*extra = "========";
 800f3b0:	4bba      	ldr	r3, [pc, #744]	; (800f69c <iface_cb+0x304>)
 800f3b2:	4fbb      	ldr	r7, [pc, #748]	; (800f6a0 <iface_cb+0x308>)
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	4bbb      	ldr	r3, [pc, #748]	; (800f6a4 <iface_cb+0x30c>)
 800f3b8:	bf08      	it	eq
 800f3ba:	461d      	moveq	r5, r3
 800f3bc:	4bba      	ldr	r3, [pc, #744]	; (800f6a8 <iface_cb+0x310>)
 800f3be:	bf08      	it	eq
 800f3c0:	461f      	moveq	r7, r3
	PR("\nInterface %p (%s) [%d]\n", iface, iface2str(iface, &extra),
 800f3c2:	4630      	mov	r0, r6
	const struct shell *shell = data->shell;
 800f3c4:	680c      	ldr	r4, [r1, #0]
	PR("\nInterface %p (%s) [%d]\n", iface, iface2str(iface, &extra),
 800f3c6:	f7fc fc03 	bl	800bbd0 <net_if_get_by_iface>
 800f3ca:	4633      	mov	r3, r6
 800f3cc:	e9cd 7000 	strd	r7, r0, [sp]
 800f3d0:	4ab6      	ldr	r2, [pc, #728]	; (800f6ac <iface_cb+0x314>)
 800f3d2:	2100      	movs	r1, #0
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	f004 ffcd 	bl	8014374 <shell_fprintf>
	PR("===========================%s\n", extra);
 800f3da:	462b      	mov	r3, r5
 800f3dc:	4620      	mov	r0, r4
 800f3de:	4ab4      	ldr	r2, [pc, #720]	; (800f6b0 <iface_cb+0x318>)
 800f3e0:	2100      	movs	r1, #0
 800f3e2:	f004 ffc7 	bl	8014374 <shell_fprintf>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800f3e6:	6833      	ldr	r3, [r6, #0]
 800f3e8:	f3bf 8f5b 	dmb	ish
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	f3bf 8f5b 	dmb	ish
	if (!net_if_is_up(iface)) {
 800f3f2:	07d8      	lsls	r0, r3, #31
 800f3f4:	d40c      	bmi.n	800f410 <iface_cb+0x78>
		PR_INFO("Interface is down.\n");
 800f3f6:	4aaf      	ldr	r2, [pc, #700]	; (800f6b4 <iface_cb+0x31c>)
 800f3f8:	2103      	movs	r1, #3
 800f3fa:	4620      	mov	r0, r4
}
 800f3fc:	b005      	add	sp, #20
 800f3fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		PR_INFO("Interface is down.\n");
 800f402:	f004 bfb7 	b.w	8014374 <shell_fprintf>
	if (!iface) {
 800f406:	2800      	cmp	r0, #0
 800f408:	d1cf      	bne.n	800f3aa <iface_cb+0x12>
		*extra = "==============";
 800f40a:	4da3      	ldr	r5, [pc, #652]	; (800f698 <iface_cb+0x300>)
	return "<unknown type>";
 800f40c:	4fa4      	ldr	r7, [pc, #656]	; (800f6a0 <iface_cb+0x308>)
 800f40e:	e7d8      	b.n	800f3c2 <iface_cb+0x2a>
	if (net_if_get_link_addr(iface) &&
 800f410:	6831      	ldr	r1, [r6, #0]
 800f412:	f111 0f10 	cmn.w	r1, #16
 800f416:	d00c      	beq.n	800f432 <iface_cb+0x9a>
	    net_if_get_link_addr(iface)->addr) {
 800f418:	6908      	ldr	r0, [r1, #16]
	if (net_if_get_link_addr(iface) &&
 800f41a:	b150      	cbz	r0, 800f432 <iface_cb+0x9a>
 800f41c:	2318      	movs	r3, #24
 800f41e:	4aa6      	ldr	r2, [pc, #664]	; (800f6b8 <iface_cb+0x320>)
 800f420:	7d09      	ldrb	r1, [r1, #20]
 800f422:	f7fc fd53 	bl	800becc <net_sprint_ll_addr_buf>
		PR("Link addr : %s\n",
 800f426:	4aa5      	ldr	r2, [pc, #660]	; (800f6bc <iface_cb+0x324>)
 800f428:	4603      	mov	r3, r0
 800f42a:	2100      	movs	r1, #0
 800f42c:	4620      	mov	r0, r4
 800f42e:	f004 ffa1 	bl	8014374 <shell_fprintf>
	return iface->if_dev->mtu;
 800f432:	6833      	ldr	r3, [r6, #0]
	PR("MTU       : %d\n", net_if_get_mtu(iface));
 800f434:	4aa2      	ldr	r2, [pc, #648]	; (800f6c0 <iface_cb+0x328>)
 800f436:	8b1b      	ldrh	r3, [r3, #24]
 800f438:	2100      	movs	r1, #0
 800f43a:	4620      	mov	r0, r4
 800f43c:	f004 ff9a 	bl	8014374 <shell_fprintf>
	return iface->if_dev->l2;
 800f440:	6833      	ldr	r3, [r6, #0]
	if (net_if_l2(iface) == &NET_L2_GET_NAME(ETHERNET)) {
 800f442:	685a      	ldr	r2, [r3, #4]
 800f444:	4b95      	ldr	r3, [pc, #596]	; (800f69c <iface_cb+0x304>)
 800f446:	429a      	cmp	r2, r3
 800f448:	d120      	bne.n	800f48c <iface_cb+0xf4>
		PR("Ethernet capabilities supported:\n");
 800f44a:	4620      	mov	r0, r4
 800f44c:	4a9d      	ldr	r2, [pc, #628]	; (800f6c4 <iface_cb+0x32c>)
 800f44e:	2100      	movs	r1, #0
 800f450:	f004 ff90 	bl	8014374 <shell_fprintf>
	return iface->if_dev->dev;
 800f454:	6833      	ldr	r3, [r6, #0]
 800f456:	6818      	ldr	r0, [r3, #0]
enum ethernet_hw_caps net_eth_get_hw_capabilities(struct net_if *iface)
{
	const struct ethernet_api *eth =
		(struct ethernet_api *)net_if_get_device(iface)->driver_api;

	if (!eth->get_capabilities) {
 800f458:	6843      	ldr	r3, [r0, #4]
 800f45a:	68dd      	ldr	r5, [r3, #12]
 800f45c:	b10d      	cbz	r5, 800f462 <iface_cb+0xca>
		return (enum ethernet_hw_caps)0;
	}

	return eth->get_capabilities(net_if_get_device(iface));
 800f45e:	47a8      	blx	r5
 800f460:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(eth_hw_caps); i++) {
 800f462:	4f99      	ldr	r7, [pc, #612]	; (800f6c8 <iface_cb+0x330>)
			PR("\t%s\n", eth_hw_caps[i].description);
 800f464:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 800f710 <iface_cb+0x378>
	for (i = 0; i < ARRAY_SIZE(eth_hw_caps); i++) {
 800f468:	f04f 0800 	mov.w	r8, #0
		if (caps & eth_hw_caps[i].capability) {
 800f46c:	883b      	ldrh	r3, [r7, #0]
 800f46e:	421d      	tst	r5, r3
 800f470:	d005      	beq.n	800f47e <iface_cb+0xe6>
			PR("\t%s\n", eth_hw_caps[i].description);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	464a      	mov	r2, r9
 800f476:	2100      	movs	r1, #0
 800f478:	4620      	mov	r0, r4
 800f47a:	f004 ff7b 	bl	8014374 <shell_fprintf>
	for (i = 0; i < ARRAY_SIZE(eth_hw_caps); i++) {
 800f47e:	f108 0801 	add.w	r8, r8, #1
 800f482:	f1b8 0f0e 	cmp.w	r8, #14
 800f486:	f107 0708 	add.w	r7, r7, #8
 800f48a:	d1ef      	bne.n	800f46c <iface_cb+0xd4>
	PR("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
 800f48c:	2302      	movs	r3, #2
 800f48e:	4a8f      	ldr	r2, [pc, #572]	; (800f6cc <iface_cb+0x334>)
	ipv6 = iface->config.ip.ipv6;
 800f490:	6875      	ldr	r5, [r6, #4]
		PR("\t%s %s %s%s%s\n",
 800f492:	f8df a24c 	ldr.w	sl, [pc, #588]	; 800f6e0 <iface_cb+0x348>
 800f496:	f8df b27c 	ldr.w	fp, [pc, #636]	; 800f714 <iface_cb+0x37c>
	PR("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
 800f49a:	2100      	movs	r1, #0
 800f49c:	4620      	mov	r0, r4
 800f49e:	f004 ff69 	bl	8014374 <shell_fprintf>
	count = 0;
 800f4a2:	2700      	movs	r7, #0
 800f4a4:	f105 0904 	add.w	r9, r5, #4
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_ADDR; i++) {
 800f4a8:	46b8      	mov	r8, r7
 800f4aa:	b115      	cbz	r5, 800f4b2 <iface_cb+0x11a>
 800f4ac:	f1b8 0f02 	cmp.w	r8, #2
 800f4b0:	d176      	bne.n	800f5a0 <iface_cb+0x208>
	if (count == 0) {
 800f4b2:	b927      	cbnz	r7, 800f4be <iface_cb+0x126>
		PR("\t<none>\n");
 800f4b4:	4a86      	ldr	r2, [pc, #536]	; (800f6d0 <iface_cb+0x338>)
 800f4b6:	4639      	mov	r1, r7
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	f004 ff5b 	bl	8014374 <shell_fprintf>
	PR("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
 800f4be:	2303      	movs	r3, #3
 800f4c0:	4a84      	ldr	r2, [pc, #528]	; (800f6d4 <iface_cb+0x33c>)
		PR("\t%s\n", net_sprint_ipv6_addr(&mcast->address.in6_addr));
 800f4c2:	f8df b24c 	ldr.w	fp, [pc, #588]	; 800f710 <iface_cb+0x378>
	PR("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
 800f4c6:	2100      	movs	r1, #0
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	f004 ff53 	bl	8014374 <shell_fprintf>
	count = 0;
 800f4ce:	2700      	movs	r7, #0
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_MADDR; i++) {
 800f4d0:	46b8      	mov	r8, r7
		if (!mcast->is_used) {
 800f4d2:	f04f 0918 	mov.w	r9, #24
		PR("\t%s\n", net_sprint_ipv6_addr(&mcast->address.in6_addr));
 800f4d6:	f105 0a64 	add.w	sl, r5, #100	; 0x64
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_MADDR; i++) {
 800f4da:	b11d      	cbz	r5, 800f4e4 <iface_cb+0x14c>
 800f4dc:	f1b8 0f03 	cmp.w	r8, #3
 800f4e0:	f040 809c 	bne.w	800f61c <iface_cb+0x284>
	if (count == 0) {
 800f4e4:	b927      	cbnz	r7, 800f4f0 <iface_cb+0x158>
		PR("\t<none>\n");
 800f4e6:	4a7a      	ldr	r2, [pc, #488]	; (800f6d0 <iface_cb+0x338>)
 800f4e8:	4639      	mov	r1, r7
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f004 ff42 	bl	8014374 <shell_fprintf>
	PR("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
 800f4f0:	2302      	movs	r3, #2
 800f4f2:	4a79      	ldr	r2, [pc, #484]	; (800f6d8 <iface_cb+0x340>)
		PR("\t%s/%d%s\n",
 800f4f4:	f8df b220 	ldr.w	fp, [pc, #544]	; 800f718 <iface_cb+0x380>
	PR("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
 800f4f8:	2100      	movs	r1, #0
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	f004 ff3a 	bl	8014374 <shell_fprintf>
	count = 0;
 800f500:	2700      	movs	r7, #0
 800f502:	f105 09b8 	add.w	r9, r5, #184	; 0xb8
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_PREFIX; i++) {
 800f506:	46b8      	mov	r8, r7
 800f508:	b11d      	cbz	r5, 800f512 <iface_cb+0x17a>
 800f50a:	f1b8 0f02 	cmp.w	r8, #2
 800f50e:	f040 809a 	bne.w	800f646 <iface_cb+0x2ae>
	if (count == 0) {
 800f512:	b927      	cbnz	r7, 800f51e <iface_cb+0x186>
		PR("\t<none>\n");
 800f514:	4a6e      	ldr	r2, [pc, #440]	; (800f6d0 <iface_cb+0x338>)
 800f516:	4639      	mov	r1, r7
 800f518:	4620      	mov	r0, r4
 800f51a:	f004 ff2b 	bl	8014374 <shell_fprintf>
	router = net_if_ipv6_router_find_default(iface, NULL);
 800f51e:	4630      	mov	r0, r6
 800f520:	2100      	movs	r1, #0
 800f522:	f7fc f9a1 	bl	800b868 <net_if_ipv6_router_find_default>
	if (router) {
 800f526:	4606      	mov	r6, r0
 800f528:	b1c0      	cbz	r0, 800f55c <iface_cb+0x1c4>
		PR("IPv6 default router :\n");
 800f52a:	4a6c      	ldr	r2, [pc, #432]	; (800f6dc <iface_cb+0x344>)
 800f52c:	2100      	movs	r1, #0
 800f52e:	4620      	mov	r0, r4
 800f530:	f004 ff20 	bl	8014374 <shell_fprintf>
		PR("\t%s%s\n",
 800f534:	f106 0108 	add.w	r1, r6, #8
 800f538:	2002      	movs	r0, #2
 800f53a:	f7fc fdcb 	bl	800c0d4 <net_sprint_addr>
 800f53e:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
 800f542:	4a67      	ldr	r2, [pc, #412]	; (800f6e0 <iface_cb+0x348>)
 800f544:	f013 0f04 	tst.w	r3, #4
 800f548:	4b66      	ldr	r3, [pc, #408]	; (800f6e4 <iface_cb+0x34c>)
 800f54a:	bf08      	it	eq
 800f54c:	4613      	moveq	r3, r2
 800f54e:	9300      	str	r3, [sp, #0]
 800f550:	4a65      	ldr	r2, [pc, #404]	; (800f6e8 <iface_cb+0x350>)
 800f552:	4603      	mov	r3, r0
 800f554:	2100      	movs	r1, #0
 800f556:	4620      	mov	r0, r4
 800f558:	f004 ff0c 	bl	8014374 <shell_fprintf>
	if (ipv6) {
 800f55c:	2d00      	cmp	r5, #0
 800f55e:	f000 8097 	beq.w	800f690 <iface_cb+0x2f8>
		PR("IPv6 hop limit           : %d\n",
 800f562:	f895 310d 	ldrb.w	r3, [r5, #269]	; 0x10d
 800f566:	4a61      	ldr	r2, [pc, #388]	; (800f6ec <iface_cb+0x354>)
 800f568:	4620      	mov	r0, r4
 800f56a:	2100      	movs	r1, #0
 800f56c:	f004 ff02 	bl	8014374 <shell_fprintf>
		PR("IPv6 base reachable time : %d\n",
 800f570:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
 800f574:	4a5e      	ldr	r2, [pc, #376]	; (800f6f0 <iface_cb+0x358>)
 800f576:	4620      	mov	r0, r4
 800f578:	2100      	movs	r1, #0
 800f57a:	f004 fefb 	bl	8014374 <shell_fprintf>
		PR("IPv6 reachable time      : %d\n",
 800f57e:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 800f582:	4a5c      	ldr	r2, [pc, #368]	; (800f6f4 <iface_cb+0x35c>)
 800f584:	4620      	mov	r0, r4
 800f586:	2100      	movs	r1, #0
 800f588:	f004 fef4 	bl	8014374 <shell_fprintf>
		PR("IPv6 retransmit timer    : %d\n",
 800f58c:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 800f590:	4a59      	ldr	r2, [pc, #356]	; (800f6f8 <iface_cb+0x360>)
 800f592:	2100      	movs	r1, #0
 800f594:	4620      	mov	r0, r4
}
 800f596:	b005      	add	sp, #20
 800f598:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		PR("IPv6 retransmit timer    : %d\n",
 800f59c:	f004 beea 	b.w	8014374 <shell_fprintf>
		if (!unicast->is_used) {
 800f5a0:	2330      	movs	r3, #48	; 0x30
 800f5a2:	fb03 5308 	mla	r3, r3, r8, r5
 800f5a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f5aa:	0799      	lsls	r1, r3, #30
 800f5ac:	d531      	bpl.n	800f612 <iface_cb+0x27a>
		PR("\t%s %s %s%s%s\n",
 800f5ae:	4649      	mov	r1, r9
 800f5b0:	2002      	movs	r0, #2
 800f5b2:	f7fc fd8f 	bl	800c0d4 <net_sprint_addr>
 800f5b6:	f899 2028 	ldrb.w	r2, [r9, #40]	; 0x28
 800f5ba:	4b4a      	ldr	r3, [pc, #296]	; (800f6e4 <iface_cb+0x34c>)
 800f5bc:	2a04      	cmp	r2, #4
 800f5be:	bf96      	itet	ls
 800f5c0:	494e      	ldrls	r1, [pc, #312]	; (800f6fc <iface_cb+0x364>)
 800f5c2:	494f      	ldrhi	r1, [pc, #316]	; (800f700 <iface_cb+0x368>)
	switch (addr_state) {
 800f5c4:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
 800f5c8:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 800f5cc:	3201      	adds	r2, #1
 800f5ce:	b2d2      	uxtb	r2, r2
 800f5d0:	2a03      	cmp	r2, #3
		PR("\t%s %s %s%s%s\n",
 800f5d2:	4686      	mov	lr, r0
 800f5d4:	bf96      	itet	ls
 800f5d6:	484b      	ldrls	r0, [pc, #300]	; (800f704 <iface_cb+0x36c>)
	switch (addr_state) {
 800f5d8:	484b      	ldrhi	r0, [pc, #300]	; (800f708 <iface_cb+0x370>)
 800f5da:	f850 0022 	ldrls.w	r0, [r0, r2, lsl #2]
		PR("\t%s %s %s%s%s\n",
 800f5de:	2230      	movs	r2, #48	; 0x30
 800f5e0:	fb02 5208 	mla	r2, r2, r8, r5
		count++;
 800f5e4:	3701      	adds	r7, #1
		PR("\t%s %s %s%s%s\n",
 800f5e6:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800f5ea:	f012 0f01 	tst.w	r2, #1
 800f5ee:	bf14      	ite	ne
 800f5f0:	469c      	movne	ip, r3
 800f5f2:	46d4      	moveq	ip, sl
 800f5f4:	f012 0f04 	tst.w	r2, #4
 800f5f8:	bf14      	ite	ne
 800f5fa:	465a      	movne	r2, fp
 800f5fc:	4652      	moveq	r2, sl
 800f5fe:	e9cd 1000 	strd	r1, r0, [sp]
 800f602:	e9cd c202 	strd	ip, r2, [sp, #8]
 800f606:	4673      	mov	r3, lr
 800f608:	4a40      	ldr	r2, [pc, #256]	; (800f70c <iface_cb+0x374>)
 800f60a:	2100      	movs	r1, #0
 800f60c:	4620      	mov	r0, r4
 800f60e:	f004 feb1 	bl	8014374 <shell_fprintf>
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_ADDR; i++) {
 800f612:	f108 0801 	add.w	r8, r8, #1
 800f616:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800f61a:	e746      	b.n	800f4aa <iface_cb+0x112>
		if (!mcast->is_used) {
 800f61c:	fb09 f108 	mul.w	r1, r9, r8
 800f620:	186b      	adds	r3, r5, r1
 800f622:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f626:	07da      	lsls	r2, r3, #31
 800f628:	d50a      	bpl.n	800f640 <iface_cb+0x2a8>
		PR("\t%s\n", net_sprint_ipv6_addr(&mcast->address.in6_addr));
 800f62a:	4451      	add	r1, sl
 800f62c:	2002      	movs	r0, #2
 800f62e:	f7fc fd51 	bl	800c0d4 <net_sprint_addr>
 800f632:	465a      	mov	r2, fp
 800f634:	4603      	mov	r3, r0
 800f636:	2100      	movs	r1, #0
 800f638:	4620      	mov	r0, r4
 800f63a:	f004 fe9b 	bl	8014374 <shell_fprintf>
		count++;
 800f63e:	3701      	adds	r7, #1
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_MADDR; i++) {
 800f640:	f108 0801 	add.w	r8, r8, #1
 800f644:	e749      	b.n	800f4da <iface_cb+0x142>
		if (!prefix->is_used) {
 800f646:	2328      	movs	r3, #40	; 0x28
 800f648:	fb03 5308 	mla	r3, r3, r8, r5
 800f64c:	f103 0aa8 	add.w	sl, r3, #168	; 0xa8
 800f650:	f89a 2025 	ldrb.w	r2, [sl, #37]	; 0x25
 800f654:	0793      	lsls	r3, r2, #30
 800f656:	d516      	bpl.n	800f686 <iface_cb+0x2ee>
		PR("\t%s/%d%s\n",
 800f658:	4649      	mov	r1, r9
 800f65a:	2002      	movs	r0, #2
 800f65c:	f7fc fd3a 	bl	800c0d4 <net_sprint_addr>
 800f660:	f89a 3025 	ldrb.w	r3, [sl, #37]	; 0x25
 800f664:	491e      	ldr	r1, [pc, #120]	; (800f6e0 <iface_cb+0x348>)
 800f666:	f899 2014 	ldrb.w	r2, [r9, #20]
 800f66a:	f013 0f01 	tst.w	r3, #1
 800f66e:	4b1d      	ldr	r3, [pc, #116]	; (800f6e4 <iface_cb+0x34c>)
 800f670:	bf08      	it	eq
 800f672:	460b      	moveq	r3, r1
 800f674:	e9cd 2300 	strd	r2, r3, [sp]
 800f678:	2100      	movs	r1, #0
 800f67a:	4603      	mov	r3, r0
 800f67c:	465a      	mov	r2, fp
 800f67e:	4620      	mov	r0, r4
 800f680:	f004 fe78 	bl	8014374 <shell_fprintf>
		count++;
 800f684:	3701      	adds	r7, #1
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_PREFIX; i++) {
 800f686:	f108 0801 	add.w	r8, r8, #1
 800f68a:	f109 0928 	add.w	r9, r9, #40	; 0x28
 800f68e:	e73b      	b.n	800f508 <iface_cb+0x170>
}
 800f690:	b005      	add	sp, #20
 800f692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f696:	bf00      	nop
 800f698:	0801c621 	.word	0x0801c621
 800f69c:	08019238 	.word	0x08019238
 800f6a0:	0801c630 	.word	0x0801c630
 800f6a4:	0801c627 	.word	0x0801c627
 800f6a8:	0801c63f 	.word	0x0801c63f
 800f6ac:	0801c66c 	.word	0x0801c66c
 800f6b0:	0801bdba 	.word	0x0801bdba
 800f6b4:	0801c685 	.word	0x0801c685
 800f6b8:	20001bca 	.word	0x20001bca
 800f6bc:	0801c699 	.word	0x0801c699
 800f6c0:	0801c6a9 	.word	0x0801c6a9
 800f6c4:	0801c6b9 	.word	0x0801c6b9
 800f6c8:	08019c94 	.word	0x08019c94
 800f6cc:	0801c6e0 	.word	0x0801c6e0
 800f6d0:	0801c711 	.word	0x0801c711
 800f6d4:	0801c71a 	.word	0x0801c71a
 800f6d8:	0801c73e 	.word	0x0801c73e
 800f6dc:	0801c761 	.word	0x0801c761
 800f6e0:	0801c8da 	.word	0x0801c8da
 800f6e4:	0801c657 	.word	0x0801c657
 800f6e8:	0801c778 	.word	0x0801c778
 800f6ec:	0801c77f 	.word	0x0801c77f
 800f6f0:	0801c79e 	.word	0x0801c79e
 800f6f4:	0801c7bd 	.word	0x0801c7bd
 800f6f8:	0801c7dc 	.word	0x0801c7dc
 800f6fc:	08019c5c 	.word	0x08019c5c
 800f700:	0801c648 	.word	0x0801c648
 800f704:	08019c70 	.word	0x08019c70
 800f708:	0801bc61 	.word	0x0801bc61
 800f70c:	0801c702 	.word	0x0801c702
 800f710:	0801c6db 	.word	0x0801c6db
 800f714:	0801c661 	.word	0x0801c661
 800f718:	0801c757 	.word	0x0801c757

0800f71c <cmd_net_nbr_rm>:
{
 800f71c:	b530      	push	{r4, r5, lr}
	if (!argv[1]) {
 800f71e:	6851      	ldr	r1, [r2, #4]
{
 800f720:	b085      	sub	sp, #20
 800f722:	4604      	mov	r4, r0
 800f724:	4615      	mov	r5, r2
	if (!argv[1]) {
 800f726:	b939      	cbnz	r1, 800f738 <cmd_net_nbr_rm+0x1c>
		PR_WARNING("Neighbor IPv6 address missing.\n");
 800f728:	4a15      	ldr	r2, [pc, #84]	; (800f780 <cmd_net_nbr_rm+0x64>)
 800f72a:	2104      	movs	r1, #4
 800f72c:	f004 fe22 	bl	8014374 <shell_fprintf>
		return -ENOEXEC;
 800f730:	f06f 0007 	mvn.w	r0, #7
}
 800f734:	b005      	add	sp, #20
 800f736:	bd30      	pop	{r4, r5, pc}
	return z_impl_net_addr_pton(family, src, dst);
 800f738:	2002      	movs	r0, #2
 800f73a:	466a      	mov	r2, sp
 800f73c:	f006 fc8c 	bl	8016058 <z_impl_net_addr_pton>
	if (ret < 0) {
 800f740:	2800      	cmp	r0, #0
 800f742:	da06      	bge.n	800f752 <cmd_net_nbr_rm+0x36>
		PR_WARNING("Cannot parse '%s'\n", argv[1]);
 800f744:	686b      	ldr	r3, [r5, #4]
 800f746:	4a0f      	ldr	r2, [pc, #60]	; (800f784 <cmd_net_nbr_rm+0x68>)
		PR_WARNING("Cannot remove neighbor %s\n",
 800f748:	2104      	movs	r1, #4
 800f74a:	4620      	mov	r0, r4
 800f74c:	f004 fe12 	bl	8014374 <shell_fprintf>
 800f750:	e7ee      	b.n	800f730 <cmd_net_nbr_rm+0x14>
	if (!net_ipv6_nbr_rm(NULL, &addr)) {
 800f752:	4669      	mov	r1, sp
 800f754:	2000      	movs	r0, #0
 800f756:	f7fd fe5d 	bl	800d414 <net_ipv6_nbr_rm>
		PR_WARNING("Cannot remove neighbor %s\n",
 800f75a:	4669      	mov	r1, sp
	if (!net_ipv6_nbr_rm(NULL, &addr)) {
 800f75c:	b928      	cbnz	r0, 800f76a <cmd_net_nbr_rm+0x4e>
		PR_WARNING("Cannot remove neighbor %s\n",
 800f75e:	2002      	movs	r0, #2
 800f760:	f7fc fcb8 	bl	800c0d4 <net_sprint_addr>
 800f764:	4a08      	ldr	r2, [pc, #32]	; (800f788 <cmd_net_nbr_rm+0x6c>)
 800f766:	4603      	mov	r3, r0
 800f768:	e7ee      	b.n	800f748 <cmd_net_nbr_rm+0x2c>
		PR("Neighbor %s removed.\n", net_sprint_ipv6_addr(&addr));
 800f76a:	2002      	movs	r0, #2
 800f76c:	f7fc fcb2 	bl	800c0d4 <net_sprint_addr>
 800f770:	4a06      	ldr	r2, [pc, #24]	; (800f78c <cmd_net_nbr_rm+0x70>)
 800f772:	4603      	mov	r3, r0
 800f774:	2100      	movs	r1, #0
 800f776:	4620      	mov	r0, r4
 800f778:	f004 fdfc 	bl	8014374 <shell_fprintf>
	return 0;
 800f77c:	2000      	movs	r0, #0
 800f77e:	e7d9      	b.n	800f734 <cmd_net_nbr_rm+0x18>
 800f780:	0801c37c 	.word	0x0801c37c
 800f784:	0801c39c 	.word	0x0801c39c
 800f788:	0801c3af 	.word	0x0801c3af
 800f78c:	0801c3ca 	.word	0x0801c3ca

0800f790 <cmd_net_ping>:
{
 800f790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f794:	b089      	sub	sp, #36	; 0x24
	for (size_t i = 1; i < argc; ++i) {
 800f796:	2301      	movs	r3, #1
{
 800f798:	4604      	mov	r4, r0
 800f79a:	4689      	mov	r9, r1
 800f79c:	4615      	mov	r5, r2
	for (size_t i = 1; i < argc; ++i) {
 800f79e:	9304      	str	r3, [sp, #16]
	int interval = 1000;
 800f7a0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	int count = 3;
 800f7a4:	2703      	movs	r7, #3
	char *host = NULL;
 800f7a6:	2600      	movs	r6, #0
	for (size_t i = 1; i < argc; ++i) {
 800f7a8:	9b04      	ldr	r3, [sp, #16]
 800f7aa:	454b      	cmp	r3, r9
 800f7ac:	d306      	bcc.n	800f7bc <cmd_net_ping+0x2c>
	if (!host) {
 800f7ae:	bb96      	cbnz	r6, 800f816 <cmd_net_ping+0x86>
		PR_WARNING("Target host missing\n");
 800f7b0:	4a53      	ldr	r2, [pc, #332]	; (800f900 <cmd_net_ping+0x170>)
			PR_WARNING("Cannot send IPv6 ping\n");
 800f7b2:	2104      	movs	r1, #4
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	f004 fddd 	bl	8014374 <shell_fprintf>
 800f7ba:	e01a      	b.n	800f7f2 <cmd_net_ping+0x62>
		if (*argv[i] != '-') {
 800f7bc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800f7c0:	781a      	ldrb	r2, [r3, #0]
 800f7c2:	2a2d      	cmp	r2, #45	; 0x2d
 800f7c4:	d122      	bne.n	800f80c <cmd_net_ping+0x7c>
		switch (argv[i][1]) {
 800f7c6:	785a      	ldrb	r2, [r3, #1]
 800f7c8:	2a63      	cmp	r2, #99	; 0x63
 800f7ca:	d003      	beq.n	800f7d4 <cmd_net_ping+0x44>
 800f7cc:	2a69      	cmp	r2, #105	; 0x69
 800f7ce:	d015      	beq.n	800f7fc <cmd_net_ping+0x6c>
			PR_WARNING("Unrecognized argument: %s\n", argv[i]);
 800f7d0:	4a4c      	ldr	r2, [pc, #304]	; (800f904 <cmd_net_ping+0x174>)
 800f7d2:	e00a      	b.n	800f7ea <cmd_net_ping+0x5a>
			count = parse_arg(&i, argc, argv);
 800f7d4:	462a      	mov	r2, r5
 800f7d6:	4649      	mov	r1, r9
 800f7d8:	a804      	add	r0, sp, #16
 800f7da:	f008 fa08 	bl	8017bee <parse_arg>
			if (count < 0) {
 800f7de:	1e07      	subs	r7, r0, #0
			if (interval < 0) {
 800f7e0:	da15      	bge.n	800f80e <cmd_net_ping+0x7e>
				PR_WARNING("Parse error: %s\n", argv[i]);
 800f7e2:	9b04      	ldr	r3, [sp, #16]
 800f7e4:	4a48      	ldr	r2, [pc, #288]	; (800f908 <cmd_net_ping+0x178>)
 800f7e6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			PR_WARNING("Unrecognized argument: %s\n", argv[i]);
 800f7ea:	2104      	movs	r1, #4
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	f004 fdc1 	bl	8014374 <shell_fprintf>
			return -ENOEXEC;
 800f7f2:	f06f 0007 	mvn.w	r0, #7
}
 800f7f6:	b009      	add	sp, #36	; 0x24
 800f7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			interval = parse_arg(&i, argc, argv);
 800f7fc:	462a      	mov	r2, r5
 800f7fe:	4649      	mov	r1, r9
 800f800:	a804      	add	r0, sp, #16
 800f802:	f008 f9f4 	bl	8017bee <parse_arg>
			if (interval < 0) {
 800f806:	f1b0 0800 	subs.w	r8, r0, #0
 800f80a:	e7e9      	b.n	800f7e0 <cmd_net_ping+0x50>
 800f80c:	461e      	mov	r6, r3
	for (size_t i = 1; i < argc; ++i) {
 800f80e:	9b04      	ldr	r3, [sp, #16]
 800f810:	3301      	adds	r3, #1
 800f812:	9304      	str	r3, [sp, #16]
 800f814:	e7c8      	b.n	800f7a8 <cmd_net_ping+0x18>
	shell_for_ping = shell;
 800f816:	4b3d      	ldr	r3, [pc, #244]	; (800f90c <cmd_net_ping+0x17c>)
 800f818:	601c      	str	r4, [r3, #0]
	struct net_if *iface = net_if_get_default();
 800f81a:	f7fb f95d 	bl	800aad8 <net_if_get_default>
 800f81e:	2002      	movs	r0, #2
 800f820:	aa04      	add	r2, sp, #16
 800f822:	4631      	mov	r1, r6
 800f824:	f006 fc18 	bl	8016058 <z_impl_net_addr_pton>
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
 800f828:	2800      	cmp	r0, #0
 800f82a:	db54      	blt.n	800f8d6 <cmd_net_ping+0x146>
	net_icmpv6_register_handler(&ping6_handler);
 800f82c:	4838      	ldr	r0, [pc, #224]	; (800f910 <cmd_net_ping+0x180>)
 800f82e:	f7fd fa43 	bl	800ccb8 <net_icmpv6_register_handler>
	iface = net_if_ipv6_select_src_iface(&ipv6_target);
 800f832:	a804      	add	r0, sp, #16
 800f834:	f006 fba7 	bl	8015f86 <net_if_ipv6_select_src_iface>
	if (!iface) {
 800f838:	4605      	mov	r5, r0
 800f83a:	b928      	cbnz	r0, 800f848 <cmd_net_ping+0xb8>
		nbr = net_ipv6_nbr_lookup(NULL, &ipv6_target);
 800f83c:	a904      	add	r1, sp, #16
 800f83e:	f007 fe1b 	bl	8017478 <net_ipv6_nbr_lookup>
		if (nbr) {
 800f842:	4605      	mov	r5, r0
 800f844:	b100      	cbz	r0, 800f848 <cmd_net_ping+0xb8>
			iface = nbr->iface;
 800f846:	6885      	ldr	r5, [r0, #8]
	route = net_route_lookup(NULL, &ipv6_target);
 800f848:	a904      	add	r1, sp, #16
 800f84a:	2000      	movs	r0, #0
 800f84c:	f7fe fe86 	bl	800e55c <net_route_lookup>
	if (route) {
 800f850:	b100      	cbz	r0, 800f854 <cmd_net_ping+0xc4>
		iface = route->iface;
 800f852:	68c5      	ldr	r5, [r0, #12]
	PR("PING %s\n", host);
 800f854:	4a2f      	ldr	r2, [pc, #188]	; (800f914 <cmd_net_ping+0x184>)
 800f856:	4633      	mov	r3, r6
 800f858:	2100      	movs	r1, #0
 800f85a:	4620      	mov	r0, r4
 800f85c:	f004 fd8a 	bl	8014374 <shell_fprintf>
	for (int i = 0; i < count; ++i) {
 800f860:	2600      	movs	r6, #0
 800f862:	42b7      	cmp	r7, r6
 800f864:	d109      	bne.n	800f87a <cmd_net_ping+0xea>
 800f866:	f04f 0b00 	mov.w	fp, #0
	net_icmpv6_unregister_handler(&ping6_handler);
 800f86a:	4829      	ldr	r0, [pc, #164]	; (800f910 <cmd_net_ping+0x180>)
 800f86c:	f7fd fa2e 	bl	800cccc <net_icmpv6_unregister_handler>
		} else if (ret == -EIO) {
 800f870:	f11b 0f05 	cmn.w	fp, #5
 800f874:	d12f      	bne.n	800f8d6 <cmd_net_ping+0x146>
			PR_WARNING("Cannot send IPv6 ping\n");
 800f876:	4a28      	ldr	r2, [pc, #160]	; (800f918 <cmd_net_ping+0x188>)
 800f878:	e79b      	b.n	800f7b2 <cmd_net_ping+0x22>
 800f87a:	f7fa f887 	bl	800998c <z_timer_cycle_get_32>
 800f87e:	4682      	mov	sl, r0
 800f880:	f7fa f884 	bl	800998c <z_timer_cycle_get_32>
 800f884:	4681      	mov	r9, r0
 800f886:	f7fa f881 	bl	800998c <z_timer_cycle_get_32>
 800f88a:	4683      	mov	fp, r0
 800f88c:	f7fa f87e 	bl	800998c <z_timer_cycle_get_32>
		u32_t time_stamp = htonl(k_cycle_get_32());
 800f890:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f894:	0600      	lsls	r0, r0, #24
 800f896:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f89a:	ea40 601a 	orr.w	r0, r0, sl, lsr #24
 800f89e:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
 800f8a2:	4318      	orrs	r0, r3
 800f8a4:	f40b 0b7f 	and.w	fp, fp, #16711680	; 0xff0000
 800f8a8:	ea40 000b 	orr.w	r0, r0, fp
 800f8ac:	9003      	str	r0, [sp, #12]
						   sys_rand32_get(),
 800f8ae:	f000 fcb3 	bl	8010218 <sys_rand32_get>
		ret = net_icmpv6_send_echo_request(iface,
 800f8b2:	2304      	movs	r3, #4
 800f8b4:	9301      	str	r3, [sp, #4]
 800f8b6:	ab03      	add	r3, sp, #12
 800f8b8:	9300      	str	r3, [sp, #0]
 800f8ba:	b282      	uxth	r2, r0
 800f8bc:	b2b3      	uxth	r3, r6
 800f8be:	a904      	add	r1, sp, #16
 800f8c0:	4628      	mov	r0, r5
 800f8c2:	f007 fbf5 	bl	80170b0 <net_icmpv6_send_echo_request>
		if (ret) {
 800f8c6:	4683      	mov	fp, r0
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	d1ce      	bne.n	800f86a <cmd_net_ping+0xda>
	return z_impl_k_sleep(ms);
 800f8cc:	4640      	mov	r0, r8
 800f8ce:	f002 ffdd 	bl	801288c <z_impl_k_sleep>
	for (int i = 0; i < count; ++i) {
 800f8d2:	3601      	adds	r6, #1
 800f8d4:	e7c5      	b.n	800f862 <cmd_net_ping+0xd2>
	return z_impl_k_sem_take(sem, timeout);
 800f8d6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800f8da:	4810      	ldr	r0, [pc, #64]	; (800f91c <cmd_net_ping+0x18c>)
 800f8dc:	f003 f826 	bl	801292c <z_impl_k_sem_take>
	if (ret == -EAGAIN) {
 800f8e0:	300b      	adds	r0, #11
 800f8e2:	d10a      	bne.n	800f8fa <cmd_net_ping+0x16a>
		PR_INFO("Ping timeout\n");
 800f8e4:	4a0e      	ldr	r2, [pc, #56]	; (800f920 <cmd_net_ping+0x190>)
 800f8e6:	2103      	movs	r1, #3
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	f004 fd43 	bl	8014374 <shell_fprintf>
	net_icmpv6_unregister_handler(&ping6_handler);
 800f8ee:	4808      	ldr	r0, [pc, #32]	; (800f910 <cmd_net_ping+0x180>)
 800f8f0:	f7fd f9ec 	bl	800cccc <net_icmpv6_unregister_handler>
		return -ETIMEDOUT;
 800f8f4:	f06f 0073 	mvn.w	r0, #115	; 0x73
 800f8f8:	e77d      	b.n	800f7f6 <cmd_net_ping+0x66>
	return 0;
 800f8fa:	2000      	movs	r0, #0
 800f8fc:	e77b      	b.n	800f7f6 <cmd_net_ping+0x66>
 800f8fe:	bf00      	nop
 800f900:	0801c40c 	.word	0x0801c40c
 800f904:	0801c3f1 	.word	0x0801c3f1
 800f908:	0801c3e0 	.word	0x0801c3e0
 800f90c:	20000eb0 	.word	0x20000eb0
 800f910:	20008d98 	.word	0x20008d98
 800f914:	0801c421 	.word	0x0801c421
 800f918:	0801c42a 	.word	0x0801c42a
 800f91c:	200090ec 	.word	0x200090ec
 800f920:	0801c441 	.word	0x0801c441

0800f924 <route_cb>:
{
 800f924:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (entry->iface != iface) {
 800f928:	684b      	ldr	r3, [r1, #4]
 800f92a:	68c2      	ldr	r2, [r0, #12]
 800f92c:	429a      	cmp	r2, r3
{
 800f92e:	4604      	mov	r4, r0
	if (entry->iface != iface) {
 800f930:	d142      	bne.n	800f9b8 <route_cb+0x94>
	const struct shell *shell = data->shell;
 800f932:	680d      	ldr	r5, [r1, #0]
	PR("IPv6 prefix : %s/%d\n", net_sprint_ipv6_addr(&entry->addr),
 800f934:	f100 0110 	add.w	r1, r0, #16
 800f938:	2002      	movs	r0, #2
 800f93a:	f7fc fbcb 	bl	800c0d4 <net_sprint_addr>
 800f93e:	f894 3020 	ldrb.w	r3, [r4, #32]
 800f942:	9300      	str	r3, [sp, #0]
 800f944:	4a1e      	ldr	r2, [pc, #120]	; (800f9c0 <route_cb+0x9c>)
 800f946:	4603      	mov	r3, r0
 800f948:	2100      	movs	r1, #0
 800f94a:	4628      	mov	r0, r5
 800f94c:	f004 fd12 	bl	8014374 <shell_fprintf>
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
 800f950:	6864      	ldr	r4, [r4, #4]
	return list->head;
 800f952:	2600      	movs	r6, #0
 800f954:	b1cc      	cbz	r4, 800f98a <route_cb+0x66>
		PR("\tneighbor : %p\t", nexthop_route->nbr);
 800f956:	4f1b      	ldr	r7, [pc, #108]	; (800f9c4 <route_cb+0xa0>)
 800f958:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800f9d0 <route_cb+0xac>
			PR("addr : %s\n", net_sprint_ll_addr(lladdr->addr,
 800f95c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 800f9d4 <route_cb+0xb0>
		if (!nexthop_route->nbr) {
 800f960:	6863      	ldr	r3, [r4, #4]
 800f962:	b173      	cbz	r3, 800f982 <route_cb+0x5e>
		PR("\tneighbor : %p\t", nexthop_route->nbr);
 800f964:	4628      	mov	r0, r5
 800f966:	463a      	mov	r2, r7
 800f968:	2100      	movs	r1, #0
 800f96a:	f004 fd03 	bl	8014374 <shell_fprintf>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
 800f96e:	6863      	ldr	r3, [r4, #4]
 800f970:	7858      	ldrb	r0, [r3, #1]
 800f972:	28ff      	cmp	r0, #255	; 0xff
 800f974:	d111      	bne.n	800f99a <route_cb+0x76>
			PR("addr : <unknown>\n");
 800f976:	4a14      	ldr	r2, [pc, #80]	; (800f9c8 <route_cb+0xa4>)
 800f978:	2100      	movs	r1, #0
 800f97a:	4628      	mov	r0, r5
 800f97c:	f004 fcfa 	bl	8014374 <shell_fprintf>
		count++;
 800f980:	3601      	adds	r6, #1
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800f982:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
 800f984:	2c00      	cmp	r4, #0
 800f986:	d1eb      	bne.n	800f960 <route_cb+0x3c>
	if (count == 0) {
 800f988:	b9b6      	cbnz	r6, 800f9b8 <route_cb+0x94>
		PR("\t<none>\n");
 800f98a:	4a10      	ldr	r2, [pc, #64]	; (800f9cc <route_cb+0xa8>)
 800f98c:	2100      	movs	r1, #0
 800f98e:	4628      	mov	r0, r5
}
 800f990:	b003      	add	sp, #12
 800f992:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		PR("\t<none>\n");
 800f996:	f004 bced 	b.w	8014374 <shell_fprintf>
			lladdr = net_nbr_get_lladdr(nexthop_route->nbr->idx);
 800f99a:	f7fd fa65 	bl	800ce68 <net_nbr_get_lladdr>
 800f99e:	4642      	mov	r2, r8
 800f9a0:	7841      	ldrb	r1, [r0, #1]
 800f9a2:	2318      	movs	r3, #24
 800f9a4:	3002      	adds	r0, #2
 800f9a6:	f7fc fa91 	bl	800becc <net_sprint_ll_addr_buf>
			PR("addr : %s\n", net_sprint_ll_addr(lladdr->addr,
 800f9aa:	464a      	mov	r2, r9
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	2100      	movs	r1, #0
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	f004 fcdf 	bl	8014374 <shell_fprintf>
 800f9b6:	e7e3      	b.n	800f980 <route_cb+0x5c>
}
 800f9b8:	b003      	add	sp, #12
 800f9ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9be:	bf00      	nop
 800f9c0:	0801c8b6 	.word	0x0801c8b6
 800f9c4:	0801c8cb 	.word	0x0801c8cb
 800f9c8:	0801c8db 	.word	0x0801c8db
 800f9cc:	0801c711 	.word	0x0801c711
 800f9d0:	20001bca 	.word	0x20001bca
 800f9d4:	0801c69e 	.word	0x0801c69e

0800f9d8 <iface_index_get>:
	entry->handler = NULL;
 800f9d8:	2300      	movs	r3, #0
{
 800f9da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	entry->handler = NULL;
 800f9dc:	60cb      	str	r3, [r1, #12]
{
 800f9de:	4606      	mov	r6, r0
 800f9e0:	460d      	mov	r5, r1
	struct net_if *iface = net_if_get_by_index(idx);
 800f9e2:	f7fc f8e3 	bl	800bbac <net_if_get_by_index>
	if (!iface) {
 800f9e6:	b190      	cbz	r0, 800fa0e <iface_index_get+0x36>
	return iface->if_dev->l2;
 800f9e8:	6803      	ldr	r3, [r0, #0]
	snprintk(iface_help_buffer[idx], MAX_IFACE_HELP_STR_LEN,
 800f9ea:	4c13      	ldr	r4, [pc, #76]	; (800fa38 <iface_index_get+0x60>)
	if (net_if_l2(iface) == &NET_L2_GET_NAME(ETHERNET)) {
 800f9ec:	685f      	ldr	r7, [r3, #4]
	snprintk(iface_help_buffer[idx], MAX_IFACE_HELP_STR_LEN,
 800f9ee:	4a13      	ldr	r2, [pc, #76]	; (800fa3c <iface_index_get+0x64>)
 800f9f0:	9000      	str	r0, [sp, #0]
 800f9f2:	211c      	movs	r1, #28
 800f9f4:	4812      	ldr	r0, [pc, #72]	; (800fa40 <iface_index_get+0x68>)
 800f9f6:	4b13      	ldr	r3, [pc, #76]	; (800fa44 <iface_index_get+0x6c>)
 800f9f8:	fb01 4406 	mla	r4, r1, r6, r4
 800f9fc:	429f      	cmp	r7, r3
 800f9fe:	bf0c      	ite	eq
 800fa00:	4603      	moveq	r3, r0
 800fa02:	4613      	movne	r3, r2
 800fa04:	4a10      	ldr	r2, [pc, #64]	; (800fa48 <iface_index_get+0x70>)
 800fa06:	4620      	mov	r0, r4
 800fa08:	f003 fee7 	bl	80137da <snprintk>
	return iface_help_buffer[idx];
 800fa0c:	4620      	mov	r0, r4
	entry->subcmd = &iface_index;
 800fa0e:	4b0f      	ldr	r3, [pc, #60]	; (800fa4c <iface_index_get+0x74>)
	entry->help  = set_iface_index_help(idx);
 800fa10:	6068      	str	r0, [r5, #4]
	entry->subcmd = &iface_index;
 800fa12:	60ab      	str	r3, [r5, #8]
	struct net_if *iface = net_if_get_by_index(idx);
 800fa14:	4630      	mov	r0, r6
 800fa16:	f7fc f8c9 	bl	800bbac <net_if_get_by_index>
	if (!iface) {
 800fa1a:	4604      	mov	r4, r0
 800fa1c:	b140      	cbz	r0, 800fa30 <iface_index_get+0x58>
	snprintk(iface_index_buffer[idx], MAX_IFACE_STR_LEN, "%zu", idx);
 800fa1e:	4c0c      	ldr	r4, [pc, #48]	; (800fa50 <iface_index_get+0x78>)
 800fa20:	4a0c      	ldr	r2, [pc, #48]	; (800fa54 <iface_index_get+0x7c>)
 800fa22:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800fa26:	4633      	mov	r3, r6
 800fa28:	2104      	movs	r1, #4
 800fa2a:	4620      	mov	r0, r4
 800fa2c:	f003 fed5 	bl	80137da <snprintk>
	entry->syntax = set_iface_index_buffer(idx);
 800fa30:	602c      	str	r4, [r5, #0]
}
 800fa32:	b003      	add	sp, #12
 800fa34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa36:	bf00      	nop
 800fa38:	20001be2 	.word	0x20001be2
 800fa3c:	0801c630 	.word	0x0801c630
 800fa40:	0801c63f 	.word	0x0801c63f
 800fa44:	08019238 	.word	0x08019238
 800fa48:	0801c7fb 	.word	0x0801c7fb
 800fa4c:	08019d04 	.word	0x08019d04
 800fa50:	20001bfe 	.word	0x20001bfe
 800fa54:	0801c803 	.word	0x0801c803

0800fa58 <cmd_net_arp>:
{
 800fa58:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
 800fa5a:	4b05      	ldr	r3, [pc, #20]	; (800fa70 <cmd_net_arp+0x18>)
 800fa5c:	9300      	str	r3, [sp, #0]
 800fa5e:	4a05      	ldr	r2, [pc, #20]	; (800fa74 <cmd_net_arp+0x1c>)
 800fa60:	4b05      	ldr	r3, [pc, #20]	; (800fa78 <cmd_net_arp+0x20>)
 800fa62:	2103      	movs	r1, #3
 800fa64:	f004 fc86 	bl	8014374 <shell_fprintf>
}
 800fa68:	2000      	movs	r0, #0
 800fa6a:	b003      	add	sp, #12
 800fa6c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa70:	0801bec6 	.word	0x0801bec6
 800fa74:	0801c549 	.word	0x0801c549
 800fa78:	0801be78 	.word	0x0801be78

0800fa7c <cmd_net_iface_up>:
{
 800fa7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	idx = get_iface_idx(shell, argv[1]);
 800fa7e:	6851      	ldr	r1, [r2, #4]
{
 800fa80:	4605      	mov	r5, r0
	idx = get_iface_idx(shell, argv[1]);
 800fa82:	f7ff fb25 	bl	800f0d0 <get_iface_idx>
	if (idx < 0) {
 800fa86:	1e06      	subs	r6, r0, #0
 800fa88:	db08      	blt.n	800fa9c <cmd_net_iface_up+0x20>
	iface = net_if_get_by_index(idx);
 800fa8a:	f7fc f88f 	bl	800bbac <net_if_get_by_index>
	if (!iface) {
 800fa8e:	b940      	cbnz	r0, 800faa2 <cmd_net_iface_up+0x26>
		PR_WARNING("No such interface in index %d\n", idx);
 800fa90:	4a14      	ldr	r2, [pc, #80]	; (800fae4 <cmd_net_iface_up+0x68>)
 800fa92:	4633      	mov	r3, r6
		PR_WARNING("Interface %d is already up.\n", idx);
 800fa94:	2104      	movs	r1, #4
 800fa96:	4628      	mov	r0, r5
 800fa98:	f004 fc6c 	bl	8014374 <shell_fprintf>
		return -ENOEXEC;
 800fa9c:	f06f 0407 	mvn.w	r4, #7
 800faa0:	e01c      	b.n	800fadc <cmd_net_iface_up+0x60>
 800faa2:	6803      	ldr	r3, [r0, #0]
 800faa4:	f3bf 8f5b 	dmb	ish
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	f3bf 8f5b 	dmb	ish
	if (net_if_is_up(iface)) {
 800faae:	07db      	lsls	r3, r3, #31
 800fab0:	d502      	bpl.n	800fab8 <cmd_net_iface_up+0x3c>
		PR_WARNING("Interface %d is already up.\n", idx);
 800fab2:	4633      	mov	r3, r6
 800fab4:	4a0c      	ldr	r2, [pc, #48]	; (800fae8 <cmd_net_iface_up+0x6c>)
 800fab6:	e7ed      	b.n	800fa94 <cmd_net_iface_up+0x18>
	ret = net_if_up(iface);
 800fab8:	f7fc f8ae 	bl	800bc18 <net_if_up>
	if (ret) {
 800fabc:	4604      	mov	r4, r0
 800fabe:	b138      	cbz	r0, 800fad0 <cmd_net_iface_up+0x54>
		PR_WARNING("Cannot take interface %d up (%d)\n", idx, ret);
 800fac0:	9000      	str	r0, [sp, #0]
 800fac2:	4633      	mov	r3, r6
 800fac4:	4a09      	ldr	r2, [pc, #36]	; (800faec <cmd_net_iface_up+0x70>)
 800fac6:	2104      	movs	r1, #4
 800fac8:	4628      	mov	r0, r5
 800faca:	f004 fc53 	bl	8014374 <shell_fprintf>
		return -ENOEXEC;
 800face:	e7e5      	b.n	800fa9c <cmd_net_iface_up+0x20>
		PR("Interface %d is up\n", idx);
 800fad0:	4601      	mov	r1, r0
 800fad2:	4633      	mov	r3, r6
 800fad4:	4a06      	ldr	r2, [pc, #24]	; (800faf0 <cmd_net_iface_up+0x74>)
 800fad6:	4628      	mov	r0, r5
 800fad8:	f004 fc4c 	bl	8014374 <shell_fprintf>
}
 800fadc:	4620      	mov	r0, r4
 800fade:	b002      	add	sp, #8
 800fae0:	bd70      	pop	{r4, r5, r6, pc}
 800fae2:	bf00      	nop
 800fae4:	0801bf90 	.word	0x0801bf90
 800fae8:	0801bfe9 	.word	0x0801bfe9
 800faec:	0801c006 	.word	0x0801c006
 800faf0:	0801c028 	.word	0x0801c028

0800faf4 <nbr_cb>:
{
 800faf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int *count = data->user_data;
 800faf8:	e9d1 8900 	ldrd	r8, r9, [r1]
	if (*count == 0) {
 800fafc:	f8d9 1000 	ldr.w	r1, [r9]
{
 800fb00:	b093      	sub	sp, #76	; 0x4c
 800fb02:	4604      	mov	r4, r0
	if (*count == 0) {
 800fb04:	b921      	cbnz	r1, 800fb10 <nbr_cb+0x1c>
		PR("     Neighbor   Interface        Flags State     "
 800fb06:	4b38      	ldr	r3, [pc, #224]	; (800fbe8 <nbr_cb+0xf4>)
 800fb08:	4a38      	ldr	r2, [pc, #224]	; (800fbec <nbr_cb+0xf8>)
 800fb0a:	4640      	mov	r0, r8
 800fb0c:	f004 fc32 	bl	8014374 <shell_fprintf>
	(*count)++;
 800fb10:	f8d9 3000 	ldr.w	r3, [r9]
		state_pad = "    ";
 800fb14:	4d34      	ldr	r5, [pc, #208]	; (800fbe8 <nbr_cb+0xf4>)
	(*count)++;
 800fb16:	3301      	adds	r3, #1
 800fb18:	f8c9 3000 	str.w	r3, [r9]
	state_str = net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state);
 800fb1c:	68e3      	ldr	r3, [r4, #12]
 800fb1e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 800fb22:	f7fd fc5f 	bl	800d3e4 <net_ipv6_nbr_state2str>
 800fb26:	9011      	str	r0, [sp, #68]	; 0x44
	if (strlen(state_str) == 5) {
 800fb28:	f7f4 ff62 	bl	80049f0 <strlen>
		state_pad = "    ";
 800fb2c:	4b30      	ldr	r3, [pc, #192]	; (800fbf0 <nbr_cb+0xfc>)
 800fb2e:	2805      	cmp	r0, #5
 800fb30:	bf08      	it	eq
 800fb32:	461d      	moveq	r5, r3
	remaining = net_ipv6_nbr_data(nbr)->reachable +
 800fb34:	68e3      	ldr	r3, [r4, #12]
		    net_ipv6_nbr_data(nbr)->reachable_timeout -
 800fb36:	6a19      	ldr	r1, [r3, #32]
	remaining = net_ipv6_nbr_data(nbr)->reachable +
 800fb38:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800fb3c:	eb12 0a01 	adds.w	sl, r2, r1
 800fb40:	eb43 7be1 	adc.w	fp, r3, r1, asr #31
 800fb44:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
	return z_impl_k_uptime_get();
 800fb48:	f009 f827 	bl	8018b9a <z_impl_k_uptime_get>
	PR("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
 800fb4c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800fb50:	68a3      	ldr	r3, [r4, #8]
 800fb52:	930e      	str	r3, [sp, #56]	; 0x38
 800fb54:	f8bc 3032 	ldrh.w	r3, [ip, #50]	; 0x32
 800fb58:	930f      	str	r3, [sp, #60]	; 0x3c
 800fb5a:	7823      	ldrb	r3, [r4, #0]
 800fb5c:	9310      	str	r3, [sp, #64]	; 0x40
	remaining = net_ipv6_nbr_data(nbr)->reachable +
 800fb5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	PR("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
 800fb60:	f8d9 9000 	ldr.w	r9, [r9]
 800fb64:	f89c a034 	ldrb.w	sl, [ip, #52]	; 0x34
 800fb68:	f89c b035 	ldrb.w	fp, [ip, #53]	; 0x35
	remaining = net_ipv6_nbr_data(nbr)->reachable +
 800fb6c:	1a1e      	subs	r6, r3, r0
 800fb6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	PR("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
 800fb70:	7860      	ldrb	r0, [r4, #1]
	remaining = net_ipv6_nbr_data(nbr)->reachable +
 800fb72:	eb63 0701 	sbc.w	r7, r3, r1
 800fb76:	2e00      	cmp	r6, #0
 800fb78:	f177 0300 	sbcs.w	r3, r7, #0
 800fb7c:	bfb8      	it	lt
 800fb7e:	2600      	movlt	r6, #0
	PR("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
 800fb80:	28ff      	cmp	r0, #255	; 0xff
 800fb82:	d02f      	beq.n	800fbe4 <nbr_cb+0xf0>
 800fb84:	f7fd f970 	bl	800ce68 <net_nbr_get_lladdr>
 800fb88:	4607      	mov	r7, r0
 800fb8a:	7860      	ldrb	r0, [r4, #1]
 800fb8c:	f7fd f96c 	bl	800ce68 <net_nbr_get_lladdr>
 800fb90:	2318      	movs	r3, #24
 800fb92:	7841      	ldrb	r1, [r0, #1]
 800fb94:	4a17      	ldr	r2, [pc, #92]	; (800fbf4 <nbr_cb+0x100>)
 800fb96:	1cb8      	adds	r0, r7, #2
 800fb98:	f7fc f998 	bl	800becc <net_sprint_ll_addr_buf>
 800fb9c:	4607      	mov	r7, r0
 800fb9e:	7860      	ldrb	r0, [r4, #1]
 800fba0:	f7fd f962 	bl	800ce68 <net_nbr_get_lladdr>
 800fba4:	68e1      	ldr	r1, [r4, #12]
 800fba6:	2002      	movs	r0, #2
 800fba8:	3104      	adds	r1, #4
 800fbaa:	f7fc fa93 	bl	800c0d4 <net_sprint_addr>
 800fbae:	4b0e      	ldr	r3, [pc, #56]	; (800fbe8 <nbr_cb+0xf4>)
 800fbb0:	900b      	str	r0, [sp, #44]	; 0x2c
 800fbb2:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
 800fbb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fbb8:	f8cd a010 	str.w	sl, [sp, #16]
 800fbbc:	e9cd b305 	strd	fp, r3, [sp, #20]
 800fbc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fbc2:	9303      	str	r3, [sp, #12]
 800fbc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbc6:	9302      	str	r3, [sp, #8]
 800fbc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbca:	4a0b      	ldr	r2, [pc, #44]	; (800fbf8 <nbr_cb+0x104>)
 800fbcc:	e9cd 4300 	strd	r4, r3, [sp]
 800fbd0:	e9cd 5607 	strd	r5, r6, [sp, #28]
 800fbd4:	464b      	mov	r3, r9
 800fbd6:	2100      	movs	r1, #0
 800fbd8:	4640      	mov	r0, r8
 800fbda:	f004 fbcb 	bl	8014374 <shell_fprintf>
}
 800fbde:	b013      	add	sp, #76	; 0x4c
 800fbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	PR("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
 800fbe4:	4f05      	ldr	r7, [pc, #20]	; (800fbfc <nbr_cb+0x108>)
 800fbe6:	e7da      	b.n	800fb9e <nbr_cb+0xaa>
 800fbe8:	0801c8da 	.word	0x0801c8da
 800fbec:	0801c832 	.word	0x0801c832
 800fbf0:	0801c82b 	.word	0x0801c82b
 800fbf4:	20001bca 	.word	0x20001bca
 800fbf8:	0801c888 	.word	0x0801c888
 800fbfc:	0801c830 	.word	0x0801c830

0800fc00 <iface_per_route_cb>:
{
 800fc00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc02:	460e      	mov	r6, r1
	const struct shell *shell = data->shell;
 800fc04:	680f      	ldr	r7, [r1, #0]
	if (!iface) {
 800fc06:	4604      	mov	r4, r0
 800fc08:	b300      	cbz	r0, 800fc4c <iface_per_route_cb+0x4c>
	return iface->if_dev->l2;
 800fc0a:	6803      	ldr	r3, [r0, #0]
			*extra = "========";
 800fc0c:	4d11      	ldr	r5, [pc, #68]	; (800fc54 <iface_per_route_cb+0x54>)
	if (net_if_l2(iface) == &NET_L2_GET_NAME(ETHERNET)) {
 800fc0e:	685a      	ldr	r2, [r3, #4]
 800fc10:	4b11      	ldr	r3, [pc, #68]	; (800fc58 <iface_per_route_cb+0x58>)
 800fc12:	429a      	cmp	r2, r3
			*extra = "========";
 800fc14:	4b11      	ldr	r3, [pc, #68]	; (800fc5c <iface_per_route_cb+0x5c>)
 800fc16:	4a12      	ldr	r2, [pc, #72]	; (800fc60 <iface_per_route_cb+0x60>)
 800fc18:	bf08      	it	eq
 800fc1a:	461d      	moveq	r5, r3
 800fc1c:	4b11      	ldr	r3, [pc, #68]	; (800fc64 <iface_per_route_cb+0x64>)
 800fc1e:	bf08      	it	eq
 800fc20:	4613      	moveq	r3, r2
	PR("\nIPv6 routes for interface %p (%s)\n", iface,
 800fc22:	9300      	str	r3, [sp, #0]
 800fc24:	4638      	mov	r0, r7
 800fc26:	4623      	mov	r3, r4
 800fc28:	4a0f      	ldr	r2, [pc, #60]	; (800fc68 <iface_per_route_cb+0x68>)
 800fc2a:	2100      	movs	r1, #0
 800fc2c:	f004 fba2 	bl	8014374 <shell_fprintf>
	PR("=======================================%s\n", extra);
 800fc30:	4638      	mov	r0, r7
 800fc32:	462b      	mov	r3, r5
 800fc34:	4a0d      	ldr	r2, [pc, #52]	; (800fc6c <iface_per_route_cb+0x6c>)
 800fc36:	2100      	movs	r1, #0
 800fc38:	f004 fb9c 	bl	8014374 <shell_fprintf>
	net_route_foreach(route_cb, data);
 800fc3c:	480c      	ldr	r0, [pc, #48]	; (800fc70 <iface_per_route_cb+0x70>)
	data->user_data = iface;
 800fc3e:	6074      	str	r4, [r6, #4]
	net_route_foreach(route_cb, data);
 800fc40:	4631      	mov	r1, r6
}
 800fc42:	b003      	add	sp, #12
 800fc44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	net_route_foreach(route_cb, data);
 800fc48:	f7fe bd5c 	b.w	800e704 <net_route_foreach>
		*extra = "==============";
 800fc4c:	4d01      	ldr	r5, [pc, #4]	; (800fc54 <iface_per_route_cb+0x54>)
	return "<unknown type>";
 800fc4e:	4b05      	ldr	r3, [pc, #20]	; (800fc64 <iface_per_route_cb+0x64>)
 800fc50:	e7e7      	b.n	800fc22 <iface_per_route_cb+0x22>
 800fc52:	bf00      	nop
 800fc54:	0801c621 	.word	0x0801c621
 800fc58:	08019238 	.word	0x08019238
 800fc5c:	0801c627 	.word	0x0801c627
 800fc60:	0801c63f 	.word	0x0801c63f
 800fc64:	0801c630 	.word	0x0801c630
 800fc68:	0801c807 	.word	0x0801c807
 800fc6c:	0801bdae 	.word	0x0801bdae
 800fc70:	0800f925 	.word	0x0800f925

0800fc74 <address_lifetime_cb>:
{
 800fc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc78:	e9d0 3600 	ldrd	r3, r6, [r0]
	if (net_if_l2(iface) == &NET_L2_GET_NAME(ETHERNET)) {
 800fc7c:	685a      	ldr	r2, [r3, #4]
		*extra = "==============";
 800fc7e:	4b4d      	ldr	r3, [pc, #308]	; (800fdb4 <address_lifetime_cb+0x140>)
	const struct shell *shell = data->shell;
 800fc80:	680d      	ldr	r5, [r1, #0]
		*extra = "==============";
 800fc82:	4c4d      	ldr	r4, [pc, #308]	; (800fdb8 <address_lifetime_cb+0x144>)
 800fc84:	429a      	cmp	r2, r3
 800fc86:	4b4d      	ldr	r3, [pc, #308]	; (800fdbc <address_lifetime_cb+0x148>)
 800fc88:	4a4d      	ldr	r2, [pc, #308]	; (800fdc0 <address_lifetime_cb+0x14c>)
{
 800fc8a:	b08b      	sub	sp, #44	; 0x2c
		*extra = "==============";
 800fc8c:	bf18      	it	ne
 800fc8e:	461c      	movne	r4, r3
 800fc90:	4b4c      	ldr	r3, [pc, #304]	; (800fdc4 <address_lifetime_cb+0x150>)
 800fc92:	bf18      	it	ne
 800fc94:	4613      	movne	r3, r2
	PR("\nIPv6 addresses for interface %p (%s)\n", iface,
 800fc96:	9300      	str	r3, [sp, #0]
 800fc98:	4a4b      	ldr	r2, [pc, #300]	; (800fdc8 <address_lifetime_cb+0x154>)
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2100      	movs	r1, #0
{
 800fc9e:	4680      	mov	r8, r0
	PR("\nIPv6 addresses for interface %p (%s)\n", iface,
 800fca0:	4628      	mov	r0, r5
 800fca2:	f004 fb67 	bl	8014374 <shell_fprintf>
	PR("==========================================%s\n", extra);
 800fca6:	4623      	mov	r3, r4
 800fca8:	4a48      	ldr	r2, [pc, #288]	; (800fdcc <address_lifetime_cb+0x158>)
 800fcaa:	2100      	movs	r1, #0
 800fcac:	4628      	mov	r0, r5
 800fcae:	f004 fb61 	bl	8014374 <shell_fprintf>
	if (!ipv6) {
 800fcb2:	b93e      	cbnz	r6, 800fcc4 <address_lifetime_cb+0x50>
		PR("No IPv6 config found for this interface.\n");
 800fcb4:	4a46      	ldr	r2, [pc, #280]	; (800fdd0 <address_lifetime_cb+0x15c>)
 800fcb6:	4631      	mov	r1, r6
 800fcb8:	4628      	mov	r0, r5
 800fcba:	f004 fb5b 	bl	8014374 <shell_fprintf>
}
 800fcbe:	b00b      	add	sp, #44	; 0x2c
 800fcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	PR("Type      \tState    \tLifetime (sec)\tAddress\n");
 800fcc4:	4a43      	ldr	r2, [pc, #268]	; (800fdd4 <address_lifetime_cb+0x160>)
 800fcc6:	2100      	movs	r1, #0
 800fcc8:	4628      	mov	r0, r5
 800fcca:	f004 fb53 	bl	8014374 <shell_fprintf>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800fcce:	1d34      	adds	r4, r6, #4
 800fcd0:	2700      	movs	r7, #0
		if (!ipv6->unicast[i].is_used ||
 800fcd2:	2330      	movs	r3, #48	; 0x30
 800fcd4:	fb03 6307 	mla	r3, r3, r7, r6
 800fcd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fcdc:	079b      	lsls	r3, r3, #30
 800fcde:	d54b      	bpl.n	800fd78 <address_lifetime_cb+0x104>
 800fce0:	f834 3c04 	ldrh.w	r3, [r4, #-4]
 800fce4:	2b02      	cmp	r3, #2
 800fce6:	d147      	bne.n	800fd78 <address_lifetime_cb+0x104>
		remaining = (u64_t)ipv6->unicast[i].lifetime.timer_timeout +
 800fce8:	69a2      	ldr	r2, [r4, #24]
			(u64_t)ipv6->unicast[i].lifetime.wrap_counter *
 800fcea:	69e3      	ldr	r3, [r4, #28]
		remaining = (u64_t)ipv6->unicast[i].lifetime.timer_timeout +
 800fcec:	9205      	str	r2, [sp, #20]
			(u64_t)ipv6->unicast[i].lifetime.wrap_counter *
 800fcee:	9304      	str	r3, [sp, #16]
 800fcf0:	f008 ff53 	bl	8018b9a <z_impl_k_uptime_get>
	return (u32_t)abs((s32_t)time1 - (s32_t)time2);
 800fcf4:	6961      	ldr	r1, [r4, #20]
 800fcf6:	1a40      	subs	r0, r0, r1
 800fcf8:	f7f4 fdf7 	bl	80048ea <abs>
		prefix = net_if_ipv6_prefix_get(iface,
 800fcfc:	4621      	mov	r1, r4
	return (u32_t)abs((s32_t)time1 - (s32_t)time2);
 800fcfe:	4683      	mov	fp, r0
		prefix = net_if_ipv6_prefix_get(iface,
 800fd00:	4640      	mov	r0, r8
 800fd02:	f006 f8b0 	bl	8015e66 <net_if_ipv6_prefix_get>
		if (prefix) {
 800fd06:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800fd0a:	2800      	cmp	r0, #0
 800fd0c:	d039      	beq.n	800fd82 <address_lifetime_cb+0x10e>
			prefix_len = prefix->len;
 800fd0e:	f890 a024 	ldrb.w	sl, [r0, #36]	; 0x24
		if (ipv6->unicast[i].is_infinite) {
 800fd12:	2130      	movs	r1, #48	; 0x30
 800fd14:	fb01 6107 	mla	r1, r1, r7, r6
 800fd18:	f10d 091c 	add.w	r9, sp, #28
 800fd1c:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
 800fd20:	f011 0f01 	tst.w	r1, #1
 800fd24:	d030      	beq.n	800fd88 <address_lifetime_cb+0x114>
			snprintk(remaining_str, sizeof(remaining_str) - 1,
 800fd26:	4a2c      	ldr	r2, [pc, #176]	; (800fdd8 <address_lifetime_cb+0x164>)
 800fd28:	210b      	movs	r1, #11
 800fd2a:	4648      	mov	r0, r9
 800fd2c:	f003 fd55 	bl	80137da <snprintk>
		PR("%s  \t%s\t%s    \t%s/%d\n",
 800fd30:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	switch (addr_type) {
 800fd34:	2b04      	cmp	r3, #4
 800fd36:	bf96      	itet	ls
 800fd38:	4a28      	ldrls	r2, [pc, #160]	; (800fddc <address_lifetime_cb+0x168>)
		PR("%s  \t%s\t%s    \t%s/%d\n",
 800fd3a:	f8df b0b8 	ldrhi.w	fp, [pc, #184]	; 800fdf4 <address_lifetime_cb+0x180>
	switch (addr_state) {
 800fd3e:	f852 b023 	ldrls.w	fp, [r2, r3, lsl #2]
 800fd42:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 800fd46:	3201      	adds	r2, #1
 800fd48:	b2d2      	uxtb	r2, r2
 800fd4a:	2a03      	cmp	r2, #3
 800fd4c:	bf96      	itet	ls
 800fd4e:	4b24      	ldrls	r3, [pc, #144]	; (800fde0 <address_lifetime_cb+0x16c>)
 800fd50:	4b24      	ldrhi	r3, [pc, #144]	; (800fde4 <address_lifetime_cb+0x170>)
 800fd52:	f853 3022 	ldrls.w	r3, [r3, r2, lsl #2]
 800fd56:	9304      	str	r3, [sp, #16]
		PR("%s  \t%s\t%s    \t%s/%d\n",
 800fd58:	4621      	mov	r1, r4
 800fd5a:	2002      	movs	r0, #2
 800fd5c:	f7fc f9ba 	bl	800c0d4 <net_sprint_addr>
 800fd60:	9b04      	ldr	r3, [sp, #16]
 800fd62:	9300      	str	r3, [sp, #0]
 800fd64:	e9cd 0a02 	strd	r0, sl, [sp, #8]
 800fd68:	f8cd 9004 	str.w	r9, [sp, #4]
 800fd6c:	465b      	mov	r3, fp
 800fd6e:	4a1e      	ldr	r2, [pc, #120]	; (800fde8 <address_lifetime_cb+0x174>)
 800fd70:	2100      	movs	r1, #0
 800fd72:	4628      	mov	r0, r5
 800fd74:	f004 fafe 	bl	8014374 <shell_fprintf>
 800fd78:	3430      	adds	r4, #48	; 0x30
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800fd7a:	2f00      	cmp	r7, #0
 800fd7c:	d19f      	bne.n	800fcbe <address_lifetime_cb+0x4a>
 800fd7e:	2701      	movs	r7, #1
 800fd80:	e7a7      	b.n	800fcd2 <address_lifetime_cb+0x5e>
			prefix_len = 128U;
 800fd82:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800fd86:	e7c4      	b.n	800fd12 <address_lifetime_cb+0x9e>
		remaining = (u64_t)ipv6->unicast[i].lifetime.timer_timeout +
 800fd88:	4610      	mov	r0, r2
 800fd8a:	17d1      	asrs	r1, r2, #31
 800fd8c:	4a17      	ldr	r2, [pc, #92]	; (800fdec <address_lifetime_cb+0x178>)
 800fd8e:	fbc2 0103 	smlal	r0, r1, r2, r3
				 "%u", (u32_t)(remaining / 1000U));
 800fd92:	ebb0 000b 	subs.w	r0, r0, fp
 800fd96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fd9a:	f04f 0300 	mov.w	r3, #0
 800fd9e:	f161 0100 	sbc.w	r1, r1, #0
 800fda2:	f7f1 ff6f 	bl	8001c84 <__aeabi_uldivmod>
			snprintk(remaining_str, sizeof(remaining_str) - 1,
 800fda6:	4a12      	ldr	r2, [pc, #72]	; (800fdf0 <address_lifetime_cb+0x17c>)
 800fda8:	4603      	mov	r3, r0
 800fdaa:	210b      	movs	r1, #11
 800fdac:	4648      	mov	r0, r9
 800fdae:	f003 fd14 	bl	80137da <snprintk>
 800fdb2:	e7bd      	b.n	800fd30 <address_lifetime_cb+0xbc>
 800fdb4:	08019238 	.word	0x08019238
 800fdb8:	0801c627 	.word	0x0801c627
 800fdbc:	0801c621 	.word	0x0801c621
 800fdc0:	0801c630 	.word	0x0801c630
 800fdc4:	0801c63f 	.word	0x0801c63f
 800fdc8:	0801bd84 	.word	0x0801bd84
 800fdcc:	0801bdab 	.word	0x0801bdab
 800fdd0:	0801bdd9 	.word	0x0801bdd9
 800fdd4:	0801be03 	.word	0x0801be03
 800fdd8:	0801c658 	.word	0x0801c658
 800fddc:	08019c5c 	.word	0x08019c5c
 800fde0:	08019c70 	.word	0x08019c70
 800fde4:	0801bc61 	.word	0x0801bc61
 800fde8:	0801be30 	.word	0x0801be30
 800fdec:	7fffff9b 	.word	0x7fffff9b
 800fdf0:	0801b395 	.word	0x0801b395
 800fdf4:	0801c648 	.word	0x0801c648

0800fdf8 <iface_up_handler>:
#endif /* CONFIG_NET_IPV6 */

#if defined(CONFIG_NET_NATIVE)
static void iface_up_handler(struct net_mgmt_event_callback *cb,
			     u32_t mgmt_event, struct net_if *iface)
{
 800fdf8:	b508      	push	{r3, lr}
	if (mgmt_event == NET_EVENT_IF_UP) {
 800fdfa:	4b11      	ldr	r3, [pc, #68]	; (800fe40 <iface_up_handler+0x48>)
 800fdfc:	4299      	cmp	r1, r3
{
 800fdfe:	4610      	mov	r0, r2
	if (mgmt_event == NET_EVENT_IF_UP) {
 800fe00:	d11c      	bne.n	800fe3c <iface_up_handler+0x44>
		NET_INFO("Interface %p coming up", iface);
 800fe02:	4b10      	ldr	r3, [pc, #64]	; (800fe44 <iface_up_handler+0x4c>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f003 0307 	and.w	r3, r3, #7
 800fe0a:	2b02      	cmp	r3, #2
 800fe0c:	d90e      	bls.n	800fe2c <iface_up_handler+0x34>
 800fe0e:	2303      	movs	r3, #3
 800fe10:	f04f 0200 	mov.w	r2, #0
 800fe14:	f363 0207 	bfi	r2, r3, #0, #8
 800fe18:	490b      	ldr	r1, [pc, #44]	; (800fe48 <iface_up_handler+0x50>)
 800fe1a:	4b0c      	ldr	r3, [pc, #48]	; (800fe4c <iface_up_handler+0x54>)
 800fe1c:	1a5b      	subs	r3, r3, r1
 800fe1e:	08db      	lsrs	r3, r3, #3
 800fe20:	4601      	mov	r1, r0
 800fe22:	f363 128f 	bfi	r2, r3, #6, #10
 800fe26:	480a      	ldr	r0, [pc, #40]	; (800fe50 <iface_up_handler+0x58>)
 800fe28:	f003 fef8 	bl	8013c1c <log_1>
	sem->count = 0U;
 800fe2c:	4b09      	ldr	r3, [pc, #36]	; (800fe54 <iface_up_handler+0x5c>)
 800fe2e:	2200      	movs	r2, #0
 800fe30:	609a      	str	r2, [r3, #8]
	z_impl_k_sem_give(sem);
 800fe32:	4809      	ldr	r0, [pc, #36]	; (800fe58 <iface_up_handler+0x60>)

		k_sem_reset(&counter);
		k_sem_give(&waiter);
	}
}
 800fe34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fe38:	f002 bd4c 	b.w	80128d4 <z_impl_k_sem_give>
 800fe3c:	bd08      	pop	{r3, pc}
 800fe3e:	bf00      	nop
 800fe40:	d0010002 	.word	0xd0010002
 800fe44:	20008ff4 	.word	0x20008ff4
 800fe48:	08019248 	.word	0x08019248
 800fe4c:	08019290 	.word	0x08019290
 800fe50:	0801d13c 	.word	0x0801d13c
 800fe54:	20000eb4 	.word	0x20000eb4
 800fe58:	20009104 	.word	0x20009104

0800fe5c <ipv6_event_handler>:
{
 800fe5c:	b570      	push	{r4, r5, r6, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 800fe5e:	6853      	ldr	r3, [r2, #4]
{
 800fe60:	b08c      	sub	sp, #48	; 0x30
 800fe62:	9201      	str	r2, [sp, #4]
	if (!ipv6) {
 800fe64:	b313      	cbz	r3, 800feac <ipv6_event_handler+0x50>
	if (mgmt_event == NET_EVENT_IPV6_ADDR_ADD) {
 800fe66:	4a32      	ldr	r2, [pc, #200]	; (800ff30 <ipv6_event_handler+0xd4>)
 800fe68:	4291      	cmp	r1, r2
 800fe6a:	d121      	bne.n	800feb0 <ipv6_event_handler+0x54>
			if (ipv6->unicast[i].is_used) {
 800fe6c:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
 800fe70:	0791      	lsls	r1, r2, #30
 800fe72:	d50c      	bpl.n	800fe8e <ipv6_event_handler+0x32>
				memcpy(&laddr,
 800fe74:	4d2f      	ldr	r5, [pc, #188]	; (800ff34 <ipv6_event_handler+0xd8>)
 800fe76:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fe7a:	f103 0644 	add.w	r6, r3, #68	; 0x44
 800fe7e:	6810      	ldr	r0, [r2, #0]
 800fe80:	6851      	ldr	r1, [r2, #4]
 800fe82:	462c      	mov	r4, r5
 800fe84:	c403      	stmia	r4!, {r0, r1}
 800fe86:	3208      	adds	r2, #8
 800fe88:	42b2      	cmp	r2, r6
 800fe8a:	4625      	mov	r5, r4
 800fe8c:	d1f7      	bne.n	800fe7e <ipv6_event_handler+0x22>
			if (ipv6->unicast[i].is_used) {
 800fe8e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800fe92:	0792      	lsls	r2, r2, #30
 800fe94:	d50a      	bpl.n	800feac <ipv6_event_handler+0x50>
				memcpy(&laddr,
 800fe96:	4d27      	ldr	r5, [pc, #156]	; (800ff34 <ipv6_event_handler+0xd8>)
 800fe98:	1d1a      	adds	r2, r3, #4
 800fe9a:	3314      	adds	r3, #20
 800fe9c:	6810      	ldr	r0, [r2, #0]
 800fe9e:	6851      	ldr	r1, [r2, #4]
 800fea0:	462c      	mov	r4, r5
 800fea2:	c403      	stmia	r4!, {r0, r1}
 800fea4:	3208      	adds	r2, #8
 800fea6:	429a      	cmp	r2, r3
 800fea8:	4625      	mov	r5, r4
 800feaa:	d1f7      	bne.n	800fe9c <ipv6_event_handler+0x40>
}
 800feac:	b00c      	add	sp, #48	; 0x30
 800feae:	bd70      	pop	{r4, r5, r6, pc}
	if (mgmt_event == NET_EVENT_IPV6_DAD_SUCCEED) {
 800feb0:	4b21      	ldr	r3, [pc, #132]	; (800ff38 <ipv6_event_handler+0xdc>)
 800feb2:	4299      	cmp	r1, r3
 800feb4:	d137      	bne.n	800ff26 <ipv6_event_handler+0xca>
		ifaddr = net_if_ipv6_addr_lookup(&laddr, &iface);
 800feb6:	a901      	add	r1, sp, #4
 800feb8:	481e      	ldr	r0, [pc, #120]	; (800ff34 <ipv6_event_handler+0xd8>)
 800feba:	f7fa febd 	bl	800ac38 <net_if_ipv6_addr_lookup>
		if (!ifaddr ||
 800febe:	4604      	mov	r4, r0
 800fec0:	2800      	cmp	r0, #0
 800fec2:	d0f3      	beq.n	800feac <ipv6_event_handler+0x50>
 800fec4:	2210      	movs	r2, #16
 800fec6:	491b      	ldr	r1, [pc, #108]	; (800ff34 <ipv6_event_handler+0xd8>)
 800fec8:	3004      	adds	r0, #4
 800feca:	f7f4 fd1a 	bl	8004902 <memcmp>
 800fece:	2800      	cmp	r0, #0
 800fed0:	d1ec      	bne.n	800feac <ipv6_event_handler+0x50>
		    !(net_ipv6_addr_cmp(&ifaddr->address.in6_addr, &laddr) &&
 800fed2:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d1e8      	bne.n	800feac <ipv6_event_handler+0x50>
		NET_INFO("IPv6 address: %s",
 800feda:	4b18      	ldr	r3, [pc, #96]	; (800ff3c <ipv6_event_handler+0xe0>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	f003 0307 	and.w	r3, r3, #7
 800fee2:	2b02      	cmp	r3, #2
 800fee4:	d917      	bls.n	800ff16 <ipv6_event_handler+0xba>
 800fee6:	2303      	movs	r3, #3
 800fee8:	f04f 0400 	mov.w	r4, #0
 800feec:	f363 0407 	bfi	r4, r3, #0, #8
 800fef0:	4a13      	ldr	r2, [pc, #76]	; (800ff40 <ipv6_event_handler+0xe4>)
 800fef2:	4b14      	ldr	r3, [pc, #80]	; (800ff44 <ipv6_event_handler+0xe8>)
 800fef4:	1a9b      	subs	r3, r3, r2
 800fef6:	08db      	lsrs	r3, r3, #3
 800fef8:	f363 148f 	bfi	r4, r3, #6, #10
	return z_impl_net_addr_ntop(family, src, dst, size);
 800fefc:	490d      	ldr	r1, [pc, #52]	; (800ff34 <ipv6_event_handler+0xd8>)
 800fefe:	aa02      	add	r2, sp, #8
 800ff00:	2328      	movs	r3, #40	; 0x28
 800ff02:	2002      	movs	r0, #2
 800ff04:	f7fc f80c 	bl	800bf20 <z_impl_net_addr_ntop>
 800ff08:	f7f5 ff4c 	bl	8005da4 <log_strdup>
 800ff0c:	4622      	mov	r2, r4
 800ff0e:	4601      	mov	r1, r0
 800ff10:	480d      	ldr	r0, [pc, #52]	; (800ff48 <ipv6_event_handler+0xec>)
 800ff12:	f003 fe83 	bl	8013c1c <log_1>
	return z_impl_k_sem_take(sem, timeout);
 800ff16:	2100      	movs	r1, #0
 800ff18:	480c      	ldr	r0, [pc, #48]	; (800ff4c <ipv6_event_handler+0xf0>)
 800ff1a:	f002 fd07 	bl	801292c <z_impl_k_sem_take>
	z_impl_k_sem_give(sem);
 800ff1e:	480c      	ldr	r0, [pc, #48]	; (800ff50 <ipv6_event_handler+0xf4>)
 800ff20:	f002 fcd8 	bl	80128d4 <z_impl_k_sem_give>
 800ff24:	e7c2      	b.n	800feac <ipv6_event_handler+0x50>
	if (mgmt_event == NET_EVENT_IPV6_ROUTER_ADD) {
 800ff26:	4b0b      	ldr	r3, [pc, #44]	; (800ff54 <ipv6_event_handler+0xf8>)
 800ff28:	4299      	cmp	r1, r3
 800ff2a:	d1bf      	bne.n	800feac <ipv6_event_handler+0x50>
 800ff2c:	e7f3      	b.n	800ff16 <ipv6_event_handler+0xba>
 800ff2e:	bf00      	nop
 800ff30:	e0600001 	.word	0xe0600001
 800ff34:	20000ecc 	.word	0x20000ecc
 800ff38:	e060000d 	.word	0xe060000d
 800ff3c:	20008ff4 	.word	0x20008ff4
 800ff40:	08019248 	.word	0x08019248
 800ff44:	08019290 	.word	0x08019290
 800ff48:	0801d18b 	.word	0x0801d18b
 800ff4c:	20000eb4 	.word	0x20000eb4
 800ff50:	20009104 	.word	0x20009104
 800ff54:	e0600009 	.word	0xe0600009

0800ff58 <net_config_init>:
	return true;
}
#endif

int net_config_init(const char *app_info, u32_t flags, s32_t timeout)
{
 800ff58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff5c:	4615      	mov	r5, r2
 800ff5e:	4681      	mov	r9, r0
 800ff60:	4688      	mov	r8, r1
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
 800ff62:	f7fa fdb9 	bl	800aad8 <net_if_get_default>
	int loop = timeout / LOOP_DIVIDER;
 800ff66:	260a      	movs	r6, #10
	struct net_if *iface = net_if_get_default();
 800ff68:	4607      	mov	r7, r0
	int loop = timeout / LOOP_DIVIDER;
 800ff6a:	fb95 f6f6 	sdiv	r6, r5, r6
	int count, need = 0;

	if (app_info) {
 800ff6e:	f1b9 0f00 	cmp.w	r9, #0
 800ff72:	d018      	beq.n	800ffa6 <net_config_init+0x4e>
		NET_INFO("%s", log_strdup(app_info));
 800ff74:	4b81      	ldr	r3, [pc, #516]	; (801017c <net_config_init+0x224>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f003 0307 	and.w	r3, r3, #7
 800ff7c:	2b02      	cmp	r3, #2
 800ff7e:	d912      	bls.n	800ffa6 <net_config_init+0x4e>
 800ff80:	2303      	movs	r3, #3
 800ff82:	f04f 0400 	mov.w	r4, #0
 800ff86:	4a7e      	ldr	r2, [pc, #504]	; (8010180 <net_config_init+0x228>)
 800ff88:	f363 0407 	bfi	r4, r3, #0, #8
 800ff8c:	4b7d      	ldr	r3, [pc, #500]	; (8010184 <net_config_init+0x22c>)
 800ff8e:	1a9b      	subs	r3, r3, r2
 800ff90:	08db      	lsrs	r3, r3, #3
 800ff92:	4648      	mov	r0, r9
 800ff94:	f363 148f 	bfi	r4, r3, #6, #10
 800ff98:	f7f5 ff04 	bl	8005da4 <log_strdup>
 800ff9c:	4622      	mov	r2, r4
 800ff9e:	4601      	mov	r1, r0
 800ffa0:	4879      	ldr	r0, [pc, #484]	; (8010188 <net_config_init+0x230>)
 800ffa2:	f003 fe3b 	bl	8013c1c <log_1>
	}

	if (!iface) {
 800ffa6:	b9a7      	cbnz	r7, 800ffd2 <net_config_init+0x7a>
		NET_ERR("No network interfaces");
 800ffa8:	4b74      	ldr	r3, [pc, #464]	; (801017c <net_config_init+0x224>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	0759      	lsls	r1, r3, #29
 800ffae:	d00d      	beq.n	800ffcc <net_config_init+0x74>
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	f04f 0100 	mov.w	r1, #0
 800ffb6:	f363 0107 	bfi	r1, r3, #0, #8
 800ffba:	4a71      	ldr	r2, [pc, #452]	; (8010180 <net_config_init+0x228>)
 800ffbc:	4b71      	ldr	r3, [pc, #452]	; (8010184 <net_config_init+0x22c>)
 800ffbe:	4873      	ldr	r0, [pc, #460]	; (801018c <net_config_init+0x234>)
 800ffc0:	1a9b      	subs	r3, r3, r2
 800ffc2:	08db      	lsrs	r3, r3, #3
 800ffc4:	f363 118f 	bfi	r1, r3, #6, #10
 800ffc8:	f003 fe1b 	bl	8013c02 <log_0>
		return -ENODEV;
 800ffcc:	f06f 0012 	mvn.w	r0, #18
 800ffd0:	e061      	b.n	8010096 <net_config_init+0x13e>
	}

	if (timeout < 0) {
 800ffd2:	2d00      	cmp	r5, #0
 800ffd4:	db61      	blt.n	801009a <net_config_init+0x142>
		count = -1;
	} else if (timeout == 0) {
 800ffd6:	d063      	beq.n	80100a0 <net_config_init+0x148>
		count = 0;
	} else {
		count = timeout / 1000 + 1;
 800ffd8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800ffdc:	fb95 f4f4 	sdiv	r4, r5, r4
 800ffe0:	3401      	adds	r4, #1
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	f3bf 8f5b 	dmb	ish
 800ffe8:	68db      	ldr	r3, [r3, #12]
 800ffea:	f3bf 8f5b 	dmb	ish
	if (net_if_is_up(iface)) {
 800ffee:	07da      	lsls	r2, r3, #31
 800fff0:	d558      	bpl.n	80100a4 <net_config_init+0x14c>
 800fff2:	4b67      	ldr	r3, [pc, #412]	; (8010190 <net_config_init+0x238>)
 800fff4:	2200      	movs	r2, #0
 800fff6:	609a      	str	r2, [r3, #8]
 800fff8:	4866      	ldr	r0, [pc, #408]	; (8010194 <net_config_init+0x23c>)
 800fffa:	f002 fc6b 	bl	80128d4 <z_impl_k_sem_give>
#if defined(CONFIG_NET_NATIVE)
		net_mgmt_del_event_callback(&mgmt_iface_cb);
#endif
	}

	if (flags & NET_CONFIG_NEED_IPV6) {
 800fffe:	f3c8 0140 	ubfx	r1, r8, #1, #1
		need++;
	}

	if (flags & NET_CONFIG_NEED_IPV4) {
 8010002:	f018 0f04 	tst.w	r8, #4
		need++;
 8010006:	bf18      	it	ne
 8010008:	3101      	addne	r1, #1
	z_impl_k_sem_init(sem, initial_count, limit);
 801000a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801000e:	4860      	ldr	r0, [pc, #384]	; (8010190 <net_config_init+0x238>)
 8010010:	f008 fcbb 	bl	801898a <z_impl_k_sem_init>
	return z_impl_net_addr_pton(family, src, dst);
 8010014:	4a60      	ldr	r2, [pc, #384]	; (8010198 <net_config_init+0x240>)
 8010016:	4961      	ldr	r1, [pc, #388]	; (801019c <net_config_init+0x244>)
 8010018:	2002      	movs	r0, #2
 801001a:	f006 f81d 	bl	8016058 <z_impl_net_addr_pton>
	if (net_addr_pton(AF_INET6, CONFIG_NET_CONFIG_MY_IPV6_ADDR, &laddr)) {
 801001e:	b190      	cbz	r0, 8010046 <net_config_init+0xee>
		NET_ERR("Invalid address: %s", CONFIG_NET_CONFIG_MY_IPV6_ADDR);
 8010020:	4b56      	ldr	r3, [pc, #344]	; (801017c <net_config_init+0x224>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	0758      	lsls	r0, r3, #29
 8010026:	d00e      	beq.n	8010046 <net_config_init+0xee>
 8010028:	2301      	movs	r3, #1
 801002a:	f04f 0200 	mov.w	r2, #0
 801002e:	f363 0207 	bfi	r2, r3, #0, #8
 8010032:	4953      	ldr	r1, [pc, #332]	; (8010180 <net_config_init+0x228>)
 8010034:	4b53      	ldr	r3, [pc, #332]	; (8010184 <net_config_init+0x22c>)
 8010036:	485a      	ldr	r0, [pc, #360]	; (80101a0 <net_config_init+0x248>)
 8010038:	1a5b      	subs	r3, r3, r1
 801003a:	08db      	lsrs	r3, r3, #3
 801003c:	f363 128f 	bfi	r2, r3, #6, #10
 8010040:	4956      	ldr	r1, [pc, #344]	; (801019c <net_config_init+0x244>)
 8010042:	f003 fdeb 	bl	8013c1c <log_1>
	cb->handler = handler;
 8010046:	4857      	ldr	r0, [pc, #348]	; (80101a4 <net_config_init+0x24c>)
 8010048:	4b57      	ldr	r3, [pc, #348]	; (80101a8 <net_config_init+0x250>)
 801004a:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
 801004c:	4b57      	ldr	r3, [pc, #348]	; (80101ac <net_config_init+0x254>)
 801004e:	6083      	str	r3, [r0, #8]
	net_mgmt_add_event_callback(&mgmt6_cb);
 8010050:	f7fc f8ee 	bl	800c230 <net_mgmt_add_event_callback>
		ifaddr = net_if_ipv6_addr_add(iface, &laddr,
 8010054:	2300      	movs	r3, #0
 8010056:	2203      	movs	r2, #3
 8010058:	494f      	ldr	r1, [pc, #316]	; (8010198 <net_config_init+0x240>)
 801005a:	4638      	mov	r0, r7
 801005c:	f7fa feb6 	bl	800adcc <net_if_ipv6_addr_add>
		if (!ifaddr) {
 8010060:	b990      	cbnz	r0, 8010088 <net_config_init+0x130>
			NET_ERR("Cannot add %s to interface",
 8010062:	4b46      	ldr	r3, [pc, #280]	; (801017c <net_config_init+0x224>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	0759      	lsls	r1, r3, #29
 8010068:	d00e      	beq.n	8010088 <net_config_init+0x130>
 801006a:	2301      	movs	r3, #1
 801006c:	f04f 0200 	mov.w	r2, #0
 8010070:	f363 0207 	bfi	r2, r3, #0, #8
 8010074:	4942      	ldr	r1, [pc, #264]	; (8010180 <net_config_init+0x228>)
 8010076:	4b43      	ldr	r3, [pc, #268]	; (8010184 <net_config_init+0x22c>)
 8010078:	484d      	ldr	r0, [pc, #308]	; (80101b0 <net_config_init+0x258>)
 801007a:	1a5b      	subs	r3, r3, r1
 801007c:	08db      	lsrs	r3, r3, #3
 801007e:	f363 128f 	bfi	r2, r3, #6, #10
 8010082:	4946      	ldr	r1, [pc, #280]	; (801019c <net_config_init+0x244>)
 8010084:	f003 fdca 	bl	8013c1c <log_1>
	return z_impl_k_sem_take(sem, timeout);
 8010088:	4f42      	ldr	r7, [pc, #264]	; (8010194 <net_config_init+0x23c>)
	return z_impl_k_sem_count_get(sem);
 801008a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8010190 <net_config_init+0x238>
 801008e:	3c01      	subs	r4, #1
	setup_ipv6(iface, flags);

	/* Loop here until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
 8010090:	1c62      	adds	r2, r4, #1
 8010092:	d150      	bne.n	8010136 <net_config_init+0x1de>
	if (!count && timeout) {
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
 8010094:	2000      	movs	r0, #0
}
 8010096:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		count = -1;
 801009a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801009e:	e7a0      	b.n	800ffe2 <net_config_init+0x8a>
		count = 0;
 80100a0:	462c      	mov	r4, r5
 80100a2:	e79e      	b.n	800ffe2 <net_config_init+0x8a>
	NET_INFO("Waiting interface %p to be up...", iface);
 80100a4:	4b35      	ldr	r3, [pc, #212]	; (801017c <net_config_init+0x224>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f003 0307 	and.w	r3, r3, #7
 80100ac:	2b02      	cmp	r3, #2
 80100ae:	d90e      	bls.n	80100ce <net_config_init+0x176>
 80100b0:	2303      	movs	r3, #3
 80100b2:	f04f 0200 	mov.w	r2, #0
 80100b6:	f363 0207 	bfi	r2, r3, #0, #8
 80100ba:	4931      	ldr	r1, [pc, #196]	; (8010180 <net_config_init+0x228>)
 80100bc:	4b31      	ldr	r3, [pc, #196]	; (8010184 <net_config_init+0x22c>)
 80100be:	483d      	ldr	r0, [pc, #244]	; (80101b4 <net_config_init+0x25c>)
 80100c0:	1a5b      	subs	r3, r3, r1
 80100c2:	08db      	lsrs	r3, r3, #3
 80100c4:	f363 128f 	bfi	r2, r3, #6, #10
 80100c8:	4639      	mov	r1, r7
 80100ca:	f003 fda7 	bl	8013c1c <log_1>
	cb->handler = handler;
 80100ce:	483a      	ldr	r0, [pc, #232]	; (80101b8 <net_config_init+0x260>)
 80100d0:	4b3a      	ldr	r3, [pc, #232]	; (80101bc <net_config_init+0x264>)
 80100d2:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
 80100d4:	4b3a      	ldr	r3, [pc, #232]	; (80101c0 <net_config_init+0x268>)
 80100d6:	6083      	str	r3, [r0, #8]
	net_mgmt_add_event_callback(&mgmt_iface_cb);
 80100d8:	f7fc f8aa 	bl	800c230 <net_mgmt_add_event_callback>
	z_impl_k_sem_init(sem, initial_count, limit);
 80100dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100e0:	2101      	movs	r1, #1
 80100e2:	482b      	ldr	r0, [pc, #172]	; (8010190 <net_config_init+0x238>)
	return z_impl_k_sem_count_get(sem);
 80100e4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8010190 <net_config_init+0x238>
	return z_impl_k_sem_take(sem, timeout);
 80100e8:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8010194 <net_config_init+0x23c>
	z_impl_k_sem_init(sem, initial_count, limit);
 80100ec:	f008 fc4d 	bl	801898a <z_impl_k_sem_init>
 80100f0:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
		while (count--) {
 80100f4:	f119 0301 	adds.w	r3, r9, #1
 80100f8:	464c      	mov	r4, r9
 80100fa:	d105      	bne.n	8010108 <net_config_init+0x1b0>
		if (timeout > 0 && count < 0) {
 80100fc:	2d00      	cmp	r5, #0
 80100fe:	bfcc      	ite	gt
 8010100:	2400      	movgt	r4, #0
 8010102:	2401      	movle	r4, #1
 8010104:	4264      	negs	r4, r4
 8010106:	e012      	b.n	801012e <net_config_init+0x1d6>
			if (!k_sem_count_get(&counter)) {
 8010108:	f8da 3008 	ldr.w	r3, [sl, #8]
 801010c:	b15b      	cbz	r3, 8010126 <net_config_init+0x1ce>
	return z_impl_k_sem_take(sem, timeout);
 801010e:	4631      	mov	r1, r6
 8010110:	4658      	mov	r0, fp
 8010112:	f002 fc0b 	bl	801292c <z_impl_k_sem_take>
			if (k_sem_take(&waiter, loop)) {
 8010116:	b910      	cbnz	r0, 801011e <net_config_init+0x1c6>
 8010118:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801011c:	e7ea      	b.n	80100f4 <net_config_init+0x19c>
				if (!k_sem_count_get(&counter)) {
 801011e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d1f8      	bne.n	8010118 <net_config_init+0x1c0>
		if (timeout > 0 && count < 0) {
 8010126:	2d00      	cmp	r5, #0
 8010128:	bfc8      	it	gt
 801012a:	ea29 74e9 	bicgt.w	r4, r9, r9, asr #31
		net_mgmt_del_event_callback(&mgmt_iface_cb);
 801012e:	4822      	ldr	r0, [pc, #136]	; (80101b8 <net_config_init+0x260>)
 8010130:	f7fc f89c 	bl	800c26c <net_mgmt_del_event_callback>
 8010134:	e763      	b.n	800fffe <net_config_init+0xa6>
 8010136:	4631      	mov	r1, r6
 8010138:	4638      	mov	r0, r7
 801013a:	f002 fbf7 	bl	801292c <z_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
 801013e:	b1d8      	cbz	r0, 8010178 <net_config_init+0x220>
			if (!k_sem_count_get(&counter)) {
 8010140:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010144:	b9c3      	cbnz	r3, 8010178 <net_config_init+0x220>
	if (!count && timeout) {
 8010146:	2c00      	cmp	r4, #0
 8010148:	d1a4      	bne.n	8010094 <net_config_init+0x13c>
 801014a:	2d00      	cmp	r5, #0
 801014c:	d0a2      	beq.n	8010094 <net_config_init+0x13c>
		NET_ERR("Timeout while waiting setup");
 801014e:	4b0b      	ldr	r3, [pc, #44]	; (801017c <net_config_init+0x224>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	075b      	lsls	r3, r3, #29
 8010154:	d00d      	beq.n	8010172 <net_config_init+0x21a>
 8010156:	2301      	movs	r3, #1
 8010158:	f04f 0100 	mov.w	r1, #0
 801015c:	f363 0107 	bfi	r1, r3, #0, #8
 8010160:	4a07      	ldr	r2, [pc, #28]	; (8010180 <net_config_init+0x228>)
 8010162:	4b08      	ldr	r3, [pc, #32]	; (8010184 <net_config_init+0x22c>)
 8010164:	4817      	ldr	r0, [pc, #92]	; (80101c4 <net_config_init+0x26c>)
 8010166:	1a9b      	subs	r3, r3, r2
 8010168:	08db      	lsrs	r3, r3, #3
 801016a:	f363 118f 	bfi	r1, r3, #6, #10
 801016e:	f003 fd48 	bl	8013c02 <log_0>
		return -ETIMEDOUT;
 8010172:	f06f 0073 	mvn.w	r0, #115	; 0x73
 8010176:	e78e      	b.n	8010096 <net_config_init+0x13e>
 8010178:	3c01      	subs	r4, #1
 801017a:	e789      	b.n	8010090 <net_config_init+0x138>
 801017c:	20008ff4 	.word	0x20008ff4
 8010180:	08019248 	.word	0x08019248
 8010184:	08019290 	.word	0x08019290
 8010188:	0801d406 	.word	0x0801d406
 801018c:	0801d19c 	.word	0x0801d19c
 8010190:	20000eb4 	.word	0x20000eb4
 8010194:	20009104 	.word	0x20009104
 8010198:	20000ecc 	.word	0x20000ecc
 801019c:	0801d1d3 	.word	0x0801d1d3
 80101a0:	0801d1e0 	.word	0x0801d1e0
 80101a4:	20000edc 	.word	0x20000edc
 80101a8:	0800fe5d 	.word	0x0800fe5d
 80101ac:	e060000d 	.word	0xe060000d
 80101b0:	0801d1f4 	.word	0x0801d1f4
 80101b4:	0801d1b2 	.word	0x0801d1b2
 80101b8:	20000ee8 	.word	0x20000ee8
 80101bc:	0800fdf9 	.word	0x0800fdf9
 80101c0:	d0010002 	.word	0xd0010002
 80101c4:	0801d20f 	.word	0x0801d20f

080101c8 <init_app>:

#if defined(CONFIG_NET_CONFIG_AUTO_INIT)
static int init_app(struct device *device)
{
 80101c8:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_NET_CONFIG_NEED_IPV4)) {
		flags |= NET_CONFIG_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_config_init("Initializing network", flags,
 80101ca:	f247 5230 	movw	r2, #30000	; 0x7530
 80101ce:	2102      	movs	r1, #2
 80101d0:	480c      	ldr	r0, [pc, #48]	; (8010204 <init_app+0x3c>)
 80101d2:	f7ff fec1 	bl	800ff58 <net_config_init>
			      K_SECONDS(CONFIG_NET_CONFIG_INIT_TIMEOUT));
	if (ret < 0) {
 80101d6:	1e04      	subs	r4, r0, #0
 80101d8:	da12      	bge.n	8010200 <init_app+0x38>
		NET_ERR("Network initialization failed (%d)", ret);
 80101da:	4b0b      	ldr	r3, [pc, #44]	; (8010208 <init_app+0x40>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	075b      	lsls	r3, r3, #29
 80101e0:	d00e      	beq.n	8010200 <init_app+0x38>
 80101e2:	2301      	movs	r3, #1
 80101e4:	f04f 0200 	mov.w	r2, #0
 80101e8:	f363 0207 	bfi	r2, r3, #0, #8
 80101ec:	4907      	ldr	r1, [pc, #28]	; (801020c <init_app+0x44>)
 80101ee:	4b08      	ldr	r3, [pc, #32]	; (8010210 <init_app+0x48>)
 80101f0:	4808      	ldr	r0, [pc, #32]	; (8010214 <init_app+0x4c>)
 80101f2:	1a5b      	subs	r3, r3, r1
 80101f4:	08db      	lsrs	r3, r3, #3
 80101f6:	f363 128f 	bfi	r2, r3, #6, #10
 80101fa:	4621      	mov	r1, r4
 80101fc:	f003 fd0e 	bl	8013c1c <log_1>
			log_backend_activate(backend, NULL);
		}
	}

	return ret;
}
 8010200:	4620      	mov	r0, r4
 8010202:	bd10      	pop	{r4, pc}
 8010204:	0801d153 	.word	0x0801d153
 8010208:	20008ff4 	.word	0x20008ff4
 801020c:	08019248 	.word	0x08019248
 8010210:	08019290 	.word	0x08019290
 8010214:	0801d168 	.word	0x0801d168

08010218 <sys_rand32_get>:
 *
 * @return a 32-bit number
 */

u32_t sys_rand32_get(void)
{
 8010218:	b508      	push	{r3, lr}
 801021a:	f7f9 fbb7 	bl	800998c <z_timer_cycle_get_32>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 801021e:	f3bf 8f5b 	dmb	ish
 8010222:	4b07      	ldr	r3, [pc, #28]	; (8010240 <sys_rand32_get+0x28>)
 8010224:	e853 2f00 	ldrex	r2, [r3]
 8010228:	4906      	ldr	r1, [pc, #24]	; (8010244 <sys_rand32_get+0x2c>)
 801022a:	1851      	adds	r1, r2, r1
 801022c:	e843 1c00 	strex	ip, r1, [r3]
 8010230:	f1bc 0f00 	cmp.w	ip, #0
 8010234:	d1f6      	bne.n	8010224 <sys_rand32_get+0xc>
 8010236:	f3bf 8f5b 	dmb	ish
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
}
 801023a:	4410      	add	r0, r2
 801023c:	bd08      	pop	{r3, pc}
 801023e:	bf00      	nop
 8010240:	20000ef4 	.word	0x20000ef4
 8010244:	3b9aca0d 	.word	0x3b9aca0d

08010248 <gpio_stm32_init>:
 *
 * @return 0
 */
static int gpio_stm32_init(struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8010248:	6803      	ldr	r3, [r0, #0]
{
 801024a:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config->config_info;
 801024c:	689c      	ldr	r4, [r3, #8]
 801024e:	4806      	ldr	r0, [pc, #24]	; (8010268 <gpio_stm32_init+0x20>)
 8010250:	f001 fc72 	bl	8011b38 <z_impl_device_get_binding>
 8010254:	6843      	ldr	r3, [r0, #4]
 8010256:	f104 0108 	add.w	r1, r4, #8
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4798      	blx	r3

	/* enable clock for subsystem */
	struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 801025e:	2800      	cmp	r0, #0
		}
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 8010260:	bf18      	it	ne
 8010262:	f06f 0004 	mvnne.w	r0, #4
 8010266:	bd10      	pop	{r4, pc}
 8010268:	0801b322 	.word	0x0801b322

0801026c <gpio_stm32_config>:
{
 801026c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8010270:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8010272:	6803      	ldr	r3, [r0, #0]
 8010274:	689f      	ldr	r7, [r3, #8]
	if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
 8010276:	f005 0380 	and.w	r3, r5, #128	; 0x80
 801027a:	430b      	orrs	r3, r1
{
 801027c:	4680      	mov	r8, r0
 801027e:	4614      	mov	r4, r2
	if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
 8010280:	d005      	beq.n	801028e <gpio_stm32_config+0x22>
		return -ENOTSUP;
 8010282:	f06f 0685 	mvn.w	r6, #133	; 0x85
}
 8010286:	4630      	mov	r0, r6
 8010288:	b004      	add	sp, #16
 801028a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	map_res = gpio_stm32_flags_to_conf(flags, &pincfg);
 801028e:	a901      	add	r1, sp, #4
 8010290:	4628      	mov	r0, r5
 8010292:	f007 fd4d 	bl	8017d30 <gpio_stm32_flags_to_conf>
	if (map_res != 0) {
 8010296:	4606      	mov	r6, r0
 8010298:	2800      	cmp	r0, #0
 801029a:	d1f4      	bne.n	8010286 <gpio_stm32_config+0x1a>
	if (gpio_stm32_configure(cfg->base, pin, pincfg, 0) != 0) {
 801029c:	4603      	mov	r3, r0
 801029e:	9a01      	ldr	r2, [sp, #4]
 80102a0:	6838      	ldr	r0, [r7, #0]
 80102a2:	4621      	mov	r1, r4
 80102a4:	f007 fd61 	bl	8017d6a <gpio_stm32_configure>
 80102a8:	b110      	cbz	r0, 80102b0 <gpio_stm32_config+0x44>
		err = -EIO;
 80102aa:	f06f 0604 	mvn.w	r6, #4
 80102ae:	e7ea      	b.n	8010286 <gpio_stm32_config+0x1a>
	if (flags & GPIO_INT) {
 80102b0:	f015 0602 	ands.w	r6, r5, #2
 80102b4:	6879      	ldr	r1, [r7, #4]
 80102b6:	d051      	beq.n	801035c <gpio_stm32_config+0xf0>
		if (stm32_exti_set_callback(pin, cfg->port,
 80102b8:	4643      	mov	r3, r8
 80102ba:	4a41      	ldr	r2, [pc, #260]	; (80103c0 <gpio_stm32_config+0x154>)
 80102bc:	4620      	mov	r0, r4
 80102be:	f7f8 fcfd 	bl	8008cbc <stm32_exti_set_callback>
 80102c2:	2800      	cmp	r0, #0
 80102c4:	d178      	bne.n	80103b8 <gpio_stm32_config+0x14c>
		gpio_stm32_enable_int(cfg->port, pin);
 80102c6:	687e      	ldr	r6, [r7, #4]
 80102c8:	483e      	ldr	r0, [pc, #248]	; (80103c4 <gpio_stm32_config+0x158>)
 80102ca:	f001 fc35 	bl	8011b38 <z_impl_device_get_binding>
	struct stm32_pclken pclken = {
 80102ce:	493e      	ldr	r1, [pc, #248]	; (80103c8 <gpio_stm32_config+0x15c>)
 80102d0:	4602      	mov	r2, r0
 80102d2:	c903      	ldmia	r1, {r0, r1}
 80102d4:	ab02      	add	r3, sp, #8
 80102d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80102da:	6851      	ldr	r1, [r2, #4]
 80102dc:	4610      	mov	r0, r2
 80102de:	680f      	ldr	r7, [r1, #0]
 80102e0:	4619      	mov	r1, r3
 80102e2:	47b8      	blx	r7
	if (pin > 15) {
 80102e4:	2c0f      	cmp	r4, #15
 80102e6:	dc24      	bgt.n	8010332 <gpio_stm32_config+0xc6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80102e8:	4262      	negs	r2, r4
 80102ea:	f002 0203 	and.w	r2, r2, #3
 80102ee:	f004 0303 	and.w	r3, r4, #3
 80102f2:	bf58      	it	pl
 80102f4:	4253      	negpl	r3, r2
 80102f6:	3304      	adds	r3, #4
 80102f8:	009a      	lsls	r2, r3, #2
 80102fa:	2c00      	cmp	r4, #0
 80102fc:	f04f 030f 	mov.w	r3, #15
 8010300:	fa03 f302 	lsl.w	r3, r3, r2
 8010304:	4622      	mov	r2, r4
 8010306:	bfb8      	it	lt
 8010308:	1ce2      	addlt	r2, r4, #3
 801030a:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 801030e:	b2da      	uxtb	r2, r3
 8010310:	0092      	lsls	r2, r2, #2
 8010312:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8010316:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 801031a:	0c1b      	lsrs	r3, r3, #16
 801031c:	6891      	ldr	r1, [r2, #8]
 801031e:	ea21 0103 	bic.w	r1, r1, r3
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010322:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8010326:	fab3 f383 	clz	r3, r3
 801032a:	fa06 f303 	lsl.w	r3, r6, r3
 801032e:	430b      	orrs	r3, r1
 8010330:	6093      	str	r3, [r2, #8]
		if ((flags & GPIO_INT_EDGE) != 0) {
 8010332:	06aa      	lsls	r2, r5, #26
 8010334:	d5a5      	bpl.n	8010282 <gpio_stm32_config+0x16>
			if ((flags & GPIO_INT_DOUBLE_EDGE) != 0) {
 8010336:	066b      	lsls	r3, r5, #25
 8010338:	d40e      	bmi.n	8010358 <gpio_stm32_config+0xec>
				edge = STM32_EXTI_TRIG_FALLING;
 801033a:	f015 0f04 	tst.w	r5, #4
 801033e:	bf14      	ite	ne
 8010340:	2101      	movne	r1, #1
 8010342:	2102      	moveq	r1, #2
			stm32_exti_trigger(pin, edge);
 8010344:	4620      	mov	r0, r4
 8010346:	f7f8 fca1 	bl	8008c8c <stm32_exti_trigger>
		if (stm32_exti_enable(pin) != 0) {
 801034a:	4620      	mov	r0, r4
 801034c:	f7f8 fc7a 	bl	8008c44 <stm32_exti_enable>
 8010350:	2800      	cmp	r0, #0
 8010352:	d1aa      	bne.n	80102aa <gpio_stm32_config+0x3e>
	int err = 0;
 8010354:	2600      	movs	r6, #0
 8010356:	e796      	b.n	8010286 <gpio_stm32_config+0x1a>
				edge = STM32_EXTI_TRIG_RISING |
 8010358:	2103      	movs	r1, #3
 801035a:	e7f3      	b.n	8010344 <gpio_stm32_config+0xd8>
	if (pin > 15) {
 801035c:	2c0f      	cmp	r4, #15
 801035e:	dc28      	bgt.n	80103b2 <gpio_stm32_config+0x146>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8010360:	4263      	negs	r3, r4
 8010362:	f003 0303 	and.w	r3, r3, #3
 8010366:	f004 0203 	and.w	r2, r4, #3
 801036a:	bf58      	it	pl
 801036c:	425a      	negpl	r2, r3
 801036e:	3204      	adds	r2, #4
 8010370:	0093      	lsls	r3, r2, #2
 8010372:	2c00      	cmp	r4, #0
 8010374:	f04f 020f 	mov.w	r2, #15
 8010378:	fa02 f203 	lsl.w	r2, r2, r3
 801037c:	4623      	mov	r3, r4
 801037e:	bfb8      	it	lt
 8010380:	1ce3      	addlt	r3, r4, #3
 8010382:	ea42 02a3 	orr.w	r2, r2, r3, asr #2
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 8010386:	b2d3      	uxtb	r3, r2
 8010388:	4810      	ldr	r0, [pc, #64]	; (80103cc <gpio_stm32_config+0x160>)
 801038a:	3302      	adds	r3, #2
 801038c:	0c12      	lsrs	r2, r2, #16
 801038e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010392:	4013      	ands	r3, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010394:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8010398:	fab2 f282 	clz	r2, r2
 801039c:	fa23 f202 	lsr.w	r2, r3, r2
		if (gpio_stm32_int_enabled_port(pin) == cfg->port) {
 80103a0:	4291      	cmp	r1, r2
 80103a2:	d1d7      	bne.n	8010354 <gpio_stm32_config+0xe8>
			stm32_exti_disable(pin);
 80103a4:	4620      	mov	r0, r4
 80103a6:	f7f8 fc65 	bl	8008c74 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80103aa:	4620      	mov	r0, r4
 80103ac:	f7f8 fc98 	bl	8008ce0 <stm32_exti_unset_callback>
 80103b0:	e769      	b.n	8010286 <gpio_stm32_config+0x1a>
		return -EINVAL;
 80103b2:	f06f 0215 	mvn.w	r2, #21
 80103b6:	e7f3      	b.n	80103a0 <gpio_stm32_config+0x134>
			err = -EBUSY;
 80103b8:	f06f 060f 	mvn.w	r6, #15
 80103bc:	e763      	b.n	8010286 <gpio_stm32_config+0x1a>
 80103be:	bf00      	nop
 80103c0:	08017c35 	.word	0x08017c35
 80103c4:	0801b322 	.word	0x0801b322
 80103c8:	080194c8 	.word	0x080194c8
 80103cc:	40010000 	.word	0x40010000

080103d0 <cmd_gpio_conf>:
{
	u8_t index = 0U;
	int type = GPIO_DIR_OUT;
	struct device *dev;

	if (argc == args_no.conf &&
 80103d0:	2904      	cmp	r1, #4
{
 80103d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80103d6:	4680      	mov	r8, r0
 80103d8:	4614      	mov	r4, r2
	if (argc == args_no.conf &&
 80103da:	d119      	bne.n	8010410 <cmd_gpio_conf+0x40>
	    isdigit((unsigned char)argv[args_indx.index][0]) &&
 80103dc:	6890      	ldr	r0, [r2, #8]
 80103de:	4b1e      	ldr	r3, [pc, #120]	; (8010458 <cmd_gpio_conf+0x88>)
 80103e0:	7802      	ldrb	r2, [r0, #0]
	if (argc == args_no.conf &&
 80103e2:	5cd2      	ldrb	r2, [r2, r3]
 80103e4:	0752      	lsls	r2, r2, #29
 80103e6:	d513      	bpl.n	8010410 <cmd_gpio_conf+0x40>
	    isalpha((unsigned char)argv[args_indx.mode][0])) {
 80103e8:	68e2      	ldr	r2, [r4, #12]
 80103ea:	7812      	ldrb	r2, [r2, #0]
	    isdigit((unsigned char)argv[args_indx.index][0]) &&
 80103ec:	5cd3      	ldrb	r3, [r2, r3]
 80103ee:	079b      	lsls	r3, r3, #30
 80103f0:	d00e      	beq.n	8010410 <cmd_gpio_conf+0x40>
		index = (u8_t)atoi(argv[args_indx.index]);
 80103f2:	f7f4 fa7e 	bl	80048f2 <atoi>
		if (!strcmp(argv[args_indx.mode], "in")) {
 80103f6:	4919      	ldr	r1, [pc, #100]	; (801045c <cmd_gpio_conf+0x8c>)
 80103f8:	68e0      	ldr	r0, [r4, #12]
 80103fa:	f7f4 fae7 	bl	80049cc <strcmp>
 80103fe:	4606      	mov	r6, r0
 8010400:	b188      	cbz	r0, 8010426 <cmd_gpio_conf+0x56>
			type = GPIO_DIR_IN;
		} else if (!strcmp(argv[args_indx.mode], "out")) {
 8010402:	4917      	ldr	r1, [pc, #92]	; (8010460 <cmd_gpio_conf+0x90>)
 8010404:	68e0      	ldr	r0, [r4, #12]
 8010406:	f7f4 fae1 	bl	80049cc <strcmp>
 801040a:	b158      	cbz	r0, 8010424 <cmd_gpio_conf+0x54>
		shell_print(shell, "Configuring %s pin %d",
			    argv[args_indx.port], index);
		gpio_pin_configure(dev, index, type);
	}

	return 0;
 801040c:	2000      	movs	r0, #0
 801040e:	e006      	b.n	801041e <cmd_gpio_conf+0x4e>
		shell_error(shell, "Wrong parameters for conf");
 8010410:	4640      	mov	r0, r8
 8010412:	4a14      	ldr	r2, [pc, #80]	; (8010464 <cmd_gpio_conf+0x94>)
 8010414:	2102      	movs	r1, #2
 8010416:	f003 ffad 	bl	8014374 <shell_fprintf>
		return -ENOTSUP;
 801041a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 801041e:	b002      	add	sp, #8
 8010420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			type = GPIO_DIR_OUT;
 8010424:	2601      	movs	r6, #1
	dev = device_get_binding(argv[args_indx.port]);
 8010426:	6860      	ldr	r0, [r4, #4]
 8010428:	f001 fb86 	bl	8011b38 <z_impl_device_get_binding>
	if (dev != NULL) {
 801042c:	4605      	mov	r5, r0
 801042e:	2800      	cmp	r0, #0
 8010430:	d0ec      	beq.n	801040c <cmd_gpio_conf+0x3c>
		index = (uint8_t)atoi(argv[args_indx.index]);
 8010432:	68a0      	ldr	r0, [r4, #8]
 8010434:	f7f4 fa5d 	bl	80048f2 <atoi>
		shell_print(shell, "Configuring %s pin %d",
 8010438:	b2c7      	uxtb	r7, r0
 801043a:	9700      	str	r7, [sp, #0]
 801043c:	6863      	ldr	r3, [r4, #4]
 801043e:	4a0a      	ldr	r2, [pc, #40]	; (8010468 <cmd_gpio_conf+0x98>)
 8010440:	2100      	movs	r1, #0
 8010442:	4640      	mov	r0, r8
 8010444:	f003 ff96 	bl	8014374 <shell_fprintf>
	return api->config(port, access_op, pin, flags);
 8010448:	686b      	ldr	r3, [r5, #4]
 801044a:	463a      	mov	r2, r7
 801044c:	681c      	ldr	r4, [r3, #0]
 801044e:	2100      	movs	r1, #0
 8010450:	4633      	mov	r3, r6
 8010452:	4628      	mov	r0, r5
 8010454:	47a0      	blx	r4
 8010456:	e7d9      	b.n	801040c <cmd_gpio_conf+0x3c>
 8010458:	08019513 	.word	0x08019513
 801045c:	0801d78c 	.word	0x0801d78c
 8010460:	0801d24e 	.word	0x0801d24e
 8010464:	0801d252 	.word	0x0801d252
 8010468:	0801d26d 	.word	0x0801d26d

0801046c <cmd_gpio_set>:
{
	struct device *dev;
	u8_t index = 0U;
	u8_t value = 0U;

	if (argc == args_no.set &&
 801046c:	2904      	cmp	r1, #4
{
 801046e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010472:	4607      	mov	r7, r0
 8010474:	4615      	mov	r5, r2
	if (argc == args_no.set &&
 8010476:	d117      	bne.n	80104a8 <cmd_gpio_set+0x3c>
	    isdigit((unsigned char)argv[args_indx.index][0]) &&
 8010478:	6890      	ldr	r0, [r2, #8]
 801047a:	4b1a      	ldr	r3, [pc, #104]	; (80104e4 <cmd_gpio_set+0x78>)
 801047c:	7802      	ldrb	r2, [r0, #0]
	if (argc == args_no.set &&
 801047e:	5cd2      	ldrb	r2, [r2, r3]
 8010480:	0752      	lsls	r2, r2, #29
 8010482:	d511      	bpl.n	80104a8 <cmd_gpio_set+0x3c>
	    isdigit((unsigned char)argv[args_indx.value][0])) {
 8010484:	68ea      	ldr	r2, [r5, #12]
 8010486:	7812      	ldrb	r2, [r2, #0]
	    isdigit((unsigned char)argv[args_indx.index][0]) &&
 8010488:	5cd3      	ldrb	r3, [r2, r3]
 801048a:	075b      	lsls	r3, r3, #29
 801048c:	d50c      	bpl.n	80104a8 <cmd_gpio_set+0x3c>
		index = (uint8_t)atoi(argv[args_indx.index]);
 801048e:	f7f4 fa30 	bl	80048f2 <atoi>
		value = (uint8_t)atoi(argv[args_indx.value]);
 8010492:	68e8      	ldr	r0, [r5, #12]
 8010494:	f7f4 fa2d 	bl	80048f2 <atoi>
 8010498:	4680      	mov	r8, r0
	} else {
		shell_print(shell, "Wrong parameters for set");
		return -EINVAL;
	}
	dev = device_get_binding(argv[args_indx.port]);
 801049a:	6868      	ldr	r0, [r5, #4]
 801049c:	f001 fb4c 	bl	8011b38 <z_impl_device_get_binding>

	if (dev != NULL) {
 80104a0:	4604      	mov	r4, r0
 80104a2:	b958      	cbnz	r0, 80104bc <cmd_gpio_set+0x50>
		shell_print(shell, "Writing to %s pin %d",
			    argv[args_indx.port], index);
		gpio_pin_write(dev, index, value);
	}

	return 0;
 80104a4:	2000      	movs	r0, #0
 80104a6:	e006      	b.n	80104b6 <cmd_gpio_set+0x4a>
		shell_print(shell, "Wrong parameters for set");
 80104a8:	4638      	mov	r0, r7
 80104aa:	4a0f      	ldr	r2, [pc, #60]	; (80104e8 <cmd_gpio_set+0x7c>)
 80104ac:	2100      	movs	r1, #0
 80104ae:	f003 ff61 	bl	8014374 <shell_fprintf>
		return -EINVAL;
 80104b2:	f06f 0015 	mvn.w	r0, #21
}
 80104b6:	b002      	add	sp, #8
 80104b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		index = (u8_t)atoi(argv[2]);
 80104bc:	68a8      	ldr	r0, [r5, #8]
 80104be:	f7f4 fa18 	bl	80048f2 <atoi>
		shell_print(shell, "Writing to %s pin %d",
 80104c2:	b2c6      	uxtb	r6, r0
 80104c4:	9600      	str	r6, [sp, #0]
 80104c6:	686b      	ldr	r3, [r5, #4]
 80104c8:	4a08      	ldr	r2, [pc, #32]	; (80104ec <cmd_gpio_set+0x80>)
 80104ca:	2100      	movs	r1, #0
 80104cc:	4638      	mov	r0, r7
 80104ce:	f003 ff51 	bl	8014374 <shell_fprintf>
	return api->write(port, access_op, pin, value);
 80104d2:	6863      	ldr	r3, [r4, #4]
 80104d4:	4632      	mov	r2, r6
 80104d6:	685d      	ldr	r5, [r3, #4]
 80104d8:	2100      	movs	r1, #0
 80104da:	fa5f f388 	uxtb.w	r3, r8
 80104de:	4620      	mov	r0, r4
 80104e0:	47a8      	blx	r5
 80104e2:	e7df      	b.n	80104a4 <cmd_gpio_set+0x38>
 80104e4:	08019513 	.word	0x08019513
 80104e8:	0801d2d0 	.word	0x0801d2d0
 80104ec:	0801d2ea 	.word	0x0801d2ea

080104f0 <cmd_gpio_get>:
{
 80104f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (argc == args_no.get && isdigit((unsigned char)argv[args_indx.index][0])) {
 80104f4:	2903      	cmp	r1, #3
	u32_t value = 0U;
 80104f6:	f04f 0700 	mov.w	r7, #0
{
 80104fa:	4605      	mov	r5, r0
 80104fc:	4616      	mov	r6, r2
	u32_t value = 0U;
 80104fe:	9703      	str	r7, [sp, #12]
	if (argc == args_no.get && isdigit((unsigned char)argv[args_indx.index][0])) {
 8010500:	d110      	bne.n	8010524 <cmd_gpio_get+0x34>
 8010502:	6890      	ldr	r0, [r2, #8]
 8010504:	4b1e      	ldr	r3, [pc, #120]	; (8010580 <cmd_gpio_get+0x90>)
 8010506:	7802      	ldrb	r2, [r0, #0]
 8010508:	5cd3      	ldrb	r3, [r2, r3]
 801050a:	075b      	lsls	r3, r3, #29
 801050c:	d50a      	bpl.n	8010524 <cmd_gpio_get+0x34>
		index = (uint8_t)atoi(argv[args_indx.index]);
 801050e:	f7f4 f9f0 	bl	80048f2 <atoi>
	dev = device_get_binding(argv[args_indx.port]);
 8010512:	6870      	ldr	r0, [r6, #4]
 8010514:	f001 fb10 	bl	8011b38 <z_impl_device_get_binding>
	if (dev != NULL) {
 8010518:	4604      	mov	r4, r0
 801051a:	b958      	cbnz	r0, 8010534 <cmd_gpio_get+0x44>
}
 801051c:	4620      	mov	r0, r4
 801051e:	b004      	add	sp, #16
 8010520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		shell_error(shell, "Wrong parameters for get");
 8010524:	4a17      	ldr	r2, [pc, #92]	; (8010584 <cmd_gpio_get+0x94>)
 8010526:	2102      	movs	r1, #2
 8010528:	4628      	mov	r0, r5
 801052a:	f003 ff23 	bl	8014374 <shell_fprintf>
		return -EINVAL;
 801052e:	f06f 0415 	mvn.w	r4, #21
 8010532:	e7f3      	b.n	801051c <cmd_gpio_get+0x2c>
		index = (u8_t)atoi(argv[2]);
 8010534:	68b0      	ldr	r0, [r6, #8]
 8010536:	f7f4 f9dc 	bl	80048f2 <atoi>
		shell_print(shell, "Reading %s pin %d",
 801053a:	fa5f f880 	uxtb.w	r8, r0
 801053e:	f8cd 8000 	str.w	r8, [sp]
 8010542:	6873      	ldr	r3, [r6, #4]
 8010544:	4a10      	ldr	r2, [pc, #64]	; (8010588 <cmd_gpio_get+0x98>)
 8010546:	4639      	mov	r1, r7
 8010548:	4628      	mov	r0, r5
 801054a:	f003 ff13 	bl	8014374 <shell_fprintf>
	return api->read(port, access_op, pin, value);
 801054e:	6863      	ldr	r3, [r4, #4]
 8010550:	4620      	mov	r0, r4
 8010552:	689e      	ldr	r6, [r3, #8]
 8010554:	4642      	mov	r2, r8
 8010556:	ab03      	add	r3, sp, #12
 8010558:	4639      	mov	r1, r7
 801055a:	47b0      	blx	r6
		if (rc == 0) {
 801055c:	4604      	mov	r4, r0
 801055e:	b930      	cbnz	r0, 801056e <cmd_gpio_get+0x7e>
			shell_print(shell, "Value %d", value);
 8010560:	4601      	mov	r1, r0
 8010562:	9b03      	ldr	r3, [sp, #12]
 8010564:	4a09      	ldr	r2, [pc, #36]	; (801058c <cmd_gpio_get+0x9c>)
 8010566:	4628      	mov	r0, r5
 8010568:	f003 ff04 	bl	8014374 <shell_fprintf>
 801056c:	e7d6      	b.n	801051c <cmd_gpio_get+0x2c>
			shell_error(shell, "Error reading value");
 801056e:	4a08      	ldr	r2, [pc, #32]	; (8010590 <cmd_gpio_get+0xa0>)
 8010570:	2102      	movs	r1, #2
 8010572:	4628      	mov	r0, r5
 8010574:	f003 fefe 	bl	8014374 <shell_fprintf>
			return -EIO;
 8010578:	f06f 0404 	mvn.w	r4, #4
 801057c:	e7ce      	b.n	801051c <cmd_gpio_get+0x2c>
 801057e:	bf00      	nop
 8010580:	08019513 	.word	0x08019513
 8010584:	0801d284 	.word	0x0801d284
 8010588:	0801d29e 	.word	0x0801d29e
 801058c:	0801d2b1 	.word	0x0801d2b1
 8010590:	0801d2bb 	.word	0x0801d2bb

08010594 <msg_init>:
#include "i2c-priv.h"

static inline void msg_init(struct device *dev, struct i2c_msg *msg,
			    u8_t *next_msg_flags, u16_t slave,
			    uint32_t transfer)
{
 8010594:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8010596:	6804      	ldr	r4, [r0, #0]
 8010598:	684e      	ldr	r6, [r1, #4]
	struct i2c_stm32_data *data = DEV_DATA(dev);
	I2C_TypeDef *i2c = cfg->i2c;
 801059a:	68a4      	ldr	r4, [r4, #8]
 801059c:	68a4      	ldr	r4, [r4, #8]
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabledReloadMode(I2C_TypeDef *I2Cx)
{
  return (READ_BIT(I2Cx->CR2, I2C_CR2_RELOAD) == (I2C_CR2_RELOAD));
 801059e:	6865      	ldr	r5, [r4, #4]

	if (LL_I2C_IsEnabledReloadMode(i2c)) {
 80105a0:	01ed      	lsls	r5, r5, #7
 80105a2:	ea4f 4606 	mov.w	r6, r6, lsl #16
 80105a6:	d505      	bpl.n	80105b4 <msg_init+0x20>
  * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 80105a8:	6863      	ldr	r3, [r4, #4]
 80105aa:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80105ae:	4333      	orrs	r3, r6
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 80105b0:	6063      	str	r3, [r4, #4]
#endif
		LL_I2C_Enable(i2c);

		LL_I2C_GenerateStartCondition(i2c);
	}
}
 80105b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (I2C_ADDR_10_BITS & data->dev_config) {
 80105b4:	6880      	ldr	r0, [r0, #8]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 80105b6:	6867      	ldr	r7, [r4, #4]
 80105b8:	6980      	ldr	r0, [r0, #24]
 80105ba:	f8df c078 	ldr.w	ip, [pc, #120]	; 8010634 <msg_init+0xa0>
 80105be:	f010 0f01 	tst.w	r0, #1
 80105c2:	d029      	beq.n	8010618 <msg_init+0x84>
 80105c4:	f447 6700 	orr.w	r7, r7, #2048	; 0x800
 80105c8:	6067      	str	r7, [r4, #4]
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 80105ca:	6865      	ldr	r5, [r4, #4]
 80105cc:	ea05 050c 	and.w	r5, r5, ip
 80105d0:	431d      	orrs	r5, r3
 80105d2:	6065      	str	r5, [r4, #4]
		if (!(msg->flags & I2C_MSG_STOP) && next_msg_flags &&
 80105d4:	7a0b      	ldrb	r3, [r1, #8]
 80105d6:	0799      	lsls	r1, r3, #30
 80105d8:	d428      	bmi.n	801062c <msg_init+0x98>
 80105da:	b33a      	cbz	r2, 801062c <msg_init+0x98>
 80105dc:	7813      	ldrb	r3, [r2, #0]
 80105de:	075b      	lsls	r3, r3, #29
 80105e0:	d424      	bmi.n	801062c <msg_init+0x98>
  SET_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 80105e2:	6863      	ldr	r3, [r4, #4]
 80105e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 80105e8:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80105ea:	6863      	ldr	r3, [r4, #4]
 80105ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80105f0:	6063      	str	r3, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 80105f2:	6862      	ldr	r2, [r4, #4]
 80105f4:	9b05      	ldr	r3, [sp, #20]
 80105f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80105fa:	431a      	orrs	r2, r3
 80105fc:	6062      	str	r2, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 80105fe:	6863      	ldr	r3, [r4, #4]
 8010600:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8010604:	4333      	orrs	r3, r6
 8010606:	6063      	str	r3, [r4, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8010608:	6823      	ldr	r3, [r4, #0]
 801060a:	f043 0301 	orr.w	r3, r3, #1
 801060e:	6023      	str	r3, [r4, #0]
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 8010610:	6863      	ldr	r3, [r4, #4]
 8010612:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010616:	e7cb      	b.n	80105b0 <msg_init+0x1c>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 8010618:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 801061c:	6067      	str	r7, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 801061e:	6860      	ldr	r0, [r4, #4]
 8010620:	ea00 000c 	and.w	r0, r0, ip
 8010624:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010628:	6060      	str	r0, [r4, #4]
 801062a:	e7d3      	b.n	80105d4 <msg_init+0x40>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 801062c:	6863      	ldr	r3, [r4, #4]
 801062e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010632:	e7d9      	b.n	80105e8 <msg_init+0x54>
 8010634:	fffffc00 	.word	0xfffffc00

08010638 <stm32_i2c_configure_timing>:
	u32_t i2c_hold_time_min, i2c_setup_time_min;
	u32_t i2c_h_min_time, i2c_l_min_time;
	u32_t presc = 1U;
	u32_t timing = 0U;

	switch (I2C_SPEED_GET(data->dev_config)) {
 8010638:	6883      	ldr	r3, [r0, #8]
 801063a:	699b      	ldr	r3, [r3, #24]
 801063c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8010640:	2b01      	cmp	r3, #1
{
 8010642:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch (I2C_SPEED_GET(data->dev_config)) {
 8010646:	d033      	beq.n	80106b0 <stm32_i2c_configure_timing+0x78>
 8010648:	2b02      	cmp	r3, #2
 801064a:	d13d      	bne.n	80106c8 <stm32_i2c_configure_timing+0x90>
		i2c_hold_time_min = 500U;
		i2c_setup_time_min = 1250U;
		break;
	case I2C_SPEED_FAST:
		i2c_h_min_time = 600U;
		i2c_l_min_time = 1300U;
 801064c:	f240 5814 	movw	r8, #1300	; 0x514
		i2c_h_min_time = 600U;
 8010650:	f44f 7e16 	mov.w	lr, #600	; 0x258
		i2c_hold_time_min = 375U;
		i2c_setup_time_min = 500U;
 8010654:	f44f 7cfa 	mov.w	ip, #500	; 0x1f4
		i2c_hold_time_min = 375U;
 8010658:	f240 1777 	movw	r7, #375	; 0x177
	}

	/* Calculate period until prescaler matches */
	do {
		u32_t t_presc = clock / presc;
		u32_t ns_presc = NSEC_PER_SEC / t_presc;
 801065c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80106d0 <stm32_i2c_configure_timing+0x98>
		i2c_hold_time_min = 375U;
 8010660:	2401      	movs	r4, #1
		u32_t t_presc = clock / presc;
 8010662:	fbb1 f2f4 	udiv	r2, r1, r4
		u32_t ns_presc = NSEC_PER_SEC / t_presc;
 8010666:	fbb9 f2f2 	udiv	r2, r9, r2
		u32_t sclh = i2c_h_min_time / ns_presc;
 801066a:	fbbe f3f2 	udiv	r3, lr, r2
		u32_t scll = i2c_l_min_time / ns_presc;
		u32_t sdadel = i2c_hold_time_min / ns_presc;
		u32_t scldel = i2c_setup_time_min / ns_presc;

		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 801066e:	1e5d      	subs	r5, r3, #1
 8010670:	2dff      	cmp	r5, #255	; 0xff
 8010672:	d826      	bhi.n	80106c2 <stm32_i2c_configure_timing+0x8a>
		u32_t scll = i2c_l_min_time / ns_presc;
 8010674:	fbb8 f3f2 	udiv	r3, r8, r2
		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 8010678:	1e5e      	subs	r6, r3, #1
 801067a:	2eff      	cmp	r6, #255	; 0xff
 801067c:	d821      	bhi.n	80106c2 <stm32_i2c_configure_timing+0x8a>
		u32_t sdadel = i2c_hold_time_min / ns_presc;
 801067e:	fbb7 f3f2 	udiv	r3, r7, r2
			++presc;
			continue;
		}

		if (sdadel > 15 || (scldel - 1) > 15) {
 8010682:	2b0f      	cmp	r3, #15
 8010684:	d81d      	bhi.n	80106c2 <stm32_i2c_configure_timing+0x8a>
		u32_t scldel = i2c_setup_time_min / ns_presc;
 8010686:	fbbc f2f2 	udiv	r2, ip, r2
		if (sdadel > 15 || (scldel - 1) > 15) {
 801068a:	3a01      	subs	r2, #1
 801068c:	2a0f      	cmp	r2, #15
 801068e:	d818      	bhi.n	80106c2 <stm32_i2c_configure_timing+0x8a>
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8010690:	6801      	ldr	r1, [r0, #0]
			++presc;
			continue;
		}

		timing = __LL_I2C_CONVERT_TIMINGS(presc - 1,
 8010692:	041b      	lsls	r3, r3, #16
	I2C_TypeDef *i2c = cfg->i2c;
 8010694:	6889      	ldr	r1, [r1, #8]
		timing = __LL_I2C_CONVERT_TIMINGS(presc - 1,
 8010696:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801069a:	4333      	orrs	r3, r6
	I2C_TypeDef *i2c = cfg->i2c;
 801069c:	6889      	ldr	r1, [r1, #8]
		timing = __LL_I2C_CONVERT_TIMINGS(presc - 1,
 801069e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80106a2:	3c01      	subs	r4, #1
 80106a4:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80106a8:	610b      	str	r3, [r1, #16]
		return -EINVAL;
	}

	LL_I2C_SetTiming(i2c, timing);

	return 0;
 80106aa:	2000      	movs	r0, #0
}
 80106ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		i2c_l_min_time = 4700U;
 80106b0:	f241 285c 	movw	r8, #4700	; 0x125c
		i2c_h_min_time = 4000U;
 80106b4:	f44f 6e7a 	mov.w	lr, #4000	; 0xfa0
		i2c_setup_time_min = 1250U;
 80106b8:	f240 4ce2 	movw	ip, #1250	; 0x4e2
		i2c_hold_time_min = 500U;
 80106bc:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 80106c0:	e7cc      	b.n	801065c <stm32_i2c_configure_timing+0x24>
 80106c2:	3401      	adds	r4, #1
	} while (presc < 16);
 80106c4:	2c10      	cmp	r4, #16
 80106c6:	d1cc      	bne.n	8010662 <stm32_i2c_configure_timing+0x2a>
		return -EINVAL;
 80106c8:	f06f 0015 	mvn.w	r0, #21
 80106cc:	e7ee      	b.n	80106ac <stm32_i2c_configure_timing+0x74>
 80106ce:	bf00      	nop
 80106d0:	3b9aca00 	.word	0x3b9aca00

080106d4 <i2c_stm32_init>:
	.slave_unregister = i2c_stm32_slave_unregister,
#endif
};

static int i2c_stm32_init(struct device *dev)
{
 80106d4:	b570      	push	{r4, r5, r6, lr}
 80106d6:	4604      	mov	r4, r0
 80106d8:	4843      	ldr	r0, [pc, #268]	; (80107e8 <i2c_stm32_init+0x114>)
 80106da:	f001 fa2d 	bl	8011b38 <z_impl_device_get_binding>
	struct device *clock = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 80106de:	6823      	ldr	r3, [r4, #0]
 80106e0:	4606      	mov	r6, r0
 80106e2:	689d      	ldr	r5, [r3, #8]
	/*
	 * initialize mutex used when multiple transfers
	 * are taking place to guarantee that each one is
	 * atomic and has exclusive access to the I2C bus.
	 */
	k_sem_init(&data->bus_mutex, 1, 1);
 80106e4:	68a0      	ldr	r0, [r4, #8]
	z_impl_k_sem_init(sem, initial_count, limit);
 80106e6:	2201      	movs	r2, #1
 80106e8:	4611      	mov	r1, r2
 80106ea:	f008 f94e 	bl	801898a <z_impl_k_sem_init>
 80106ee:	6873      	ldr	r3, [r6, #4]
 80106f0:	4629      	mov	r1, r5
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	4630      	mov	r0, r6
 80106f6:	4798      	blx	r3

	__ASSERT_NO_MSG(clock);
	if (clock_control_on(clock,
 80106f8:	b1a0      	cbz	r0, 8010724 <i2c_stm32_init+0x50>
		(clock_control_subsys_t *) &cfg->pclken) != 0) {
		LOG_ERR("i2c: failure enabling clock");
 80106fa:	4b3c      	ldr	r3, [pc, #240]	; (80107ec <i2c_stm32_init+0x118>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	075a      	lsls	r2, r3, #29
 8010700:	d00d      	beq.n	801071e <i2c_stm32_init+0x4a>
 8010702:	2301      	movs	r3, #1
 8010704:	f04f 0100 	mov.w	r1, #0
 8010708:	f363 0107 	bfi	r1, r3, #0, #8
 801070c:	4a38      	ldr	r2, [pc, #224]	; (80107f0 <i2c_stm32_init+0x11c>)
 801070e:	4b39      	ldr	r3, [pc, #228]	; (80107f4 <i2c_stm32_init+0x120>)
 8010710:	4839      	ldr	r0, [pc, #228]	; (80107f8 <i2c_stm32_init+0x124>)
 8010712:	1a9b      	subs	r3, r3, r2
 8010714:	08db      	lsrs	r3, r3, #3
 8010716:	f363 118f 	bfi	r1, r3, #6, #10
 801071a:	f003 fa72 	bl	8013c02 <log_0>
		return -EIO;
 801071e:	f06f 0404 	mvn.w	r4, #4
 8010722:	e03f      	b.n	80107a4 <i2c_stm32_init+0xd0>
	 * STM32F0/3 I2C's independent clock source supports only
	 * HSI and SYSCLK, not APB1. We force I2C clock source to SYSCLK.
	 * I2C2 on STM32F0 uses APB1 clock as I2C clock source
	 */

	switch ((u32_t)cfg->i2c) {
 8010724:	68ab      	ldr	r3, [r5, #8]
 8010726:	4a35      	ldr	r2, [pc, #212]	; (80107fc <i2c_stm32_init+0x128>)
 8010728:	4293      	cmp	r3, r2
 801072a:	d03d      	beq.n	80107a8 <i2c_stm32_init+0xd4>
 801072c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010730:	4293      	cmp	r3, r2
 8010732:	d03f      	beq.n	80107b4 <i2c_stm32_init+0xe0>
		break;
#endif /* CONFIG_I2C_3 */
	}
#endif /* CONFIG_SOC_SERIES_STM32F3X) || CONFIG_SOC_SERIES_STM32F0X */

	bitrate_cfg = i2c_map_dt_bitrate(cfg->bitrate);
 8010734:	68eb      	ldr	r3, [r5, #12]
extern "C" {
#endif

static inline u32_t i2c_map_dt_bitrate(u32_t bitrate)
{
	switch (bitrate) {
 8010736:	4a32      	ldr	r2, [pc, #200]	; (8010800 <i2c_stm32_init+0x12c>)
 8010738:	4293      	cmp	r3, r2
 801073a:	d04b      	beq.n	80107d4 <i2c_stm32_init+0x100>
 801073c:	d83f      	bhi.n	80107be <i2c_stm32_init+0xea>
 801073e:	4a31      	ldr	r2, [pc, #196]	; (8010804 <i2c_stm32_init+0x130>)
 8010740:	4293      	cmp	r3, r2
 8010742:	d049      	beq.n	80107d8 <i2c_stm32_init+0x104>
 8010744:	4a30      	ldr	r2, [pc, #192]	; (8010808 <i2c_stm32_init+0x134>)
 8010746:	4293      	cmp	r3, r2
 8010748:	d048      	beq.n	80107dc <i2c_stm32_init+0x108>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");
 801074a:	4b28      	ldr	r3, [pc, #160]	; (80107ec <i2c_stm32_init+0x118>)
 801074c:	6819      	ldr	r1, [r3, #0]
 801074e:	f011 0107 	ands.w	r1, r1, #7
 8010752:	d00e      	beq.n	8010772 <i2c_stm32_init+0x9e>
 8010754:	2301      	movs	r3, #1
 8010756:	f04f 0100 	mov.w	r1, #0
 801075a:	f363 0107 	bfi	r1, r3, #0, #8
 801075e:	4a24      	ldr	r2, [pc, #144]	; (80107f0 <i2c_stm32_init+0x11c>)
 8010760:	4b24      	ldr	r3, [pc, #144]	; (80107f4 <i2c_stm32_init+0x120>)
 8010762:	482a      	ldr	r0, [pc, #168]	; (801080c <i2c_stm32_init+0x138>)
 8010764:	1a9b      	subs	r3, r3, r2
 8010766:	08db      	lsrs	r3, r3, #3
 8010768:	f363 118f 	bfi	r1, r3, #6, #10
 801076c:	f003 fa49 	bl	8013c02 <log_0>

	return 0;
 8010770:	2100      	movs	r1, #0

	ret = i2c_stm32_runtime_configure(dev, I2C_MODE_MASTER | bitrate_cfg);
 8010772:	4620      	mov	r0, r4
 8010774:	f041 0110 	orr.w	r1, r1, #16
 8010778:	f007 fc9d 	bl	80180b6 <i2c_stm32_runtime_configure>
	if (ret < 0) {
 801077c:	1e04      	subs	r4, r0, #0
 801077e:	da31      	bge.n	80107e4 <i2c_stm32_init+0x110>
		LOG_ERR("i2c: failure initializing");
 8010780:	4b1a      	ldr	r3, [pc, #104]	; (80107ec <i2c_stm32_init+0x118>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	075b      	lsls	r3, r3, #29
 8010786:	d00d      	beq.n	80107a4 <i2c_stm32_init+0xd0>
 8010788:	2301      	movs	r3, #1
 801078a:	f04f 0100 	mov.w	r1, #0
 801078e:	f363 0107 	bfi	r1, r3, #0, #8
 8010792:	4a17      	ldr	r2, [pc, #92]	; (80107f0 <i2c_stm32_init+0x11c>)
 8010794:	4b17      	ldr	r3, [pc, #92]	; (80107f4 <i2c_stm32_init+0x120>)
 8010796:	481e      	ldr	r0, [pc, #120]	; (8010810 <i2c_stm32_init+0x13c>)
 8010798:	1a9b      	subs	r3, r3, r2
 801079a:	08db      	lsrs	r3, r3, #3
 801079c:	f363 118f 	bfi	r1, r3, #6, #10
 80107a0:	f003 fa2f 	bl	8013c02 <log_0>
		return ret;
	}

	return 0;
}
 80107a4:	4620      	mov	r0, r4
 80107a6:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80107a8:	4a1a      	ldr	r2, [pc, #104]	; (8010814 <i2c_stm32_init+0x140>)
 80107aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80107ac:	f043 0310 	orr.w	r3, r3, #16
 80107b0:	6313      	str	r3, [r2, #48]	; 0x30
 80107b2:	e7bf      	b.n	8010734 <i2c_stm32_init+0x60>
 80107b4:	4a17      	ldr	r2, [pc, #92]	; (8010814 <i2c_stm32_init+0x140>)
 80107b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80107b8:	f043 0320 	orr.w	r3, r3, #32
 80107bc:	e7f8      	b.n	80107b0 <i2c_stm32_init+0xdc>
	switch (bitrate) {
 80107be:	4a16      	ldr	r2, [pc, #88]	; (8010818 <i2c_stm32_init+0x144>)
 80107c0:	4293      	cmp	r3, r2
 80107c2:	d00d      	beq.n	80107e0 <i2c_stm32_init+0x10c>
 80107c4:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 80107c8:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d1bc      	bne.n	801074a <i2c_stm32_init+0x76>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 80107d0:	210a      	movs	r1, #10
 80107d2:	e7ce      	b.n	8010772 <i2c_stm32_init+0x9e>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 80107d4:	2106      	movs	r1, #6
 80107d6:	e7cc      	b.n	8010772 <i2c_stm32_init+0x9e>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 80107d8:	2102      	movs	r1, #2
 80107da:	e7ca      	b.n	8010772 <i2c_stm32_init+0x9e>
		return I2C_SPEED_FAST << I2C_SPEED_SHIFT;
 80107dc:	2104      	movs	r1, #4
 80107de:	e7c8      	b.n	8010772 <i2c_stm32_init+0x9e>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 80107e0:	2108      	movs	r1, #8
 80107e2:	e7c6      	b.n	8010772 <i2c_stm32_init+0x9e>
	return 0;
 80107e4:	2400      	movs	r4, #0
 80107e6:	e7dd      	b.n	80107a4 <i2c_stm32_init+0xd0>
 80107e8:	0801b322 	.word	0x0801b322
 80107ec:	20008fdc 	.word	0x20008fdc
 80107f0:	08019248 	.word	0x08019248
 80107f4:	08019260 	.word	0x08019260
 80107f8:	0801d359 	.word	0x0801d359
 80107fc:	40005400 	.word	0x40005400
 8010800:	000f4240 	.word	0x000f4240
 8010804:	000186a0 	.word	0x000186a0
 8010808:	00061a80 	.word	0x00061a80
 801080c:	0801d375 	.word	0x0801d375
 8010810:	0801d390 	.word	0x0801d390
 8010814:	40021000 	.word	0x40021000
 8010818:	0033e140 	.word	0x0033e140

0801081c <bme680_sample_fetch>:

	return durval;
}

static int bme680_sample_fetch(struct device *dev, enum sensor_channel chan)
{
 801081c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bme680_data *data = dev->driver_data;
 8010820:	6884      	ldr	r4, [r0, #8]
{
 8010822:	b087      	sub	sp, #28
	u8_t buff[BME680_LEN_FIELD] = { 0 };
 8010824:	220f      	movs	r2, #15
 8010826:	2100      	movs	r1, #0
 8010828:	a802      	add	r0, sp, #8
 801082a:	f7f4 f8a0 	bl	800496e <memset>
	int size = BME680_LEN_FIELD;
	int ret;

	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);

	ret = bme680_reg_read(data, BME680_REG_FIELD0, buff, size);
 801082e:	230f      	movs	r3, #15
 8010830:	aa02      	add	r2, sp, #8
 8010832:	211d      	movs	r1, #29
 8010834:	4620      	mov	r0, r4
 8010836:	f007 fc8f 	bl	8018158 <bme680_reg_read>
	if (ret < 0) {
 801083a:	2800      	cmp	r0, #0
 801083c:	f2c0 8140 	blt.w	8010ac0 <bme680_sample_fetch+0x2a4>
		return ret;
	}

	data->new_data = buff[0] & BME680_MSK_NEW_DATA;
 8010840:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010844:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8010848:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
	data->heatr_stab = buff[14] & BME680_MSK_HEATR_STAB;
 801084c:	f89d 2016 	ldrb.w	r2, [sp, #22]
			   | ((u32_t)buff[7] >> 4));
	adc_hum = (u16_t)(((u32_t)buff[8] << 8) | (u32_t)buff[9]);
	adc_gas_res = (u16_t)((u32_t)buff[13] << 2 | (((u32_t)buff[14]) >> 6));
	gas_range = buff[14] & BME680_MSK_GAS_RANGE;

	if (data->new_data) {
 8010850:	061b      	lsls	r3, r3, #24
	data->heatr_stab = buff[14] & BME680_MSK_HEATR_STAB;
 8010852:	f002 0110 	and.w	r1, r2, #16
 8010856:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
	if (data->new_data) {
 801085a:	f140 812a 	bpl.w	8010ab2 <bme680_sample_fetch+0x296>
			   | ((u32_t)buff[7] >> 4));
 801085e:	f89d 600f 	ldrb.w	r6, [sp, #15]
	adc_temp = (u32_t)(((u32_t)buff[5] << 12) | ((u32_t)buff[6] << 4)
 8010862:	f89d 100e 	ldrb.w	r1, [sp, #14]
			    | ((u32_t)buff[4] >> 4));
 8010866:	f89d 300c 	ldrb.w	r3, [sp, #12]
	adc_press = (u32_t)(((u32_t)buff[2] << 12) | ((u32_t)buff[3] << 4)
 801086a:	f89d c00b 	ldrb.w	ip, [sp, #11]
 801086e:	f89d 500a 	ldrb.w	r5, [sp, #10]
 8010872:	f8bd e010 	ldrh.w	lr, [sp, #16]
	adc_gas_res = (u16_t)((u32_t)buff[13] << 2 | (((u32_t)buff[14]) >> 6));
 8010876:	f89d a015 	ldrb.w	sl, [sp, #21]
			   | ((u32_t)buff[7] >> 4));
 801087a:	0936      	lsrs	r6, r6, #4
	adc_temp = (u32_t)(((u32_t)buff[5] << 12) | ((u32_t)buff[6] << 4)
 801087c:	ea46 1601 	orr.w	r6, r6, r1, lsl #4
 8010880:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8010884:	ea46 3101 	orr.w	r1, r6, r1, lsl #12
	var1 = ((s32_t)adc_temp >> 3) - ((s32_t)data->par_t1 << 1);
 8010888:	8aa6      	ldrh	r6, [r4, #20]
 801088a:	0076      	lsls	r6, r6, #1
 801088c:	ebc6 06d1 	rsb	r6, r6, r1, lsr #3
 8010890:	ea4f 79e6 	mov.w	r9, r6, asr #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8010894:	0870      	lsrs	r0, r6, #1
 8010896:	ea40 70c9 	orr.w	r0, r0, r9, lsl #31
 801089a:	ea4f 0769 	mov.w	r7, r9, asr #1
 801089e:	4347      	muls	r7, r0
 80108a0:	fba0 0100 	umull	r0, r1, r0, r0
 80108a4:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 80108a8:	0b07      	lsrs	r7, r0, #12
	var3 = ((var3) * ((s32_t)data->par_t3 << 4)) >> 14;
 80108aa:	f994 0018 	ldrsb.w	r0, [r4, #24]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80108ae:	ea47 5701 	orr.w	r7, r7, r1, lsl #20
 80108b2:	ea4f 3b21 	mov.w	fp, r1, asr #12
	var3 = ((var3) * ((s32_t)data->par_t3 << 4)) >> 14;
 80108b6:	0101      	lsls	r1, r0, #4
 80108b8:	ea4f 79e1 	mov.w	r9, r1, asr #31
 80108bc:	fb07 f809 	mul.w	r8, r7, r9
 80108c0:	fb01 880b 	mla	r8, r1, fp, r8
 80108c4:	fba7 0101 	umull	r0, r1, r7, r1
 80108c8:	e9cd 0100 	strd	r0, r1, [sp]
 80108cc:	9901      	ldr	r1, [sp, #4]
	var2 = (var1 * (s32_t)data->par_t2) >> 11;
 80108ce:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
	var3 = ((var3) * ((s32_t)data->par_t3 << 4)) >> 14;
 80108d2:	4441      	add	r1, r8
 80108d4:	9101      	str	r1, [sp, #4]
	var2 = (var1 * (s32_t)data->par_t2) >> 11;
 80108d6:	fb87 0106 	smull	r0, r1, r7, r6
 80108da:	0ac6      	lsrs	r6, r0, #11
 80108dc:	ea46 5641 	orr.w	r6, r6, r1, lsl #21
	var3 = ((var3) * ((s32_t)data->par_t3 << 4)) >> 14;
 80108e0:	9900      	ldr	r1, [sp, #0]
 80108e2:	0b88      	lsrs	r0, r1, #14
 80108e4:	9901      	ldr	r1, [sp, #4]
 80108e6:	ea40 4081 	orr.w	r0, r0, r1, lsl #18
	data->t_fine = var2 + var3;
 80108ea:	4430      	add	r0, r6
 80108ec:	6460      	str	r0, [r4, #68]	; 0x44
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
 80108ee:	eb00 0180 	add.w	r1, r0, r0, lsl #2
	var1 = (((s32_t)data->t_fine) >> 1) - 64000;
 80108f2:	1040      	asrs	r0, r0, #1
 80108f4:	f5a0 477a 	sub.w	r7, r0, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 80108f8:	10b8      	asrs	r0, r7, #2
		(s32_t)data->par_p6) >> 2;
 80108fa:	f994 6024 	ldrsb.w	r6, [r4, #36]	; 0x24
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 80108fe:	4340      	muls	r0, r0
 8010900:	ea4f 28e0 	mov.w	r8, r0, asr #11
 8010904:	fb06 f808 	mul.w	r8, r6, r8
	var2 = var2 + ((var1 * (s32_t)data->par_p5) << 1);
 8010908:	f9b4 6022 	ldrsh.w	r6, [r4, #34]	; 0x22
 801090c:	437e      	muls	r6, r7
 801090e:	0076      	lsls	r6, r6, #1
 8010910:	eb06 06a8 	add.w	r6, r6, r8, asr #2
	       + (((s32_t)data->par_p2 * var1) >> 1);
 8010914:	f9b4 801c 	ldrsh.w	r8, [r4, #28]
 8010918:	fb07 f708 	mul.w	r7, r7, r8
		 ((s32_t)data->par_p3 << 5)) >> 3)
 801091c:	f994 801e 	ldrsb.w	r8, [r4, #30]
			    | ((u32_t)buff[4] >> 4));
 8010920:	091b      	lsrs	r3, r3, #4
	adc_press = (u32_t)(((u32_t)buff[2] << 12) | ((u32_t)buff[3] << 4)
 8010922:	ea43 1c0c 	orr.w	ip, r3, ip, lsl #4
		 ((s32_t)data->par_p3 << 5)) >> 3)
 8010926:	ea4f 1848 	mov.w	r8, r8, lsl #5
	var2 = (var2 >> 2) + ((s32_t)data->par_p4 << 16);
 801092a:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 801092e:	1340      	asrs	r0, r0, #13
 8010930:	fb00 f008 	mul.w	r0, r0, r8
	adc_press = (u32_t)(((u32_t)buff[2] << 12) | ((u32_t)buff[3] << 4)
 8010934:	ea4c 3505 	orr.w	r5, ip, r5, lsl #12
	var2 = (var2 >> 2) + ((s32_t)data->par_p4 << 16);
 8010938:	041b      	lsls	r3, r3, #16
		 ((s32_t)data->par_p3 << 5)) >> 3)
 801093a:	10c0      	asrs	r0, r0, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 801093c:	eb00 0067 	add.w	r0, r0, r7, asr #1
	calc_press = 1048576 - adc_press;
 8010940:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
	var2 = (var2 >> 2) + ((s32_t)data->par_p4 << 16);
 8010944:	eb03 06a6 	add.w	r6, r3, r6, asr #2
	var1 = ((32768 + var1) * (s32_t)data->par_p1) >> 15;
 8010948:	8b67      	ldrh	r7, [r4, #26]
	calc_press = (calc_press - (var2 >> 12)) * ((u32_t)3125);
 801094a:	f640 4335 	movw	r3, #3125	; 0xc35
 801094e:	eba5 3626 	sub.w	r6, r5, r6, asr #12
	var1 = var1 >> 18;
 8010952:	1480      	asrs	r0, r0, #18
	calc_press = (calc_press - (var2 >> 12)) * ((u32_t)3125);
 8010954:	435e      	muls	r6, r3
	var1 = ((32768 + var1) * (s32_t)data->par_p1) >> 15;
 8010956:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
	if (calc_press >= (s32_t)0x40000000) {
 801095a:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
	var1 = ((32768 + var1) * (s32_t)data->par_p1) >> 15;
 801095e:	fb07 f000 	mul.w	r0, r7, r0
		calc_press = ((calc_press << 1) / var1);
 8010962:	bfb8      	it	lt
 8010964:	0076      	lsllt	r6, r6, #1
	var1 = ((32768 + var1) * (s32_t)data->par_p1) >> 15;
 8010966:	ea4f 30e0 	mov.w	r0, r0, asr #15
		calc_press = ((calc_press / var1) << 1);
 801096a:	bfaa      	itet	ge
 801096c:	fb96 f3f0 	sdivge	r3, r6, r0
		calc_press = ((calc_press << 1) / var1);
 8010970:	fb96 f3f0 	sdivlt	r3, r6, r0
		calc_press = ((calc_press / var1) << 1);
 8010974:	005b      	lslge	r3, r3, #1
	var2 = ((s32_t)(calc_press >> 2) * (s32_t)data->par_p8) >> 13;
 8010976:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 801097a:	109f      	asrs	r7, r3, #2
 801097c:	4347      	muls	r7, r0
			       + ((s32_t)data->par_p7 << 7)) >> 4);
 801097e:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
		(s32_t)(((calc_press >> 3)
 8010982:	10dd      	asrs	r5, r3, #3
			       + ((s32_t)data->par_p7 << 7)) >> 4);
 8010984:	01c0      	lsls	r0, r0, #7
 8010986:	eb00 3067 	add.w	r0, r0, r7, asr #13
			 * (calc_press >> 3)) >> 13)) >> 12;
 801098a:	436d      	muls	r5, r5
	var1 = ((s32_t)data->par_p9 *
 801098c:	f9b4 7028 	ldrsh.w	r7, [r4, #40]	; 0x28
			 * (calc_press >> 3)) >> 13)) >> 12;
 8010990:	136d      	asrs	r5, r5, #13
	var1 = ((s32_t)data->par_p9 *
 8010992:	437d      	muls	r5, r7
	var3 = ((s32_t)(calc_press >> 8) * (s32_t)(calc_press >> 8)
 8010994:	121e      	asrs	r6, r3, #8
			       + ((s32_t)data->par_p7 << 7)) >> 4);
 8010996:	eb00 3025 	add.w	r0, r0, r5, asr #12
		* (s32_t)data->par_p10) >> 17;
 801099a:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
	var3 = ((s32_t)(calc_press >> 8) * (s32_t)(calc_press >> 8)
 801099e:	fb06 f706 	mul.w	r7, r6, r6
		* (s32_t)data->par_p10) >> 17;
 80109a2:	437d      	muls	r5, r7
 80109a4:	4375      	muls	r5, r6
			       + ((s32_t)data->par_p7 << 7)) >> 4);
 80109a6:	eb00 4065 	add.w	r0, r0, r5, asr #17
			   + ((var1 + var2 + var3
 80109aa:	eb03 1320 	add.w	r3, r3, r0, asr #4
	data->calc_press = calc_press
 80109ae:	6363      	str	r3, [r4, #52]	; 0x34
		 + (((temp_scaled * ((temp_scaled * (s32_t)data->par_h5)
 80109b0:	f994 000c 	ldrsb.w	r0, [r4, #12]
	var2_2 = ((temp_scaled * (s32_t)data->par_h4) / (s32_t)100)
 80109b4:	f994 300b 	ldrsb.w	r3, [r4, #11]
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
 80109b8:	3180      	adds	r1, #128	; 0x80
 80109ba:	1209      	asrs	r1, r1, #8
				     / ((s32_t)100))) >> 6) / ((s32_t)100))
 80109bc:	2564      	movs	r5, #100	; 0x64
		 + (((temp_scaled * ((temp_scaled * (s32_t)data->par_h5)
 80109be:	4348      	muls	r0, r1
	var2_2 = ((temp_scaled * (s32_t)data->par_h4) / (s32_t)100)
 80109c0:	434b      	muls	r3, r1
				     / ((s32_t)100))) >> 6) / ((s32_t)100))
 80109c2:	fb90 f0f5 	sdiv	r0, r0, r5
	var2_2 = ((temp_scaled * (s32_t)data->par_h4) / (s32_t)100)
 80109c6:	fb93 f3f5 	sdiv	r3, r3, r5
		 + (((temp_scaled * ((temp_scaled * (s32_t)data->par_h5)
 80109ca:	4348      	muls	r0, r1
	var2_2 = ((temp_scaled * (s32_t)data->par_h4) / (s32_t)100)
 80109cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
				     / ((s32_t)100))) >> 6) / ((s32_t)100))
 80109d0:	1180      	asrs	r0, r0, #6
 80109d2:	fb90 f0f5 	sdiv	r0, r0, r5
	var2_2 = ((temp_scaled * (s32_t)data->par_h4) / (s32_t)100)
 80109d6:	4418      	add	r0, r3
	var2_1 = (s32_t)data->par_h2;
 80109d8:	8923      	ldrh	r3, [r4, #8]
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
 80109da:	6321      	str	r1, [r4, #48]	; 0x30
	var2 = (var2_1 * var2_2) >> 10;
 80109dc:	4358      	muls	r0, r3
 80109de:	1283      	asrs	r3, r0, #10
	var1 = (s32_t)(adc_humidity - ((s32_t)((s32_t)data->par_h1 * 16))) -
 80109e0:	fa9e fe9e 	rev16.w	lr, lr
 80109e4:	88e0      	ldrh	r0, [r4, #6]
 80109e6:	fa1f fe8e 	uxth.w	lr, lr
 80109ea:	f06f 060f 	mvn.w	r6, #15
 80109ee:	fb06 e000 	mla	r0, r6, r0, lr
	       (((temp_scaled * (s32_t)data->par_h3)
 80109f2:	f994 e00a 	ldrsb.w	lr, [r4, #10]
 80109f6:	fb01 fe0e 	mul.w	lr, r1, lr
		 / ((s32_t)100)) >> 1);
 80109fa:	fb9e fef5 	sdiv	lr, lr, r5
	var1 = (s32_t)(adc_humidity - ((s32_t)((s32_t)data->par_h1 * 16))) -
 80109fe:	eba0 006e 	sub.w	r0, r0, lr, asr #1
	var3 = var1 * var2;
 8010a02:	4358      	muls	r0, r3
	var4 = ((var4) + ((temp_scaled * (s32_t)data->par_h7) /
 8010a04:	f994 300e 	ldrsb.w	r3, [r4, #14]
 8010a08:	434b      	muls	r3, r1
	var4 = (s32_t)data->par_h6 << 7;
 8010a0a:	7b61      	ldrb	r1, [r4, #13]
	var4 = ((var4) + ((temp_scaled * (s32_t)data->par_h7) /
 8010a0c:	fb93 f3f5 	sdiv	r3, r3, r5
 8010a10:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8010a14:	1381      	asrs	r1, r0, #14
 8010a16:	4349      	muls	r1, r1
 8010a18:	1289      	asrs	r1, r1, #10
	var4 = ((var4) + ((temp_scaled * (s32_t)data->par_h7) /
 8010a1a:	111b      	asrs	r3, r3, #4
	var6 = (var4 * var5) >> 1;
 8010a1c:	434b      	muls	r3, r1
	calc_hum = (((var3 + var6) >> 10) * ((s32_t)1000)) >> 12;
 8010a1e:	eb00 0363 	add.w	r3, r0, r3, asr #1
 8010a22:	1298      	asrs	r0, r3, #10
 8010a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010a28:	4343      	muls	r3, r0
 8010a2a:	131b      	asrs	r3, r3, #12
 8010a2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	data->calc_humidity = calc_hum;
 8010a30:	4925      	ldr	r1, [pc, #148]	; (8010ac8 <bme680_sample_fetch+0x2ac>)
 8010a32:	428b      	cmp	r3, r1
 8010a34:	bfd4      	ite	le
 8010a36:	63a3      	strle	r3, [r4, #56]	; 0x38
 8010a38:	63a1      	strgt	r1, [r4, #56]	; 0x38
	var1 = (s64_t)((1340 + (5 * (s64_t)data->range_sw_err)) *
 8010a3a:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
 8010a3e:	2605      	movs	r6, #5
 8010a40:	f240 503c 	movw	r0, #1340	; 0x53c
 8010a44:	2100      	movs	r1, #0
 8010a46:	fbc3 0106 	smlal	r0, r1, r3, r6
		       ((s64_t)look_up1[gas_range])) >> 16;
 8010a4a:	f002 050f 	and.w	r5, r2, #15
 8010a4e:	4b1f      	ldr	r3, [pc, #124]	; (8010acc <bme680_sample_fetch+0x2b0>)
 8010a50:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	adc_gas_res = (u16_t)((u32_t)buff[13] << 2 | (((u32_t)buff[14]) >> 6));
 8010a54:	0992      	lsrs	r2, r2, #6
	var1 = (s64_t)((1340 + (5 * (s64_t)data->range_sw_err)) *
 8010a56:	fba0 6703 	umull	r6, r7, r0, r3
 8010a5a:	fb03 7701 	mla	r7, r3, r1, r7
	adc_gas_res = (u16_t)((u32_t)buff[13] << 2 | (((u32_t)buff[14]) >> 6));
 8010a5e:	ea42 0a8a 	orr.w	sl, r2, sl, lsl #2
	var1 = (s64_t)((1340 + (5 * (s64_t)data->range_sw_err)) *
 8010a62:	0c31      	lsrs	r1, r6, #16
	var3 = (((s64_t)look_up2[gas_range] * (s64_t)var1) >> 9);
 8010a64:	4e1a      	ldr	r6, [pc, #104]	; (8010ad0 <bme680_sample_fetch+0x2b4>)
	var2 = (((s64_t)((s64_t)adc_gas_res << 15) - (s64_t)(16777216)) + var1);
 8010a66:	fa1f fa8a 	uxth.w	sl, sl
	var3 = (((s64_t)look_up2[gas_range] * (s64_t)var1) >> 9);
 8010a6a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	var2 = (((s64_t)((s64_t)adc_gas_res << 15) - (s64_t)(16777216)) + var1);
 8010a6e:	ea4f 32ca 	mov.w	r2, sl, lsl #15
	var1 = (s64_t)((1340 + (5 * (s64_t)data->range_sw_err)) *
 8010a72:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
	var2 = (((s64_t)((s64_t)adc_gas_res << 15) - (s64_t)(16777216)) + var1);
 8010a76:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
 8010a7a:	ea4f 435a 	mov.w	r3, sl, lsr #17
	var1 = (s64_t)((1340 + (5 * (s64_t)data->range_sw_err)) *
 8010a7e:	ea4f 4027 	mov.w	r0, r7, asr #16
	var2 = (((s64_t)((s64_t)adc_gas_res << 15) - (s64_t)(16777216)) + var1);
 8010a82:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
	var3 = (((s64_t)look_up2[gas_range] * (s64_t)var1) >> 9);
 8010a86:	fba5 6701 	umull	r6, r7, r5, r1
	var2 = (((s64_t)((s64_t)adc_gas_res << 15) - (s64_t)(16777216)) + var1);
 8010a8a:	1852      	adds	r2, r2, r1
 8010a8c:	eb40 0303 	adc.w	r3, r0, r3
	var3 = (((s64_t)look_up2[gas_range] * (s64_t)var1) >> 9);
 8010a90:	fb05 7700 	mla	r7, r5, r0, r7
	data->calc_gas_resistance = (u32_t)((var3 + ((s64_t)var2 >> 1))
 8010a94:	0855      	lsrs	r5, r2, #1
	var3 = (((s64_t)look_up2[gas_range] * (s64_t)var1) >> 9);
 8010a96:	0a70      	lsrs	r0, r6, #9
	data->calc_gas_resistance = (u32_t)((var3 + ((s64_t)var2 >> 1))
 8010a98:	ea45 75c3 	orr.w	r5, r5, r3, lsl #31
	var3 = (((s64_t)look_up2[gas_range] * (s64_t)var1) >> 9);
 8010a9c:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 8010aa0:	ea4f 2c67 	mov.w	ip, r7, asr #9
	data->calc_gas_resistance = (u32_t)((var3 + ((s64_t)var2 >> 1))
 8010aa4:	1059      	asrs	r1, r3, #1
					    / (s64_t)var2);
 8010aa6:	1940      	adds	r0, r0, r5
 8010aa8:	eb4c 0101 	adc.w	r1, ip, r1
 8010aac:	f7f1 f89a 	bl	8001be4 <__aeabi_ldivmod>
	data->calc_gas_resistance = (u32_t)((var3 + ((s64_t)var2 >> 1))
 8010ab0:	63e0      	str	r0, [r4, #60]	; 0x3c
		bme680_calc_humidity(data, adc_hum);
		bme680_calc_gas_resistance(data, gas_range, adc_gas_res);
	}

	/* Trigger the next measurement */
	ret = bme680_reg_write(data, BME680_REG_CTRL_MEAS,
 8010ab2:	2255      	movs	r2, #85	; 0x55
 8010ab4:	2174      	movs	r1, #116	; 0x74
 8010ab6:	4620      	mov	r0, r4
 8010ab8:	f007 fb6a 	bl	8018190 <bme680_reg_write>
			       BME680_CTRL_MEAS_VAL);
	if (ret < 0) {
 8010abc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
		return ret;
	}

	return 0;
}
 8010ac0:	b007      	add	sp, #28
 8010ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac6:	bf00      	nop
 8010ac8:	000186a0 	.word	0x000186a0
 8010acc:	0801a22c 	.word	0x0801a22c
 8010ad0:	0801a26c 	.word	0x0801a26c

08010ad4 <bme680_init>:

	return 0;
}

static int bme680_init(struct device *dev)
{
 8010ad4:	b530      	push	{r4, r5, lr}
	struct bme680_data *data = dev->driver_data;
 8010ad6:	6885      	ldr	r5, [r0, #8]
{
 8010ad8:	b08d      	sub	sp, #52	; 0x34
 8010ada:	4604      	mov	r4, r0
printf("\n Init I AM HERE\n");
 8010adc:	48b8      	ldr	r0, [pc, #736]	; (8010dc0 <bme680_init+0x2ec>)
 8010ade:	f7f2 f817 	bl	8002b10 <iprintf>
 8010ae2:	48b8      	ldr	r0, [pc, #736]	; (8010dc4 <bme680_init+0x2f0>)
 8010ae4:	f001 f828 	bl	8011b38 <z_impl_device_get_binding>
	data->i2c_master = device_get_binding(
 8010ae8:	6028      	str	r0, [r5, #0]
		DT_INST_0_BOSCH_BME680_BUS_NAME);
	if (!data->i2c_master) {
 8010aea:	b9d0      	cbnz	r0, 8010b22 <bme680_init+0x4e>
		printf("\nI2C master not found: %s\n",
 8010aec:	49b5      	ldr	r1, [pc, #724]	; (8010dc4 <bme680_init+0x2f0>)
 8010aee:	48b6      	ldr	r0, [pc, #728]	; (8010dc8 <bme680_init+0x2f4>)
 8010af0:	f7f2 f80e 	bl	8002b10 <iprintf>
			    DT_INST_0_BOSCH_BME680_BUS_NAME);
		LOG_ERR("I2C master not found: %s",
 8010af4:	4bb5      	ldr	r3, [pc, #724]	; (8010dcc <bme680_init+0x2f8>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	075a      	lsls	r2, r3, #29
 8010afa:	d00e      	beq.n	8010b1a <bme680_init+0x46>
 8010afc:	2301      	movs	r3, #1
 8010afe:	f04f 0200 	mov.w	r2, #0
 8010b02:	f363 0207 	bfi	r2, r3, #0, #8
 8010b06:	49b2      	ldr	r1, [pc, #712]	; (8010dd0 <bme680_init+0x2fc>)
 8010b08:	4bb2      	ldr	r3, [pc, #712]	; (8010dd4 <bme680_init+0x300>)
 8010b0a:	48b3      	ldr	r0, [pc, #716]	; (8010dd8 <bme680_init+0x304>)
 8010b0c:	1a5b      	subs	r3, r3, r1
 8010b0e:	08db      	lsrs	r3, r3, #3
 8010b10:	f363 128f 	bfi	r2, r3, #6, #10
 8010b14:	49ab      	ldr	r1, [pc, #684]	; (8010dc4 <bme680_init+0x2f0>)
 8010b16:	f003 f881 	bl	8013c1c <log_1>
 8010b1a:	f06f 0015 	mvn.w	r0, #21
				printf("\nreturn -einval\n");
		return -EINVAL;
	}
	
	return 0;
}
 8010b1e:	b00d      	add	sp, #52	; 0x34
 8010b20:	bd30      	pop	{r4, r5, pc}
	if (bme680_chip_init(dev) < 0) {
 8010b22:	68a4      	ldr	r4, [r4, #8]
	printf("before 1 the data->chip_id : 0x%x",data->chip_id);
 8010b24:	48ad      	ldr	r0, [pc, #692]	; (8010ddc <bme680_init+0x308>)
	data->i2c_slave_addr = DT_INST_0_BOSCH_BME680_BASE_ADDRESS;
 8010b26:	2376      	movs	r3, #118	; 0x76
 8010b28:	80ab      	strh	r3, [r5, #4]
	printf("before 1 the data->chip_id : 0x%x",data->chip_id);
 8010b2a:	4625      	mov	r5, r4
 8010b2c:	f815 1f48 	ldrb.w	r1, [r5, #72]!
 8010b30:	f7f1 ffee 	bl	8002b10 <iprintf>
	err = bme680_reg_read(data, BME680_REG_CHIP_ID, &data->chip_id, 1);
 8010b34:	2301      	movs	r3, #1
 8010b36:	462a      	mov	r2, r5
 8010b38:	21d0      	movs	r1, #208	; 0xd0
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	f007 fb0c 	bl	8018158 <bme680_reg_read>
	if (err < 0) {
 8010b40:	2800      	cmp	r0, #0
 8010b42:	da03      	bge.n	8010b4c <bme680_init+0x78>
		printf("\n1\n");
 8010b44:	48a6      	ldr	r0, [pc, #664]	; (8010de0 <bme680_init+0x30c>)
		printf("\n10\n");
 8010b46:	f7f1 ffe3 	bl	8002b10 <iprintf>
		return err;
 8010b4a:	e0cd      	b.n	8010ce8 <bme680_init+0x214>
	if (data->chip_id == BME680_CHIP_ID) {
 8010b4c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010b50:	2b61      	cmp	r3, #97	; 0x61
 8010b52:	f040 80a9 	bne.w	8010ca8 <bme680_init+0x1d4>
		printf("\n2\n");
 8010b56:	48a3      	ldr	r0, [pc, #652]	; (8010de4 <bme680_init+0x310>)
 8010b58:	f7f1 ffda 	bl	8002b10 <iprintf>
	err = bme680_reg_read(data, BME680_REG_COEFF1, buff, BME680_LEN_COEFF1);
 8010b5c:	2317      	movs	r3, #23
 8010b5e:	aa01      	add	r2, sp, #4
 8010b60:	218a      	movs	r1, #138	; 0x8a
 8010b62:	4620      	mov	r0, r4
 8010b64:	f007 faf8 	bl	8018158 <bme680_reg_read>
	if (err < 0) {
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	f2c0 8126 	blt.w	8010dba <bme680_init+0x2e6>
	err = bme680_reg_read(data, BME680_REG_COEFF2, &buff[BME680_LEN_COEFF1],
 8010b6e:	2310      	movs	r3, #16
 8010b70:	f10d 021b 	add.w	r2, sp, #27
 8010b74:	21e1      	movs	r1, #225	; 0xe1
 8010b76:	4620      	mov	r0, r4
 8010b78:	f007 faee 	bl	8018158 <bme680_reg_read>
	if (err < 0) {
 8010b7c:	2800      	cmp	r0, #0
 8010b7e:	f2c0 811c 	blt.w	8010dba <bme680_init+0x2e6>
	err = bme680_reg_read(data, BME680_REG_COEFF3,
 8010b82:	2305      	movs	r3, #5
 8010b84:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 8010b88:	2100      	movs	r1, #0
 8010b8a:	4620      	mov	r0, r4
 8010b8c:	f007 fae4 	bl	8018158 <bme680_reg_read>
	if (err < 0) {
 8010b90:	2800      	cmp	r0, #0
 8010b92:	f2c0 8112 	blt.w	8010dba <bme680_init+0x2e6>
	data->par_t1 = (u16_t)(BME680_CONCAT_BYTES(buff[32], buff[31]));
 8010b96:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8010b9a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010b9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010ba2:	82a3      	strh	r3, [r4, #20]
	data->par_t2 = (s16_t)(BME680_CONCAT_BYTES(buff[1], buff[0]));
 8010ba4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010ba8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010bac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010bb0:	82e3      	strh	r3, [r4, #22]
	data->par_t3 = (u8_t)(buff[2]);
 8010bb2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010bb6:	7623      	strb	r3, [r4, #24]
	data->par_p1 = (u16_t)(BME680_CONCAT_BYTES(buff[5], buff[4]));
 8010bb8:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8010bbc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010bc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010bc4:	8363      	strh	r3, [r4, #26]
	data->par_p2 = (s16_t)(BME680_CONCAT_BYTES(buff[7], buff[6]));
 8010bc6:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8010bca:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8010bce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010bd2:	83a3      	strh	r3, [r4, #28]
	data->par_p3 = (s8_t)buff[8];
 8010bd4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010bd8:	77a3      	strb	r3, [r4, #30]
	data->par_p4 = (s16_t)(BME680_CONCAT_BYTES(buff[11], buff[10]));
 8010bda:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010bde:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8010be2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010be6:	8423      	strh	r3, [r4, #32]
	data->par_p5 = (s16_t)(BME680_CONCAT_BYTES(buff[13], buff[12]));
 8010be8:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8010bec:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8010bf0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010bf4:	8463      	strh	r3, [r4, #34]	; 0x22
	data->par_p6 = (s8_t)(buff[15]);
 8010bf6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010bfa:	ba5b      	rev16	r3, r3
 8010bfc:	84a3      	strh	r3, [r4, #36]	; 0x24
	data->par_p8 = (s16_t)(BME680_CONCAT_BYTES(buff[19], buff[18]));
 8010bfe:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010c02:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010c06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010c0a:	84e3      	strh	r3, [r4, #38]	; 0x26
	data->par_p9 = (s16_t)(BME680_CONCAT_BYTES(buff[21], buff[20]));
 8010c0c:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8010c10:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8010c14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010c18:	8523      	strh	r3, [r4, #40]	; 0x28
	data->par_p10 = (u8_t)(buff[22]);
 8010c1a:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8010c1e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	data->par_h1 = (u16_t)(((u16_t)buff[25] << 4) | (buff[24] & 0x0f));
 8010c22:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8010c26:	f89d 101d 	ldrb.w	r1, [sp, #29]
 8010c2a:	f003 020f 	and.w	r2, r3, #15
 8010c2e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8010c32:	80e2      	strh	r2, [r4, #6]
	data->par_h2 = (u16_t)(((u16_t)buff[23] << 4) | ((buff[24]) >> 4));
 8010c34:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8010c38:	091b      	lsrs	r3, r3, #4
 8010c3a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8010c3e:	8123      	strh	r3, [r4, #8]
	data->par_h3 = (s8_t)buff[26];
 8010c40:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010c44:	72a3      	strb	r3, [r4, #10]
	data->par_h4 = (s8_t)buff[27];
 8010c46:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010c4a:	72e3      	strb	r3, [r4, #11]
	data->par_h5 = (s8_t)buff[28];
 8010c4c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8010c50:	7323      	strb	r3, [r4, #12]
	data->par_h6 = (u8_t)buff[29];
 8010c52:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8010c56:	7363      	strb	r3, [r4, #13]
	data->par_h7 = (s8_t)buff[30];
 8010c58:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8010c5c:	73a3      	strb	r3, [r4, #14]
	data->par_gh1 = (s8_t)buff[35];
 8010c5e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8010c62:	73e3      	strb	r3, [r4, #15]
	data->par_gh2 = (s16_t)(BME680_CONCAT_BYTES(buff[34], buff[33]));
 8010c64:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8010c68:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8010c6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010c70:	8223      	strh	r3, [r4, #16]
	data->par_gh3 = (s8_t)buff[36];
 8010c72:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8010c76:	74a3      	strb	r3, [r4, #18]
	data->res_heat_val = (s8_t)buff[37];
 8010c78:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8010c7c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	data->res_heat_range = ((buff[39] & BME680_MSK_RH_RANGE) >> 4);
 8010c80:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8010c84:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8010c88:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	data->range_sw_err = ((s8_t)(buff[41] & BME680_MSK_RANGE_SW_ERR)) / 16;
 8010c8c:	f99d 302d 	ldrsb.w	r3, [sp, #45]	; 0x2d
 8010c90:	111b      	asrs	r3, r3, #4
 8010c92:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	err = bme680_reg_write(data, BME680_REG_CTRL_HUM, BME680_HUMIDITY_OVER);
 8010c96:	2201      	movs	r2, #1
 8010c98:	2172      	movs	r1, #114	; 0x72
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	f007 fa78 	bl	8018190 <bme680_reg_write>
	if (err < 0) {
 8010ca0:	2800      	cmp	r0, #0
 8010ca2:	da25      	bge.n	8010cf0 <bme680_init+0x21c>
		printf("\n5\n");
 8010ca4:	4850      	ldr	r0, [pc, #320]	; (8010de8 <bme680_init+0x314>)
 8010ca6:	e74e      	b.n	8010b46 <bme680_init+0x72>
		printf("\n3\n");
 8010ca8:	4850      	ldr	r0, [pc, #320]	; (8010dec <bme680_init+0x318>)
 8010caa:	f7f1 ff31 	bl	8002b10 <iprintf>
		printf("Bad BME680 chip id 0x%x", data->chip_id);
 8010cae:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8010cb2:	484f      	ldr	r0, [pc, #316]	; (8010df0 <bme680_init+0x31c>)
 8010cb4:	f7f1 ff2c 	bl	8002b10 <iprintf>
		printf(" BME680 chip id 0x%x", BME680_CHIP_ID);
 8010cb8:	2161      	movs	r1, #97	; 0x61
 8010cba:	484e      	ldr	r0, [pc, #312]	; (8010df4 <bme680_init+0x320>)
 8010cbc:	f7f1 ff28 	bl	8002b10 <iprintf>
		LOG_ERR("Bad BME680 chip id 0x%x", data->chip_id);
 8010cc0:	4b42      	ldr	r3, [pc, #264]	; (8010dcc <bme680_init+0x2f8>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	075b      	lsls	r3, r3, #29
 8010cc6:	d00f      	beq.n	8010ce8 <bme680_init+0x214>
 8010cc8:	2301      	movs	r3, #1
 8010cca:	f04f 0200 	mov.w	r2, #0
 8010cce:	f363 0207 	bfi	r2, r3, #0, #8
 8010cd2:	493f      	ldr	r1, [pc, #252]	; (8010dd0 <bme680_init+0x2fc>)
 8010cd4:	4b3f      	ldr	r3, [pc, #252]	; (8010dd4 <bme680_init+0x300>)
 8010cd6:	4846      	ldr	r0, [pc, #280]	; (8010df0 <bme680_init+0x31c>)
 8010cd8:	1a5b      	subs	r3, r3, r1
 8010cda:	08db      	lsrs	r3, r3, #3
 8010cdc:	f363 128f 	bfi	r2, r3, #6, #10
 8010ce0:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8010ce4:	f002 ff9a 	bl	8013c1c <log_1>
				printf("\nreturn -einval\n");
 8010ce8:	4843      	ldr	r0, [pc, #268]	; (8010df8 <bme680_init+0x324>)
 8010cea:	f7f1 ff11 	bl	8002b10 <iprintf>
		return -EINVAL;
 8010cee:	e714      	b.n	8010b1a <bme680_init+0x46>
	err = bme680_reg_write(data, BME680_REG_CONFIG, BME680_CONFIG_VAL);
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	2175      	movs	r1, #117	; 0x75
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	f007 fa4b 	bl	8018190 <bme680_reg_write>
	if (err < 0) {
 8010cfa:	2800      	cmp	r0, #0
 8010cfc:	da01      	bge.n	8010d02 <bme680_init+0x22e>
		printf("\n6\n");
 8010cfe:	483f      	ldr	r0, [pc, #252]	; (8010dfc <bme680_init+0x328>)
 8010d00:	e721      	b.n	8010b46 <bme680_init+0x72>
	err = bme680_reg_write(data, BME680_REG_CTRL_GAS_1,
 8010d02:	2210      	movs	r2, #16
 8010d04:	2171      	movs	r1, #113	; 0x71
 8010d06:	4620      	mov	r0, r4
 8010d08:	f007 fa42 	bl	8018190 <bme680_reg_write>
	if (err < 0) {
 8010d0c:	2800      	cmp	r0, #0
 8010d0e:	da01      	bge.n	8010d14 <bme680_init+0x240>
		printf("\n7\n");
 8010d10:	483b      	ldr	r0, [pc, #236]	; (8010e00 <bme680_init+0x32c>)
 8010d12:	e718      	b.n	8010b46 <bme680_init+0x72>
					   * heatr_temp * 5) / 100)
 8010d14:	8a21      	ldrh	r1, [r4, #16]
 8010d16:	4b3b      	ldr	r3, [pc, #236]	; (8010e04 <bme680_init+0x330>)
 8010d18:	2205      	movs	r2, #5
 8010d1a:	fb11 3302 	smlabb	r3, r1, r2, r3
 8010d1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010d22:	2064      	movs	r0, #100	; 0x64
 8010d24:	4359      	muls	r1, r3
					 + 3276800) / 10);
 8010d26:	230a      	movs	r3, #10
					   * heatr_temp * 5) / 100)
 8010d28:	fbb1 f1f0 	udiv	r1, r1, r0
					 + 3276800) / 10);
 8010d2c:	f501 1148 	add.w	r1, r1, #3276800	; 0x320000
 8010d30:	fbb1 f1f3 	udiv	r1, r1, r3
	var2 = (data->par_gh1 + 784) * (((((data->par_gh2 + 154009)
 8010d34:	f994 300f 	ldrsb.w	r3, [r4, #15]
 8010d38:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8010d3c:	4359      	muls	r1, r3
	var1 = ((amb_temp * data->par_gh3) / 1000) * 256;
 8010d3e:	f994 3012 	ldrsb.w	r3, [r4, #18]
 8010d42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010d46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010d4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010d4e:	fb93 f3f2 	sdiv	r3, r3, r2
	var4 = (var3 / (data->res_heat_range + 4));
 8010d52:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
	var1 = ((amb_temp * data->par_gh3) / 1000) * 256;
 8010d56:	021b      	lsls	r3, r3, #8
	var3 = var1 + (var2 / 2);
 8010d58:	eb03 0361 	add.w	r3, r3, r1, asr #1
	var5 = (131 * data->res_heat_val) + 65536;
 8010d5c:	f994 102c 	ldrsb.w	r1, [r4, #44]	; 0x2c
	var4 = (var3 / (data->res_heat_range + 4));
 8010d60:	3204      	adds	r2, #4
 8010d62:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * data->res_heat_val) + 65536;
 8010d66:	2283      	movs	r2, #131	; 0x83
 8010d68:	434a      	muls	r2, r1
 8010d6a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	heatr_res_x100 = ((var4 / var5) - 250) * 34;
 8010d6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d72:	2222      	movs	r2, #34	; 0x22
 8010d74:	4353      	muls	r3, r2
	heatr_res = (heatr_res_x100 + 50) / 100;
 8010d76:	f5a3 5304 	sub.w	r3, r3, #8448	; 0x2100
 8010d7a:	3b02      	subs	r3, #2
	err = bme680_reg_write(data, BME680_REG_RES_HEAT0,
 8010d7c:	215a      	movs	r1, #90	; 0x5a
	heatr_res = (heatr_res_x100 + 50) / 100;
 8010d7e:	fb93 f3f0 	sdiv	r3, r3, r0
	err = bme680_reg_write(data, BME680_REG_RES_HEAT0,
 8010d82:	4620      	mov	r0, r4
 8010d84:	b2da      	uxtb	r2, r3
 8010d86:	f007 fa03 	bl	8018190 <bme680_reg_write>
	if (err < 0) {
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	da01      	bge.n	8010d92 <bme680_init+0x2be>
		printf("\n8\n");
 8010d8e:	481e      	ldr	r0, [pc, #120]	; (8010e08 <bme680_init+0x334>)
 8010d90:	e6d9      	b.n	8010b46 <bme680_init+0x72>
	err = bme680_reg_write(data, BME680_REG_GAS_WAIT0,
 8010d92:	2271      	movs	r2, #113	; 0x71
 8010d94:	2164      	movs	r1, #100	; 0x64
 8010d96:	4620      	mov	r0, r4
 8010d98:	f007 f9fa 	bl	8018190 <bme680_reg_write>
	if (err < 0) {
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	da01      	bge.n	8010da4 <bme680_init+0x2d0>
		printf("\n9\n");
 8010da0:	481a      	ldr	r0, [pc, #104]	; (8010e0c <bme680_init+0x338>)
 8010da2:	e6d0      	b.n	8010b46 <bme680_init+0x72>
	err = bme680_reg_write(data, BME680_REG_CTRL_MEAS,
 8010da4:	2255      	movs	r2, #85	; 0x55
 8010da6:	2174      	movs	r1, #116	; 0x74
 8010da8:	4620      	mov	r0, r4
 8010daa:	f007 f9f1 	bl	8018190 <bme680_reg_write>
	if (err < 0) {
 8010dae:	2800      	cmp	r0, #0
 8010db0:	da01      	bge.n	8010db6 <bme680_init+0x2e2>
		printf("\n10\n");
 8010db2:	4817      	ldr	r0, [pc, #92]	; (8010e10 <bme680_init+0x33c>)
 8010db4:	e6c7      	b.n	8010b46 <bme680_init+0x72>
	return 0;
 8010db6:	2000      	movs	r0, #0
 8010db8:	e6b1      	b.n	8010b1e <bme680_init+0x4a>
		printf("\n4\n");
 8010dba:	4816      	ldr	r0, [pc, #88]	; (8010e14 <bme680_init+0x340>)
 8010dbc:	e6c3      	b.n	8010b46 <bme680_init+0x72>
 8010dbe:	bf00      	nop
 8010dc0:	0801d3c3 	.word	0x0801d3c3
 8010dc4:	0801d3aa 	.word	0x0801d3aa
 8010dc8:	0801d3d5 	.word	0x0801d3d5
 8010dcc:	20008fd0 	.word	0x20008fd0
 8010dd0:	08019248 	.word	0x08019248
 8010dd4:	08019248 	.word	0x08019248
 8010dd8:	0801d3f0 	.word	0x0801d3f0
 8010ddc:	0801d409 	.word	0x0801d409
 8010de0:	0801d42b 	.word	0x0801d42b
 8010de4:	0801d42f 	.word	0x0801d42f
 8010de8:	0801d44f 	.word	0x0801d44f
 8010dec:	0801d433 	.word	0x0801d433
 8010df0:	0801d437 	.word	0x0801d437
 8010df4:	0801d43a 	.word	0x0801d43a
 8010df8:	0801d468 	.word	0x0801d468
 8010dfc:	0801d453 	.word	0x0801d453
 8010e00:	0801d457 	.word	0x0801d457
 8010e04:	000bbffd 	.word	0x000bbffd
 8010e08:	0801d45b 	.word	0x0801d45b
 8010e0c:	0801d45f 	.word	0x0801d45f
 8010e10:	0801d463 	.word	0x0801d463
 8010e14:	0801d479 	.word	0x0801d479

08010e18 <lis2dh_channel_get>:
	struct lis2dh_data *lis2dh = dev->driver_data;
 8010e18:	2903      	cmp	r1, #3
{
 8010e1a:	b570      	push	{r4, r5, r6, lr}
	struct lis2dh_data *lis2dh = dev->driver_data;
 8010e1c:	6884      	ldr	r4, [r0, #8]
	switch (chan) {
 8010e1e:	d81b      	bhi.n	8010e58 <lis2dh_channel_get+0x40>
 8010e20:	4b0f      	ldr	r3, [pc, #60]	; (8010e60 <lis2dh_channel_get+0x48>)
 8010e22:	4810      	ldr	r0, [pc, #64]	; (8010e64 <lis2dh_channel_get+0x4c>)
 8010e24:	565b      	ldrsb	r3, [r3, r1]
 8010e26:	5646      	ldrsb	r6, [r0, r1]
	val->val1 = converted_val / 1000000;
 8010e28:	4d0f      	ldr	r5, [pc, #60]	; (8010e68 <lis2dh_channel_get+0x50>)
	for (i = ofs_start; i <= ofs_end; i++, val++) {
 8010e2a:	42b3      	cmp	r3, r6
 8010e2c:	f102 0208 	add.w	r2, r2, #8
 8010e30:	dd01      	ble.n	8010e36 <lis2dh_channel_get+0x1e>
	return 0;
 8010e32:	2000      	movs	r0, #0
}
 8010e34:	bd70      	pop	{r4, r5, r6, pc}
		lis2dh_convert(lis2dh->sample.xyz[i], lis2dh->scale, val);
 8010e36:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	for (i = ofs_start; i <= ofs_end; i++, val++) {
 8010e3a:	3301      	adds	r3, #1
	converted_val = (raw_val >> 4) * scale;
 8010e3c:	f9b1 0005 	ldrsh.w	r0, [r1, #5]
 8010e40:	68e1      	ldr	r1, [r4, #12]
 8010e42:	1100      	asrs	r0, r0, #4
 8010e44:	4348      	muls	r0, r1
	val->val1 = converted_val / 1000000;
 8010e46:	fb90 f1f5 	sdiv	r1, r0, r5
 8010e4a:	f842 1c08 	str.w	r1, [r2, #-8]
	val->val2 = converted_val % 1000000;
 8010e4e:	fb05 0111 	mls	r1, r5, r1, r0
 8010e52:	f842 1c04 	str.w	r1, [r2, #-4]
 8010e56:	e7e8      	b.n	8010e2a <lis2dh_channel_get+0x12>
		return -ENOTSUP;
 8010e58:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8010e5c:	e7ea      	b.n	8010e34 <lis2dh_channel_get+0x1c>
 8010e5e:	bf00      	nop
 8010e60:	0801d484 	.word	0x0801d484
 8010e64:	0801d488 	.word	0x0801d488
 8010e68:	000f4240 	.word	0x000f4240

08010e6c <lis2dh_sample_fetch>:
{
 8010e6c:	b530      	push	{r4, r5, lr}
	struct lis2dh_data *lis2dh = dev->driver_data;
 8010e6e:	6884      	ldr	r4, [r0, #8]
{
 8010e70:	b089      	sub	sp, #36	; 0x24
#if defined(DT_ST_LIS2DH_BUS_SPI)
	start_addr |= LIS2DH_SPI_READ_BIT | LIS2DH_SPI_AUTOINC_ADDR;

	return lis2dh_spi_access(lis2dh, start_addr, buf, num_bytes);
#elif defined(DT_ST_LIS2DH_BUS_I2C)
	u8_t addr = start_addr | LIS2DH_AUTOINCREMENT_ADDR;
 8010e72:	23a7      	movs	r3, #167	; 0xa7
 8010e74:	f88d 3007 	strb.w	r3, [sp, #7]

	return i2c_write_read(lis2dh->bus, LIS2DH_BUS_ADDRESS,
 8010e78:	4623      	mov	r3, r4
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (u8_t *)write_buf;
 8010e7a:	f10d 0207 	add.w	r2, sp, #7
 8010e7e:	f853 0b04 	ldr.w	r0, [r3], #4
 8010e82:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
 8010e84:	2201      	movs	r2, #1
 8010e86:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (u8_t *)read_buf;
 8010e88:	9305      	str	r3, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
 8010e8a:	2200      	movs	r2, #0
	msg[1].len = num_read;
 8010e8c:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
 8010e8e:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].len = num_read;
 8010e92:	9306      	str	r3, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8010e94:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
 8010e98:	6843      	ldr	r3, [r0, #4]
 8010e9a:	2202      	movs	r2, #2
 8010e9c:	685d      	ldr	r5, [r3, #4]
 8010e9e:	a902      	add	r1, sp, #8
 8010ea0:	2319      	movs	r3, #25
 8010ea2:	47a8      	blx	r5
	if (status < 0) {
 8010ea4:	4b21      	ldr	r3, [pc, #132]	; (8010f2c <lis2dh_sample_fetch+0xc0>)
 8010ea6:	1e05      	subs	r5, r0, #0
		LOG_WRN("Could not read accel axis data");
 8010ea8:	681b      	ldr	r3, [r3, #0]
	if (status < 0) {
 8010eaa:	da13      	bge.n	8010ed4 <lis2dh_sample_fetch+0x68>
		LOG_WRN("Could not read accel axis data");
 8010eac:	f013 0f06 	tst.w	r3, #6
 8010eb0:	d00d      	beq.n	8010ece <lis2dh_sample_fetch+0x62>
 8010eb2:	2302      	movs	r3, #2
 8010eb4:	f04f 0100 	mov.w	r1, #0
 8010eb8:	f363 0107 	bfi	r1, r3, #0, #8
 8010ebc:	4a1c      	ldr	r2, [pc, #112]	; (8010f30 <lis2dh_sample_fetch+0xc4>)
 8010ebe:	4b1d      	ldr	r3, [pc, #116]	; (8010f34 <lis2dh_sample_fetch+0xc8>)
 8010ec0:	481d      	ldr	r0, [pc, #116]	; (8010f38 <lis2dh_sample_fetch+0xcc>)
 8010ec2:	1a9b      	subs	r3, r3, r2
 8010ec4:	08db      	lsrs	r3, r3, #3
 8010ec6:	f363 118f 	bfi	r1, r3, #6, #10
 8010eca:	f002 fe9a 	bl	8013c02 <log_0>
}
 8010ece:	4628      	mov	r0, r5
 8010ed0:	b009      	add	sp, #36	; 0x24
 8010ed2:	bd30      	pop	{r4, r5, pc}
	LOG_INF("status=0x%x x=%d y=%d z=%d", lis2dh->sample.status,
 8010ed4:	f003 0307 	and.w	r3, r3, #7
 8010ed8:	2b02      	cmp	r3, #2
 8010eda:	d91a      	bls.n	8010f12 <lis2dh_sample_fetch+0xa6>
 8010edc:	2203      	movs	r2, #3
 8010ede:	f04f 0300 	mov.w	r3, #0
 8010ee2:	f362 0307 	bfi	r3, r2, #0, #8
 8010ee6:	4812      	ldr	r0, [pc, #72]	; (8010f30 <lis2dh_sample_fetch+0xc4>)
 8010ee8:	4a12      	ldr	r2, [pc, #72]	; (8010f34 <lis2dh_sample_fetch+0xc8>)
 8010eea:	7921      	ldrb	r1, [r4, #4]
 8010eec:	9102      	str	r1, [sp, #8]
 8010eee:	1a12      	subs	r2, r2, r0
 8010ef0:	08d2      	lsrs	r2, r2, #3
 8010ef2:	f362 138f 	bfi	r3, r2, #6, #10
 8010ef6:	f9b4 2005 	ldrsh.w	r2, [r4, #5]
 8010efa:	9203      	str	r2, [sp, #12]
 8010efc:	f9b4 2007 	ldrsh.w	r2, [r4, #7]
 8010f00:	9204      	str	r2, [sp, #16]
 8010f02:	f9b4 2009 	ldrsh.w	r2, [r4, #9]
 8010f06:	9205      	str	r2, [sp, #20]
 8010f08:	a902      	add	r1, sp, #8
 8010f0a:	2204      	movs	r2, #4
 8010f0c:	480b      	ldr	r0, [pc, #44]	; (8010f3c <lis2dh_sample_fetch+0xd0>)
 8010f0e:	f002 fecc 	bl	8013caa <log_n>
	if (lis2dh->sample.status & LIS2DH_STATUS_OVR_MASK) {
 8010f12:	7923      	ldrb	r3, [r4, #4]
 8010f14:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8010f18:	d105      	bne.n	8010f26 <lis2dh_sample_fetch+0xba>
		return 0;
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	bf0c      	ite	eq
 8010f1e:	f06f 053c 	mvneq.w	r5, #60	; 0x3c
 8010f22:	2500      	movne	r5, #0
 8010f24:	e7d3      	b.n	8010ece <lis2dh_sample_fetch+0x62>
		return -EBADMSG;
 8010f26:	f06f 054c 	mvn.w	r5, #76	; 0x4c
 8010f2a:	e7d0      	b.n	8010ece <lis2dh_sample_fetch+0x62>
 8010f2c:	20008fe4 	.word	0x20008fe4
 8010f30:	08019248 	.word	0x08019248
 8010f34:	08019270 	.word	0x08019270
 8010f38:	0801d54c 	.word	0x0801d54c
 8010f3c:	0801d56b 	.word	0x0801d56b

08010f40 <lis2dh_init>:
	.sample_fetch = lis2dh_sample_fetch,
	.channel_get = lis2dh_channel_get,
};

int lis2dh_init(struct device *dev)
{
 8010f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f44:	4606      	mov	r6, r0
 8010f46:	b08a      	sub	sp, #40	; 0x28
	struct lis2dh_data *lis2dh = dev->driver_data;
 8010f48:	6887      	ldr	r7, [r0, #8]
 8010f4a:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8011090 <lis2dh_init+0x150>
 8010f4e:	f8df a144 	ldr.w	sl, [pc, #324]	; 8011094 <lis2dh_init+0x154>
 8010f52:	4648      	mov	r0, r9
 8010f54:	f000 fdf0 	bl	8011b38 <z_impl_device_get_binding>
	lis2dh->bus = device_get_binding(LIS2DH_BUS_DEV_NAME);
 8010f58:	6038      	str	r0, [r7, #0]
	if (lis2dh->bus == NULL) {
 8010f5a:	2800      	cmp	r0, #0
 8010f5c:	d038      	beq.n	8010fd0 <lis2dh_init+0x90>
	/* Initialize control register ctrl1 to ctrl 6 to default boot values
	 * to avoid warm start/reset issues as the accelerometer has no reset
	 * pin. Register values are retained if power is not removed.
	 * Default values see LIS2DH documentation page 30, chapter 6.
	 */
	(void)memset(raw, 0, sizeof(raw));
 8010f5e:	2500      	movs	r5, #0
	raw[0] = LIS2DH_ACCEL_EN_BITS;
 8010f60:	2207      	movs	r2, #7
	(void)memset(raw, 0, sizeof(raw));
 8010f62:	9502      	str	r5, [sp, #8]
	raw[0] = LIS2DH_ACCEL_EN_BITS;
 8010f64:	f88d 2008 	strb.w	r2, [sp, #8]
		buffer[0] = start_addr | LIS2DH_AUTOINCREMENT_ADDR;
		memmove(buffer + 1, buf, num_bytes);
		return i2c_write(lis2dh->bus, buffer, 1 + num_bytes,
				 LIS2DH_BUS_ADDRESS);
	}
	return i2c_burst_write(lis2dh->bus, LIS2DH_BUS_ADDRESS,
 8010f68:	68b2      	ldr	r2, [r6, #8]
	(void)memset(raw, 0, sizeof(raw));
 8010f6a:	f8ad 500c 	strh.w	r5, [sp, #12]
 8010f6e:	6810      	ldr	r0, [r2, #0]
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
	msg[0].len = 1U;
	msg[0].flags = I2C_MSG_WRITE;
 8010f70:	f88d 5018 	strb.w	r5, [sp, #24]
 8010f74:	22a0      	movs	r2, #160	; 0xa0
 8010f76:	ab02      	add	r3, sp, #8
 8010f78:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = &start_addr;
 8010f7c:	f10d 0207 	add.w	r2, sp, #7
 8010f80:	9204      	str	r2, [sp, #16]

	msg[1].buf = (u8_t *)buf;
 8010f82:	9307      	str	r3, [sp, #28]
	msg[0].len = 1U;
 8010f84:	2201      	movs	r2, #1
	msg[1].len = num_bytes;
 8010f86:	2306      	movs	r3, #6
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8010f88:	f04f 0802 	mov.w	r8, #2
	msg[0].len = 1U;
 8010f8c:	9205      	str	r2, [sp, #20]
	msg[1].len = num_bytes;
 8010f8e:	9308      	str	r3, [sp, #32]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8010f90:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
	return api->transfer(dev, msgs, num_msgs, addr);
 8010f94:	6843      	ldr	r3, [r0, #4]
 8010f96:	4642      	mov	r2, r8
 8010f98:	685c      	ldr	r4, [r3, #4]
 8010f9a:	a904      	add	r1, sp, #16
 8010f9c:	2319      	movs	r3, #25
 8010f9e:	47a0      	blx	r4

	status = lis2dh_burst_write(dev, LIS2DH_REG_CTRL1, raw,
				    sizeof(raw));
	if (status < 0) {
 8010fa0:	1e04      	subs	r4, r0, #0
 8010fa2:	da2b      	bge.n	8010ffc <lis2dh_init+0xbc>
		LOG_ERR("Failed to reset ctrl registers.");
 8010fa4:	f8da 3000 	ldr.w	r3, [sl]
 8010fa8:	075a      	lsls	r2, r3, #29
 8010faa:	d00d      	beq.n	8010fc8 <lis2dh_init+0x88>
 8010fac:	2301      	movs	r3, #1
 8010fae:	f04f 0100 	mov.w	r1, #0
 8010fb2:	f363 0107 	bfi	r1, r3, #0, #8
 8010fb6:	4a30      	ldr	r2, [pc, #192]	; (8011078 <lis2dh_init+0x138>)
 8010fb8:	4b30      	ldr	r3, [pc, #192]	; (801107c <lis2dh_init+0x13c>)
 8010fba:	4831      	ldr	r0, [pc, #196]	; (8011080 <lis2dh_init+0x140>)
 8010fbc:	1a9b      	subs	r3, r3, r2
 8010fbe:	08db      	lsrs	r3, r3, #3
 8010fc0:	f363 118f 	bfi	r1, r3, #6, #10
	/* set full scale range and store it for later conversion */
	lis2dh->scale = lis2dh_reg_val_to_scale[LIS2DH_FS_IDX];
	status = lis2dh_reg_write_byte(dev, LIS2DH_REG_CTRL4,
				       LIS2DH_FS_BITS | LIS2DH_HR_BIT);
	if (status < 0) {
		LOG_ERR("Failed to set full scale ctrl register.");
 8010fc4:	f002 fe1d 	bl	8013c02 <log_0>

	/* enable accel measurements and set power mode and data rate */
	return lis2dh_reg_write_byte(dev, LIS2DH_REG_CTRL1,
				     LIS2DH_ACCEL_EN_BITS | LIS2DH_LP_EN_BIT |
				     LIS2DH_ODR_BITS);
}
 8010fc8:	4620      	mov	r0, r4
 8010fca:	b00a      	add	sp, #40	; 0x28
 8010fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_ERR("Could not get pointer to %s device",
 8010fd0:	f8da 3000 	ldr.w	r3, [sl]
 8010fd4:	0759      	lsls	r1, r3, #29
 8010fd6:	d00e      	beq.n	8010ff6 <lis2dh_init+0xb6>
 8010fd8:	2301      	movs	r3, #1
 8010fda:	f04f 0200 	mov.w	r2, #0
 8010fde:	f363 0207 	bfi	r2, r3, #0, #8
 8010fe2:	4925      	ldr	r1, [pc, #148]	; (8011078 <lis2dh_init+0x138>)
 8010fe4:	4b25      	ldr	r3, [pc, #148]	; (801107c <lis2dh_init+0x13c>)
 8010fe6:	4827      	ldr	r0, [pc, #156]	; (8011084 <lis2dh_init+0x144>)
 8010fe8:	1a5b      	subs	r3, r3, r1
 8010fea:	08db      	lsrs	r3, r3, #3
 8010fec:	f363 128f 	bfi	r2, r3, #6, #10
 8010ff0:	4649      	mov	r1, r9
 8010ff2:	f002 fe13 	bl	8013c1c <log_1>
		return -EINVAL;
 8010ff6:	f06f 0415 	mvn.w	r4, #21
 8010ffa:	e7e5      	b.n	8010fc8 <lis2dh_init+0x88>
	lis2dh->scale = lis2dh_reg_val_to_scale[LIS2DH_FS_IDX];
 8010ffc:	f242 5368 	movw	r3, #9576	; 0x2568
 8011000:	60fb      	str	r3, [r7, #12]
	status = lis2dh_reg_write_byte(dev, LIS2DH_REG_CTRL4,
 8011002:	462a      	mov	r2, r5
 8011004:	2123      	movs	r1, #35	; 0x23
 8011006:	68b0      	ldr	r0, [r6, #8]
 8011008:	f007 f8d7 	bl	80181ba <lis2dh_reg_write_byte.isra.3>
	if (status < 0) {
 801100c:	1e04      	subs	r4, r0, #0
		LOG_ERR("Failed to set full scale ctrl register.");
 801100e:	f8da 3000 	ldr.w	r3, [sl]
	if (status < 0) {
 8011012:	da0e      	bge.n	8011032 <lis2dh_init+0xf2>
		LOG_ERR("Failed to set full scale ctrl register.");
 8011014:	075b      	lsls	r3, r3, #29
 8011016:	d0d7      	beq.n	8010fc8 <lis2dh_init+0x88>
 8011018:	2301      	movs	r3, #1
 801101a:	f04f 0100 	mov.w	r1, #0
 801101e:	f363 0107 	bfi	r1, r3, #0, #8
 8011022:	4a15      	ldr	r2, [pc, #84]	; (8011078 <lis2dh_init+0x138>)
 8011024:	4b15      	ldr	r3, [pc, #84]	; (801107c <lis2dh_init+0x13c>)
 8011026:	4818      	ldr	r0, [pc, #96]	; (8011088 <lis2dh_init+0x148>)
 8011028:	1a9b      	subs	r3, r3, r2
 801102a:	08db      	lsrs	r3, r3, #3
 801102c:	f363 118f 	bfi	r1, r3, #6, #10
 8011030:	e7c8      	b.n	8010fc4 <lis2dh_init+0x84>
	LOG_INF("bus=%s fs=%d, odr=0x%x lp_en=0x%x scale=%d",
 8011032:	f003 0307 	and.w	r3, r3, #7
 8011036:	2b02      	cmp	r3, #2
 8011038:	d916      	bls.n	8011068 <lis2dh_init+0x128>
 801103a:	2203      	movs	r2, #3
 801103c:	f04f 0300 	mov.w	r3, #0
 8011040:	f362 0307 	bfi	r3, r2, #0, #8
 8011044:	490c      	ldr	r1, [pc, #48]	; (8011078 <lis2dh_init+0x138>)
 8011046:	4a0d      	ldr	r2, [pc, #52]	; (801107c <lis2dh_init+0x13c>)
 8011048:	4810      	ldr	r0, [pc, #64]	; (801108c <lis2dh_init+0x14c>)
 801104a:	1a52      	subs	r2, r2, r1
 801104c:	08d2      	lsrs	r2, r2, #3
 801104e:	f362 138f 	bfi	r3, r2, #6, #10
 8011052:	2204      	movs	r2, #4
 8011054:	e9cd 2506 	strd	r2, r5, [sp, #24]
 8011058:	68fa      	ldr	r2, [r7, #12]
 801105a:	9208      	str	r2, [sp, #32]
 801105c:	a904      	add	r1, sp, #16
 801105e:	2205      	movs	r2, #5
 8011060:	e9cd 9804 	strd	r9, r8, [sp, #16]
 8011064:	f002 fe21 	bl	8013caa <log_n>
	return lis2dh_reg_write_byte(dev, LIS2DH_REG_CTRL1,
 8011068:	2247      	movs	r2, #71	; 0x47
 801106a:	2120      	movs	r1, #32
 801106c:	68b0      	ldr	r0, [r6, #8]
 801106e:	f007 f8a4 	bl	80181ba <lis2dh_reg_write_byte.isra.3>
 8011072:	4604      	mov	r4, r0
 8011074:	e7a8      	b.n	8010fc8 <lis2dh_init+0x88>
 8011076:	bf00      	nop
 8011078:	08019248 	.word	0x08019248
 801107c:	08019270 	.word	0x08019270
 8011080:	0801d4d9 	.word	0x0801d4d9
 8011084:	0801d4b6 	.word	0x0801d4b6
 8011088:	0801d4f9 	.word	0x0801d4f9
 801108c:	0801d521 	.word	0x0801d521
 8011090:	0801d3b0 	.word	0x0801d3b0
 8011094:	20008fe4 	.word	0x20008fe4

08011098 <spi_stm32_init>:
#endif
	.release = spi_stm32_release,
};

static int spi_stm32_init(struct device *dev)
{
 8011098:	b538      	push	{r3, r4, r5, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->driver_data;
	const struct spi_stm32_config *cfg = dev->config->config_info;
 801109a:	6803      	ldr	r3, [r0, #0]
	struct spi_stm32_data *data __attribute__((unused)) = dev->driver_data;
 801109c:	6885      	ldr	r5, [r0, #8]
	const struct spi_stm32_config *cfg = dev->config->config_info;
 801109e:	689c      	ldr	r4, [r3, #8]
 80110a0:	4811      	ldr	r0, [pc, #68]	; (80110e8 <spi_stm32_init+0x50>)
 80110a2:	f000 fd49 	bl	8011b38 <z_impl_device_get_binding>
 80110a6:	6843      	ldr	r3, [r0, #4]
 80110a8:	4621      	mov	r1, r4
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	4798      	blx	r3

	__ASSERT_NO_MSG(device_get_binding(STM32_CLOCK_CONTROL_NAME));

	if (clock_control_on(device_get_binding(STM32_CLOCK_CONTROL_NAME),
 80110ae:	4604      	mov	r4, r0
 80110b0:	b1a0      	cbz	r0, 80110dc <spi_stm32_init+0x44>
			       (clock_control_subsys_t) &cfg->pclken) != 0) {
		LOG_ERR("Could not enable SPI clock");
 80110b2:	4b0e      	ldr	r3, [pc, #56]	; (80110ec <spi_stm32_init+0x54>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	075b      	lsls	r3, r3, #29
 80110b8:	d00d      	beq.n	80110d6 <spi_stm32_init+0x3e>
 80110ba:	2301      	movs	r3, #1
 80110bc:	f04f 0100 	mov.w	r1, #0
 80110c0:	f363 0107 	bfi	r1, r3, #0, #8
 80110c4:	4a0a      	ldr	r2, [pc, #40]	; (80110f0 <spi_stm32_init+0x58>)
 80110c6:	4b0b      	ldr	r3, [pc, #44]	; (80110f4 <spi_stm32_init+0x5c>)
 80110c8:	480b      	ldr	r0, [pc, #44]	; (80110f8 <spi_stm32_init+0x60>)
 80110ca:	1a9b      	subs	r3, r3, r2
 80110cc:	08db      	lsrs	r3, r3, #3
 80110ce:	f363 118f 	bfi	r1, r3, #6, #10
 80110d2:	f002 fd96 	bl	8013c02 <log_0>
 80110d6:	f06f 0404 	mvn.w	r4, #4
 80110da:	e002      	b.n	80110e2 <spi_stm32_init+0x4a>

#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
#endif

	spi_context_unlock_unconditionally(&data->ctx);
 80110dc:	4628      	mov	r0, r5
 80110de:	f007 f8fd 	bl	80182dc <spi_context_unlock_unconditionally>

	return 0;
}
 80110e2:	4620      	mov	r0, r4
 80110e4:	bd38      	pop	{r3, r4, r5, pc}
 80110e6:	bf00      	nop
 80110e8:	0801b322 	.word	0x0801b322
 80110ec:	20009048 	.word	0x20009048
 80110f0:	08019248 	.word	0x08019248
 80110f4:	08019338 	.word	0x08019338
 80110f8:	0801d59f 	.word	0x0801d59f

080110fc <spi_stm32_transceive>:
{
 80110fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011100:	461f      	mov	r7, r3
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 8011102:	6803      	ldr	r3, [r0, #0]
	struct spi_stm32_data *data = DEV_DATA(dev);
 8011104:	6884      	ldr	r4, [r0, #8]
	SPI_TypeDef *spi = cfg->spi;
 8011106:	689b      	ldr	r3, [r3, #8]
{
 8011108:	b08f      	sub	sp, #60	; 0x3c
 801110a:	4605      	mov	r5, r0
 801110c:	4689      	mov	r9, r1
	SPI_TypeDef *spi = cfg->spi;
 801110e:	689e      	ldr	r6, [r3, #8]
	if (!tx_bufs && !rx_bufs) {
 8011110:	4690      	mov	r8, r2
 8011112:	b90a      	cbnz	r2, 8011118 <spi_stm32_transceive+0x1c>
 8011114:	2f00      	cmp	r7, #0
 8011116:	d068      	beq.n	80111ea <spi_stm32_transceive+0xee>

static inline void spi_context_lock(struct spi_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal)
{
	k_sem_take(&ctx->lock, K_FOREVER);
 8011118:	f104 0b04 	add.w	fp, r4, #4
	return z_impl_k_sem_take(sem, timeout);
 801111c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011120:	4658      	mov	r0, fp
 8011122:	f001 fc03 	bl	801292c <z_impl_k_sem_take>
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 8011126:	682b      	ldr	r3, [r5, #0]
	const u32_t scaler[] = {
 8011128:	f8df c2fc 	ldr.w	ip, [pc, #764]	; 8011428 <spi_stm32_transceive+0x32c>
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 801112c:	689b      	ldr	r3, [r3, #8]
 801112e:	9303      	str	r3, [sp, #12]
	const u32_t scaler[] = {
 8011130:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
	struct spi_stm32_data *data = DEV_DATA(dev);
 8011134:	f8d5 a008 	ldr.w	sl, [r5, #8]
	const u32_t scaler[] = {
 8011138:	ad06      	add	r5, sp, #24
 801113a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801113c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8011140:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 8011144:	f8da 3000 	ldr.w	r3, [sl]
 8011148:	4599      	cmp	r9, r3
 801114a:	f000 80bc 	beq.w	80112c6 <spi_stm32_transceive+0x1ca>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 801114e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8011152:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8011156:	2b08      	cmp	r3, #8
 8011158:	d002      	beq.n	8011160 <spi_stm32_transceive+0x64>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 801115a:	2b10      	cmp	r3, #16
 801115c:	f040 817c 	bne.w	8011458 <spi_stm32_transceive+0x35c>
	SPI_TypeDef *spi = cfg->spi;
 8011160:	9b03      	ldr	r3, [sp, #12]
 8011162:	689d      	ldr	r5, [r3, #8]
 8011164:	48a8      	ldr	r0, [pc, #672]	; (8011408 <spi_stm32_transceive+0x30c>)
 8011166:	f000 fce7 	bl	8011b38 <z_impl_device_get_binding>
		(const struct clock_control_driver_api *)dev->driver_api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->config->name);

	return api->get_rate(dev, sys, rate);
 801116a:	6843      	ldr	r3, [r0, #4]
 801116c:	9903      	ldr	r1, [sp, #12]
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	aa05      	add	r2, sp, #20
 8011172:	4798      	blx	r3
	if (clock_control_get_rate(device_get_binding(STM32_CLOCK_CONTROL_NAME),
 8011174:	2800      	cmp	r0, #0
 8011176:	da14      	bge.n	80111a2 <spi_stm32_transceive+0xa6>
		LOG_ERR("Failed call clock_control_get_rate");
 8011178:	4ba4      	ldr	r3, [pc, #656]	; (801140c <spi_stm32_transceive+0x310>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	075c      	lsls	r4, r3, #29
 801117e:	d00d      	beq.n	801119c <spi_stm32_transceive+0xa0>
 8011180:	2301      	movs	r3, #1
 8011182:	f04f 0100 	mov.w	r1, #0
 8011186:	f363 0107 	bfi	r1, r3, #0, #8
 801118a:	4aa1      	ldr	r2, [pc, #644]	; (8011410 <spi_stm32_transceive+0x314>)
 801118c:	4ba1      	ldr	r3, [pc, #644]	; (8011414 <spi_stm32_transceive+0x318>)
 801118e:	48a2      	ldr	r0, [pc, #648]	; (8011418 <spi_stm32_transceive+0x31c>)
 8011190:	1a9b      	subs	r3, r3, r2
 8011192:	08db      	lsrs	r3, r3, #3
 8011194:	f363 118f 	bfi	r1, r3, #6, #10
 8011198:	f002 fd33 	bl	8013c02 <log_0>
		return -EIO;
 801119c:	f06f 0704 	mvn.w	r7, #4
 80111a0:	e023      	b.n	80111ea <spi_stm32_transceive+0xee>
		u32_t clk = clock >> br;
 80111a2:	9a05      	ldr	r2, [sp, #20]
		if (clk <= config->frequency) {
 80111a4:	f8d9 1000 	ldr.w	r1, [r9]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 80111a8:	2301      	movs	r3, #1
		u32_t clk = clock >> br;
 80111aa:	fa22 f003 	lsr.w	r0, r2, r3
		if (clk <= config->frequency) {
 80111ae:	4288      	cmp	r0, r1
 80111b0:	f240 822f 	bls.w	8011612 <spi_stm32_transceive+0x516>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 80111b4:	3301      	adds	r3, #1
 80111b6:	2b09      	cmp	r3, #9
 80111b8:	d1f7      	bne.n	80111aa <spi_stm32_transceive+0xae>
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 80111ba:	4b94      	ldr	r3, [pc, #592]	; (801140c <spi_stm32_transceive+0x310>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	0758      	lsls	r0, r3, #29
 80111c0:	d011      	beq.n	80111e6 <spi_stm32_transceive+0xea>
 80111c2:	2301      	movs	r3, #1
 80111c4:	f04f 0000 	mov.w	r0, #0
 80111c8:	f363 0007 	bfi	r0, r3, #0, #8
 80111cc:	4c90      	ldr	r4, [pc, #576]	; (8011410 <spi_stm32_transceive+0x314>)
 80111ce:	4b91      	ldr	r3, [pc, #580]	; (8011414 <spi_stm32_transceive+0x318>)
 80111d0:	1b1b      	subs	r3, r3, r4
 80111d2:	08db      	lsrs	r3, r3, #3
 80111d4:	f363 108f 	bfi	r0, r3, #6, #10
 80111d8:	f8ad 0000 	strh.w	r0, [sp]
 80111dc:	0a13      	lsrs	r3, r2, #8
 80111de:	488f      	ldr	r0, [pc, #572]	; (801141c <spi_stm32_transceive+0x320>)
 80111e0:	0852      	lsrs	r2, r2, #1
 80111e2:	f002 fd47 	bl	8013c74 <log_3>
		return -EINVAL;
 80111e6:	f06f 0715 	mvn.w	r7, #21
}
 80111ea:	4638      	mov	r0, r7
 80111ec:	b00f      	add	sp, #60	; 0x3c
 80111ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80111f2:	682a      	ldr	r2, [r5, #0]
 80111f4:	f042 0202 	orr.w	r2, r2, #2
 80111f8:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 80111fa:	682a      	ldr	r2, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 80111fc:	0758      	lsls	r0, r3, #29
 80111fe:	bf4c      	ite	mi
 8011200:	f042 0201 	orrmi.w	r2, r2, #1
 8011204:	f022 0201 	bicpl.w	r2, r2, #1
 8011208:	602a      	str	r2, [r5, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 801120a:	682a      	ldr	r2, [r5, #0]
 801120c:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8011210:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8011212:	682a      	ldr	r2, [r5, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 8011214:	06d9      	lsls	r1, r3, #27
 8011216:	bf4c      	ite	mi
 8011218:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 801121c:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 8011220:	602a      	str	r2, [r5, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8011222:	682a      	ldr	r2, [r5, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8011224:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8011228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801122c:	602a      	str	r2, [r5, #0]
 801122e:	f003 0001 	and.w	r0, r3, #1
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8011232:	682a      	ldr	r2, [r5, #0]
 8011234:	b159      	cbz	r1, 801124e <spi_stm32_transceive+0x152>
 8011236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801123a:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 801123c:	686a      	ldr	r2, [r5, #4]
 801123e:	f022 0204 	bic.w	r2, r2, #4
 8011242:	606a      	str	r2, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8011244:	b968      	cbnz	r0, 8011262 <spi_stm32_transceive+0x166>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8011246:	682a      	ldr	r2, [r5, #0]
 8011248:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 801124c:	e00c      	b.n	8011268 <spi_stm32_transceive+0x16c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 801124e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8011252:	2800      	cmp	r0, #0
 8011254:	f000 80cf 	beq.w	80113f6 <spi_stm32_transceive+0x2fa>
 8011258:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 801125a:	686a      	ldr	r2, [r5, #4]
 801125c:	f022 0204 	bic.w	r2, r2, #4
 8011260:	606a      	str	r2, [r5, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8011262:	682a      	ldr	r2, [r5, #0]
 8011264:	f422 7282 	bic.w	r2, r2, #260	; 0x104
 8011268:	602a      	str	r2, [r5, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 801126a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 801126e:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8011270:	686b      	ldr	r3, [r5, #4]
 8011272:	bf06      	itte	eq
 8011274:	f423 6370 	biceq.w	r3, r3, #3840	; 0xf00
 8011278:	f443 63e0 	orreq.w	r3, r3, #1792	; 0x700
 801127c:	f443 6370 	orrne.w	r3, r3, #3840	; 0xf00
 8011280:	606b      	str	r3, [r5, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8011282:	686b      	ldr	r3, [r5, #4]
 8011284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011288:	606b      	str	r3, [r5, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 801128a:	686b      	ldr	r3, [r5, #4]
 801128c:	f023 0310 	bic.w	r3, r3, #16
 8011290:	606b      	str	r3, [r5, #4]
	data->ctx.config = config;
 8011292:	f8ca 9000 	str.w	r9, [sl]
	return 1;
}

static inline void spi_context_cs_configure(struct spi_context *ctx)
{
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 8011296:	2900      	cmp	r1, #0
 8011298:	f000 80c8 	beq.w	801142c <spi_stm32_transceive+0x330>
 801129c:	6808      	ldr	r0, [r1, #0]
 801129e:	2800      	cmp	r0, #0
 80112a0:	f000 80c4 	beq.w	801142c <spi_stm32_transceive+0x330>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 80112a4:	684a      	ldr	r2, [r1, #4]
	return api->config(port, access_op, pin, flags);
 80112a6:	6843      	ldr	r3, [r0, #4]
 80112a8:	2100      	movs	r1, #0
 80112aa:	681d      	ldr	r5, [r3, #0]
 80112ac:	2301      	movs	r3, #1
 80112ae:	47a8      	blx	r5
				   ctx->config->cs->gpio_pin, GPIO_DIR_OUT);
		gpio_pin_write(ctx->config->cs->gpio_dev,
 80112b0:	f8da 2000 	ldr.w	r2, [sl]
 80112b4:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
 80112b6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		gpio_pin_write(ctx->config->cs->gpio_dev,
 80112ba:	43d2      	mvns	r2, r2
 80112bc:	0fd2      	lsrs	r2, r2, #31
 80112be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80112c2:	f006 ffd7 	bl	8018274 <gpio_pin_write>
			       const struct spi_buf_set *rx_bufs,
			       u8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	if (tx_bufs) {
 80112c6:	f1b8 0f00 	cmp.w	r8, #0
 80112ca:	f000 80c8 	beq.w	801145e <spi_stm32_transceive+0x362>
		ctx->current_tx = tx_bufs->buffers;
 80112ce:	f8d8 3000 	ldr.w	r3, [r8]
		ctx->tx_count = tx_bufs->count;
 80112d2:	f8d8 2004 	ldr.w	r2, [r8, #4]
		ctx->current_tx = tx_bufs->buffers;
 80112d6:	63a3      	str	r3, [r4, #56]	; 0x38
		ctx->tx_count = tx_bufs->count;
 80112d8:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 80112da:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
 80112dc:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 80112de:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->tx_len = ctx->current_tx->len / dfs;
 80112e0:	64e3      	str	r3, [r4, #76]	; 0x4c
		ctx->tx_count = 0;
		ctx->tx_buf = NULL;
		ctx->tx_len = 0;
	}

	if (rx_bufs) {
 80112e2:	2f00      	cmp	r7, #0
 80112e4:	f000 80c0 	beq.w	8011468 <spi_stm32_transceive+0x36c>
		ctx->current_rx = rx_bufs->buffers;
 80112e8:	683b      	ldr	r3, [r7, #0]
		ctx->rx_count = rx_bufs->count;
 80112ea:	687a      	ldr	r2, [r7, #4]
		ctx->current_rx = rx_bufs->buffers;
 80112ec:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->rx_count = rx_bufs->count;
 80112ee:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 80112f0:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
 80112f2:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 80112f4:	6522      	str	r2, [r4, #80]	; 0x50
		ctx->rx_len = ctx->current_rx->len / dfs;
 80112f6:	6563      	str	r3, [r4, #84]	; 0x54
		ctx->rx_count = 0;
		ctx->rx_buf = NULL;
		ctx->rx_len = 0;
	}

	ctx->sync_status = 0;
 80112f8:	2300      	movs	r3, #0
 80112fa:	6363      	str	r3, [r4, #52]	; 0x34
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 80112fc:	68b2      	ldr	r2, [r6, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 80112fe:	f012 0201 	ands.w	r2, r2, #1
 8011302:	f040 80b6 	bne.w	8011472 <spi_stm32_transceive+0x376>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8011306:	6833      	ldr	r3, [r6, #0]
 8011308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801130c:	6033      	str	r3, [r6, #0]
	_spi_context_cs_control(ctx, on, false);
 801130e:	2101      	movs	r1, #1
 8011310:	4620      	mov	r0, r4
 8011312:	f006 ffb9 	bl	8018288 <_spi_context_cs_control.isra.5>
	u16_t operation = data->ctx.config->operation;
 8011316:	6823      	ldr	r3, [r4, #0]
 8011318:	8899      	ldrh	r1, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 801131a:	07ca      	lsls	r2, r1, #31
 801131c:	f100 80e7 	bmi.w	80114ee <spi_stm32_transceive+0x3f2>
	tx_frame = spi_stm32_next_tx(data);
 8011320:	4620      	mov	r0, r4
 8011322:	f006 ff96 	bl	8018252 <spi_stm32_next_tx>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 8011326:	68b3      	ldr	r3, [r6, #8]
	while (!ll_func_tx_is_empty(spi)) {
 8011328:	079b      	lsls	r3, r3, #30
 801132a:	d5fc      	bpl.n	8011326 <spi_stm32_transceive+0x22a>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 801132c:	f3c1 1145 	ubfx	r1, r1, #5, #6
 8011330:	2908      	cmp	r1, #8
 8011332:	f040 80a7 	bne.w	8011484 <spi_stm32_transceive+0x388>
		LL_SPI_TransmitData8(spi, tx_frame);
 8011336:	b2c0      	uxtb	r0, r0
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8011338:	7330      	strb	r0, [r6, #12]
}

static ALWAYS_INLINE
void spi_context_update_tx(struct spi_context *ctx, u8_t dfs, u32_t len)
{
	if (!ctx->tx_len) {
 801133a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801133c:	b193      	cbz	r3, 8011364 <spi_stm32_transceive+0x268>
	if (len > ctx->tx_len) {
		LOG_ERR("Update exceeds current buffer");
		return;
	}

	ctx->tx_len -= len;
 801133e:	3b01      	subs	r3, #1
 8011340:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (!ctx->tx_len) {
 8011342:	2b00      	cmp	r3, #0
 8011344:	f040 8097 	bne.w	8011476 <spi_stm32_transceive+0x37a>
		ctx->tx_count--;
 8011348:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801134a:	3b01      	subs	r3, #1
 801134c:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (ctx->tx_count) {
 801134e:	2b00      	cmp	r3, #0
 8011350:	f000 8096 	beq.w	8011480 <spi_stm32_transceive+0x384>
			ctx->current_tx++;
 8011354:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011356:	f103 0208 	add.w	r2, r3, #8
 801135a:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 801135c:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 801135e:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8011360:	64a2      	str	r2, [r4, #72]	; 0x48
			ctx->tx_len = ctx->current_tx->len / dfs;
 8011362:	64e3      	str	r3, [r4, #76]	; 0x4c
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 8011364:	68b3      	ldr	r3, [r6, #8]
	while (!ll_func_rx_is_not_empty(spi)) {
 8011366:	07df      	lsls	r7, r3, #31
 8011368:	d5fc      	bpl.n	8011364 <spi_stm32_transceive+0x268>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 801136a:	6822      	ldr	r2, [r4, #0]
 801136c:	8892      	ldrh	r2, [r2, #4]
 801136e:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8011372:	2a08      	cmp	r2, #8
 8011374:	e9d4 3114 	ldrd	r3, r1, [r4, #80]	; 0x50
  return (uint8_t)(READ_REG(SPIx->DR));
 8011378:	68f2      	ldr	r2, [r6, #12]
 801137a:	f040 809f 	bne.w	80114bc <spi_stm32_transceive+0x3c0>
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 801137e:	b10b      	cbz	r3, 8011384 <spi_stm32_transceive+0x288>
 8011380:	b101      	cbz	r1, 8011384 <spi_stm32_transceive+0x288>
 8011382:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8011384:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8011386:	b193      	cbz	r3, 80113ae <spi_stm32_transceive+0x2b2>
	ctx->rx_len -= len;
 8011388:	3b01      	subs	r3, #1
 801138a:	6563      	str	r3, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
 801138c:	2b00      	cmp	r3, #0
 801138e:	f040 8104 	bne.w	801159a <spi_stm32_transceive+0x49e>
		ctx->rx_count--;
 8011392:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011394:	3b01      	subs	r3, #1
 8011396:	6463      	str	r3, [r4, #68]	; 0x44
		if (ctx->rx_count) {
 8011398:	2b00      	cmp	r3, #0
 801139a:	f000 8103 	beq.w	80115a4 <spi_stm32_transceive+0x4a8>
			ctx->current_rx++;
 801139e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80113a0:	f103 0208 	add.w	r2, r3, #8
 80113a4:	6422      	str	r2, [r4, #64]	; 0x40
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 80113a6:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
 80113a8:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 80113aa:	6522      	str	r2, [r4, #80]	; 0x50
			ctx->rx_len = ctx->current_rx->len / dfs;
 80113ac:	6563      	str	r3, [r4, #84]	; 0x54
	u32_t sr = LL_SPI_ReadReg(spi, SR);
 80113ae:	68b2      	ldr	r2, [r6, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 80113b0:	f412 72b8 	ands.w	r2, r2, #368	; 0x170
 80113b4:	f000 80fe 	beq.w	80115b4 <spi_stm32_transceive+0x4b8>
		LOG_ERR("%s: err=%d", __func__,
 80113b8:	4b14      	ldr	r3, [pc, #80]	; (801140c <spi_stm32_transceive+0x310>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	0759      	lsls	r1, r3, #29
 80113be:	d00e      	beq.n	80113de <spi_stm32_transceive+0x2e2>
 80113c0:	2101      	movs	r1, #1
 80113c2:	f04f 0300 	mov.w	r3, #0
 80113c6:	f361 0307 	bfi	r3, r1, #0, #8
 80113ca:	4811      	ldr	r0, [pc, #68]	; (8011410 <spi_stm32_transceive+0x314>)
 80113cc:	4911      	ldr	r1, [pc, #68]	; (8011414 <spi_stm32_transceive+0x318>)
 80113ce:	1a09      	subs	r1, r1, r0
 80113d0:	08c9      	lsrs	r1, r1, #3
 80113d2:	f361 138f 	bfi	r3, r1, #6, #10
 80113d6:	4812      	ldr	r0, [pc, #72]	; (8011420 <spi_stm32_transceive+0x324>)
 80113d8:	4912      	ldr	r1, [pc, #72]	; (8011424 <spi_stm32_transceive+0x328>)
 80113da:	f002 fc33 	bl	8013c44 <log_2>
  return (READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR));
 80113de:	68b3      	ldr	r3, [r6, #8]
		if (LL_SPI_IsActiveFlag_OVR(spi)) {
 80113e0:	065a      	lsls	r2, r3, #25
 80113e2:	d505      	bpl.n	80113f0 <spi_stm32_transceive+0x2f4>
  tmpreg = SPIx->DR;
 80113e4:	68f3      	ldr	r3, [r6, #12]
 80113e6:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 80113e8:	9b05      	ldr	r3, [sp, #20]
  tmpreg = SPIx->SR;
 80113ea:	68b3      	ldr	r3, [r6, #8]
 80113ec:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 80113ee:	9b05      	ldr	r3, [sp, #20]
		return -EIO;
 80113f0:	f06f 0704 	mvn.w	r7, #4
 80113f4:	e0e6      	b.n	80115c4 <spi_stm32_transceive+0x4c8>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 80113f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80113fa:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 80113fc:	686a      	ldr	r2, [r5, #4]
 80113fe:	f042 0204 	orr.w	r2, r2, #4
 8011402:	606a      	str	r2, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8011404:	e71f      	b.n	8011246 <spi_stm32_transceive+0x14a>
 8011406:	bf00      	nop
 8011408:	0801b322 	.word	0x0801b322
 801140c:	20009048 	.word	0x20009048
 8011410:	08019248 	.word	0x08019248
 8011414:	08019338 	.word	0x08019338
 8011418:	0801d5ba 	.word	0x0801d5ba
 801141c:	0801d5dd 	.word	0x0801d5dd
 8011420:	0801d632 	.word	0x0801d632
 8011424:	0801d58d 	.word	0x0801d58d
 8011428:	080194d0 	.word	0x080194d0
		LOG_INF("CS control inhibited (no GPIO device)");
 801142c:	4b84      	ldr	r3, [pc, #528]	; (8011640 <spi_stm32_transceive+0x544>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	f003 0307 	and.w	r3, r3, #7
 8011434:	2b02      	cmp	r3, #2
 8011436:	f67f af46 	bls.w	80112c6 <spi_stm32_transceive+0x1ca>
 801143a:	2303      	movs	r3, #3
 801143c:	f04f 0100 	mov.w	r1, #0
 8011440:	f363 0107 	bfi	r1, r3, #0, #8
 8011444:	4a7f      	ldr	r2, [pc, #508]	; (8011644 <spi_stm32_transceive+0x548>)
 8011446:	4b80      	ldr	r3, [pc, #512]	; (8011648 <spi_stm32_transceive+0x54c>)
 8011448:	4880      	ldr	r0, [pc, #512]	; (801164c <spi_stm32_transceive+0x550>)
 801144a:	1a9b      	subs	r3, r3, r2
 801144c:	08db      	lsrs	r3, r3, #3
 801144e:	f363 118f 	bfi	r1, r3, #6, #10
 8011452:	f002 fbd6 	bl	8013c02 <log_0>
	if (ret) {
 8011456:	e736      	b.n	80112c6 <spi_stm32_transceive+0x1ca>
		return -ENOTSUP;
 8011458:	f06f 0785 	mvn.w	r7, #133	; 0x85
 801145c:	e6c5      	b.n	80111ea <spi_stm32_transceive+0xee>
		ctx->tx_count = 0;
 801145e:	e9c4 880e 	strd	r8, r8, [r4, #56]	; 0x38
		ctx->tx_len = 0;
 8011462:	e9c4 8812 	strd	r8, r8, [r4, #72]	; 0x48
 8011466:	e73c      	b.n	80112e2 <spi_stm32_transceive+0x1e6>
		ctx->rx_count = 0;
 8011468:	e9c4 7710 	strd	r7, r7, [r4, #64]	; 0x40
		ctx->rx_len = 0;
 801146c:	e9c4 7714 	strd	r7, r7, [r4, #80]	; 0x50
 8011470:	e742      	b.n	80112f8 <spi_stm32_transceive+0x1fc>
  return (uint8_t)(READ_REG(SPIx->DR));
 8011472:	68f3      	ldr	r3, [r6, #12]
 8011474:	e742      	b.n	80112fc <spi_stm32_transceive+0x200>
	} else if (ctx->tx_buf) {
 8011476:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011478:	2b00      	cmp	r3, #0
 801147a:	f43f af73 	beq.w	8011364 <spi_stm32_transceive+0x268>
		ctx->tx_buf += dfs * len;
 801147e:	3301      	adds	r3, #1
 8011480:	64a3      	str	r3, [r4, #72]	; 0x48
 8011482:	e76f      	b.n	8011364 <spi_stm32_transceive+0x268>
	if (!ctx->tx_len) {
 8011484:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 8011486:	81b0      	strh	r0, [r6, #12]
 8011488:	2b00      	cmp	r3, #0
 801148a:	f43f af6b 	beq.w	8011364 <spi_stm32_transceive+0x268>
	ctx->tx_len -= len;
 801148e:	3b01      	subs	r3, #1
 8011490:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (!ctx->tx_len) {
 8011492:	b96b      	cbnz	r3, 80114b0 <spi_stm32_transceive+0x3b4>
		ctx->tx_count--;
 8011494:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011496:	3b01      	subs	r3, #1
 8011498:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (ctx->tx_count) {
 801149a:	2b00      	cmp	r3, #0
 801149c:	d0f0      	beq.n	8011480 <spi_stm32_transceive+0x384>
			ctx->current_tx++;
 801149e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80114a0:	f103 0208 	add.w	r2, r3, #8
 80114a4:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 80114a6:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 80114a8:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 80114aa:	64a2      	str	r2, [r4, #72]	; 0x48
			ctx->tx_len = ctx->current_tx->len / dfs;
 80114ac:	085b      	lsrs	r3, r3, #1
 80114ae:	e758      	b.n	8011362 <spi_stm32_transceive+0x266>
	} else if (ctx->tx_buf) {
 80114b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	f43f af56 	beq.w	8011364 <spi_stm32_transceive+0x268>
		ctx->tx_buf += dfs * len;
 80114b8:	3302      	adds	r3, #2
 80114ba:	e7e1      	b.n	8011480 <spi_stm32_transceive+0x384>
	return !!(ctx->rx_buf && ctx->rx_len);
 80114bc:	b10b      	cbz	r3, 80114c2 <spi_stm32_transceive+0x3c6>
 80114be:	b101      	cbz	r1, 80114c2 <spi_stm32_transceive+0x3c6>
			UNALIGNED_PUT(rx_frame, (u16_t *)data->ctx.rx_buf);
 80114c0:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 80114c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	f43f af72 	beq.w	80113ae <spi_stm32_transceive+0x2b2>
	ctx->rx_len -= len;
 80114ca:	3b01      	subs	r3, #1
 80114cc:	6563      	str	r3, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d16a      	bne.n	80115a8 <spi_stm32_transceive+0x4ac>
		ctx->rx_count--;
 80114d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80114d4:	3b01      	subs	r3, #1
 80114d6:	6463      	str	r3, [r4, #68]	; 0x44
		if (ctx->rx_count) {
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d063      	beq.n	80115a4 <spi_stm32_transceive+0x4a8>
			ctx->current_rx++;
 80114dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80114de:	f103 0208 	add.w	r2, r3, #8
 80114e2:	6422      	str	r2, [r4, #64]	; 0x40
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 80114e4:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
 80114e6:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 80114e8:	6522      	str	r2, [r4, #80]	; 0x50
			ctx->rx_len = ctx->current_rx->len / dfs;
 80114ea:	085b      	lsrs	r3, r3, #1
 80114ec:	e75e      	b.n	80113ac <spi_stm32_transceive+0x2b0>
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 80114ee:	68b3      	ldr	r3, [r6, #8]
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 80114f0:	079d      	lsls	r5, r3, #30
 80114f2:	d54d      	bpl.n	8011590 <spi_stm32_transceive+0x494>
	return !!(ctx->tx_len);
 80114f4:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80114f6:	2d00      	cmp	r5, #0
 80114f8:	d04a      	beq.n	8011590 <spi_stm32_transceive+0x494>
		u16_t tx_frame = spi_stm32_next_tx(data);
 80114fa:	4620      	mov	r0, r4
 80114fc:	f006 fea9 	bl	8018252 <spi_stm32_next_tx>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8011500:	f3c1 1145 	ubfx	r1, r1, #5, #6
 8011504:	2908      	cmp	r1, #8
 8011506:	d12c      	bne.n	8011562 <spi_stm32_transceive+0x466>
			LL_SPI_TransmitData8(spi, tx_frame);
 8011508:	b2c0      	uxtb	r0, r0
  *spidr = TxData;
 801150a:	7330      	strb	r0, [r6, #12]
	if (!ctx->tx_len) {
 801150c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801150e:	b173      	cbz	r3, 801152e <spi_stm32_transceive+0x432>
	ctx->tx_len -= len;
 8011510:	3b01      	subs	r3, #1
 8011512:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (!ctx->tx_len) {
 8011514:	b9fb      	cbnz	r3, 8011556 <spi_stm32_transceive+0x45a>
		ctx->tx_count--;
 8011516:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011518:	3b01      	subs	r3, #1
 801151a:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (ctx->tx_count) {
 801151c:	b1fb      	cbz	r3, 801155e <spi_stm32_transceive+0x462>
			ctx->current_tx++;
 801151e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011520:	f103 0208 	add.w	r2, r3, #8
 8011524:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8011526:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8011528:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 801152a:	64a2      	str	r2, [r4, #72]	; 0x48
			ctx->tx_len = ctx->current_tx->len / dfs;
 801152c:	64e3      	str	r3, [r4, #76]	; 0x4c
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 801152e:	68b3      	ldr	r3, [r6, #8]
	if (ll_func_rx_is_not_empty(spi) &&
 8011530:	07d8      	lsls	r0, r3, #31
 8011532:	f57f af3c 	bpl.w	80113ae <spi_stm32_transceive+0x2b2>
	return !!(ctx->rx_buf && ctx->rx_len);
 8011536:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011538:	2b00      	cmp	r3, #0
 801153a:	f43f af38 	beq.w	80113ae <spi_stm32_transceive+0x2b2>
 801153e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8011540:	2a00      	cmp	r2, #0
 8011542:	f43f af34 	beq.w	80113ae <spi_stm32_transceive+0x2b2>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8011546:	6822      	ldr	r2, [r4, #0]
 8011548:	8892      	ldrh	r2, [r2, #4]
 801154a:	f3c2 1245 	ubfx	r2, r2, #5, #6
 801154e:	2a08      	cmp	r2, #8
  return (uint8_t)(READ_REG(SPIx->DR));
 8011550:	68f2      	ldr	r2, [r6, #12]
 8011552:	d1b5      	bne.n	80114c0 <spi_stm32_transceive+0x3c4>
 8011554:	e715      	b.n	8011382 <spi_stm32_transceive+0x286>
	} else if (ctx->tx_buf) {
 8011556:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011558:	2b00      	cmp	r3, #0
 801155a:	d0e8      	beq.n	801152e <spi_stm32_transceive+0x432>
		ctx->tx_buf += dfs * len;
 801155c:	3301      	adds	r3, #1
 801155e:	64a3      	str	r3, [r4, #72]	; 0x48
 8011560:	e7e5      	b.n	801152e <spi_stm32_transceive+0x432>
	ctx->tx_len -= len;
 8011562:	3d01      	subs	r5, #1
  *spidr = TxData;
 8011564:	81b0      	strh	r0, [r6, #12]
 8011566:	64e5      	str	r5, [r4, #76]	; 0x4c
	if (!ctx->tx_len) {
 8011568:	b96d      	cbnz	r5, 8011586 <spi_stm32_transceive+0x48a>
		ctx->tx_count--;
 801156a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801156c:	3b01      	subs	r3, #1
 801156e:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (ctx->tx_count) {
 8011570:	2b00      	cmp	r3, #0
 8011572:	d0f4      	beq.n	801155e <spi_stm32_transceive+0x462>
			ctx->current_tx++;
 8011574:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011576:	f103 0208 	add.w	r2, r3, #8
 801157a:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 801157c:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 801157e:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8011580:	64a2      	str	r2, [r4, #72]	; 0x48
			ctx->tx_len = ctx->current_tx->len / dfs;
 8011582:	085b      	lsrs	r3, r3, #1
 8011584:	e7d2      	b.n	801152c <spi_stm32_transceive+0x430>
	} else if (ctx->tx_buf) {
 8011586:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011588:	2b00      	cmp	r3, #0
 801158a:	d0d0      	beq.n	801152e <spi_stm32_transceive+0x432>
		ctx->tx_buf += dfs * len;
 801158c:	3302      	adds	r3, #2
 801158e:	e7e6      	b.n	801155e <spi_stm32_transceive+0x462>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8011590:	6873      	ldr	r3, [r6, #4]
 8011592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011596:	6073      	str	r3, [r6, #4]
 8011598:	e7c9      	b.n	801152e <spi_stm32_transceive+0x432>
	} else if (ctx->rx_buf) {
 801159a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801159c:	2b00      	cmp	r3, #0
 801159e:	f43f af06 	beq.w	80113ae <spi_stm32_transceive+0x2b2>
		ctx->rx_buf += dfs * len;
 80115a2:	3301      	adds	r3, #1
 80115a4:	6523      	str	r3, [r4, #80]	; 0x50
 80115a6:	e702      	b.n	80113ae <spi_stm32_transceive+0x2b2>
	} else if (ctx->rx_buf) {
 80115a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	f43f aeff 	beq.w	80113ae <spi_stm32_transceive+0x2b2>
		ctx->rx_buf += dfs * len;
 80115b0:	3302      	adds	r3, #2
 80115b2:	e7f7      	b.n	80115a4 <spi_stm32_transceive+0x4a8>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 80115b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	f47f aead 	bne.w	8011316 <spi_stm32_transceive+0x21a>
	} while (!ret && spi_stm32_transfer_ongoing(data));
 80115bc:	6d67      	ldr	r7, [r4, #84]	; 0x54
 80115be:	2f00      	cmp	r7, #0
 80115c0:	f47f aea9 	bne.w	8011316 <spi_stm32_transceive+0x21a>
	_spi_context_cs_control(ctx, on, false);
 80115c4:	2200      	movs	r2, #0
 80115c6:	4611      	mov	r1, r2
 80115c8:	4620      	mov	r0, r4
 80115ca:	f006 fe5d 	bl	8018288 <_spi_context_cs_control.isra.5>
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 80115ce:	68b3      	ldr	r3, [r6, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 80115d0:	07db      	lsls	r3, r3, #31
 80115d2:	d41c      	bmi.n	801160e <spi_stm32_transceive+0x512>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 80115d4:	6833      	ldr	r3, [r6, #0]
 80115d6:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 80115da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80115de:	d102      	bne.n	80115e6 <spi_stm32_transceive+0x4ea>
  return (READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY));
 80115e0:	68b3      	ldr	r3, [r6, #8]
		while (ll_func_spi_is_busy(spi)) {
 80115e2:	061d      	lsls	r5, r3, #24
 80115e4:	d4fc      	bmi.n	80115e0 <spi_stm32_transceive+0x4e4>
  return (READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF));
 80115e6:	68b3      	ldr	r3, [r6, #8]
	if (LL_SPI_IsActiveFlag_MODF(spi)) {
 80115e8:	069c      	lsls	r4, r3, #26
 80115ea:	d508      	bpl.n	80115fe <spi_stm32_transceive+0x502>
  tmpreg = SPIx->SR;
 80115ec:	68b3      	ldr	r3, [r6, #8]
 80115ee:	9306      	str	r3, [sp, #24]
  (void) tmpreg;
 80115f0:	9b06      	ldr	r3, [sp, #24]
  tmpreg = CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80115f2:	6833      	ldr	r3, [r6, #0]
 80115f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80115f8:	6033      	str	r3, [r6, #0]
 80115fa:	9306      	str	r3, [sp, #24]
  (void) tmpreg;
 80115fc:	9b06      	ldr	r3, [sp, #24]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80115fe:	6833      	ldr	r3, [r6, #0]
 8011600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011604:	6033      	str	r3, [r6, #0]
	z_impl_k_sem_give(sem);
 8011606:	4658      	mov	r0, fp
 8011608:	f001 f964 	bl	80128d4 <z_impl_k_sem_give>
 801160c:	e5ed      	b.n	80111ea <spi_stm32_transceive+0xee>
  return (uint8_t)(READ_REG(SPIx->DR));
 801160e:	68f3      	ldr	r3, [r6, #12]
 8011610:	e7dd      	b.n	80115ce <spi_stm32_transceive+0x4d2>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8011612:	682a      	ldr	r2, [r5, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8011614:	a90e      	add	r1, sp, #56	; 0x38
 8011616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801161a:	602a      	str	r2, [r5, #0]
 801161c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8011620:	682a      	ldr	r2, [r5, #0]
 8011622:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8011626:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 801162a:	4313      	orrs	r3, r2
 801162c:	602b      	str	r3, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 801162e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8011632:	079a      	lsls	r2, r3, #30
 8011634:	f53f addd 	bmi.w	80111f2 <spi_stm32_transceive+0xf6>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8011638:	682a      	ldr	r2, [r5, #0]
 801163a:	f022 0202 	bic.w	r2, r2, #2
 801163e:	e5db      	b.n	80111f8 <spi_stm32_transceive+0xfc>
 8011640:	20009048 	.word	0x20009048
 8011644:	08019248 	.word	0x08019248
 8011648:	08019338 	.word	0x08019338
 801164c:	0801d60c 	.word	0x0801d60c

08011650 <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(UartInstance);
}

static void uart_stm32_irq_err_enable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8011650:	6803      	ldr	r3, [r0, #0]
 8011652:	689b      	ldr	r3, [r3, #8]
 8011654:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8011656:	689a      	ldr	r2, [r3, #8]
 8011658:	f042 0201 	orr.w	r2, r2, #1
 801165c:	609a      	str	r2, [r3, #8]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 801165e:	4a0e      	ldr	r2, [pc, #56]	; (8011698 <uart_stm32_irq_err_enable+0x48>)
 8011660:	4293      	cmp	r3, r2
 8011662:	d00f      	beq.n	8011684 <uart_stm32_irq_err_enable+0x34>
 8011664:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8011668:	4293      	cmp	r3, r2
 801166a:	d00b      	beq.n	8011684 <uart_stm32_irq_err_enable+0x34>
 801166c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011670:	4293      	cmp	r3, r2
 8011672:	d007      	beq.n	8011684 <uart_stm32_irq_err_enable+0x34>
 8011674:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011678:	4293      	cmp	r3, r2
 801167a:	d003      	beq.n	8011684 <uart_stm32_irq_err_enable+0x34>
 801167c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011680:	4293      	cmp	r3, r2
 8011682:	d103      	bne.n	801168c <uart_stm32_irq_err_enable+0x3c>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8011684:	685a      	ldr	r2, [r3, #4]
 8011686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801168a:	605a      	str	r2, [r3, #4]
  SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 801168c:	681a      	ldr	r2, [r3, #0]
 801168e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011692:	601a      	str	r2, [r3, #0]
		LL_USART_EnableIT_LBD(UartInstance);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(UartInstance);
}
 8011694:	4770      	bx	lr
 8011696:	bf00      	nop
 8011698:	40013800 	.word	0x40013800

0801169c <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 801169c:	6803      	ldr	r3, [r0, #0]
 801169e:	689b      	ldr	r3, [r3, #8]
 80116a0:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 80116a2:	689a      	ldr	r2, [r3, #8]
 80116a4:	f022 0201 	bic.w	r2, r2, #1
 80116a8:	609a      	str	r2, [r3, #8]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 80116aa:	4a0e      	ldr	r2, [pc, #56]	; (80116e4 <uart_stm32_irq_err_disable+0x48>)
 80116ac:	4293      	cmp	r3, r2
 80116ae:	d00f      	beq.n	80116d0 <uart_stm32_irq_err_disable+0x34>
 80116b0:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 80116b4:	4293      	cmp	r3, r2
 80116b6:	d00b      	beq.n	80116d0 <uart_stm32_irq_err_disable+0x34>
 80116b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80116bc:	4293      	cmp	r3, r2
 80116be:	d007      	beq.n	80116d0 <uart_stm32_irq_err_disable+0x34>
 80116c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80116c4:	4293      	cmp	r3, r2
 80116c6:	d003      	beq.n	80116d0 <uart_stm32_irq_err_disable+0x34>
 80116c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80116cc:	4293      	cmp	r3, r2
 80116ce:	d103      	bne.n	80116d8 <uart_stm32_irq_err_disable+0x3c>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 80116d0:	685a      	ldr	r2, [r3, #4]
 80116d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80116d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 80116d8:	681a      	ldr	r2, [r3, #0]
 80116da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80116de:	601a      	str	r2, [r3, #0]
		LL_USART_DisableIT_LBD(UartInstance);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(UartInstance);
}
 80116e0:	4770      	bx	lr
 80116e2:	bf00      	nop
 80116e4:	40013800 	.word	0x40013800

080116e8 <uart_stm32_set_baudrate>:
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80116e8:	6803      	ldr	r3, [r0, #0]
{
 80116ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80116ec:	460c      	mov	r4, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80116ee:	6899      	ldr	r1, [r3, #8]
	if (clock_control_get_rate(data->clock,
 80116f0:	6883      	ldr	r3, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80116f2:	f851 5b0c 	ldr.w	r5, [r1], #12
	if (clock_control_get_rate(data->clock,
 80116f6:	6858      	ldr	r0, [r3, #4]
 80116f8:	6843      	ldr	r3, [r0, #4]
 80116fa:	aa01      	add	r2, sp, #4
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	4798      	blx	r3
 8011700:	2800      	cmp	r0, #0
 8011702:	da13      	bge.n	801172c <uart_stm32_set_baudrate+0x44>
		LOG_ERR("Failed call clock_control_get_rate");
 8011704:	4b0d      	ldr	r3, [pc, #52]	; (801173c <uart_stm32_set_baudrate+0x54>)
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	075b      	lsls	r3, r3, #29
 801170a:	d00d      	beq.n	8011728 <uart_stm32_set_baudrate+0x40>
 801170c:	2301      	movs	r3, #1
 801170e:	f04f 0100 	mov.w	r1, #0
 8011712:	f363 0107 	bfi	r1, r3, #0, #8
 8011716:	4a0a      	ldr	r2, [pc, #40]	; (8011740 <uart_stm32_set_baudrate+0x58>)
 8011718:	4b0a      	ldr	r3, [pc, #40]	; (8011744 <uart_stm32_set_baudrate+0x5c>)
 801171a:	480b      	ldr	r0, [pc, #44]	; (8011748 <uart_stm32_set_baudrate+0x60>)
 801171c:	1a9b      	subs	r3, r3, r2
 801171e:	08db      	lsrs	r3, r3, #3
 8011720:	f363 118f 	bfi	r1, r3, #6, #10
 8011724:	f002 fa6d 	bl	8013c02 <log_0>
}
 8011728:	b003      	add	sp, #12
 801172a:	bd30      	pop	{r4, r5, pc}
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 801172c:	9901      	ldr	r1, [sp, #4]
 801172e:	eb01 0154 	add.w	r1, r1, r4, lsr #1
 8011732:	fbb1 f1f4 	udiv	r1, r1, r4
 8011736:	b289      	uxth	r1, r1
 8011738:	60e9      	str	r1, [r5, #12]
 801173a:	e7f5      	b.n	8011728 <uart_stm32_set_baudrate+0x40>
 801173c:	2000904c 	.word	0x2000904c
 8011740:	08019248 	.word	0x08019248
 8011744:	08019340 	.word	0x08019340
 8011748:	0801d5ba 	.word	0x0801d5ba

0801174c <uart_stm32_configure>:
{
 801174c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8011750:	6803      	ldr	r3, [r0, #0]
	const u32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8011752:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8011754:	689b      	ldr	r3, [r3, #8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8011756:	6886      	ldr	r6, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8011758:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 801175a:	2a01      	cmp	r2, #1
{
 801175c:	460d      	mov	r5, r1
	switch (parity) {
 801175e:	d071      	beq.n	8011844 <uart_stm32_configure+0xf8>
		return LL_USART_PARITY_NONE;
 8011760:	2a02      	cmp	r2, #2
 8011762:	bf0c      	ite	eq
 8011764:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8011768:	2100      	movne	r1, #0
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 801176a:	f895 8005 	ldrb.w	r8, [r5, #5]
	const u32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 801176e:	f895 9006 	ldrb.w	r9, [r5, #6]
	const u32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8011772:	79ef      	ldrb	r7, [r5, #7]
 8011774:	f1b8 0f02 	cmp.w	r8, #2
 8011778:	bf96      	itet	ls
 801177a:	4b35      	ldrls	r3, [pc, #212]	; (8011850 <uart_stm32_configure+0x104>)
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 801177c:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 8011780:	f833 e018 	ldrhls.w	lr, [r3, r8, lsl #1]
		return LL_USART_DATAWIDTH_8B;
 8011784:	f1b9 0f04 	cmp.w	r9, #4
 8011788:	bf0c      	ite	eq
 801178a:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 801178e:	2300      	movne	r3, #0
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 8011790:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8011792:	2f01      	cmp	r7, #1
 8011794:	bf14      	ite	ne
 8011796:	f04f 0c00 	movne.w	ip, #0
 801179a:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 801179e:	2a01      	cmp	r2, #1
 80117a0:	d953      	bls.n	801184a <uart_stm32_configure+0xfe>
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 80117a2:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 80117a6:	d050      	beq.n	801184a <uart_stm32_configure+0xfe>
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 80117a8:	f1b9 0f02 	cmp.w	r9, #2
 80117ac:	d94d      	bls.n	801184a <uart_stm32_configure+0xfe>
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 80117ae:	b167      	cbz	r7, 80117ca <uart_stm32_configure+0x7e>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 80117b0:	4a28      	ldr	r2, [pc, #160]	; (8011854 <uart_stm32_configure+0x108>)
 80117b2:	4294      	cmp	r4, r2
 80117b4:	d007      	beq.n	80117c6 <uart_stm32_configure+0x7a>
 80117b6:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 80117ba:	4294      	cmp	r4, r2
 80117bc:	d003      	beq.n	80117c6 <uart_stm32_configure+0x7a>
 80117be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80117c2:	4294      	cmp	r4, r2
 80117c4:	d141      	bne.n	801184a <uart_stm32_configure+0xfe>
 80117c6:	2f01      	cmp	r7, #1
 80117c8:	d13f      	bne.n	801184a <uart_stm32_configure+0xfe>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80117ca:	6822      	ldr	r2, [r4, #0]
 80117cc:	f022 0201 	bic.w	r2, r2, #1
 80117d0:	6022      	str	r2, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80117d2:	6822      	ldr	r2, [r4, #0]
 80117d4:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 80117d8:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80117da:	bf1f      	itttt	ne
 80117dc:	6827      	ldrne	r7, [r4, #0]
 80117de:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 80117e2:	430f      	orrne	r7, r1
 80117e4:	6027      	strne	r7, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80117e6:	6862      	ldr	r2, [r4, #4]
 80117e8:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80117ec:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80117ee:	bf1f      	itttt	ne
 80117f0:	6861      	ldrne	r1, [r4, #4]
 80117f2:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 80117f6:	ea41 010e 	orrne.w	r1, r1, lr
 80117fa:	6061      	strne	r1, [r4, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80117fc:	6822      	ldr	r2, [r4, #0]
	if (cfg->baudrate != data->baud_rate) {
 80117fe:	6829      	ldr	r1, [r5, #0]
 8011800:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 8011804:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8011806:	bf1f      	itttt	ne
 8011808:	6822      	ldrne	r2, [r4, #0]
 801180a:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 801180e:	431a      	orrne	r2, r3
 8011810:	6022      	strne	r2, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8011812:	68a3      	ldr	r3, [r4, #8]
 8011814:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8011818:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 801181a:	bf1f      	itttt	ne
 801181c:	68a3      	ldrne	r3, [r4, #8]
 801181e:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8011822:	ea43 030c 	orrne.w	r3, r3, ip
 8011826:	60a3      	strne	r3, [r4, #8]
	if (cfg->baudrate != data->baud_rate) {
 8011828:	6833      	ldr	r3, [r6, #0]
 801182a:	4299      	cmp	r1, r3
 801182c:	d003      	beq.n	8011836 <uart_stm32_configure+0xea>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 801182e:	f7ff ff5b 	bl	80116e8 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8011832:	682b      	ldr	r3, [r5, #0]
 8011834:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8011836:	6823      	ldr	r3, [r4, #0]
 8011838:	f043 0301 	orr.w	r3, r3, #1
 801183c:	6023      	str	r3, [r4, #0]
	return 0;
 801183e:	2000      	movs	r0, #0
};
 8011840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return LL_USART_PARITY_ODD;
 8011844:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8011848:	e78f      	b.n	801176a <uart_stm32_configure+0x1e>
		return -ENOTSUP;
 801184a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 801184e:	e7f7      	b.n	8011840 <uart_stm32_configure+0xf4>
 8011850:	0801a3aa 	.word	0x0801a3aa
 8011854:	40013800 	.word	0x40013800

08011858 <uart_stm32_init>:
 *
 * @return 0
 */
static int uart_stm32_init(struct device *dev)
{
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8011858:	6803      	ldr	r3, [r0, #0]
{
 801185a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 801185e:	689f      	ldr	r7, [r3, #8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8011860:	f8d0 8008 	ldr.w	r8, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8011864:	463e      	mov	r6, r7
{
 8011866:	4605      	mov	r5, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8011868:	f856 4b0c 	ldr.w	r4, [r6], #12
 801186c:	481e      	ldr	r0, [pc, #120]	; (80118e8 <uart_stm32_init+0x90>)
 801186e:	f000 f963 	bl	8011b38 <z_impl_device_get_binding>
	return api->on(dev, sys);
 8011872:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 8011874:	f8c8 0004 	str.w	r0, [r8, #4]
 8011878:	4631      	mov	r1, r6
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	4798      	blx	r3

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 801187e:	4606      	mov	r6, r0
 8011880:	2800      	cmp	r0, #0
 8011882:	d12d      	bne.n	80118e0 <uart_stm32_init+0x88>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8011884:	6823      	ldr	r3, [r4, #0]
 8011886:	f023 0301 	bic.w	r3, r3, #1
 801188a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 801188c:	6823      	ldr	r3, [r4, #0]
 801188e:	f043 030c 	orr.w	r3, r3, #12
 8011892:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8011894:	6823      	ldr	r3, [r4, #0]
 8011896:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 801189a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 801189c:	6863      	ldr	r3, [r4, #4]
 801189e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80118a2:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 LL_USART_DATAWIDTH_8B,
				 LL_USART_PARITY_NONE,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 80118a4:	7d3b      	ldrb	r3, [r7, #20]
 80118a6:	b133      	cbz	r3, 80118b6 <uart_stm32_init+0x5e>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80118a8:	682b      	ldr	r3, [r5, #0]
 80118aa:	689b      	ldr	r3, [r3, #8]
 80118ac:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80118ae:	6893      	ldr	r3, [r2, #8]
 80118b0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80118b4:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80118b6:	f8d8 1000 	ldr.w	r1, [r8]
 80118ba:	4628      	mov	r0, r5
 80118bc:	f7ff ff14 	bl	80116e8 <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80118c0:	6823      	ldr	r3, [r4, #0]
 80118c2:	f043 0301 	orr.w	r3, r3, #1
 80118c6:	6023      	str	r3, [r4, #0]
  return (READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK));
 80118c8:	69e3      	ldr	r3, [r4, #28]

	LL_USART_Enable(UartInstance);

#ifdef USART_ISR_TEACK
	/* Wait until TEACK flag is set */
	while (!(LL_USART_IsActiveFlag_TEACK(UartInstance))) {
 80118ca:	029a      	lsls	r2, r3, #10
 80118cc:	d5fc      	bpl.n	80118c8 <uart_stm32_init+0x70>
  return (READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK));
 80118ce:	69e3      	ldr	r3, [r4, #28]
	}
#endif /* !USART_ISR_TEACK */

#ifdef USART_ISR_REACK
	/* Wait until REACK flag is set */
	while (!(LL_USART_IsActiveFlag_REACK(UartInstance))) {
 80118d0:	025b      	lsls	r3, r3, #9
 80118d2:	d5fc      	bpl.n	80118ce <uart_stm32_init+0x76>
	}
#endif /* !USART_ISR_REACK */

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	4628      	mov	r0, r5
 80118d8:	4798      	blx	r3
#endif
	return 0;
}
 80118da:	4630      	mov	r0, r6
 80118dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
 80118e0:	f06f 0604 	mvn.w	r6, #4
 80118e4:	e7f9      	b.n	80118da <uart_stm32_init+0x82>
 80118e6:	bf00      	nop
 80118e8:	0801b322 	.word	0x0801b322

080118ec <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80118ec:	4b03      	ldr	r3, [pc, #12]	; (80118fc <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80118ee:	4a04      	ldr	r2, [pc, #16]	; (8011900 <RCC_GetHCLKClockFreq+0x14>)
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80118f6:	5cd3      	ldrb	r3, [r2, r3]
}
 80118f8:	40d8      	lsrs	r0, r3
 80118fa:	4770      	bx	lr
 80118fc:	40021000 	.word	0x40021000
 8011900:	0801d65b 	.word	0x0801d65b

08011904 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8011904:	4b03      	ldr	r3, [pc, #12]	; (8011914 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8011906:	4a04      	ldr	r2, [pc, #16]	; (8011918 <RCC_GetPCLK1ClockFreq+0x14>)
 8011908:	685b      	ldr	r3, [r3, #4]
 801190a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 801190e:	5cd3      	ldrb	r3, [r2, r3]
}
 8011910:	40d8      	lsrs	r0, r3
 8011912:	4770      	bx	lr
 8011914:	40021000 	.word	0x40021000
 8011918:	0801d66b 	.word	0x0801d66b

0801191c <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 801191c:	4b03      	ldr	r3, [pc, #12]	; (801192c <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 801191e:	4a04      	ldr	r2, [pc, #16]	; (8011930 <RCC_GetPCLK2ClockFreq+0x14>)
 8011920:	685b      	ldr	r3, [r3, #4]
 8011922:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8011926:	5cd3      	ldrb	r3, [r2, r3]
}
 8011928:	40d8      	lsrs	r0, r3
 801192a:	4770      	bx	lr
 801192c:	40021000 	.word	0x40021000
 8011930:	0801d66b 	.word	0x0801d66b

08011934 <RCC_PLL_GetFreqDomain_SYS>:
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8011934:	4a0d      	ldr	r2, [pc, #52]	; (801196c <RCC_PLL_GetFreqDomain_SYS+0x38>)
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8011936:	480e      	ldr	r0, [pc, #56]	; (8011970 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8011938:	6853      	ldr	r3, [r2, #4]
 801193a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 801193e:	4b0d      	ldr	r3, [pc, #52]	; (8011974 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8011940:	bf18      	it	ne
 8011942:	4618      	movne	r0, r3
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8011944:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8011946:	f003 030f 	and.w	r3, r3, #15
      break;
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 801194a:	3301      	adds	r3, #1
 801194c:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8011950:	6853      	ldr	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011952:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8011956:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 801195a:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 801195e:	fab2 f282 	clz	r2, r2
 8011962:	40d3      	lsrs	r3, r2
 8011964:	3302      	adds	r3, #2
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8011966:	4358      	muls	r0, r3
 8011968:	4770      	bx	lr
 801196a:	bf00      	nop
 801196c:	40021000 	.word	0x40021000
 8011970:	003d0900 	.word	0x003d0900
 8011974:	007a1200 	.word	0x007a1200

08011978 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8011978:	4b04      	ldr	r3, [pc, #16]	; (801198c <RCC_GetSystemClockFreq+0x14>)
 801197a:	685b      	ldr	r3, [r3, #4]
 801197c:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8011980:	2b08      	cmp	r3, #8
 8011982:	d101      	bne.n	8011988 <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8011984:	f7ff bfd6 	b.w	8011934 <RCC_PLL_GetFreqDomain_SYS>
}
 8011988:	4801      	ldr	r0, [pc, #4]	; (8011990 <RCC_GetSystemClockFreq+0x18>)
 801198a:	4770      	bx	lr
 801198c:	40021000 	.word	0x40021000
 8011990:	007a1200 	.word	0x007a1200

08011994 <UTILS_SetFlashLatency.part.0>:
  {
    status = ERROR;
  }
  else
  {
    if (Frequency > UTILS_LATENCY2_FREQ)
 8011994:	4b0b      	ldr	r3, [pc, #44]	; (80119c4 <UTILS_SetFlashLatency.part.0+0x30>)
 8011996:	4298      	cmp	r0, r3
 8011998:	d811      	bhi.n	80119be <UTILS_SetFlashLatency.part.0+0x2a>
      /* 48 < SYSCLK <= 72 => 2WS (3 CPU cycles) */
      latency = LL_FLASH_LATENCY_2;
    }
    else
    {
      if (Frequency > UTILS_LATENCY1_FREQ)
 801199a:	4b0b      	ldr	r3, [pc, #44]	; (80119c8 <UTILS_SetFlashLatency.part.0+0x34>)
 801199c:	4298      	cmp	r0, r3
 801199e:	bf94      	ite	ls
 80119a0:	2000      	movls	r0, #0
 80119a2:	2001      	movhi	r0, #1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80119a4:	4a09      	ldr	r2, [pc, #36]	; (80119cc <UTILS_SetFlashLatency.part.0+0x38>)
 80119a6:	6813      	ldr	r3, [r2, #0]
 80119a8:	f023 0307 	bic.w	r3, r3, #7
 80119ac:	4303      	orrs	r3, r0
 80119ae:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80119b0:	6813      	ldr	r3, [r2, #0]
 80119b2:	f003 0307 	and.w	r3, r3, #7
    {
      status = ERROR;
    }
  }
  return status;
}
 80119b6:	1a18      	subs	r0, r3, r0
 80119b8:	bf18      	it	ne
 80119ba:	2001      	movne	r0, #1
 80119bc:	4770      	bx	lr
      latency = LL_FLASH_LATENCY_2;
 80119be:	2002      	movs	r0, #2
 80119c0:	e7f0      	b.n	80119a4 <UTILS_SetFlashLatency.part.0+0x10>
 80119c2:	bf00      	nop
 80119c4:	02dc6c00 	.word	0x02dc6c00
 80119c8:	016e3600 	.word	0x016e3600
 80119cc:	40022000 	.word	0x40022000

080119d0 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 80119d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80119d4:	4c28      	ldr	r4, [pc, #160]	; (8011a78 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate current SYSCLK frequency */
  sysclk_frequency_current = (SystemCoreClock << AHBPrescTable[LL_RCC_GetAHBPrescaler() >> RCC_POSITION_HPRE]);
 80119d6:	4e29      	ldr	r6, [pc, #164]	; (8011a7c <UTILS_EnablePLLAndSwitchSystem+0xac>)
 80119d8:	6863      	ldr	r3, [r4, #4]
{
 80119da:	4605      	mov	r5, r0
 80119dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  sysclk_frequency_current = (SystemCoreClock << AHBPrescTable[LL_RCC_GetAHBPrescaler() >> RCC_POSITION_HPRE]);
 80119e0:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80119e2:	22f0      	movs	r2, #240	; 0xf0
 80119e4:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80119e8:	fab2 f282 	clz	r2, r2
 80119ec:	4f24      	ldr	r7, [pc, #144]	; (8011a80 <UTILS_EnablePLLAndSwitchSystem+0xb0>)
 80119ee:	40d3      	lsrs	r3, r2
 80119f0:	f817 8003 	ldrb.w	r8, [r7, r3]
 80119f4:	fa00 f808 	lsl.w	r8, r0, r8

  /* Increasing the number of wait states because of higher CPU frequency */
  if (sysclk_frequency_current < SYSCLK_Frequency)
 80119f8:	45a8      	cmp	r8, r5
 80119fa:	d32d      	bcc.n	8011a58 <UTILS_EnablePLLAndSwitchSystem+0x88>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80119fc:	6823      	ldr	r3, [r4, #0]
 80119fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011a02:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8011a04:	6823      	ldr	r3, [r4, #0]
  /* Update system clock configuration */
  if (status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8011a06:	019b      	lsls	r3, r3, #6
 8011a08:	d5fc      	bpl.n	8011a04 <UTILS_EnablePLLAndSwitchSystem+0x34>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8011a0a:	6863      	ldr	r3, [r4, #4]
 8011a0c:	680a      	ldr	r2, [r1, #0]
 8011a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011a12:	4313      	orrs	r3, r2
 8011a14:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8011a16:	6863      	ldr	r3, [r4, #4]
 8011a18:	f023 0303 	bic.w	r3, r3, #3
 8011a1c:	f043 0302 	orr.w	r3, r3, #2
 8011a20:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8011a22:	6863      	ldr	r3, [r4, #4]
 8011a24:	f003 030c 	and.w	r3, r3, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8011a28:	2b08      	cmp	r3, #8
 8011a2a:	d1fa      	bne.n	8011a22 <UTILS_EnablePLLAndSwitchSystem+0x52>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8011a2c:	6863      	ldr	r3, [r4, #4]
 8011a2e:	684a      	ldr	r2, [r1, #4]
 8011a30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8011a34:	4313      	orrs	r3, r2
 8011a36:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8011a38:	6863      	ldr	r3, [r4, #4]
 8011a3a:	688a      	ldr	r2, [r1, #8]
 8011a3c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8011a40:	4313      	orrs	r3, r2
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (sysclk_frequency_current > SYSCLK_Frequency)
 8011a42:	45a8      	cmp	r8, r5
 8011a44:	6063      	str	r3, [r4, #4]
 8011a46:	d80e      	bhi.n	8011a66 <UTILS_EnablePLLAndSwitchSystem+0x96>
  }

  /* Update SystemCoreClock variable */
  if (status == SUCCESS)
  {
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
 8011a48:	680b      	ldr	r3, [r1, #0]
 8011a4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
  SystemCoreClock = HCLKFrequency;
 8011a4e:	2000      	movs	r0, #0
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
 8011a50:	5cfb      	ldrb	r3, [r7, r3]
 8011a52:	40dd      	lsrs	r5, r3
  SystemCoreClock = HCLKFrequency;
 8011a54:	6035      	str	r5, [r6, #0]
 8011a56:	e004      	b.n	8011a62 <UTILS_EnablePLLAndSwitchSystem+0x92>
  if (Frequency == 0U)
 8011a58:	4628      	mov	r0, r5
 8011a5a:	f7ff ff9b 	bl	8011994 <UTILS_SetFlashLatency.part.0>
  if (status == SUCCESS)
 8011a5e:	2800      	cmp	r0, #0
 8011a60:	d0cc      	beq.n	80119fc <UTILS_EnablePLLAndSwitchSystem+0x2c>
  }

  return status;
}
 8011a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (Frequency == 0U)
 8011a66:	b12d      	cbz	r5, 8011a74 <UTILS_EnablePLLAndSwitchSystem+0xa4>
 8011a68:	4628      	mov	r0, r5
 8011a6a:	f7ff ff93 	bl	8011994 <UTILS_SetFlashLatency.part.0>
  if (status == SUCCESS)
 8011a6e:	2800      	cmp	r0, #0
 8011a70:	d1f7      	bne.n	8011a62 <UTILS_EnablePLLAndSwitchSystem+0x92>
 8011a72:	e7e9      	b.n	8011a48 <UTILS_EnablePLLAndSwitchSystem+0x78>
    status = ERROR;
 8011a74:	2001      	movs	r0, #1
 8011a76:	e7f4      	b.n	8011a62 <UTILS_EnablePLLAndSwitchSystem+0x92>
 8011a78:	40021000 	.word	0x40021000
 8011a7c:	20008e74 	.word	0x20008e74
 8011a80:	0801d65b 	.word	0x0801d65b

08011a84 <LL_PLL_ConfigSystemClock_HSE>:
{
 8011a84:	b4f0      	push	{r4, r5, r6, r7}
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8011a86:	4c1e      	ldr	r4, [pc, #120]	; (8011b00 <LL_PLL_ConfigSystemClock_HSE+0x7c>)
 8011a88:	6825      	ldr	r5, [r4, #0]
  if (LL_RCC_PLL_IsReady() != 0U)
 8011a8a:	01ae      	lsls	r6, r5, #6
 8011a8c:	d434      	bmi.n	8011af8 <LL_PLL_ConfigSystemClock_HSE+0x74>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011a8e:	f44f 1570 	mov.w	r5, #3932160	; 0x3c0000
 8011a92:	fa95 f5a5 	rbit	r5, r5
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency / (UTILS_PLLInitStruct->Prediv + 1U), UTILS_PLLInitStruct->PLLMul);
 8011a96:	e9d2 c700 	ldrd	ip, r7, [r2]
  return __builtin_clz(value);
 8011a9a:	fab5 f685 	clz	r6, r5
 8011a9e:	f40c 1570 	and.w	r5, ip, #3932160	; 0x3c0000
 8011aa2:	1c7a      	adds	r2, r7, #1
 8011aa4:	40f5      	lsrs	r5, r6
 8011aa6:	fbb0 f0f2 	udiv	r0, r0, r2
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8011aaa:	6822      	ldr	r2, [r4, #0]
 8011aac:	3502      	adds	r5, #2
 8011aae:	4368      	muls	r0, r5
    if (LL_RCC_HSE_IsReady() != 1U)
 8011ab0:	0395      	lsls	r5, r2, #14
 8011ab2:	d40e      	bmi.n	8011ad2 <LL_PLL_ConfigSystemClock_HSE+0x4e>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8011ab4:	6822      	ldr	r2, [r4, #0]
      if (HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8011ab6:	2901      	cmp	r1, #1
 8011ab8:	bf0c      	ite	eq
 8011aba:	f442 2280 	orreq.w	r2, r2, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8011abe:	f422 2280 	bicne.w	r2, r2, #262144	; 0x40000
 8011ac2:	6022      	str	r2, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8011ac4:	6821      	ldr	r1, [r4, #0]
 8011ac6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8011aca:	6021      	str	r1, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8011acc:	6822      	ldr	r2, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8011ace:	0392      	lsls	r2, r2, #14
 8011ad0:	d5fc      	bpl.n	8011acc <LL_PLL_ConfigSystemClock_HSE+0x48>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8011ad2:	6862      	ldr	r2, [r4, #4]
 8011ad4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8011ad8:	ea42 020c 	orr.w	r2, r2, ip
 8011adc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011ae0:	6062      	str	r2, [r4, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8011ae2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011ae4:	f007 070f 	and.w	r7, r7, #15
 8011ae8:	f022 020f 	bic.w	r2, r2, #15
 8011aec:	433a      	orrs	r2, r7
 8011aee:	62e2      	str	r2, [r4, #44]	; 0x2c
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8011af0:	4619      	mov	r1, r3
}
 8011af2:	bcf0      	pop	{r4, r5, r6, r7}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8011af4:	f7ff bf6c 	b.w	80119d0 <UTILS_EnablePLLAndSwitchSystem>
}
 8011af8:	2001      	movs	r0, #1
 8011afa:	bcf0      	pop	{r4, r5, r6, r7}
 8011afc:	4770      	bx	lr
 8011afe:	bf00      	nop
 8011b00:	40021000 	.word	0x40021000

08011b04 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	z_sys_device_level = level;
 8011b04:	4b0a      	ldr	r3, [pc, #40]	; (8011b30 <z_sys_device_do_config_level+0x2c>)
{
 8011b06:	b570      	push	{r4, r5, r6, lr}
	z_sys_device_level = level;
 8011b08:	7018      	strb	r0, [r3, #0]
	for (info = config_levels[level]; info < config_levels[level+1];
 8011b0a:	4b0a      	ldr	r3, [pc, #40]	; (8011b34 <z_sys_device_do_config_level+0x30>)
 8011b0c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8011b10:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
 8011b12:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
 8011b14:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8011b18:	42a5      	cmp	r5, r4
 8011b1a:	d800      	bhi.n	8011b1e <z_sys_device_do_config_level+0x1a>
		} else {
			z_object_init(info);
		}
	}
}
 8011b1c:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
 8011b1e:	6823      	ldr	r3, [r4, #0]
 8011b20:	4620      	mov	r0, r4
 8011b22:	685b      	ldr	r3, [r3, #4]
 8011b24:	4798      	blx	r3
		if (retval != 0) {
 8011b26:	b100      	cbz	r0, 8011b2a <z_sys_device_do_config_level+0x26>
			info->driver_api = NULL;
 8011b28:	6066      	str	r6, [r4, #4]
								info++) {
 8011b2a:	340c      	adds	r4, #12
 8011b2c:	e7f4      	b.n	8011b18 <z_sys_device_do_config_level+0x14>
 8011b2e:	bf00      	nop
 8011b30:	20001d42 	.word	0x20001d42
 8011b34:	0801a368 	.word	0x0801a368

08011b38 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
 8011b38:	4b10      	ldr	r3, [pc, #64]	; (8011b7c <z_impl_device_get_binding+0x44>)
{
 8011b3a:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
 8011b3c:	4c10      	ldr	r4, [pc, #64]	; (8011b80 <z_impl_device_get_binding+0x48>)
{
 8011b3e:	4605      	mov	r5, r0
 8011b40:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
 8011b42:	429c      	cmp	r4, r3
 8011b44:	d104      	bne.n	8011b50 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
 8011b46:	4c0e      	ldr	r4, [pc, #56]	; (8011b80 <z_impl_device_get_binding+0x48>)
 8011b48:	42b4      	cmp	r4, r6
 8011b4a:	d109      	bne.n	8011b60 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
 8011b4c:	2400      	movs	r4, #0
 8011b4e:	e012      	b.n	8011b76 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
 8011b50:	6862      	ldr	r2, [r4, #4]
 8011b52:	b11a      	cbz	r2, 8011b5c <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
 8011b54:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
 8011b56:	6812      	ldr	r2, [r2, #0]
 8011b58:	42aa      	cmp	r2, r5
 8011b5a:	d00c      	beq.n	8011b76 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8011b5c:	340c      	adds	r4, #12
 8011b5e:	e7f0      	b.n	8011b42 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
 8011b60:	6863      	ldr	r3, [r4, #4]
 8011b62:	b90b      	cbnz	r3, 8011b68 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8011b64:	340c      	adds	r4, #12
 8011b66:	e7ef      	b.n	8011b48 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
 8011b68:	6823      	ldr	r3, [r4, #0]
 8011b6a:	4628      	mov	r0, r5
 8011b6c:	6819      	ldr	r1, [r3, #0]
 8011b6e:	f7f2 ff2d 	bl	80049cc <strcmp>
 8011b72:	2800      	cmp	r0, #0
 8011b74:	d1f6      	bne.n	8011b64 <z_impl_device_get_binding+0x2c>
}
 8011b76:	4620      	mov	r0, r4
 8011b78:	bd70      	pop	{r4, r5, r6, pc}
 8011b7a:	bf00      	nop
 8011b7c:	20008fd0 	.word	0x20008fd0
 8011b80:	20008e80 	.word	0x20008e80

08011b84 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 8011b84:	4b01      	ldr	r3, [pc, #4]	; (8011b8c <z_impl_z_errno+0x8>)
 8011b86:	6898      	ldr	r0, [r3, #8]
}
 8011b88:	3054      	adds	r0, #84	; 0x54
 8011b8a:	4770      	bx	lr
 8011b8c:	200018f8 	.word	0x200018f8

08011b90 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8011b90:	b510      	push	{r4, lr}
 8011b92:	4604      	mov	r4, r0
	z_impl_log_panic();
 8011b94:	f7f4 faa4 	bl	80060e0 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 8011b98:	4b0a      	ldr	r3, [pc, #40]	; (8011bc4 <k_sys_fatal_error_handler+0x34>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	075b      	lsls	r3, r3, #29
 8011b9e:	d00d      	beq.n	8011bbc <k_sys_fatal_error_handler+0x2c>
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	f04f 0100 	mov.w	r1, #0
 8011ba6:	f363 0107 	bfi	r1, r3, #0, #8
 8011baa:	4a07      	ldr	r2, [pc, #28]	; (8011bc8 <k_sys_fatal_error_handler+0x38>)
 8011bac:	4b07      	ldr	r3, [pc, #28]	; (8011bcc <k_sys_fatal_error_handler+0x3c>)
 8011bae:	4808      	ldr	r0, [pc, #32]	; (8011bd0 <k_sys_fatal_error_handler+0x40>)
 8011bb0:	1a9b      	subs	r3, r3, r2
 8011bb2:	08db      	lsrs	r3, r3, #3
 8011bb4:	f363 118f 	bfi	r1, r3, #6, #10
 8011bb8:	f002 f823 	bl	8013c02 <log_0>
	arch_system_halt(reason);
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	f006 fcb4 	bl	801852a <arch_system_halt>
 8011bc2:	bf00      	nop
 8011bc4:	2000903c 	.word	0x2000903c
 8011bc8:	08019248 	.word	0x08019248
 8011bcc:	08019320 	.word	0x08019320
 8011bd0:	0801d673 	.word	0x0801d673

08011bd4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8011bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011bd6:	4605      	mov	r5, r0
 8011bd8:	460f      	mov	r7, r1
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8011bda:	4c30      	ldr	r4, [pc, #192]	; (8011c9c <z_fatal_error+0xc8>)
	return z_impl_k_current_get();
 8011bdc:	f000 fe74 	bl	80128c8 <z_impl_k_current_get>
 8011be0:	6823      	ldr	r3, [r4, #0]
 8011be2:	0759      	lsls	r1, r3, #29
 8011be4:	4606      	mov	r6, r0
 8011be6:	d018      	beq.n	8011c1a <z_fatal_error+0x46>
 8011be8:	2301      	movs	r3, #1
 8011bea:	f04f 0100 	mov.w	r1, #0
 8011bee:	4a2c      	ldr	r2, [pc, #176]	; (8011ca0 <z_fatal_error+0xcc>)
 8011bf0:	482c      	ldr	r0, [pc, #176]	; (8011ca4 <z_fatal_error+0xd0>)
 8011bf2:	f363 0107 	bfi	r1, r3, #0, #8
 8011bf6:	4b2c      	ldr	r3, [pc, #176]	; (8011ca8 <z_fatal_error+0xd4>)
 8011bf8:	1a9b      	subs	r3, r3, r2
 8011bfa:	08db      	lsrs	r3, r3, #3
 8011bfc:	2d04      	cmp	r5, #4
 8011bfe:	f363 118f 	bfi	r1, r3, #6, #10
	switch (reason) {
 8011c02:	bf98      	it	ls
 8011c04:	4b29      	ldrls	r3, [pc, #164]	; (8011cac <z_fatal_error+0xd8>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8011c06:	f8ad 1000 	strh.w	r1, [sp]
 8011c0a:	bf94      	ite	ls
 8011c0c:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
 8011c10:	4a27      	ldrhi	r2, [pc, #156]	; (8011cb0 <z_fatal_error+0xdc>)
 8011c12:	2300      	movs	r3, #0
 8011c14:	4629      	mov	r1, r5
 8011c16:	f002 f82d 	bl	8013c74 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 8011c1a:	69fb      	ldr	r3, [r7, #28]
 8011c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
 8011c20:	b183      	cbz	r3, 8011c44 <z_fatal_error+0x70>
		LOG_ERR("Fault during interrupt handling\n");
 8011c22:	6823      	ldr	r3, [r4, #0]
 8011c24:	075a      	lsls	r2, r3, #29
 8011c26:	d02c      	beq.n	8011c82 <z_fatal_error+0xae>
 8011c28:	2301      	movs	r3, #1
 8011c2a:	f04f 0100 	mov.w	r1, #0
 8011c2e:	f363 0107 	bfi	r1, r3, #0, #8
 8011c32:	4a1b      	ldr	r2, [pc, #108]	; (8011ca0 <z_fatal_error+0xcc>)
 8011c34:	4b1c      	ldr	r3, [pc, #112]	; (8011ca8 <z_fatal_error+0xd4>)
 8011c36:	481f      	ldr	r0, [pc, #124]	; (8011cb4 <z_fatal_error+0xe0>)
 8011c38:	1a9b      	subs	r3, r3, r2
 8011c3a:	08db      	lsrs	r3, r3, #3
 8011c3c:	f363 118f 	bfi	r1, r3, #6, #10
 8011c40:	f001 ffdf 	bl	8013c02 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 8011c44:	6823      	ldr	r3, [r4, #0]
 8011c46:	075b      	lsls	r3, r3, #29
 8011c48:	d01b      	beq.n	8011c82 <z_fatal_error+0xae>
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	f04f 0400 	mov.w	r4, #0
 8011c50:	f363 0407 	bfi	r4, r3, #0, #8
 8011c54:	4a14      	ldr	r2, [pc, #80]	; (8011ca8 <z_fatal_error+0xd4>)
 8011c56:	4b12      	ldr	r3, [pc, #72]	; (8011ca0 <z_fatal_error+0xcc>)
 8011c58:	1ad2      	subs	r2, r2, r3
 8011c5a:	08d2      	lsrs	r2, r2, #3
	const char *thread_name = k_thread_name_get(thread);
 8011c5c:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
 8011c5e:	f362 148f 	bfi	r4, r2, #6, #10
	const char *thread_name = k_thread_name_get(thread);
 8011c62:	f006 fead 	bl	80189c0 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
 8011c66:	b1b0      	cbz	r0, 8011c96 <z_fatal_error+0xc2>
 8011c68:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
 8011c6a:	4b13      	ldr	r3, [pc, #76]	; (8011cb8 <z_fatal_error+0xe4>)
 8011c6c:	2a00      	cmp	r2, #0
 8011c6e:	bf08      	it	eq
 8011c70:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
 8011c72:	f7f4 f897 	bl	8005da4 <log_strdup>
 8011c76:	4623      	mov	r3, r4
 8011c78:	4602      	mov	r2, r0
 8011c7a:	4631      	mov	r1, r6
 8011c7c:	480f      	ldr	r0, [pc, #60]	; (8011cbc <z_fatal_error+0xe8>)
 8011c7e:	f001 ffe1 	bl	8013c44 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
 8011c82:	4639      	mov	r1, r7
 8011c84:	4628      	mov	r0, r5
 8011c86:	f7ff ff83 	bl	8011b90 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
 8011c8a:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
 8011c8c:	b003      	add	sp, #12
 8011c8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011c92:	f7f8 bb7f 	b.w	800a394 <z_impl_k_thread_abort>
		thread_name = "unknown";
 8011c96:	4808      	ldr	r0, [pc, #32]	; (8011cb8 <z_fatal_error+0xe4>)
 8011c98:	e7eb      	b.n	8011c72 <z_fatal_error+0x9e>
 8011c9a:	bf00      	nop
 8011c9c:	2000903c 	.word	0x2000903c
 8011ca0:	08019248 	.word	0x08019248
 8011ca4:	0801d6e2 	.word	0x0801d6e2
 8011ca8:	08019320 	.word	0x08019320
 8011cac:	0801a380 	.word	0x0801a380
 8011cb0:	0801d6cc 	.word	0x0801d6cc
 8011cb4:	0801d70a 	.word	0x0801d70a
 8011cb8:	0801d6da 	.word	0x0801d6da
 8011cbc:	0801d72b 	.word	0x0801d72b

08011cc0 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8011cc0:	4802      	ldr	r0, [pc, #8]	; (8011ccc <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
 8011cc2:	4a03      	ldr	r2, [pc, #12]	; (8011cd0 <z_bss_zero+0x10>)
 8011cc4:	2100      	movs	r1, #0
 8011cc6:	1a12      	subs	r2, r2, r0
 8011cc8:	f7f2 be51 	b.w	800496e <memset>
 8011ccc:	20000000 	.word	0x20000000
 8011cd0:	20001d48 	.word	0x20001d48

08011cd4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8011cd4:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8011cd6:	4806      	ldr	r0, [pc, #24]	; (8011cf0 <z_data_copy+0x1c>)
 8011cd8:	4a06      	ldr	r2, [pc, #24]	; (8011cf4 <z_data_copy+0x20>)
 8011cda:	4907      	ldr	r1, [pc, #28]	; (8011cf8 <z_data_copy+0x24>)
 8011cdc:	1a12      	subs	r2, r2, r0
 8011cde:	f7f2 fe1e 	bl	800491e <memcpy>
 8011ce2:	4a06      	ldr	r2, [pc, #24]	; (8011cfc <z_data_copy+0x28>)
 8011ce4:	4906      	ldr	r1, [pc, #24]	; (8011d00 <z_data_copy+0x2c>)
 8011ce6:	4807      	ldr	r0, [pc, #28]	; (8011d04 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8011ce8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011cec:	f7f2 be17 	b.w	800491e <memcpy>
 8011cf0:	20008068 	.word	0x20008068
 8011cf4:	20009274 	.word	0x20009274
 8011cf8:	0801d870 	.word	0x0801d870
 8011cfc:	00000000 	.word	0x00000000
 8011d00:	0801d870 	.word	0x0801d870
 8011d04:	20000000 	.word	0x20000000

08011d08 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8011d08:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8011d0a:	2002      	movs	r0, #2
 8011d0c:	f7ff fefa 	bl	8011b04 <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8011d10:	4a08      	ldr	r2, [pc, #32]	; (8011d34 <bg_thread_main+0x2c>)
 8011d12:	4909      	ldr	r1, [pc, #36]	; (8011d38 <bg_thread_main+0x30>)
 8011d14:	4809      	ldr	r0, [pc, #36]	; (8011d3c <bg_thread_main+0x34>)
 8011d16:	f001 fd53 	bl	80137c0 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
 8011d1a:	2003      	movs	r0, #3
 8011d1c:	f7ff fef2 	bl	8011b04 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
 8011d20:	f000 fefe 	bl	8012b20 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
 8011d24:	f7f2 ff80 	bl	8004c28 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8011d28:	4a05      	ldr	r2, [pc, #20]	; (8011d40 <bg_thread_main+0x38>)
 8011d2a:	7b13      	ldrb	r3, [r2, #12]
 8011d2c:	f023 0301 	bic.w	r3, r3, #1
 8011d30:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8011d32:	bd08      	pop	{r3, pc}
 8011d34:	0801c8da 	.word	0x0801c8da
 8011d38:	0801d743 	.word	0x0801d743
 8011d3c:	0801d763 	.word	0x0801d763
 8011d40:	20001070 	.word	0x20001070

08011d44 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b0a0      	sub	sp, #128	; 0x80
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 8011d48:	f7f3 feae 	bl	8005aa8 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
 8011d4c:	4b35      	ldr	r3, [pc, #212]	; (8011e24 <z_cstart+0xe0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8011d4e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8011d52:	4c35      	ldr	r4, [pc, #212]	; (8011e28 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
 8011d54:	4e35      	ldr	r6, [pc, #212]	; (8011e2c <z_cstart+0xe8>)
 8011d56:	6963      	ldr	r3, [r4, #20]
 8011d58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011d5c:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011d5e:	2500      	movs	r5, #0
 8011d60:	23f0      	movs	r3, #240	; 0xf0
 8011d62:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8011d66:	77e5      	strb	r5, [r4, #31]
 8011d68:	7625      	strb	r5, [r4, #24]
 8011d6a:	7665      	strb	r5, [r4, #25]
 8011d6c:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8011d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d70:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8011d74:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8011d76:	f7f8 faf9 	bl	800a36c <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8011d7a:	f7f7 fedb 	bl	8009b34 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8011d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d82:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8011d84:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
 8011d86:	ab07      	add	r3, sp, #28
 8011d88:	2264      	movs	r2, #100	; 0x64
 8011d8a:	4629      	mov	r1, r5
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7f2 fdee 	bl	800496e <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
 8011d92:	4c27      	ldr	r4, [pc, #156]	; (8011e30 <z_cstart+0xec>)
	struct k_thread dummy_thread = {
 8011d94:	2701      	movs	r7, #1
	_current = &dummy_thread;
 8011d96:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8011d98:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
 8011d9a:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8011d9e:	f7ff feb1 	bl	8011b04 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8011da2:	4638      	mov	r0, r7
 8011da4:	f7ff feae 	bl	8011b04 <z_sys_device_do_config_level>
	z_sched_init();
 8011da8:	f000 fd18 	bl	80127dc <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
 8011dac:	4b21      	ldr	r3, [pc, #132]	; (8011e34 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
 8011dae:	6226      	str	r6, [r4, #32]
	z_setup_new_thread(&z_main_thread, z_main_stack,
 8011db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011db4:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8011db8:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8011dbc:	4b1e      	ldr	r3, [pc, #120]	; (8011e38 <z_cstart+0xf4>)
 8011dbe:	491f      	ldr	r1, [pc, #124]	; (8011e3c <z_cstart+0xf8>)
 8011dc0:	e9cd 5500 	strd	r5, r5, [sp]
 8011dc4:	4630      	mov	r0, r6
 8011dc6:	f000 fe29 	bl	8012a1c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8011dca:	7b73      	ldrb	r3, [r6, #13]
 8011dcc:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8011dd0:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8011dd4:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8011dd6:	d104      	bne.n	8011de2 <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
 8011dd8:	69b3      	ldr	r3, [r6, #24]
 8011dda:	b913      	cbnz	r3, 8011de2 <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
 8011ddc:	4630      	mov	r0, r6
 8011dde:	f000 fb47 	bl	8012470 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
 8011de2:	4b17      	ldr	r3, [pc, #92]	; (8011e40 <z_cstart+0xfc>)
 8011de4:	4d17      	ldr	r5, [pc, #92]	; (8011e44 <z_cstart+0x100>)
 8011de6:	9305      	str	r3, [sp, #20]
 8011de8:	2201      	movs	r2, #1
 8011dea:	230f      	movs	r3, #15
 8011dec:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011df0:	2300      	movs	r3, #0
 8011df2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8011df6:	9300      	str	r3, [sp, #0]
 8011df8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011dfc:	4b12      	ldr	r3, [pc, #72]	; (8011e48 <z_cstart+0x104>)
 8011dfe:	4913      	ldr	r1, [pc, #76]	; (8011e4c <z_cstart+0x108>)
 8011e00:	4628      	mov	r0, r5
 8011e02:	f000 fe0b 	bl	8012a1c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8011e06:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
 8011e08:	60e5      	str	r5, [r4, #12]
 8011e0a:	f023 0304 	bic.w	r3, r3, #4
 8011e0e:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8011e10:	4b0f      	ldr	r3, [pc, #60]	; (8011e50 <z_cstart+0x10c>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
 8011e12:	490a      	ldr	r1, [pc, #40]	; (8011e3c <z_cstart+0xf8>)
 8011e14:	4805      	ldr	r0, [pc, #20]	; (8011e2c <z_cstart+0xe8>)
	list->tail = (sys_dnode_t *)list;
 8011e16:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8011e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011e1e:	4b06      	ldr	r3, [pc, #24]	; (8011e38 <z_cstart+0xf4>)
 8011e20:	f7f7 fe70 	bl	8009b04 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8011e24:	20004318 	.word	0x20004318
 8011e28:	e000ed00 	.word	0xe000ed00
 8011e2c:	20001070 	.word	0x20001070
 8011e30:	200018f8 	.word	0x200018f8
 8011e34:	0801d78a 	.word	0x0801d78a
 8011e38:	08011d09 	.word	0x08011d09
 8011e3c:	200035d8 	.word	0x200035d8
 8011e40:	0801d78f 	.word	0x0801d78f
 8011e44:	2000100c 	.word	0x2000100c
 8011e48:	08018e25 	.word	0x08018e25
 8011e4c:	200039d8 	.word	0x200039d8
 8011e50:	20001910 	.word	0x20001910

08011e54 <init_mem_slab_module>:
 */
static int init_mem_slab_module(struct device *dev)
{
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8011e54:	4b0b      	ldr	r3, [pc, #44]	; (8011e84 <init_mem_slab_module+0x30>)
 8011e56:	480c      	ldr	r0, [pc, #48]	; (8011e88 <init_mem_slab_module+0x34>)
{
 8011e58:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
 8011e5a:	2400      	movs	r4, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8011e5c:	4283      	cmp	r3, r0
 8011e5e:	d301      	bcc.n	8011e64 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
 8011e60:	2000      	movs	r0, #0
 8011e62:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
 8011e64:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
 8011e66:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
 8011e68:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 8011e6a:	2100      	movs	r1, #0
 8011e6c:	42a9      	cmp	r1, r5
 8011e6e:	d101      	bne.n	8011e74 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8011e70:	331c      	adds	r3, #28
 8011e72:	e7f3      	b.n	8011e5c <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
 8011e74:	695e      	ldr	r6, [r3, #20]
 8011e76:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
 8011e78:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
 8011e7a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 8011e7c:	3101      	adds	r1, #1
		p += slab->block_size;
 8011e7e:	4432      	add	r2, r6
 8011e80:	e7f4      	b.n	8011e6c <init_mem_slab_module+0x18>
 8011e82:	bf00      	nop
 8011e84:	20009050 	.word	0x20009050
 8011e88:	20009088 	.word	0x20009088

08011e8c <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
 8011e8c:	b510      	push	{r4, lr}
 8011e8e:	4613      	mov	r3, r2
 8011e90:	460c      	mov	r4, r1
	__asm__ volatile(
 8011e92:	f04f 0210 	mov.w	r2, #16
 8011e96:	f3ef 8111 	mrs	r1, BASEPRI
 8011e9a:	f382 8811 	msr	BASEPRI, r2
 8011e9e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
 8011ea2:	6942      	ldr	r2, [r0, #20]
 8011ea4:	b15a      	cbz	r2, 8011ebe <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
 8011ea6:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 8011ea8:	6813      	ldr	r3, [r2, #0]
 8011eaa:	6143      	str	r3, [r0, #20]
		slab->num_used++;
 8011eac:	6983      	ldr	r3, [r0, #24]
 8011eae:	3301      	adds	r3, #1
 8011eb0:	6183      	str	r3, [r0, #24]
		result = 0;
 8011eb2:	2000      	movs	r0, #0
	__asm__ volatile(
 8011eb4:	f381 8811 	msr	BASEPRI, r1
 8011eb8:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
 8011ebc:	e00d      	b.n	8011eda <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
 8011ebe:	b91b      	cbnz	r3, 8011ec8 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
 8011ec0:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
 8011ec2:	f06f 000b 	mvn.w	r0, #11
 8011ec6:	e7f5      	b.n	8011eb4 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
 8011ec8:	4602      	mov	r2, r0
 8011eca:	4804      	ldr	r0, [pc, #16]	; (8011edc <k_mem_slab_alloc+0x50>)
 8011ecc:	f000 fc02 	bl	80126d4 <z_pend_curr>
		if (result == 0) {
 8011ed0:	b918      	cbnz	r0, 8011eda <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
 8011ed2:	4b03      	ldr	r3, [pc, #12]	; (8011ee0 <k_mem_slab_alloc+0x54>)
 8011ed4:	689b      	ldr	r3, [r3, #8]
 8011ed6:	695b      	ldr	r3, [r3, #20]
 8011ed8:	6023      	str	r3, [r4, #0]
}
 8011eda:	bd10      	pop	{r4, pc}
 8011edc:	20001d43 	.word	0x20001d43
 8011ee0:	200018f8 	.word	0x200018f8

08011ee4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 8011ee4:	b570      	push	{r4, r5, r6, lr}
 8011ee6:	4604      	mov	r4, r0
 8011ee8:	460d      	mov	r5, r1
	__asm__ volatile(
 8011eea:	f04f 0310 	mov.w	r3, #16
 8011eee:	f3ef 8611 	mrs	r6, BASEPRI
 8011ef2:	f383 8811 	msr	BASEPRI, r3
 8011ef6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 8011efa:	f006 fd03 	bl	8018904 <z_unpend_first_thread>

	if (pending_thread != NULL) {
 8011efe:	b180      	cbz	r0, 8011f22 <k_mem_slab_free+0x3e>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 8011f00:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 8011f02:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8011f04:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8011f06:	2100      	movs	r1, #0
 8011f08:	06d2      	lsls	r2, r2, #27
 8011f0a:	6601      	str	r1, [r0, #96]	; 0x60
 8011f0c:	d103      	bne.n	8011f16 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
 8011f0e:	6983      	ldr	r3, [r0, #24]
 8011f10:	b90b      	cbnz	r3, 8011f16 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
 8011f12:	f000 faad 	bl	8012470 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
 8011f16:	4631      	mov	r1, r6
 8011f18:	4808      	ldr	r0, [pc, #32]	; (8011f3c <k_mem_slab_free+0x58>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
 8011f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
 8011f1e:	f006 bc7b 	b.w	8018818 <z_reschedule>
		**(char ***)mem = slab->free_list;
 8011f22:	682b      	ldr	r3, [r5, #0]
 8011f24:	6962      	ldr	r2, [r4, #20]
 8011f26:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
 8011f28:	682b      	ldr	r3, [r5, #0]
 8011f2a:	6163      	str	r3, [r4, #20]
		slab->num_used--;
 8011f2c:	69a3      	ldr	r3, [r4, #24]
 8011f2e:	3b01      	subs	r3, #1
 8011f30:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
 8011f32:	f386 8811 	msr	BASEPRI, r6
 8011f36:	f3bf 8f6f 	isb	sy
}
 8011f3a:	bd70      	pop	{r4, r5, r6, pc}
 8011f3c:	20001d43 	.word	0x20001d43

08011f40 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
 8011f40:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 8011f42:	4c07      	ldr	r4, [pc, #28]	; (8011f60 <init_static_pools+0x20>)
 8011f44:	4d07      	ldr	r5, [pc, #28]	; (8011f64 <init_static_pools+0x24>)
 8011f46:	42ac      	cmp	r4, r5
 8011f48:	d301      	bcc.n	8011f4e <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
 8011f4a:	2000      	movs	r0, #0
 8011f4c:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8011f4e:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
 8011f52:	4620      	mov	r0, r4
 8011f54:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8011f58:	f001 f8cf 	bl	80130fa <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 8011f5c:	341c      	adds	r4, #28
 8011f5e:	e7f2      	b.n	8011f46 <init_static_pools+0x6>
 8011f60:	20009088 	.word	0x20009088
 8011f64:	200090a4 	.word	0x200090a4

08011f68 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
 8011f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
 8011f6c:	1e1c      	subs	r4, r3, #0
{
 8011f6e:	b085      	sub	sp, #20
 8011f70:	4607      	mov	r7, r0
 8011f72:	460d      	mov	r5, r1
 8011f74:	4692      	mov	sl, r2
	if (timeout > 0) {
 8011f76:	dd3b      	ble.n	8011ff0 <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
 8011f78:	f006 fe0f 	bl	8018b9a <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
 8011f7c:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
 8011f80:	4b1d      	ldr	r3, [pc, #116]	; (8011ff8 <k_mem_pool_alloc+0x90>)
 8011f82:	4e1e      	ldr	r6, [pc, #120]	; (8011ffc <k_mem_pool_alloc+0x94>)
 8011f84:	1afb      	subs	r3, r7, r3
 8011f86:	109b      	asrs	r3, r3, #2
 8011f88:	435e      	muls	r6, r3
		u32_t level_num, block_num;

		ret = z_sys_mem_pool_block_alloc(&p->base, size,
						 &level_num, &block_num,
						 &block->data);
		block->id.pool = pool_id(p);
 8011f8a:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
 8011f8c:	f107 0b14 	add.w	fp, r7, #20
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
 8011f90:	ab03      	add	r3, sp, #12
 8011f92:	aa02      	add	r2, sp, #8
 8011f94:	9500      	str	r5, [sp, #0]
 8011f96:	4651      	mov	r1, sl
 8011f98:	4638      	mov	r0, r7
 8011f9a:	f001 f8f4 	bl	8013186 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
 8011f9e:	796b      	ldrb	r3, [r5, #5]
 8011fa0:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
 8011fa2:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
 8011fa4:	f362 0303 	bfi	r3, r2, #0, #4
 8011fa8:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
 8011faa:	686b      	ldr	r3, [r5, #4]
 8011fac:	9a03      	ldr	r2, [sp, #12]
 8011fae:	f362 331f 	bfi	r3, r2, #12, #20
 8011fb2:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
 8011fb4:	b1c8      	cbz	r0, 8011fea <k_mem_pool_alloc+0x82>
 8011fb6:	b1c4      	cbz	r4, 8011fea <k_mem_pool_alloc+0x82>
 8011fb8:	f110 0f0c 	cmn.w	r0, #12
 8011fbc:	d115      	bne.n	8011fea <k_mem_pool_alloc+0x82>
	__asm__ volatile(
 8011fbe:	f04f 0310 	mov.w	r3, #16
 8011fc2:	f3ef 8011 	mrs	r0, BASEPRI
 8011fc6:	f383 8811 	msr	BASEPRI, r3
 8011fca:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
 8011fce:	4622      	mov	r2, r4
 8011fd0:	4659      	mov	r1, fp
 8011fd2:	f000 fb5b 	bl	801268c <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
 8011fd6:	1c63      	adds	r3, r4, #1
 8011fd8:	d0da      	beq.n	8011f90 <k_mem_pool_alloc+0x28>
 8011fda:	f006 fdde 	bl	8018b9a <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
 8011fde:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
 8011fe2:	2c00      	cmp	r4, #0
 8011fe4:	dcd4      	bgt.n	8011f90 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
 8011fe6:	f06f 000a 	mvn.w	r0, #10
}
 8011fea:	b005      	add	sp, #20
 8011fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
 8011ff0:	f04f 0800 	mov.w	r8, #0
 8011ff4:	e7c4      	b.n	8011f80 <k_mem_pool_alloc+0x18>
 8011ff6:	bf00      	nop
 8011ff8:	20009088 	.word	0x20009088
 8011ffc:	b6db6db7 	.word	0xb6db6db7

08012000 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
 8012000:	b570      	push	{r4, r5, r6, lr}
 8012002:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
 8012004:	6802      	ldr	r2, [r0, #0]
 8012006:	7841      	ldrb	r1, [r0, #1]
 8012008:	4e11      	ldr	r6, [pc, #68]	; (8012050 <k_mem_pool_free_id+0x50>)
 801200a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 801200e:	00a4      	lsls	r4, r4, #2
 8012010:	0b12      	lsrs	r2, r2, #12
 8012012:	f001 010f 	and.w	r1, r1, #15
 8012016:	1930      	adds	r0, r6, r4
 8012018:	f001 f968 	bl	80132ec <z_sys_mem_pool_block_free>
 801201c:	f04f 0310 	mov.w	r3, #16
 8012020:	f3ef 8511 	mrs	r5, BASEPRI
 8012024:	f383 8811 	msr	BASEPRI, r3
 8012028:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
 801202c:	f104 0014 	add.w	r0, r4, #20
 8012030:	4430      	add	r0, r6
 8012032:	f006 fc94 	bl	801895e <z_unpend_all>

	if (need_sched != 0) {
 8012036:	b128      	cbz	r0, 8012044 <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
 8012038:	4629      	mov	r1, r5
 801203a:	4806      	ldr	r0, [pc, #24]	; (8012054 <k_mem_pool_free_id+0x54>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
 801203c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
 8012040:	f006 bbea 	b.w	8018818 <z_reschedule>
	__asm__ volatile(
 8012044:	f385 8811 	msr	BASEPRI, r5
 8012048:	f3bf 8f6f 	isb	sy
}
 801204c:	bd70      	pop	{r4, r5, r6, pc}
 801204e:	bf00      	nop
 8012050:	20009088 	.word	0x20009088
 8012054:	20001d43 	.word	0x20001d43

08012058 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
 8012058:	4601      	mov	r1, r0
 801205a:	4801      	ldr	r0, [pc, #4]	; (8012060 <k_malloc+0x8>)
 801205c:	f006 ba80 	b.w	8018560 <k_mem_pool_malloc>
 8012060:	20009088 	.word	0x20009088

08012064 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
 8012064:	4b03      	ldr	r3, [pc, #12]	; (8012074 <z_thread_malloc+0x10>)
 8012066:	689b      	ldr	r3, [r3, #8]
{
 8012068:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
 801206a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801206c:	b108      	cbz	r0, 8012072 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
 801206e:	f006 ba77 	b.w	8018560 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
 8012072:	4770      	bx	lr
 8012074:	200018f8 	.word	0x200018f8

08012078 <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
 8012078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801207c:	4613      	mov	r3, r2
 801207e:	4604      	mov	r4, r0
 8012080:	460f      	mov	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 8012082:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
 8012086:	f04f 0210 	mov.w	r2, #16
 801208a:	f3ef 8611 	mrs	r6, BASEPRI
 801208e:	f382 8811 	msr	BASEPRI, r2
 8012092:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
 8012096:	6a01      	ldr	r1, [r0, #32]
 8012098:	68c2      	ldr	r2, [r0, #12]
 801209a:	4291      	cmp	r1, r2
 801209c:	d22e      	bcs.n	80120fc <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 801209e:	f006 fc31 	bl	8018904 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 80120a2:	68a2      	ldr	r2, [r4, #8]
 80120a4:	4605      	mov	r5, r0
 80120a6:	4639      	mov	r1, r7
 80120a8:	b198      	cbz	r0, 80120d2 <z_impl_k_msgq_put+0x5a>
 80120aa:	6940      	ldr	r0, [r0, #20]
 80120ac:	f7f2 fc37 	bl	800491e <memcpy>
 80120b0:	2300      	movs	r3, #0
 80120b2:	662b      	str	r3, [r5, #96]	; 0x60
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80120b4:	7b6b      	ldrb	r3, [r5, #13]
 80120b6:	06db      	lsls	r3, r3, #27
 80120b8:	d104      	bne.n	80120c4 <z_impl_k_msgq_put+0x4c>
	if (z_is_thread_ready(thread)) {
 80120ba:	69ab      	ldr	r3, [r5, #24]
 80120bc:	b913      	cbnz	r3, 80120c4 <z_impl_k_msgq_put+0x4c>
		z_add_thread_to_ready_q(thread);
 80120be:	4628      	mov	r0, r5
 80120c0:	f000 f9d6 	bl	8012470 <z_add_thread_to_ready_q>
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
 80120c4:	4640      	mov	r0, r8
 80120c6:	4631      	mov	r1, r6
 80120c8:	f006 fba6 	bl	8018818 <z_reschedule>
			return 0;
 80120cc:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 80120ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120d2:	69e0      	ldr	r0, [r4, #28]
 80120d4:	f7f2 fc23 	bl	800491e <memcpy>
			msgq->write_ptr += msgq->msg_size;
 80120d8:	69e3      	ldr	r3, [r4, #28]
 80120da:	68a2      	ldr	r2, [r4, #8]
 80120dc:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
 80120de:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
 80120e0:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
 80120e2:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
 80120e4:	bf04      	itt	eq
 80120e6:	6923      	ldreq	r3, [r4, #16]
 80120e8:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
 80120ea:	6a23      	ldr	r3, [r4, #32]
 80120ec:	3301      	adds	r3, #1
 80120ee:	6223      	str	r3, [r4, #32]
		result = 0;
 80120f0:	2000      	movs	r0, #0
	__asm__ volatile(
 80120f2:	f386 8811 	msr	BASEPRI, r6
 80120f6:	f3bf 8f6f 	isb	sy
	return result;
 80120fa:	e7e8      	b.n	80120ce <z_impl_k_msgq_put+0x56>
	} else if (timeout == K_NO_WAIT) {
 80120fc:	b14b      	cbz	r3, 8012112 <z_impl_k_msgq_put+0x9a>
		_current->base.swap_data = data;
 80120fe:	4a06      	ldr	r2, [pc, #24]	; (8012118 <z_impl_k_msgq_put+0xa0>)
 8012100:	6892      	ldr	r2, [r2, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8012102:	4631      	mov	r1, r6
		_current->base.swap_data = data;
 8012104:	6157      	str	r7, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8012106:	4602      	mov	r2, r0
 8012108:	4640      	mov	r0, r8
}
 801210a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 801210e:	f000 bae1 	b.w	80126d4 <z_pend_curr>
		result = -ENOMSG;
 8012112:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8012116:	e7ec      	b.n	80120f2 <z_impl_k_msgq_put+0x7a>
 8012118:	200018f8 	.word	0x200018f8

0801211c <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
 801211c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012120:	4604      	mov	r4, r0
 8012122:	4613      	mov	r3, r2
 8012124:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 8012126:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
 801212a:	f04f 0210 	mov.w	r2, #16
 801212e:	f3ef 8611 	mrs	r6, BASEPRI
 8012132:	f382 8811 	msr	BASEPRI, r2
 8012136:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
 801213a:	6a22      	ldr	r2, [r4, #32]
 801213c:	2a00      	cmp	r2, #0
 801213e:	d037      	beq.n	80121b0 <z_impl_k_msgq_get+0x94>
 8012140:	68a2      	ldr	r2, [r4, #8]
 8012142:	69a1      	ldr	r1, [r4, #24]
 8012144:	f7f2 fbeb 	bl	800491e <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
 8012148:	69a3      	ldr	r3, [r4, #24]
 801214a:	68a2      	ldr	r2, [r4, #8]
 801214c:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
 801214e:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
 8012150:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
 8012152:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
 8012154:	bf04      	itt	eq
 8012156:	6923      	ldreq	r3, [r4, #16]
 8012158:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
 801215a:	6a23      	ldr	r3, [r4, #32]
 801215c:	3b01      	subs	r3, #1
 801215e:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8012160:	4620      	mov	r0, r4
 8012162:	f006 fbcf 	bl	8018904 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8012166:	4605      	mov	r5, r0
 8012168:	2800      	cmp	r0, #0
 801216a:	d02e      	beq.n	80121ca <z_impl_k_msgq_get+0xae>
 801216c:	68a2      	ldr	r2, [r4, #8]
 801216e:	6941      	ldr	r1, [r0, #20]
 8012170:	69e0      	ldr	r0, [r4, #28]
 8012172:	f7f2 fbd4 	bl	800491e <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 8012176:	69e3      	ldr	r3, [r4, #28]
 8012178:	68a2      	ldr	r2, [r4, #8]
 801217a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
 801217c:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
 801217e:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
 8012180:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
 8012182:	bf04      	itt	eq
 8012184:	6923      	ldreq	r3, [r4, #16]
 8012186:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
 8012188:	6a23      	ldr	r3, [r4, #32]
 801218a:	3301      	adds	r3, #1
 801218c:	6223      	str	r3, [r4, #32]
 801218e:	2300      	movs	r3, #0
 8012190:	662b      	str	r3, [r5, #96]	; 0x60
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8012192:	7b6b      	ldrb	r3, [r5, #13]
 8012194:	06db      	lsls	r3, r3, #27
 8012196:	d104      	bne.n	80121a2 <z_impl_k_msgq_get+0x86>
	if (z_is_thread_ready(thread)) {
 8012198:	69ab      	ldr	r3, [r5, #24]
 801219a:	b913      	cbnz	r3, 80121a2 <z_impl_k_msgq_get+0x86>
		z_add_thread_to_ready_q(thread);
 801219c:	4628      	mov	r0, r5
 801219e:	f000 f967 	bl	8012470 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
 80121a2:	4638      	mov	r0, r7
 80121a4:	4631      	mov	r1, r6
 80121a6:	f006 fb37 	bl	8018818 <z_reschedule>
			return 0;
 80121aa:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 80121ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
 80121b0:	b14b      	cbz	r3, 80121c6 <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
 80121b2:	4a08      	ldr	r2, [pc, #32]	; (80121d4 <z_impl_k_msgq_get+0xb8>)
 80121b4:	6892      	ldr	r2, [r2, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 80121b6:	4638      	mov	r0, r7
		_current->base.swap_data = data;
 80121b8:	6151      	str	r1, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 80121ba:	4622      	mov	r2, r4
 80121bc:	4631      	mov	r1, r6
}
 80121be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 80121c2:	f000 ba87 	b.w	80126d4 <z_pend_curr>
		result = -ENOMSG;
 80121c6:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 80121ca:	f386 8811 	msr	BASEPRI, r6
 80121ce:	f3bf 8f6f 	isb	sy
	return result;
 80121d2:	e7eb      	b.n	80121ac <z_impl_k_msgq_get+0x90>
 80121d4:	200018f8 	.word	0x200018f8

080121d8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
 80121d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121da:	4604      	mov	r4, r0
 80121dc:	460f      	mov	r7, r1
	__asm__ volatile(
 80121de:	f04f 0310 	mov.w	r3, #16
 80121e2:	f3ef 8511 	mrs	r5, BASEPRI
 80121e6:	f383 8811 	msr	BASEPRI, r3
 80121ea:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 80121ee:	68c2      	ldr	r2, [r0, #12]
 80121f0:	4930      	ldr	r1, [pc, #192]	; (80122b4 <z_impl_k_mutex_lock+0xdc>)
 80121f2:	b15a      	cbz	r2, 801220c <z_impl_k_mutex_lock+0x34>
 80121f4:	6880      	ldr	r0, [r0, #8]
 80121f6:	688e      	ldr	r6, [r1, #8]
 80121f8:	42b0      	cmp	r0, r6
 80121fa:	d015      	beq.n	8012228 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
 80121fc:	b9b7      	cbnz	r7, 801222c <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
 80121fe:	f385 8811 	msr	BASEPRI, r5
 8012202:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
 8012206:	f06f 000f 	mvn.w	r0, #15
 801220a:	e00c      	b.n	8012226 <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
 801220c:	688b      	ldr	r3, [r1, #8]
 801220e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8012212:	6123      	str	r3, [r4, #16]
		mutex->lock_count++;
 8012214:	3201      	adds	r2, #1
		mutex->owner = _current;
 8012216:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
 8012218:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
 801221a:	60a3      	str	r3, [r4, #8]
 801221c:	f385 8811 	msr	BASEPRI, r5
 8012220:	f3bf 8f6f 	isb	sy
		return 0;
 8012224:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
 8012226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
 8012228:	6923      	ldr	r3, [r4, #16]
 801222a:	e7f2      	b.n	8012212 <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 801222c:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8012230:	f996 100e 	ldrsb.w	r1, [r6, #14]
 8012234:	4299      	cmp	r1, r3
 8012236:	bfa8      	it	ge
 8012238:	4619      	movge	r1, r3
 801223a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 801223e:	4299      	cmp	r1, r3
 8012240:	da2b      	bge.n	801229a <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
 8012242:	f000 fa89 	bl	8012758 <z_set_prio>
 8012246:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8012248:	463b      	mov	r3, r7
 801224a:	4622      	mov	r2, r4
 801224c:	4629      	mov	r1, r5
 801224e:	481a      	ldr	r0, [pc, #104]	; (80122b8 <z_impl_k_mutex_lock+0xe0>)
 8012250:	f000 fa40 	bl	80126d4 <z_pend_curr>
	if (got_mutex == 0) {
 8012254:	2800      	cmp	r0, #0
 8012256:	d0e6      	beq.n	8012226 <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
 8012258:	f04f 0310 	mov.w	r3, #16
 801225c:	f3ef 8511 	mrs	r5, BASEPRI
 8012260:	f383 8811 	msr	BASEPRI, r3
 8012264:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8012268:	6823      	ldr	r3, [r4, #0]
 801226a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801226c:	429c      	cmp	r4, r3
 801226e:	d007      	beq.n	8012280 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
 8012270:	b133      	cbz	r3, 8012280 <z_impl_k_mutex_lock+0xa8>
 8012272:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8012276:	4299      	cmp	r1, r3
 8012278:	bfa8      	it	ge
 801227a:	4619      	movge	r1, r3
 801227c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8012280:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
 8012282:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8012286:	4299      	cmp	r1, r3
 8012288:	d109      	bne.n	801229e <z_impl_k_mutex_lock+0xc6>
	if (resched) {
 801228a:	b16e      	cbz	r6, 80122a8 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
 801228c:	4629      	mov	r1, r5
 801228e:	480a      	ldr	r0, [pc, #40]	; (80122b8 <z_impl_k_mutex_lock+0xe0>)
 8012290:	f006 fac2 	bl	8018818 <z_reschedule>
	return -EAGAIN;
 8012294:	f06f 000a 	mvn.w	r0, #10
 8012298:	e7c5      	b.n	8012226 <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
 801229a:	2600      	movs	r6, #0
 801229c:	e7d4      	b.n	8012248 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
 801229e:	f000 fa5b 	bl	8012758 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 80122a2:	2800      	cmp	r0, #0
 80122a4:	d1f2      	bne.n	801228c <z_impl_k_mutex_lock+0xb4>
 80122a6:	e7f0      	b.n	801228a <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
 80122a8:	f385 8811 	msr	BASEPRI, r5
 80122ac:	f3bf 8f6f 	isb	sy
 80122b0:	e7f0      	b.n	8012294 <z_impl_k_mutex_lock+0xbc>
 80122b2:	bf00      	nop
 80122b4:	200018f8 	.word	0x200018f8
 80122b8:	20001d43 	.word	0x20001d43

080122bc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 80122bc:	b538      	push	{r3, r4, r5, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 80122be:	4b1d      	ldr	r3, [pc, #116]	; (8012334 <z_impl_k_mutex_unlock+0x78>)
 80122c0:	689a      	ldr	r2, [r3, #8]
 80122c2:	7bd3      	ldrb	r3, [r2, #15]
 80122c4:	3b01      	subs	r3, #1
 80122c6:	4604      	mov	r4, r0
 80122c8:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
 80122ca:	68c3      	ldr	r3, [r0, #12]
 80122cc:	2b01      	cmp	r3, #1
 80122ce:	d005      	beq.n	80122dc <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
 80122d0:	3b01      	subs	r3, #1
 80122d2:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
 80122d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sched_unlock();
 80122d8:	f000 b8ae 	b.w	8012438 <k_sched_unlock>
	__asm__ volatile(
 80122dc:	f04f 0310 	mov.w	r3, #16
 80122e0:	f3ef 8511 	mrs	r5, BASEPRI
 80122e4:	f383 8811 	msr	BASEPRI, r3
 80122e8:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 80122ec:	6901      	ldr	r1, [r0, #16]
 80122ee:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
 80122f0:	f990 300e 	ldrsb.w	r3, [r0, #14]
 80122f4:	4299      	cmp	r1, r3
 80122f6:	d001      	beq.n	80122fc <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
 80122f8:	f000 fa2e 	bl	8012758 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 80122fc:	4620      	mov	r0, r4
 80122fe:	f006 fb01 	bl	8018904 <z_unpend_first_thread>
	mutex->owner = new_owner;
 8012302:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8012304:	b180      	cbz	r0, 8012328 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
 8012306:	f990 200e 	ldrsb.w	r2, [r0, #14]
 801230a:	6122      	str	r2, [r4, #16]
 801230c:	2200      	movs	r2, #0
 801230e:	6602      	str	r2, [r0, #96]	; 0x60
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8012310:	7b42      	ldrb	r2, [r0, #13]
 8012312:	06d2      	lsls	r2, r2, #27
 8012314:	d103      	bne.n	801231e <z_impl_k_mutex_unlock+0x62>
	if (z_is_thread_ready(thread)) {
 8012316:	6983      	ldr	r3, [r0, #24]
 8012318:	b90b      	cbnz	r3, 801231e <z_impl_k_mutex_unlock+0x62>
		z_add_thread_to_ready_q(thread);
 801231a:	f000 f8a9 	bl	8012470 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
 801231e:	4629      	mov	r1, r5
 8012320:	4805      	ldr	r0, [pc, #20]	; (8012338 <z_impl_k_mutex_unlock+0x7c>)
 8012322:	f006 fa79 	bl	8018818 <z_reschedule>
 8012326:	e7d5      	b.n	80122d4 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
 8012328:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 801232a:	f385 8811 	msr	BASEPRI, r5
 801232e:	f3bf 8f6f 	isb	sy
 8012332:	e7cf      	b.n	80122d4 <z_impl_k_mutex_unlock+0x18>
 8012334:	200018f8 	.word	0x200018f8
 8012338:	20001d43 	.word	0x20001d43

0801233c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 801233c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 801233e:	4c08      	ldr	r4, [pc, #32]	; (8012360 <z_reset_time_slice+0x24>)
 8012340:	6823      	ldr	r3, [r4, #0]
 8012342:	b15b      	cbz	r3, 801235c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8012344:	f7f7 fb04 	bl	8009950 <z_clock_elapsed>
 8012348:	6823      	ldr	r3, [r4, #0]
 801234a:	4a06      	ldr	r2, [pc, #24]	; (8012364 <z_reset_time_slice+0x28>)
 801234c:	4418      	add	r0, r3
 801234e:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 8012350:	2100      	movs	r1, #0
 8012352:	4618      	mov	r0, r3
	}
}
 8012354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
 8012358:	f006 bc01 	b.w	8018b5e <z_set_timeout_expiry>
}
 801235c:	bd10      	pop	{r4, pc}
 801235e:	bf00      	nop
 8012360:	2000192c 	.word	0x2000192c
 8012364:	200018f8 	.word	0x200018f8

08012368 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
 8012368:	b510      	push	{r4, lr}
	__asm__ volatile(
 801236a:	f04f 0310 	mov.w	r3, #16
 801236e:	f3ef 8411 	mrs	r4, BASEPRI
 8012372:	f383 8811 	msr	BASEPRI, r3
 8012376:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 801237a:	4b08      	ldr	r3, [pc, #32]	; (801239c <k_sched_time_slice_set+0x34>)
 801237c:	2200      	movs	r2, #0
 801237e:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
 8012380:	4a07      	ldr	r2, [pc, #28]	; (80123a0 <k_sched_time_slice_set+0x38>)
			return ((u32_t)t) * (to_hz / from_hz);
 8012382:	230a      	movs	r3, #10
 8012384:	4343      	muls	r3, r0
 8012386:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 8012388:	4b06      	ldr	r3, [pc, #24]	; (80123a4 <k_sched_time_slice_set+0x3c>)
 801238a:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 801238c:	f7ff ffd6 	bl	801233c <z_reset_time_slice>
	__asm__ volatile(
 8012390:	f384 8811 	msr	BASEPRI, r4
 8012394:	f3bf 8f6f 	isb	sy
	}
}
 8012398:	bd10      	pop	{r4, pc}
 801239a:	bf00      	nop
 801239c:	200018f8 	.word	0x200018f8
 80123a0:	2000192c 	.word	0x2000192c
 80123a4:	20001928 	.word	0x20001928

080123a8 <k_sched_lock>:
	__asm__ volatile(
 80123a8:	f04f 0310 	mov.w	r3, #16
 80123ac:	f3ef 8111 	mrs	r1, BASEPRI
 80123b0:	f383 8811 	msr	BASEPRI, r3
 80123b4:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 80123b8:	4b04      	ldr	r3, [pc, #16]	; (80123cc <k_sched_lock+0x24>)
 80123ba:	689a      	ldr	r2, [r3, #8]
 80123bc:	7bd3      	ldrb	r3, [r2, #15]
 80123be:	3b01      	subs	r3, #1
 80123c0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80123c2:	f381 8811 	msr	BASEPRI, r1
 80123c6:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 80123ca:	4770      	bx	lr
 80123cc:	200018f8 	.word	0x200018f8

080123d0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 80123d0:	4b09      	ldr	r3, [pc, #36]	; (80123f8 <z_priq_dumb_remove+0x28>)
 80123d2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80123d6:	4282      	cmp	r2, r0
 80123d8:	d105      	bne.n	80123e6 <z_priq_dumb_remove+0x16>
 80123da:	689b      	ldr	r3, [r3, #8]
 80123dc:	428b      	cmp	r3, r1
 80123de:	d102      	bne.n	80123e6 <z_priq_dumb_remove+0x16>
 80123e0:	7b4b      	ldrb	r3, [r1, #13]
 80123e2:	06db      	lsls	r3, r3, #27
 80123e4:	d106      	bne.n	80123f4 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 80123e6:	e9d1 3200 	ldrd	r3, r2, [r1]
 80123ea:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 80123ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80123ee:	2300      	movs	r3, #0
	node->prev = NULL;
 80123f0:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 80123f4:	4770      	bx	lr
 80123f6:	bf00      	nop
 80123f8:	200018f8 	.word	0x200018f8

080123fc <update_cache>:
{
 80123fc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
 80123fe:	4c0d      	ldr	r4, [pc, #52]	; (8012434 <update_cache+0x38>)
{
 8012400:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
 8012402:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012406:	f006 fa46 	bl	8018896 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
 801240a:	4605      	mov	r5, r0
 801240c:	b900      	cbnz	r0, 8012410 <update_cache+0x14>
 801240e:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
 8012410:	68a3      	ldr	r3, [r4, #8]
 8012412:	b94a      	cbnz	r2, 8012428 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
 8012414:	7b5a      	ldrb	r2, [r3, #13]
 8012416:	06d2      	lsls	r2, r2, #27
 8012418:	d106      	bne.n	8012428 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 801241a:	69aa      	ldr	r2, [r5, #24]
 801241c:	b922      	cbnz	r2, 8012428 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
 801241e:	89da      	ldrh	r2, [r3, #14]
 8012420:	2a7f      	cmp	r2, #127	; 0x7f
 8012422:	d901      	bls.n	8012428 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
 8012424:	6223      	str	r3, [r4, #32]
}
 8012426:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
 8012428:	429d      	cmp	r5, r3
 801242a:	d001      	beq.n	8012430 <update_cache+0x34>
			z_reset_time_slice();
 801242c:	f7ff ff86 	bl	801233c <z_reset_time_slice>
		_kernel.ready_q.cache = th;
 8012430:	6225      	str	r5, [r4, #32]
}
 8012432:	e7f8      	b.n	8012426 <update_cache+0x2a>
 8012434:	200018f8 	.word	0x200018f8

08012438 <k_sched_unlock>:
{
 8012438:	b510      	push	{r4, lr}
	__asm__ volatile(
 801243a:	f04f 0310 	mov.w	r3, #16
 801243e:	f3ef 8411 	mrs	r4, BASEPRI
 8012442:	f383 8811 	msr	BASEPRI, r3
 8012446:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 801244a:	4b08      	ldr	r3, [pc, #32]	; (801246c <k_sched_unlock+0x34>)
 801244c:	689a      	ldr	r2, [r3, #8]
 801244e:	7bd3      	ldrb	r3, [r2, #15]
 8012450:	3301      	adds	r3, #1
 8012452:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8012454:	2000      	movs	r0, #0
 8012456:	f7ff ffd1 	bl	80123fc <update_cache>
	__asm__ volatile(
 801245a:	f384 8811 	msr	BASEPRI, r4
 801245e:	f3bf 8f6f 	isb	sy
}
 8012462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8012466:	f006 b9ee 	b.w	8018846 <z_reschedule_unlocked>
 801246a:	bf00      	nop
 801246c:	200018f8 	.word	0x200018f8

08012470 <z_add_thread_to_ready_q>:
{
 8012470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8012472:	f04f 0310 	mov.w	r3, #16
 8012476:	f3ef 8411 	mrs	r4, BASEPRI
 801247a:	f383 8811 	msr	BASEPRI, r3
 801247e:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8012482:	4a15      	ldr	r2, [pc, #84]	; (80124d8 <z_add_thread_to_ready_q+0x68>)
 8012484:	4611      	mov	r1, r2
 8012486:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801248a:	428b      	cmp	r3, r1
 801248c:	d01d      	beq.n	80124ca <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801248e:	b1e3      	cbz	r3, 80124ca <z_add_thread_to_ready_q+0x5a>
 8012490:	6a96      	ldr	r6, [r2, #40]	; 0x28
	if (t1->base.prio < t2->base.prio) {
 8012492:	f990 500e 	ldrsb.w	r5, [r0, #14]
 8012496:	f993 700e 	ldrsb.w	r7, [r3, #14]
 801249a:	42af      	cmp	r7, r5
 801249c:	dd10      	ble.n	80124c0 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
 801249e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80124a0:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 80124a4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80124a6:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 80124a8:	7b43      	ldrb	r3, [r0, #13]
 80124aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124ae:	7343      	strb	r3, [r0, #13]
		update_cache(0);
 80124b0:	2000      	movs	r0, #0
 80124b2:	f7ff ffa3 	bl	80123fc <update_cache>
	__asm__ volatile(
 80124b6:	f384 8811 	msr	BASEPRI, r4
 80124ba:	f3bf 8f6f 	isb	sy
}
 80124be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 80124c0:	42b3      	cmp	r3, r6
 80124c2:	d002      	beq.n	80124ca <z_add_thread_to_ready_q+0x5a>
 80124c4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d1e5      	bne.n	8012496 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
 80124ca:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80124cc:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
 80124ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->next = list;
 80124d0:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
 80124d2:	6018      	str	r0, [r3, #0]
	list->tail = node;
 80124d4:	6290      	str	r0, [r2, #40]	; 0x28
 80124d6:	e7e7      	b.n	80124a8 <z_add_thread_to_ready_q+0x38>
 80124d8:	200018f8 	.word	0x200018f8

080124dc <z_move_thread_to_end_of_prio_q>:
{
 80124dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124de:	4604      	mov	r4, r0
	__asm__ volatile(
 80124e0:	f04f 0310 	mov.w	r3, #16
 80124e4:	f3ef 8511 	mrs	r5, BASEPRI
 80124e8:	f383 8811 	msr	BASEPRI, r3
 80124ec:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80124f0:	7b43      	ldrb	r3, [r0, #13]
 80124f2:	065a      	lsls	r2, r3, #25
 80124f4:	d503      	bpl.n	80124fe <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 80124f6:	4601      	mov	r1, r0
 80124f8:	4817      	ldr	r0, [pc, #92]	; (8012558 <z_move_thread_to_end_of_prio_q+0x7c>)
 80124fa:	f7ff ff69 	bl	80123d0 <z_priq_dumb_remove>
	return list->head == list;
 80124fe:	4a17      	ldr	r2, [pc, #92]	; (801255c <z_move_thread_to_end_of_prio_q+0x80>)
 8012500:	e9d2 3009 	ldrd	r3, r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012504:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8012508:	428b      	cmp	r3, r1
 801250a:	d01f      	beq.n	801254c <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801250c:	b1f3      	cbz	r3, 801254c <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
 801250e:	f994 600e 	ldrsb.w	r6, [r4, #14]
 8012512:	f993 700e 	ldrsb.w	r7, [r3, #14]
 8012516:	42b7      	cmp	r7, r6
 8012518:	dd13      	ble.n	8012542 <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
 801251a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 801251c:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
 8012520:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 8012522:	605c      	str	r4, [r3, #4]
 8012524:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
 8012526:	6890      	ldr	r0, [r2, #8]
 8012528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801252c:	7363      	strb	r3, [r4, #13]
 801252e:	1b03      	subs	r3, r0, r4
 8012530:	4258      	negs	r0, r3
 8012532:	4158      	adcs	r0, r3
 8012534:	f7ff ff62 	bl	80123fc <update_cache>
	__asm__ volatile(
 8012538:	f385 8811 	msr	BASEPRI, r5
 801253c:	f3bf 8f6f 	isb	sy
}
 8012540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 8012542:	4283      	cmp	r3, r0
 8012544:	d002      	beq.n	801254c <z_move_thread_to_end_of_prio_q+0x70>
 8012546:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8012548:	2b00      	cmp	r3, #0
 801254a:	d1e2      	bne.n	8012512 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
 801254c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
 8012550:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8012552:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8012554:	6294      	str	r4, [r2, #40]	; 0x28
 8012556:	e7e5      	b.n	8012524 <z_move_thread_to_end_of_prio_q+0x48>
 8012558:	2000191c 	.word	0x2000191c
 801255c:	200018f8 	.word	0x200018f8

08012560 <z_time_slice>:
	if (pending_current == _current) {
 8012560:	4a15      	ldr	r2, [pc, #84]	; (80125b8 <z_time_slice+0x58>)
 8012562:	4916      	ldr	r1, [pc, #88]	; (80125bc <z_time_slice+0x5c>)
{
 8012564:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
 8012566:	680c      	ldr	r4, [r1, #0]
 8012568:	6893      	ldr	r3, [r2, #8]
 801256a:	42a3      	cmp	r3, r4
 801256c:	4614      	mov	r4, r2
 801256e:	d103      	bne.n	8012578 <z_time_slice+0x18>
}
 8012570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
 8012574:	f7ff bee2 	b.w	801233c <z_reset_time_slice>
	pending_current = NULL;
 8012578:	2500      	movs	r5, #0
 801257a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
 801257c:	4910      	ldr	r1, [pc, #64]	; (80125c0 <z_time_slice+0x60>)
 801257e:	6809      	ldr	r1, [r1, #0]
 8012580:	b1b9      	cbz	r1, 80125b2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
 8012582:	89d9      	ldrh	r1, [r3, #14]
 8012584:	297f      	cmp	r1, #127	; 0x7f
 8012586:	d814      	bhi.n	80125b2 <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
 8012588:	490e      	ldr	r1, [pc, #56]	; (80125c4 <z_time_slice+0x64>)
 801258a:	f993 500e 	ldrsb.w	r5, [r3, #14]
 801258e:	6809      	ldr	r1, [r1, #0]
 8012590:	428d      	cmp	r5, r1
 8012592:	db0e      	blt.n	80125b2 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
 8012594:	490c      	ldr	r1, [pc, #48]	; (80125c8 <z_time_slice+0x68>)
 8012596:	428b      	cmp	r3, r1
 8012598:	d00b      	beq.n	80125b2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
 801259a:	6999      	ldr	r1, [r3, #24]
 801259c:	b949      	cbnz	r1, 80125b2 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
 801259e:	6911      	ldr	r1, [r2, #16]
 80125a0:	4281      	cmp	r1, r0
 80125a2:	dc03      	bgt.n	80125ac <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7ff ff99 	bl	80124dc <z_move_thread_to_end_of_prio_q>
 80125aa:	e7e1      	b.n	8012570 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
 80125ac:	1a09      	subs	r1, r1, r0
 80125ae:	6111      	str	r1, [r2, #16]
}
 80125b0:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
 80125b2:	2300      	movs	r3, #0
 80125b4:	6123      	str	r3, [r4, #16]
 80125b6:	e7fb      	b.n	80125b0 <z_time_slice+0x50>
 80125b8:	200018f8 	.word	0x200018f8
 80125bc:	20001924 	.word	0x20001924
 80125c0:	2000192c 	.word	0x2000192c
 80125c4:	20001928 	.word	0x20001928
 80125c8:	2000100c 	.word	0x2000100c

080125cc <z_remove_thread_from_ready_q>:
{
 80125cc:	b538      	push	{r3, r4, r5, lr}
 80125ce:	4604      	mov	r4, r0
	__asm__ volatile(
 80125d0:	f04f 0310 	mov.w	r3, #16
 80125d4:	f3ef 8511 	mrs	r5, BASEPRI
 80125d8:	f383 8811 	msr	BASEPRI, r3
 80125dc:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80125e0:	7b43      	ldrb	r3, [r0, #13]
 80125e2:	065a      	lsls	r2, r3, #25
 80125e4:	d507      	bpl.n	80125f6 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 80125e6:	4601      	mov	r1, r0
 80125e8:	4809      	ldr	r0, [pc, #36]	; (8012610 <z_remove_thread_from_ready_q+0x44>)
 80125ea:	f7ff fef1 	bl	80123d0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 80125ee:	7b63      	ldrb	r3, [r4, #13]
 80125f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80125f4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 80125f6:	4b07      	ldr	r3, [pc, #28]	; (8012614 <z_remove_thread_from_ready_q+0x48>)
 80125f8:	6898      	ldr	r0, [r3, #8]
 80125fa:	1b03      	subs	r3, r0, r4
 80125fc:	4258      	negs	r0, r3
 80125fe:	4158      	adcs	r0, r3
 8012600:	f7ff fefc 	bl	80123fc <update_cache>
	__asm__ volatile(
 8012604:	f385 8811 	msr	BASEPRI, r5
 8012608:	f3bf 8f6f 	isb	sy
}
 801260c:	bd38      	pop	{r3, r4, r5, pc}
 801260e:	bf00      	nop
 8012610:	2000191c 	.word	0x2000191c
 8012614:	200018f8 	.word	0x200018f8

08012618 <pend>:
{
 8012618:	b570      	push	{r4, r5, r6, lr}
 801261a:	4604      	mov	r4, r0
 801261c:	460d      	mov	r5, r1
 801261e:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
 8012620:	f7ff ffd4 	bl	80125cc <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
 8012624:	7b63      	ldrb	r3, [r4, #13]
 8012626:	f043 0302 	orr.w	r3, r3, #2
 801262a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 801262c:	b17d      	cbz	r5, 801264e <pend+0x36>
	return list->head == list;
 801262e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8012630:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012632:	429d      	cmp	r5, r3
 8012634:	d01f      	beq.n	8012676 <pend+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8012636:	b1f3      	cbz	r3, 8012676 <pend+0x5e>
	if (t1->base.prio < t2->base.prio) {
 8012638:	f994 200e 	ldrsb.w	r2, [r4, #14]
 801263c:	f993 100e 	ldrsb.w	r1, [r3, #14]
 8012640:	4291      	cmp	r1, r2
 8012642:	dd12      	ble.n	801266a <pend+0x52>
	node->prev = successor->prev;
 8012644:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8012646:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
 801264a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 801264c:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
 801264e:	1c73      	adds	r3, r6, #1
 8012650:	d018      	beq.n	8012684 <pend+0x6c>
		ticks = _TICK_ALIGN + k_ms_to_ticks_ceil32(timeout);
 8012652:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8012656:	220a      	movs	r2, #10
 8012658:	4372      	muls	r2, r6

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 801265a:	f104 0018 	add.w	r0, r4, #24
 801265e:	3201      	adds	r2, #1
 8012660:	4909      	ldr	r1, [pc, #36]	; (8012688 <pend+0x70>)
}
 8012662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012666:	f000 bb3b 	b.w	8012ce0 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
 801266a:	6869      	ldr	r1, [r5, #4]
 801266c:	428b      	cmp	r3, r1
 801266e:	d002      	beq.n	8012676 <pend+0x5e>
 8012670:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8012672:	2b00      	cmp	r3, #0
 8012674:	d1e2      	bne.n	801263c <pend+0x24>
	node->prev = list->tail;
 8012676:	686b      	ldr	r3, [r5, #4]
 8012678:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 801267a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
 801267c:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
 801267e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8012680:	606c      	str	r4, [r5, #4]
 8012682:	e7e4      	b.n	801264e <pend+0x36>
}
 8012684:	bd70      	pop	{r4, r5, r6, pc}
 8012686:	bf00      	nop
 8012688:	080188a3 	.word	0x080188a3

0801268c <z_pend_curr_irqlock>:
{
 801268c:	b570      	push	{r4, r5, r6, lr}
	pend(_current, wait_q, timeout);
 801268e:	4d0f      	ldr	r5, [pc, #60]	; (80126cc <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
 8012690:	4c0f      	ldr	r4, [pc, #60]	; (80126d0 <z_pend_curr_irqlock+0x44>)
{
 8012692:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
 8012694:	68a8      	ldr	r0, [r5, #8]
 8012696:	f7ff ffbf 	bl	8012618 <pend>
	pending_current = _current;
 801269a:	68ab      	ldr	r3, [r5, #8]
 801269c:	6023      	str	r3, [r4, #0]
 801269e:	4630      	mov	r0, r6
 80126a0:	f7f7 f998 	bl	80099d4 <arch_swap>
	__asm__ volatile(
 80126a4:	f04f 0210 	mov.w	r2, #16
 80126a8:	f3ef 8311 	mrs	r3, BASEPRI
 80126ac:	f382 8811 	msr	BASEPRI, r2
 80126b0:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
 80126b4:	6822      	ldr	r2, [r4, #0]
 80126b6:	68a9      	ldr	r1, [r5, #8]
 80126b8:	4291      	cmp	r1, r2
			pending_current = NULL;
 80126ba:	bf04      	itt	eq
 80126bc:	2200      	moveq	r2, #0
 80126be:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
 80126c0:	f383 8811 	msr	BASEPRI, r3
 80126c4:	f3bf 8f6f 	isb	sy
}
 80126c8:	bd70      	pop	{r4, r5, r6, pc}
 80126ca:	bf00      	nop
 80126cc:	200018f8 	.word	0x200018f8
 80126d0:	20001924 	.word	0x20001924

080126d4 <z_pend_curr>:
{
 80126d4:	b510      	push	{r4, lr}
 80126d6:	460c      	mov	r4, r1
 80126d8:	4611      	mov	r1, r2
	pending_current = _current;
 80126da:	4a06      	ldr	r2, [pc, #24]	; (80126f4 <z_pend_curr+0x20>)
 80126dc:	6890      	ldr	r0, [r2, #8]
 80126de:	4a06      	ldr	r2, [pc, #24]	; (80126f8 <z_pend_curr+0x24>)
 80126e0:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
 80126e2:	461a      	mov	r2, r3
 80126e4:	f7ff ff98 	bl	8012618 <pend>
 80126e8:	4620      	mov	r0, r4
}
 80126ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126ee:	f7f7 b971 	b.w	80099d4 <arch_swap>
 80126f2:	bf00      	nop
 80126f4:	200018f8 	.word	0x200018f8
 80126f8:	20001924 	.word	0x20001924

080126fc <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
 80126fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
 80126fe:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
 8012700:	f006 fa47 	bl	8018b92 <z_tick_get_32>
 8012704:	1834      	adds	r4, r6, r0
	__asm__ volatile(
 8012706:	f04f 0310 	mov.w	r3, #16
 801270a:	f3ef 8711 	mrs	r7, BASEPRI
 801270e:	f383 8811 	msr	BASEPRI, r3
 8012712:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8012716:	4d0d      	ldr	r5, [pc, #52]	; (801274c <z_tick_sleep.part.19+0x50>)
 8012718:	4b0d      	ldr	r3, [pc, #52]	; (8012750 <z_tick_sleep.part.19+0x54>)
 801271a:	68a8      	ldr	r0, [r5, #8]
 801271c:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
 801271e:	f7ff ff55 	bl	80125cc <z_remove_thread_from_ready_q>
 8012722:	68a8      	ldr	r0, [r5, #8]
 8012724:	490b      	ldr	r1, [pc, #44]	; (8012754 <z_tick_sleep.part.19+0x58>)
 8012726:	4632      	mov	r2, r6
 8012728:	3018      	adds	r0, #24
 801272a:	f000 fad9 	bl	8012ce0 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
 801272e:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8012730:	7b53      	ldrb	r3, [r2, #13]
 8012732:	f043 0310 	orr.w	r3, r3, #16
 8012736:	7353      	strb	r3, [r2, #13]
 8012738:	4638      	mov	r0, r7
 801273a:	f7f7 f94b 	bl	80099d4 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
 801273e:	f006 fa28 	bl	8018b92 <z_tick_get_32>
 8012742:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
 8012744:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8012748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801274a:	bf00      	nop
 801274c:	200018f8 	.word	0x200018f8
 8012750:	20001924 	.word	0x20001924
 8012754:	080188a3 	.word	0x080188a3

08012758 <z_set_prio>:
{
 8012758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801275c:	4604      	mov	r4, r0
 801275e:	f04f 0310 	mov.w	r3, #16
 8012762:	f3ef 8911 	mrs	r9, BASEPRI
 8012766:	f383 8811 	msr	BASEPRI, r3
 801276a:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
 801276e:	f006 f818 	bl	80187a2 <z_is_thread_ready>
		if (need_sched) {
 8012772:	b24e      	sxtb	r6, r1
 8012774:	4680      	mov	r8, r0
 8012776:	b360      	cbz	r0, 80127d2 <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
 8012778:	4d17      	ldr	r5, [pc, #92]	; (80127d8 <z_set_prio+0x80>)
 801277a:	f105 0724 	add.w	r7, r5, #36	; 0x24
 801277e:	4621      	mov	r1, r4
 8012780:	4638      	mov	r0, r7
 8012782:	f7ff fe25 	bl	80123d0 <z_priq_dumb_remove>
	return list->head == list;
 8012786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				thread->base.prio = prio;
 8012788:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801278a:	42bb      	cmp	r3, r7
 801278c:	462a      	mov	r2, r5
 801278e:	d019      	beq.n	80127c4 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8012790:	b1c3      	cbz	r3, 80127c4 <z_set_prio+0x6c>
 8012792:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	if (t1->base.prio < t2->base.prio) {
 8012794:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8012798:	42b0      	cmp	r0, r6
 801279a:	dd0e      	ble.n	80127ba <z_set_prio+0x62>
	node->prev = successor->prev;
 801279c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 801279e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
 80127a2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 80127a4:	605c      	str	r4, [r3, #4]
			update_cache(1);
 80127a6:	2001      	movs	r0, #1
 80127a8:	f7ff fe28 	bl	80123fc <update_cache>
	__asm__ volatile(
 80127ac:	f389 8811 	msr	BASEPRI, r9
 80127b0:	f3bf 8f6f 	isb	sy
}
 80127b4:	4640      	mov	r0, r8
 80127b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
 80127ba:	4299      	cmp	r1, r3
 80127bc:	d002      	beq.n	80127c4 <z_set_prio+0x6c>
 80127be:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d1e7      	bne.n	8012794 <z_set_prio+0x3c>
	node->prev = list->tail;
 80127c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80127c6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 80127c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->next = list;
 80127ca:	6027      	str	r7, [r4, #0]
	list->tail->next = node;
 80127cc:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80127ce:	6294      	str	r4, [r2, #40]	; 0x28
 80127d0:	e7e9      	b.n	80127a6 <z_set_prio+0x4e>
			thread->base.prio = prio;
 80127d2:	73a6      	strb	r6, [r4, #14]
 80127d4:	e7ea      	b.n	80127ac <z_set_prio+0x54>
 80127d6:	bf00      	nop
 80127d8:	200018f8 	.word	0x200018f8

080127dc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 80127dc:	4b04      	ldr	r3, [pc, #16]	; (80127f0 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 80127de:	2100      	movs	r1, #0
 80127e0:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
 80127e4:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 80127e8:	4608      	mov	r0, r1
 80127ea:	f7ff bdbd 	b.w	8012368 <k_sched_time_slice_set>
 80127ee:	bf00      	nop
 80127f0:	200018f8 	.word	0x200018f8

080127f4 <z_impl_k_yield>:
{
 80127f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
 80127f6:	4c23      	ldr	r4, [pc, #140]	; (8012884 <z_impl_k_yield+0x90>)
 80127f8:	4b23      	ldr	r3, [pc, #140]	; (8012888 <z_impl_k_yield+0x94>)
 80127fa:	68a2      	ldr	r2, [r4, #8]
 80127fc:	429a      	cmp	r2, r3
 80127fe:	d029      	beq.n	8012854 <z_impl_k_yield+0x60>
	__asm__ volatile(
 8012800:	f04f 0310 	mov.w	r3, #16
 8012804:	f3ef 8611 	mrs	r6, BASEPRI
 8012808:	f383 8811 	msr	BASEPRI, r3
 801280c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
 8012810:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8012814:	68a1      	ldr	r1, [r4, #8]
 8012816:	4628      	mov	r0, r5
 8012818:	f7ff fdda 	bl	80123d0 <z_priq_dumb_remove>
	return list->head == list;
 801281c:	6a62      	ldr	r2, [r4, #36]	; 0x24
			_priq_run_add(&_kernel.ready_q.runq, _current);
 801281e:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012820:	42aa      	cmp	r2, r5
 8012822:	d028      	beq.n	8012876 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8012824:	b33a      	cbz	r2, 8012876 <z_impl_k_yield+0x82>
 8012826:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	if (t1->base.prio < t2->base.prio) {
 8012828:	f993 100e 	ldrsb.w	r1, [r3, #14]
 801282c:	f992 700e 	ldrsb.w	r7, [r2, #14]
 8012830:	428f      	cmp	r7, r1
 8012832:	dd1b      	ble.n	801286c <z_impl_k_yield+0x78>
	node->prev = successor->prev;
 8012834:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8012836:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
 801283a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 801283c:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
 801283e:	7b5a      	ldrb	r2, [r3, #13]
 8012840:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012844:	735a      	strb	r2, [r3, #13]
			update_cache(1);
 8012846:	2001      	movs	r0, #1
 8012848:	f7ff fdd8 	bl	80123fc <update_cache>
	__asm__ volatile(
 801284c:	f386 8811 	msr	BASEPRI, r6
 8012850:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8012854:	f04f 0310 	mov.w	r3, #16
 8012858:	f3ef 8011 	mrs	r0, BASEPRI
 801285c:	f383 8811 	msr	BASEPRI, r3
 8012860:	f3bf 8f6f 	isb	sy
}
 8012864:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012868:	f7f7 b8b4 	b.w	80099d4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 801286c:	4282      	cmp	r2, r0
 801286e:	d002      	beq.n	8012876 <z_impl_k_yield+0x82>
 8012870:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8012872:	2a00      	cmp	r2, #0
 8012874:	d1da      	bne.n	801282c <z_impl_k_yield+0x38>
	node->prev = list->tail;
 8012876:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8012878:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
 801287a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	node->next = list;
 801287c:	601d      	str	r5, [r3, #0]
	list->tail->next = node;
 801287e:	6013      	str	r3, [r2, #0]
	list->tail = node;
 8012880:	62a3      	str	r3, [r4, #40]	; 0x28
 8012882:	e7dc      	b.n	801283e <z_impl_k_yield+0x4a>
 8012884:	200018f8 	.word	0x200018f8
 8012888:	2000100c 	.word	0x2000100c

0801288c <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
 801288c:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (ms == K_FOREVER) {
 801288e:	1c43      	adds	r3, r0, #1
{
 8012890:	4605      	mov	r5, r0
	if (ms == K_FOREVER) {
 8012892:	d105      	bne.n	80128a0 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
 8012894:	4b0b      	ldr	r3, [pc, #44]	; (80128c4 <z_impl_k_sleep+0x38>)
 8012896:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8012898:	f000 f922 	bl	8012ae0 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
 801289c:	4628      	mov	r0, r5
 801289e:	bd38      	pop	{r3, r4, r5, pc}
 80128a0:	240a      	movs	r4, #10
	if (ticks == 0) {
 80128a2:	4344      	muls	r4, r0
 80128a4:	d109      	bne.n	80128ba <z_impl_k_sleep+0x2e>
	z_impl_k_yield();
 80128a6:	f7ff ffa5 	bl	80127f4 <z_impl_k_yield>
			return t / (from_hz / to_hz);
 80128aa:	220a      	movs	r2, #10
 80128ac:	2300      	movs	r3, #0
 80128ae:	4620      	mov	r0, r4
 80128b0:	17e1      	asrs	r1, r4, #31
 80128b2:	f7ef f9e7 	bl	8001c84 <__aeabi_uldivmod>
 80128b6:	4605      	mov	r5, r0
	return k_ticks_to_ms_floor64(ticks);
 80128b8:	e7f0      	b.n	801289c <z_impl_k_sleep+0x10>
 80128ba:	4620      	mov	r0, r4
 80128bc:	f7ff ff1e 	bl	80126fc <z_tick_sleep.part.19>
 80128c0:	4604      	mov	r4, r0
 80128c2:	e7f2      	b.n	80128aa <z_impl_k_sleep+0x1e>
 80128c4:	200018f8 	.word	0x200018f8

080128c8 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
 80128c8:	4b01      	ldr	r3, [pc, #4]	; (80128d0 <z_impl_k_current_get+0x8>)
 80128ca:	6898      	ldr	r0, [r3, #8]
 80128cc:	4770      	bx	lr
 80128ce:	bf00      	nop
 80128d0:	200018f8 	.word	0x200018f8

080128d4 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 80128d4:	b570      	push	{r4, r5, r6, lr}
 80128d6:	4604      	mov	r4, r0
 80128d8:	f04f 0310 	mov.w	r3, #16
 80128dc:	f3ef 8611 	mrs	r6, BASEPRI
 80128e0:	f383 8811 	msr	BASEPRI, r3
 80128e4:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
 80128e8:	f006 f80c 	bl	8018904 <z_unpend_first_thread>
	if (thread != NULL) {
 80128ec:	4605      	mov	r5, r0
 80128ee:	b170      	cbz	r0, 801290e <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80128f0:	7b43      	ldrb	r3, [r0, #13]
 80128f2:	06db      	lsls	r3, r3, #27
 80128f4:	d103      	bne.n	80128fe <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
 80128f6:	6983      	ldr	r3, [r0, #24]
 80128f8:	b90b      	cbnz	r3, 80128fe <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
 80128fa:	f7ff fdb9 	bl	8012470 <z_add_thread_to_ready_q>
 80128fe:	2300      	movs	r3, #0
 8012900:	662b      	str	r3, [r5, #96]	; 0x60
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
 8012902:	4631      	mov	r1, r6
 8012904:	4808      	ldr	r0, [pc, #32]	; (8012928 <z_impl_k_sem_give+0x54>)
}
 8012906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
 801290a:	f005 bf85 	b.w	8018818 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
 801290e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8012912:	429a      	cmp	r2, r3
 8012914:	bf18      	it	ne
 8012916:	3301      	addne	r3, #1
 8012918:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 801291a:	2102      	movs	r1, #2
 801291c:	f104 0010 	add.w	r0, r4, #16
 8012920:	f006 fa68 	bl	8018df4 <z_handle_obj_poll_events>
 8012924:	e7ed      	b.n	8012902 <z_impl_k_sem_give+0x2e>
 8012926:	bf00      	nop
 8012928:	20001d43 	.word	0x20001d43

0801292c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
 801292c:	b410      	push	{r4}
 801292e:	4602      	mov	r2, r0
 8012930:	460b      	mov	r3, r1
 8012932:	f04f 0010 	mov.w	r0, #16
 8012936:	f3ef 8111 	mrs	r1, BASEPRI
 801293a:	f380 8811 	msr	BASEPRI, r0
 801293e:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
 8012942:	6894      	ldr	r4, [r2, #8]
 8012944:	b14c      	cbz	r4, 801295a <z_impl_k_sem_take+0x2e>
		sem->count--;
 8012946:	3c01      	subs	r4, #1
 8012948:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
 801294a:	f381 8811 	msr	BASEPRI, r1
 801294e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
 8012952:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
 8012954:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012958:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
 801295a:	b933      	cbnz	r3, 801296a <z_impl_k_sem_take+0x3e>
 801295c:	f381 8811 	msr	BASEPRI, r1
 8012960:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 8012964:	f06f 000f 	mvn.w	r0, #15
 8012968:	e7f4      	b.n	8012954 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 801296a:	4802      	ldr	r0, [pc, #8]	; (8012974 <z_impl_k_sem_take+0x48>)
}
 801296c:	f85d 4b04 	ldr.w	r4, [sp], #4
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8012970:	f7ff beb0 	b.w	80126d4 <z_pend_curr>
 8012974:	20001d43 	.word	0x20001d43

08012978 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
 8012978:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
 801297a:	4c08      	ldr	r4, [pc, #32]	; (801299c <k_sys_work_q_init+0x24>)
 801297c:	4908      	ldr	r1, [pc, #32]	; (80129a0 <k_sys_work_q_init+0x28>)
 801297e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012986:	4620      	mov	r0, r4
 8012988:	f000 f912 	bl	8012bb0 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
 801298c:	4905      	ldr	r1, [pc, #20]	; (80129a4 <k_sys_work_q_init+0x2c>)
 801298e:	f104 0010 	add.w	r0, r4, #16
 8012992:	f006 f812 	bl	80189ba <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
 8012996:	2000      	movs	r0, #0
 8012998:	bd10      	pop	{r4, pc}
 801299a:	bf00      	nop
 801299c:	20001930 	.word	0x20001930
 80129a0:	20004318 	.word	0x20004318
 80129a4:	0801d794 	.word	0x0801d794

080129a8 <z_impl_k_busy_wait>:
{
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	/* use 64-bit math to prevent overflow when multiplying */
	u32_t cycles_to_wait = (u32_t)(
		(u64_t)usec_to_wait *
		(u64_t)sys_clock_hw_cycles_per_sec() /
 80129a8:	4908      	ldr	r1, [pc, #32]	; (80129cc <z_impl_k_busy_wait+0x24>)
 80129aa:	4a09      	ldr	r2, [pc, #36]	; (80129d0 <z_impl_k_busy_wait+0x28>)
{
 80129ac:	b538      	push	{r3, r4, r5, lr}
		(u64_t)sys_clock_hw_cycles_per_sec() /
 80129ae:	fba0 0101 	umull	r0, r1, r0, r1
 80129b2:	2300      	movs	r3, #0
 80129b4:	f7ef f966 	bl	8001c84 <__aeabi_uldivmod>
 80129b8:	4604      	mov	r4, r0
 80129ba:	f7f6 ffe7 	bl	800998c <z_timer_cycle_get_32>
 80129be:	4605      	mov	r5, r0
 80129c0:	f7f6 ffe4 	bl	800998c <z_timer_cycle_get_32>

	for (;;) {
		u32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 80129c4:	1b40      	subs	r0, r0, r5
 80129c6:	42a0      	cmp	r0, r4
 80129c8:	d3fa      	bcc.n	80129c0 <z_impl_k_busy_wait+0x18>
		}
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
}
 80129ca:	bd38      	pop	{r3, r4, r5, pc}
 80129cc:	044aa200 	.word	0x044aa200
 80129d0:	000f4240 	.word	0x000f4240

080129d4 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
 80129d4:	b510      	push	{r4, lr}
 80129d6:	4602      	mov	r2, r0
	__asm__ volatile(
 80129d8:	f04f 0310 	mov.w	r3, #16
 80129dc:	f3ef 8411 	mrs	r4, BASEPRI
 80129e0:	f383 8811 	msr	BASEPRI, r3
 80129e4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
 80129e8:	7b43      	ldrb	r3, [r0, #13]
 80129ea:	0759      	lsls	r1, r3, #29
 80129ec:	d404      	bmi.n	80129f8 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
 80129ee:	f384 8811 	msr	BASEPRI, r4
 80129f2:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
 80129f6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80129f8:	f023 0304 	bic.w	r3, r3, #4
 80129fc:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
 80129fe:	f005 ffcd 	bl	801899c <z_is_thread_ready>
 8012a02:	b110      	cbz	r0, 8012a0a <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
 8012a04:	4610      	mov	r0, r2
 8012a06:	f7ff fd33 	bl	8012470 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
 8012a0a:	4621      	mov	r1, r4
 8012a0c:	4802      	ldr	r0, [pc, #8]	; (8012a18 <z_impl_k_thread_start+0x44>)
}
 8012a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
 8012a12:	f005 bf01 	b.w	8018818 <z_reschedule>
 8012a16:	bf00      	nop
 8012a18:	20001d43 	.word	0x20001d43

08012a1c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
 8012a1c:	b530      	push	{r4, r5, lr}
 8012a1e:	b087      	sub	sp, #28
 8012a20:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8012a22:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8012a24:	9504      	str	r5, [sp, #16]
 8012a26:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012a28:	9503      	str	r5, [sp, #12]
 8012a2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012a2c:	9502      	str	r5, [sp, #8]
 8012a2e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8012a30:	9501      	str	r5, [sp, #4]
 8012a32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012a34:	9500      	str	r5, [sp, #0]
 8012a36:	f7f7 f843 	bl	8009ac0 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 8012a3a:	4b03      	ldr	r3, [pc, #12]	; (8012a48 <z_setup_new_thread+0x2c>)
 8012a3c:	689b      	ldr	r3, [r3, #8]
 8012a3e:	b103      	cbz	r3, 8012a42 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 8012a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a42:	65a3      	str	r3, [r4, #88]	; 0x58
	sys_trace_thread_create(new_thread);
}
 8012a44:	b007      	add	sp, #28
 8012a46:	bd30      	pop	{r4, r5, pc}
 8012a48:	200018f8 	.word	0x200018f8

08012a4c <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
 8012a4c:	b570      	push	{r4, r5, r6, lr}
 8012a4e:	b086      	sub	sp, #24
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8012a50:	2600      	movs	r6, #0
 8012a52:	9605      	str	r6, [sp, #20]
 8012a54:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012a56:	9604      	str	r6, [sp, #16]
 8012a58:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8012a5a:	9603      	str	r6, [sp, #12]
 8012a5c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012a5e:	9602      	str	r6, [sp, #8]
 8012a60:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
 8012a62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8012a64:	9601      	str	r6, [sp, #4]
 8012a66:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012a68:	9600      	str	r6, [sp, #0]
{
 8012a6a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8012a6c:	f7ff ffd6 	bl	8012a1c <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
 8012a70:	1c6b      	adds	r3, r5, #1
 8012a72:	d003      	beq.n	8012a7c <z_impl_k_thread_create+0x30>
	if (delay == 0) {
 8012a74:	b92d      	cbnz	r5, 8012a82 <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
 8012a76:	4620      	mov	r0, r4
 8012a78:	f7ff ffac 	bl	80129d4 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	b006      	add	sp, #24
 8012a80:	bd70      	pop	{r4, r5, r6, pc}
			return ((u32_t)t) * (to_hz / from_hz);
 8012a82:	220a      	movs	r2, #10
 8012a84:	436a      	muls	r2, r5
 8012a86:	3201      	adds	r2, #1
 8012a88:	4902      	ldr	r1, [pc, #8]	; (8012a94 <z_impl_k_thread_create+0x48>)
 8012a8a:	f104 0018 	add.w	r0, r4, #24
 8012a8e:	f000 f927 	bl	8012ce0 <z_add_timeout>
 8012a92:	e7f3      	b.n	8012a7c <z_impl_k_thread_create+0x30>
 8012a94:	080188a3 	.word	0x080188a3

08012a98 <z_thread_single_suspend>:
#include <syscalls/k_thread_create_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_MULTITHREADING */

void z_thread_single_suspend(struct k_thread *thread)
{
 8012a98:	b510      	push	{r4, lr}
 8012a9a:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
 8012a9c:	f005 ff7e 	bl	801899c <z_is_thread_ready>
 8012aa0:	b110      	cbz	r0, 8012aa8 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
 8012aa2:	4620      	mov	r0, r4
 8012aa4:	f7ff fd92 	bl	80125cc <z_remove_thread_from_ready_q>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8012aa8:	f104 0018 	add.w	r0, r4, #24
 8012aac:	f006 f831 	bl	8018b12 <z_abort_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8012ab0:	7b63      	ldrb	r3, [r4, #13]
 8012ab2:	f043 0310 	orr.w	r3, r3, #16
 8012ab6:	7363      	strb	r3, [r4, #13]

	(void)z_abort_thread_timeout(thread);

	z_mark_thread_as_suspended(thread);

	if (thread == _current) {
 8012ab8:	4b08      	ldr	r3, [pc, #32]	; (8012adc <z_thread_single_suspend+0x44>)
 8012aba:	689b      	ldr	r3, [r3, #8]
 8012abc:	42a3      	cmp	r3, r4
 8012abe:	d10b      	bne.n	8012ad8 <z_thread_single_suspend+0x40>
	__asm__ volatile(
 8012ac0:	f04f 0310 	mov.w	r3, #16
 8012ac4:	f3ef 8011 	mrs	r0, BASEPRI
 8012ac8:	f383 8811 	msr	BASEPRI, r3
 8012acc:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
 8012ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 8012ad4:	f005 beab 	b.w	801882e <z_reschedule_irqlock>
 8012ad8:	bd10      	pop	{r4, pc}
 8012ada:	bf00      	nop
 8012adc:	200018f8 	.word	0x200018f8

08012ae0 <z_impl_k_thread_suspend>:

void z_impl_k_thread_suspend(struct k_thread *thread)
{
 8012ae0:	b538      	push	{r3, r4, r5, lr}
 8012ae2:	4605      	mov	r5, r0
 8012ae4:	f04f 0310 	mov.w	r3, #16
 8012ae8:	f3ef 8411 	mrs	r4, BASEPRI
 8012aec:	f383 8811 	msr	BASEPRI, r3
 8012af0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
 8012af4:	f7ff ffd0 	bl	8012a98 <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
 8012af8:	4b07      	ldr	r3, [pc, #28]	; (8012b18 <z_impl_k_thread_suspend+0x38>)
 8012afa:	689b      	ldr	r3, [r3, #8]
 8012afc:	42ab      	cmp	r3, r5
 8012afe:	d105      	bne.n	8012b0c <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
 8012b00:	4621      	mov	r1, r4
 8012b02:	4806      	ldr	r0, [pc, #24]	; (8012b1c <z_impl_k_thread_suspend+0x3c>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
 8012b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
 8012b08:	f005 be86 	b.w	8018818 <z_reschedule>
	__asm__ volatile(
 8012b0c:	f384 8811 	msr	BASEPRI, r4
 8012b10:	f3bf 8f6f 	isb	sy
}
 8012b14:	bd38      	pop	{r3, r4, r5, pc}
 8012b16:	bf00      	nop
 8012b18:	200018f8 	.word	0x200018f8
 8012b1c:	20001d43 	.word	0x20001d43

08012b20 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 8012b20:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 8012b22:	4e20      	ldr	r6, [pc, #128]	; (8012ba4 <z_init_static_threads+0x84>)
 8012b24:	4d20      	ldr	r5, [pc, #128]	; (8012ba8 <z_init_static_threads+0x88>)
{
 8012b26:	b087      	sub	sp, #28
 8012b28:	4637      	mov	r7, r6
	_FOREACH_STATIC_THREAD(thread_data) {
 8012b2a:	42b5      	cmp	r5, r6
 8012b2c:	f105 0430 	add.w	r4, r5, #48	; 0x30
 8012b30:	d30b      	bcc.n	8012b4a <z_init_static_threads+0x2a>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 8012b32:	f7ff fc39 	bl	80123a8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8012b36:	4c1c      	ldr	r4, [pc, #112]	; (8012ba8 <z_init_static_threads+0x88>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8012b38:	4e1c      	ldr	r6, [pc, #112]	; (8012bac <z_init_static_threads+0x8c>)
 8012b3a:	250a      	movs	r5, #10
 8012b3c:	42bc      	cmp	r4, r7
 8012b3e:	d321      	bcc.n	8012b84 <z_init_static_threads+0x64>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
 8012b40:	b007      	add	sp, #28
 8012b42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8012b46:	f7ff bc77 	b.w	8012438 <k_sched_unlock>
		z_setup_new_thread(
 8012b4a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012b4e:	9305      	str	r3, [sp, #20]
 8012b50:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8012b54:	9304      	str	r3, [sp, #16]
 8012b56:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8012b5a:	9303      	str	r3, [sp, #12]
 8012b5c:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8012b60:	9302      	str	r3, [sp, #8]
 8012b62:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8012b66:	9301      	str	r3, [sp, #4]
 8012b68:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8012b6c:	9300      	str	r3, [sp, #0]
 8012b6e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8012b72:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 8012b76:	f7ff ff51 	bl	8012a1c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8012b7a:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8012b7e:	64dd      	str	r5, [r3, #76]	; 0x4c
 8012b80:	4625      	mov	r5, r4
 8012b82:	e7d2      	b.n	8012b2a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
 8012b84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8012b86:	1c53      	adds	r3, r2, #1
 8012b88:	d003      	beq.n	8012b92 <z_init_static_threads+0x72>
			schedule_new_thread(thread_data->init_thread,
 8012b8a:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
 8012b8c:	b91a      	cbnz	r2, 8012b96 <z_init_static_threads+0x76>
 8012b8e:	f7ff ff21 	bl	80129d4 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8012b92:	3430      	adds	r4, #48	; 0x30
 8012b94:	e7d2      	b.n	8012b3c <z_init_static_threads+0x1c>
 8012b96:	436a      	muls	r2, r5
 8012b98:	3201      	adds	r2, #1
 8012b9a:	4631      	mov	r1, r6
 8012b9c:	3018      	adds	r0, #24
 8012b9e:	f000 f89f 	bl	8012ce0 <z_add_timeout>
 8012ba2:	e7f6      	b.n	8012b92 <z_init_static_threads+0x72>
 8012ba4:	20009050 	.word	0x20009050
 8012ba8:	20009050 	.word	0x20009050
 8012bac:	080188a3 	.word	0x080188a3

08012bb0 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
 8012bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bb4:	4605      	mov	r5, r0
 8012bb6:	b086      	sub	sp, #24
 8012bb8:	460e      	mov	r6, r1
 8012bba:	4617      	mov	r7, r2
 8012bbc:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
 8012bbe:	f005 fd64 	bl	801868a <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
 8012bc2:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8012bc6:	2000      	movs	r0, #0
 8012bc8:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8012bcc:	e9cd 0802 	strd	r0, r8, [sp, #8]
 8012bd0:	e9cd 5000 	strd	r5, r0, [sp]
 8012bd4:	4b06      	ldr	r3, [pc, #24]	; (8012bf0 <k_work_q_start+0x40>)
 8012bd6:	463a      	mov	r2, r7
 8012bd8:	4631      	mov	r1, r6
 8012bda:	4620      	mov	r0, r4
 8012bdc:	f7ff ff36 	bl	8012a4c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
 8012be0:	4904      	ldr	r1, [pc, #16]	; (8012bf4 <k_work_q_start+0x44>)
 8012be2:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
 8012be4:	b006      	add	sp, #24
 8012be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bea:	f005 bee6 	b.w	80189ba <z_impl_k_thread_name_set>
 8012bee:	bf00      	nop
 8012bf0:	0801345d 	.word	0x0801345d
 8012bf4:	0801d79d 	.word	0x0801d79d

08012bf8 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
 8012bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bfc:	4606      	mov	r6, r0
 8012bfe:	460d      	mov	r5, r1
 8012c00:	4617      	mov	r7, r2
	__asm__ volatile(
 8012c02:	f04f 0310 	mov.w	r3, #16
 8012c06:	f3ef 8811 	mrs	r8, BASEPRI
 8012c0a:	f383 8811 	msr	BASEPRI, r3
 8012c0e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
 8012c12:	69cc      	ldr	r4, [r1, #28]
 8012c14:	b15c      	cbz	r4, 8012c2e <k_delayed_work_submit_to_queue+0x36>
 8012c16:	4284      	cmp	r4, r0
 8012c18:	d123      	bne.n	8012c62 <k_delayed_work_submit_to_queue+0x6a>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
 8012c1a:	4628      	mov	r0, r5
 8012c1c:	f005 ff1a 	bl	8018a54 <work_cancel>
		if (err < 0) {
 8012c20:	1e04      	subs	r4, r0, #0
 8012c22:	da06      	bge.n	8012c32 <k_delayed_work_submit_to_queue+0x3a>
	__asm__ volatile(
 8012c24:	f388 8811 	msr	BASEPRI, r8
 8012c28:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + k_ms_to_ticks_ceil32(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
 8012c2c:	e00c      	b.n	8012c48 <k_delayed_work_submit_to_queue+0x50>
	if (work->work_q == work_q) {
 8012c2e:	2800      	cmp	r0, #0
 8012c30:	d0f3      	beq.n	8012c1a <k_delayed_work_submit_to_queue+0x22>
	work->work_q = work_q;
 8012c32:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
 8012c34:	b95f      	cbnz	r7, 8012c4e <k_delayed_work_submit_to_queue+0x56>
 8012c36:	f388 8811 	msr	BASEPRI, r8
 8012c3a:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
 8012c3e:	4629      	mov	r1, r5
 8012c40:	4630      	mov	r0, r6
 8012c42:	f005 feea 	bl	8018a1a <k_work_submit_to_queue>
		return 0;
 8012c46:	463c      	mov	r4, r7
}
 8012c48:	4620      	mov	r0, r4
 8012c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c4e:	230a      	movs	r3, #10
 8012c50:	fb03 f207 	mul.w	r2, r3, r7
	z_add_timeout(&work->timeout, work_timeout,
 8012c54:	3201      	adds	r2, #1
 8012c56:	4904      	ldr	r1, [pc, #16]	; (8012c68 <k_delayed_work_submit_to_queue+0x70>)
 8012c58:	f105 000c 	add.w	r0, r5, #12
 8012c5c:	f000 f840 	bl	8012ce0 <z_add_timeout>
 8012c60:	e7e0      	b.n	8012c24 <k_delayed_work_submit_to_queue+0x2c>
		err = -EADDRINUSE;
 8012c62:	f06f 046f 	mvn.w	r4, #111	; 0x6f
 8012c66:	e7dd      	b.n	8012c24 <k_delayed_work_submit_to_queue+0x2c>
 8012c68:	08018a4b 	.word	0x08018a4b

08012c6c <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 8012c6c:	4b03      	ldr	r3, [pc, #12]	; (8012c7c <elapsed+0x10>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	b90b      	cbnz	r3, 8012c76 <elapsed+0xa>
 8012c72:	f7f6 be6d 	b.w	8009950 <z_clock_elapsed>
}
 8012c76:	2000      	movs	r0, #0
 8012c78:	4770      	bx	lr
 8012c7a:	bf00      	nop
 8012c7c:	200019a4 	.word	0x200019a4

08012c80 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8012c80:	6803      	ldr	r3, [r0, #0]
 8012c82:	b140      	cbz	r0, 8012c96 <remove_timeout+0x16>
 8012c84:	4a07      	ldr	r2, [pc, #28]	; (8012ca4 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
 8012c86:	6852      	ldr	r2, [r2, #4]
 8012c88:	4290      	cmp	r0, r2
 8012c8a:	d004      	beq.n	8012c96 <remove_timeout+0x16>
	if (next(t) != NULL) {
 8012c8c:	b11b      	cbz	r3, 8012c96 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
 8012c8e:	689a      	ldr	r2, [r3, #8]
 8012c90:	6881      	ldr	r1, [r0, #8]
 8012c92:	440a      	add	r2, r1
 8012c94:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
 8012c96:	6842      	ldr	r2, [r0, #4]
 8012c98:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8012c9a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8012c9c:	2300      	movs	r3, #0
	node->prev = NULL;
 8012c9e:	e9c0 3300 	strd	r3, r3, [r0]
}
 8012ca2:	4770      	bx	lr
 8012ca4:	20008e78 	.word	0x20008e78

08012ca8 <next_timeout>:
	return list->head == list;
 8012ca8:	4b0b      	ldr	r3, [pc, #44]	; (8012cd8 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
 8012caa:	b510      	push	{r4, lr}
 8012cac:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012cae:	429c      	cmp	r4, r3
 8012cb0:	bf08      	it	eq
 8012cb2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
 8012cb4:	f7ff ffda 	bl	8012c6c <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 8012cb8:	b154      	cbz	r4, 8012cd0 <next_timeout+0x28>
 8012cba:	68a3      	ldr	r3, [r4, #8]
 8012cbc:	1a18      	subs	r0, r3, r0
 8012cbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8012cc2:	4b06      	ldr	r3, [pc, #24]	; (8012cdc <next_timeout+0x34>)
 8012cc4:	691b      	ldr	r3, [r3, #16]
 8012cc6:	b113      	cbz	r3, 8012cce <next_timeout+0x26>
 8012cc8:	4298      	cmp	r0, r3
 8012cca:	bfa8      	it	ge
 8012ccc:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8012cce:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 8012cd0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012cd4:	e7f5      	b.n	8012cc2 <next_timeout+0x1a>
 8012cd6:	bf00      	nop
 8012cd8:	20008e78 	.word	0x20008e78
 8012cdc:	200018f8 	.word	0x200018f8

08012ce0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
 8012ce0:	b570      	push	{r4, r5, r6, lr}
 8012ce2:	4604      	mov	r4, r0
 8012ce4:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8012ce6:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
 8012ce8:	f04f 0310 	mov.w	r3, #16
 8012cec:	f3ef 8511 	mrs	r5, BASEPRI
 8012cf0:	f383 8811 	msr	BASEPRI, r3
 8012cf4:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 8012cf8:	f7ff ffb8 	bl	8012c6c <elapsed>
	return list->head == list;
 8012cfc:	4b18      	ldr	r3, [pc, #96]	; (8012d60 <z_add_timeout+0x80>)
 8012cfe:	681a      	ldr	r2, [r3, #0]
 8012d00:	2e01      	cmp	r6, #1
 8012d02:	bfac      	ite	ge
 8012d04:	1980      	addge	r0, r0, r6
 8012d06:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012d08:	429a      	cmp	r2, r3
 8012d0a:	60a0      	str	r0, [r4, #8]
 8012d0c:	d001      	beq.n	8012d12 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8012d0e:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 8012d10:	b932      	cbnz	r2, 8012d20 <z_add_timeout+0x40>
	node->prev = list->tail;
 8012d12:	685a      	ldr	r2, [r3, #4]
 8012d14:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
 8012d16:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 8012d18:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
 8012d1a:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8012d1c:	605c      	str	r4, [r3, #4]
 8012d1e:	e00a      	b.n	8012d36 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
 8012d20:	6890      	ldr	r0, [r2, #8]
 8012d22:	68a1      	ldr	r1, [r4, #8]
 8012d24:	4288      	cmp	r0, r1
 8012d26:	dd15      	ble.n	8012d54 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
 8012d28:	1a41      	subs	r1, r0, r1
 8012d2a:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
 8012d2c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8012d2e:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
 8012d32:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 8012d34:	6054      	str	r4, [r2, #4]
	return list->head == list;
 8012d36:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012d38:	429a      	cmp	r2, r3
 8012d3a:	d006      	beq.n	8012d4a <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8012d3c:	4294      	cmp	r4, r2
 8012d3e:	d104      	bne.n	8012d4a <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
 8012d40:	f7ff ffb2 	bl	8012ca8 <next_timeout>
 8012d44:	2100      	movs	r1, #0
 8012d46:	f7f6 fd9f 	bl	8009888 <z_clock_set_timeout>
	__asm__ volatile(
 8012d4a:	f385 8811 	msr	BASEPRI, r5
 8012d4e:	f3bf 8f6f 	isb	sy
		}
	}
}
 8012d52:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
 8012d54:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 8012d56:	42b2      	cmp	r2, r6
 8012d58:	60a1      	str	r1, [r4, #8]
 8012d5a:	d0da      	beq.n	8012d12 <z_add_timeout+0x32>
 8012d5c:	6812      	ldr	r2, [r2, #0]
 8012d5e:	e7d7      	b.n	8012d10 <z_add_timeout+0x30>
 8012d60:	20008e78 	.word	0x20008e78

08012d64 <z_timeout_remaining>:

	return ret;
}

s32_t z_timeout_remaining(struct _timeout *timeout)
{
 8012d64:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
 8012d66:	6804      	ldr	r4, [r0, #0]
 8012d68:	b314      	cbz	r4, 8012db0 <z_timeout_remaining+0x4c>
	__asm__ volatile(
 8012d6a:	f04f 0310 	mov.w	r3, #16
 8012d6e:	f3ef 8111 	mrs	r1, BASEPRI
 8012d72:	f383 8811 	msr	BASEPRI, r3
 8012d76:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8012d7a:	4a0e      	ldr	r2, [pc, #56]	; (8012db4 <z_timeout_remaining+0x50>)
 8012d7c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012d7e:	4293      	cmp	r3, r2
 8012d80:	d014      	beq.n	8012dac <z_timeout_remaining+0x48>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8012d82:	6852      	ldr	r2, [r2, #4]
 8012d84:	2400      	movs	r4, #0
		return 0;
	}

	LOCKED(&timeout_lock) {
		for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 8012d86:	b93b      	cbnz	r3, 8012d98 <z_timeout_remaining+0x34>
	__asm__ volatile(
 8012d88:	f381 8811 	msr	BASEPRI, r1
 8012d8c:	f3bf 8f6f 	isb	sy
				break;
			}
		}
	}

	return ticks - elapsed();
 8012d90:	f7ff ff6c 	bl	8012c6c <elapsed>
 8012d94:	1a20      	subs	r0, r4, r0
}
 8012d96:	bd38      	pop	{r3, r4, r5, pc}
			ticks += t->dticks;
 8012d98:	689d      	ldr	r5, [r3, #8]
			if (timeout == t) {
 8012d9a:	4283      	cmp	r3, r0
			ticks += t->dticks;
 8012d9c:	442c      	add	r4, r5
			if (timeout == t) {
 8012d9e:	d0f3      	beq.n	8012d88 <z_timeout_remaining+0x24>
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d0f1      	beq.n	8012d88 <z_timeout_remaining+0x24>
	return (node == list->tail) ? NULL : node->next;
 8012da4:	4293      	cmp	r3, r2
 8012da6:	d0ef      	beq.n	8012d88 <z_timeout_remaining+0x24>
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	e7ec      	b.n	8012d86 <z_timeout_remaining+0x22>
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012dac:	2400      	movs	r4, #0
 8012dae:	e7eb      	b.n	8012d88 <z_timeout_remaining+0x24>
		return 0;
 8012db0:	4620      	mov	r0, r4
 8012db2:	e7f0      	b.n	8012d96 <z_timeout_remaining+0x32>
 8012db4:	20008e78 	.word	0x20008e78

08012db8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
 8012db8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8012dbc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8012dbe:	f7ff fbcf 	bl	8012560 <z_time_slice>
	__asm__ volatile(
 8012dc2:	f04f 0310 	mov.w	r3, #16
 8012dc6:	f3ef 8511 	mrs	r5, BASEPRI
 8012dca:	f383 8811 	msr	BASEPRI, r3
 8012dce:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8012dd2:	4e21      	ldr	r6, [pc, #132]	; (8012e58 <z_clock_announce+0xa0>)
 8012dd4:	4f21      	ldr	r7, [pc, #132]	; (8012e5c <z_clock_announce+0xa4>)
	return list->head == list;
 8012dd6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8012e60 <z_clock_announce+0xa8>
 8012dda:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8012ddc:	46b8      	mov	r8, r7
 8012dde:	f8d9 4000 	ldr.w	r4, [r9]
 8012de2:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012de4:	454c      	cmp	r4, r9
 8012de6:	e9d7 bc00 	ldrd	fp, ip, [r7]
 8012dea:	d005      	beq.n	8012df8 <z_clock_announce+0x40>
 8012dec:	b124      	cbz	r4, 8012df8 <z_clock_announce+0x40>
 8012dee:	68a3      	ldr	r3, [r4, #8]
 8012df0:	4293      	cmp	r3, r2
 8012df2:	dd14      	ble.n	8012e1e <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8012df4:	1a9b      	subs	r3, r3, r2
 8012df6:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
 8012df8:	eb1b 0002 	adds.w	r0, fp, r2
 8012dfc:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
 8012e00:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8012e02:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
 8012e06:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
 8012e08:	f7ff ff4e 	bl	8012ca8 <next_timeout>
 8012e0c:	4621      	mov	r1, r4
 8012e0e:	f7f6 fd3b 	bl	8009888 <z_clock_set_timeout>
	__asm__ volatile(
 8012e12:	f385 8811 	msr	BASEPRI, r5
 8012e16:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8012e1a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
 8012e1e:	eb1b 0003 	adds.w	r0, fp, r3
 8012e22:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
 8012e26:	1ad3      	subs	r3, r2, r3
 8012e28:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 8012e2a:	2300      	movs	r3, #0
		curr_tick += dt;
 8012e2c:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
 8012e30:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
 8012e32:	4620      	mov	r0, r4
 8012e34:	f7ff ff24 	bl	8012c80 <remove_timeout>
 8012e38:	f385 8811 	msr	BASEPRI, r5
 8012e3c:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8012e40:	68e3      	ldr	r3, [r4, #12]
 8012e42:	4798      	blx	r3
	__asm__ volatile(
 8012e44:	f04f 0310 	mov.w	r3, #16
 8012e48:	f3ef 8511 	mrs	r5, BASEPRI
 8012e4c:	f383 8811 	msr	BASEPRI, r3
 8012e50:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8012e54:	e7c3      	b.n	8012dde <z_clock_announce+0x26>
 8012e56:	bf00      	nop
 8012e58:	200019a4 	.word	0x200019a4
 8012e5c:	20000008 	.word	0x20000008
 8012e60:	20008e78 	.word	0x20008e78

08012e64 <z_tick_get>:

s64_t z_tick_get(void)
{
 8012e64:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
 8012e68:	f04f 0310 	mov.w	r3, #16
 8012e6c:	f3ef 8411 	mrs	r4, BASEPRI
 8012e70:	f383 8811 	msr	BASEPRI, r3
 8012e74:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
 8012e78:	f7f6 fd6a 	bl	8009950 <z_clock_elapsed>
 8012e7c:	4b07      	ldr	r3, [pc, #28]	; (8012e9c <z_tick_get+0x38>)
 8012e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e82:	eb12 0b00 	adds.w	fp, r2, r0
 8012e86:	f143 0c00 	adc.w	ip, r3, #0
 8012e8a:	4658      	mov	r0, fp
 8012e8c:	4661      	mov	r1, ip
	__asm__ volatile(
 8012e8e:	f384 8811 	msr	BASEPRI, r4
 8012e92:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8012e96:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
 8012e9a:	bf00      	nop
 8012e9c:	20000008 	.word	0x20000008

08012ea0 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
 8012ea0:	6a02      	ldr	r2, [r0, #32]
 8012ea2:	2a00      	cmp	r2, #0
{
 8012ea4:	b538      	push	{r3, r4, r5, lr}
 8012ea6:	4604      	mov	r4, r0
	if (timer->period > 0) {
 8012ea8:	dd02      	ble.n	8012eb0 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8012eaa:	490e      	ldr	r1, [pc, #56]	; (8012ee4 <z_timer_expiration_handler+0x44>)
 8012eac:	f7ff ff18 	bl	8012ce0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 8012eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012eb2:	3301      	adds	r3, #1
 8012eb4:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 8012eb6:	69a3      	ldr	r3, [r4, #24]
 8012eb8:	b10b      	cbz	r3, 8012ebe <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
 8012eba:	4620      	mov	r0, r4
 8012ebc:	4798      	blx	r3
	return list->head == list;
 8012ebe:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012ec2:	42a5      	cmp	r5, r4
 8012ec4:	d00d      	beq.n	8012ee2 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 8012ec6:	b165      	cbz	r5, 8012ee2 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
 8012ec8:	4628      	mov	r0, r5
 8012eca:	f005 fc8c 	bl	80187e6 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8012ece:	7b6b      	ldrb	r3, [r5, #13]
 8012ed0:	06db      	lsls	r3, r3, #27
 8012ed2:	d104      	bne.n	8012ede <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
 8012ed4:	69ab      	ldr	r3, [r5, #24]
 8012ed6:	b913      	cbnz	r3, 8012ede <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
 8012ed8:	4628      	mov	r0, r5
 8012eda:	f7ff fac9 	bl	8012470 <z_add_thread_to_ready_q>
 8012ede:	2300      	movs	r3, #0
 8012ee0:	662b      	str	r3, [r5, #96]	; 0x60

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
 8012ee2:	bd38      	pop	{r3, r4, r5, pc}
 8012ee4:	08012ea1 	.word	0x08012ea1

08012ee8 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
 8012ee8:	b513      	push	{r0, r1, r4, lr}
 8012eea:	230a      	movs	r3, #10
 8012eec:	435a      	muls	r2, r3
 8012eee:	4359      	muls	r1, r3
 8012ef0:	4604      	mov	r4, r0
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
 8012ef2:	9200      	str	r2, [sp, #0]
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
 8012ef4:	9101      	str	r1, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
 8012ef6:	f005 fe0c 	bl	8018b12 <z_abort_timeout>
	timer->period = period_in_ticks;
 8012efa:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8012efc:	4905      	ldr	r1, [pc, #20]	; (8012f14 <z_impl_k_timer_start+0x2c>)
 8012efe:	9a01      	ldr	r2, [sp, #4]
	timer->period = period_in_ticks;
 8012f00:	6223      	str	r3, [r4, #32]
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8012f02:	4620      	mov	r0, r4
	timer->status = 0U;
 8012f04:	2300      	movs	r3, #0
 8012f06:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
 8012f08:	b002      	add	sp, #8
 8012f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8012f0e:	f7ff bee7 	b.w	8012ce0 <z_add_timeout>
 8012f12:	bf00      	nop
 8012f14:	08012ea1 	.word	0x08012ea1

08012f18 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
 8012f18:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
 8012f1a:	7b44      	ldrb	r4, [r0, #13]
 8012f1c:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
 8012f20:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
 8012f22:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
 8012f24:	f362 0141 	bfi	r1, r2, #1, #1
 8012f28:	7381      	strb	r1, [r0, #14]
	event->poller = NULL;
 8012f2a:	2200      	movs	r2, #0
	event->state = K_POLL_STATE_NOT_READY;
 8012f2c:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
 8012f2e:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
 8012f30:	4a02      	ldr	r2, [pc, #8]	; (8012f3c <k_poll_event_init+0x24>)
 8012f32:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
 8012f34:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
 8012f38:	bd10      	pop	{r4, pc}
 8012f3a:	bf00      	nop
 8012f3c:	00020fff 	.word	0x00020fff

08012f40 <z_impl_k_poll>:

	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
 8012f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f44:	b086      	sub	sp, #24
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
 8012f46:	2301      	movs	r3, #1
 8012f48:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
 8012f4c:	4b23      	ldr	r3, [pc, #140]	; (8012fdc <z_impl_k_poll+0x9c>)
	struct _poller poller = { .is_polling = true,
 8012f4e:	689b      	ldr	r3, [r3, #8]
 8012f50:	9304      	str	r3, [sp, #16]
 8012f52:	4b23      	ldr	r3, [pc, #140]	; (8012fe0 <z_impl_k_poll+0xa0>)
 8012f54:	9305      	str	r3, [sp, #20]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	events_registered = register_events(events, num_events, &poller,
 8012f56:	fab2 f382 	clz	r3, r2
 8012f5a:	4690      	mov	r8, r2
 8012f5c:	095b      	lsrs	r3, r3, #5
 8012f5e:	aa03      	add	r2, sp, #12
{
 8012f60:	4606      	mov	r6, r0
	events_registered = register_events(events, num_events, &poller,
 8012f62:	f005 feed 	bl	8018d40 <register_events>
 8012f66:	4607      	mov	r7, r0
	__asm__ volatile(
 8012f68:	f04f 0310 	mov.w	r3, #16
 8012f6c:	f3ef 8511 	mrs	r5, BASEPRI
 8012f70:	f383 8811 	msr	BASEPRI, r3
 8012f74:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
 8012f78:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8012f7c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8012f80:	b94b      	cbnz	r3, 8012f96 <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
 8012f82:	462a      	mov	r2, r5
 8012f84:	4639      	mov	r1, r7
 8012f86:	4630      	mov	r0, r6
 8012f88:	f005 fe42 	bl	8018c10 <clear_event_registrations>
	__asm__ volatile(
 8012f8c:	f385 8811 	msr	BASEPRI, r5
 8012f90:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
 8012f94:	e00b      	b.n	8012fae <z_impl_k_poll+0x6e>
	poller.is_polling = false;
 8012f96:	2300      	movs	r3, #0
 8012f98:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
 8012f9c:	f1b8 0f00 	cmp.w	r8, #0
 8012fa0:	d109      	bne.n	8012fb6 <z_impl_k_poll+0x76>
 8012fa2:	f385 8811 	msr	BASEPRI, r5
 8012fa6:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 8012faa:	f06f 040a 	mvn.w	r4, #10
}
 8012fae:	4620      	mov	r0, r4
 8012fb0:	b006      	add	sp, #24
 8012fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
 8012fb6:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8012fb8:	4643      	mov	r3, r8
 8012fba:	4629      	mov	r1, r5
 8012fbc:	4809      	ldr	r0, [pc, #36]	; (8012fe4 <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
 8012fbe:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8012fc2:	f7ff fb87 	bl	80126d4 <z_pend_curr>
 8012fc6:	4604      	mov	r4, r0
	__asm__ volatile(
 8012fc8:	f04f 0310 	mov.w	r3, #16
 8012fcc:	f3ef 8511 	mrs	r5, BASEPRI
 8012fd0:	f383 8811 	msr	BASEPRI, r3
 8012fd4:	f3bf 8f6f 	isb	sy
 8012fd8:	e7d3      	b.n	8012f82 <z_impl_k_poll+0x42>
 8012fda:	bf00      	nop
 8012fdc:	200018f8 	.word	0x200018f8
 8012fe0:	08018ca1 	.word	0x08018ca1
 8012fe4:	20001d43 	.word	0x20001d43

08012fe8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
 8012fe8:	b538      	push	{r3, r4, r5, lr}
 8012fea:	f04f 0310 	mov.w	r3, #16
 8012fee:	f3ef 8511 	mrs	r5, BASEPRI
 8012ff2:	f383 8811 	msr	BASEPRI, r3
 8012ff6:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8012ffa:	6803      	ldr	r3, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
 8012ffc:	60c1      	str	r1, [r0, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 8012ffe:	4298      	cmp	r0, r3
	signal->signaled = 1U;
 8013000:	f04f 0101 	mov.w	r1, #1
 8013004:	6081      	str	r1, [r0, #8]
 8013006:	d106      	bne.n	8013016 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
 8013008:	f385 8811 	msr	BASEPRI, r5
 801300c:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
 8013010:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
 8013012:	4620      	mov	r0, r4
 8013014:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
 8013016:	e9d3 2000 	ldrd	r2, r0, [r3]
 801301a:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
 801301c:	6050      	str	r0, [r2, #4]
	node->next = NULL;
 801301e:	2200      	movs	r2, #0
	node->prev = NULL;
 8013020:	e9c3 2200 	strd	r2, r2, [r3]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8013024:	4618      	mov	r0, r3
 8013026:	f005 fe20 	bl	8018c6a <signal_poll_event>
	z_reschedule(&lock, key);
 801302a:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 801302c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
 801302e:	4802      	ldr	r0, [pc, #8]	; (8013038 <z_impl_k_poll_signal_raise+0x50>)
 8013030:	f005 fbf2 	bl	8018818 <z_reschedule>
	return rc;
 8013034:	e7ed      	b.n	8013012 <z_impl_k_poll_signal_raise+0x2a>
 8013036:	bf00      	nop
 8013038:	20001d43 	.word	0x20001d43

0801303c <z_impl_sensor_channel_get>:
					   struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->driver_api;

	return api->channel_get(dev, chan, val);
 801303c:	6843      	ldr	r3, [r0, #4]
 801303e:	68db      	ldr	r3, [r3, #12]
 8013040:	4718      	bx	r3

08013042 <device_get_binding>:
 8013042:	f7fe bd79 	b.w	8011b38 <z_impl_device_get_binding>

08013046 <gpio_pin_write>:
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
 8013046:	b410      	push	{r4}
 8013048:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
 801304a:	6842      	ldr	r2, [r0, #4]
 801304c:	6854      	ldr	r4, [r2, #4]
 801304e:	460a      	mov	r2, r1
 8013050:	46a4      	mov	ip, r4
 8013052:	2100      	movs	r1, #0
	return gpio_write(port, GPIO_ACCESS_BY_PIN, pin, value);
}
 8013054:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->write(port, access_op, pin, value);
 8013058:	4760      	bx	ip

0801305a <gpio_pin_configure.constprop.2>:
static inline int gpio_pin_configure(struct device *port, u32_t pin,
 801305a:	b410      	push	{r4}
 801305c:	460a      	mov	r2, r1
	return api->config(port, access_op, pin, flags);
 801305e:	6843      	ldr	r3, [r0, #4]
 8013060:	681c      	ldr	r4, [r3, #0]
 8013062:	2100      	movs	r1, #0
 8013064:	46a4      	mov	ip, r4
 8013066:	2301      	movs	r3, #1
}
 8013068:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->config(port, access_op, pin, flags);
 801306c:	4760      	bx	ip

0801306e <crc16bitbybit>:
		len = 1;
 801306e:	2900      	cmp	r1, #0
 8013070:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
		crc ^= *ptr;
 8013074:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8013078:	b570      	push	{r4, r5, r6, lr}
		len = 1;
 801307a:	bf08      	it	eq
 801307c:	2101      	moveq	r1, #1
	while (len--) {
 801307e:	4604      	mov	r4, r0
				crc ^= polynom;
 8013080:	f24a 0501 	movw	r5, #40961	; 0xa001
	while (len--) {
 8013084:	3901      	subs	r1, #1
 8013086:	b289      	uxth	r1, r1
 8013088:	42a1      	cmp	r1, r4
 801308a:	d100      	bne.n	801308e <crc16bitbybit+0x20>
}
 801308c:	bd70      	pop	{r4, r5, r6, pc}
		crc ^= *ptr;
 801308e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013092:	4058      	eors	r0, r3
 8013094:	2308      	movs	r3, #8
			if (crc & 1) {
 8013096:	f000 0601 	and.w	r6, r0, #1
 801309a:	0840      	lsrs	r0, r0, #1
 801309c:	b10e      	cbz	r6, 80130a2 <crc16bitbybit+0x34>
				crc ^= polynom;
 801309e:	4068      	eors	r0, r5
 80130a0:	b280      	uxth	r0, r0
 80130a2:	3b01      	subs	r3, #1
		for (i = 0; i<8; i++)
 80130a4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80130a8:	d1f5      	bne.n	8013096 <crc16bitbybit+0x28>
 80130aa:	e7eb      	b.n	8013084 <crc16bitbybit+0x16>

080130ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
 80130ac:	b570      	push	{r4, r5, r6, lr}
 80130ae:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
 80130b0:	f990 000b 	ldrsb.w	r0, [r0, #11]
 80130b4:	250c      	movs	r5, #12
 80130b6:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
 80130b8:	4288      	cmp	r0, r1
 80130ba:	eb06 0405 	add.w	r4, r6, r5
 80130be:	bfb8      	it	lt
 80130c0:	5974      	ldrlt	r4, [r6, r5]

	*word = &bitarray[bn / 32];
 80130c2:	2a00      	cmp	r2, #0
 80130c4:	4610      	mov	r0, r2
 80130c6:	bfb8      	it	lt
 80130c8:	f102 001f 	addlt.w	r0, r2, #31
 80130cc:	1140      	asrs	r0, r0, #5
 80130ce:	eb04 0180 	add.w	r1, r4, r0, lsl #2
 80130d2:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
 80130d4:	f002 001f 	and.w	r0, r2, #31
 80130d8:	bd70      	pop	{r4, r5, r6, pc}

080130da <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
 80130da:	f04f 0310 	mov.w	r3, #16
 80130de:	f3ef 8011 	mrs	r0, BASEPRI
 80130e2:	f383 8811 	msr	BASEPRI, r3
 80130e6:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
 80130ea:	4770      	bx	lr

080130ec <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 80130ec:	07c3      	lsls	r3, r0, #31
 80130ee:	d503      	bpl.n	80130f8 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
 80130f0:	f381 8811 	msr	BASEPRI, r1
 80130f4:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
 80130f8:	4770      	bx	lr

080130fa <z_sys_mem_pool_base_init>:
{
 80130fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 80130fe:	6846      	ldr	r6, [r0, #4]
 8013100:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 8013102:	6801      	ldr	r1, [r0, #0]
	for (i = 0; i < p->n_levels; i++) {
 8013104:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
 8013108:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 801310a:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
 801310e:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 8013110:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 8013112:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
 8013114:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
 8013116:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
 801311a:	4598      	cmp	r8, r3
 801311c:	dc05      	bgt.n	801312a <z_sys_mem_pool_base_init+0x30>
 801311e:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
 8013120:	4619      	mov	r1, r3
 8013122:	428f      	cmp	r7, r1
 8013124:	dc20      	bgt.n	8013168 <z_sys_mem_pool_base_init+0x6e>
}
 8013126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
 801312a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
 801312e:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
 8013132:	fb09 fe03 	mul.w	lr, r9, r3
 8013136:	eb0a 040e 	add.w	r4, sl, lr
 801313a:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
 801313e:	2d20      	cmp	r5, #32
	list->tail = (sys_dnode_t *)list;
 8013140:	e9c4 bb01 	strd	fp, fp, [r4, #4]
 8013144:	d805      	bhi.n	8013152 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
 8013146:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
 8013148:	0892      	lsrs	r2, r2, #2
 801314a:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
 801314e:	3301      	adds	r3, #1
 8013150:	e7e3      	b.n	801311a <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
 8013152:	f115 041f 	adds.w	r4, r5, #31
 8013156:	bf48      	it	mi
 8013158:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
 801315c:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
 801315e:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
 8013162:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013166:	e7ef      	b.n	8013148 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
 8013168:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
 801316a:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
 801316c:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
 8013170:	18ec      	adds	r4, r5, r3
	node->next = list;
 8013172:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
 8013176:	6895      	ldr	r5, [r2, #8]
 8013178:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
 801317a:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
 801317c:	3101      	adds	r1, #1
 801317e:	602c      	str	r4, [r5, #0]
	list->tail = node;
 8013180:	4433      	add	r3, r6
 8013182:	6094      	str	r4, [r2, #8]
 8013184:	e7cd      	b.n	8013122 <z_sys_mem_pool_base_init+0x28>

08013186 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
 8013186:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801318a:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 801318c:	7a85      	ldrb	r5, [r0, #10]
{
 801318e:	af00      	add	r7, sp, #0
 8013190:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 8013194:	00ab      	lsls	r3, r5, #2
 8013196:	3307      	adds	r3, #7
 8013198:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801319c:	ebad 0d03 	sub.w	sp, sp, r3
 80131a0:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
 80131a2:	4653      	mov	r3, sl
 80131a4:	6842      	ldr	r2, [r0, #4]
 80131a6:	f843 2904 	str.w	r2, [r3], #-4
{
 80131aa:	4604      	mov	r4, r0
	for (i = 0; i < p->n_levels; i++) {
 80131ac:	2200      	movs	r2, #0
 80131ae:	4295      	cmp	r5, r2
 80131b0:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
 80131b4:	dd09      	ble.n	80131ca <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
 80131b6:	b122      	cbz	r2, 80131c2 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
 80131b8:	6818      	ldr	r0, [r3, #0]
 80131ba:	0880      	lsrs	r0, r0, #2
 80131bc:	f020 0003 	bic.w	r0, r0, #3
 80131c0:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
 80131c2:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80131c6:	4288      	cmp	r0, r1
 80131c8:	d208      	bcs.n	80131dc <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
 80131ca:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80131ce:	d107      	bne.n	80131e0 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
 80131d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80131d2:	2300      	movs	r3, #0
 80131d4:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
 80131d6:	f06f 000b 	mvn.w	r0, #11
 80131da:	e044      	b.n	8013266 <z_sys_mem_pool_block_alloc+0xe0>
	for (i = 0; i < p->n_levels; i++) {
 80131dc:	3201      	adds	r2, #1
 80131de:	e7e6      	b.n	80131ae <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 80131e0:	7c20      	ldrb	r0, [r4, #16]
 80131e2:	f010 0001 	ands.w	r0, r0, #1
 80131e6:	d001      	beq.n	80131ec <z_sys_mem_pool_block_alloc+0x66>
 80131e8:	f7ff ff77 	bl	80130da <pool_irq_lock.isra.2.part.3>
 80131ec:	68e2      	ldr	r2, [r4, #12]
 80131ee:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
 80131f0:	4680      	mov	r8, r0
	for (i = alloc_l; i >= 0; i--) {
 80131f2:	fb03 2309 	mla	r3, r3, r9, r2
	block = sys_dlist_get(&p->levels[l].free_list);
 80131f6:	464e      	mov	r6, r9
	return list->head == list;
 80131f8:	461a      	mov	r2, r3
 80131fa:	f852 5f04 	ldr.w	r5, [r2, #4]!
	if (!sys_dlist_is_empty(list)) {
 80131fe:	4295      	cmp	r5, r2
 8013200:	d06d      	beq.n	80132de <z_sys_mem_pool_block_alloc+0x158>
	node->prev->next = node->next;
 8013202:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013206:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8013208:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 801320a:	2300      	movs	r3, #0
	node->prev = NULL;
 801320c:	e9c5 3300 	strd	r3, r3, [r5]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 8013210:	6823      	ldr	r3, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
 8013212:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
 8013216:	f107 0b14 	add.w	fp, r7, #20
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 801321a:	1aea      	subs	r2, r5, r3
	int bit = get_bit_ptr(p, level, bn, &word);
 801321c:	4620      	mov	r0, r4
 801321e:	fb92 f2f1 	sdiv	r2, r2, r1
 8013222:	465b      	mov	r3, fp
 8013224:	4631      	mov	r1, r6
 8013226:	f7ff ff41 	bl	80130ac <get_bit_ptr>
	*word |= (1<<bit);
 801322a:	6979      	ldr	r1, [r7, #20]
 801322c:	2201      	movs	r2, #1
 801322e:	680b      	ldr	r3, [r1, #0]
 8013230:	603a      	str	r2, [r7, #0]
 8013232:	fa02 f000 	lsl.w	r0, r2, r0
 8013236:	4303      	orrs	r3, r0
 8013238:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
 801323a:	454e      	cmp	r6, r9
 801323c:	db17      	blt.n	801326e <z_sys_mem_pool_block_alloc+0xe8>
	pool_irq_unlock(p, key);
 801323e:	4641      	mov	r1, r8
 8013240:	7c20      	ldrb	r0, [r4, #16]
 8013242:	f7ff ff53 	bl	80130ec <pool_irq_unlock.isra.4>
	*data_p = data;
 8013246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013248:	601d      	str	r5, [r3, #0]
	if (data == NULL) {
 801324a:	2d00      	cmp	r5, #0
 801324c:	d0c3      	beq.n	80131d6 <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 8013254:	6823      	ldr	r3, [r4, #0]
 8013256:	1aed      	subs	r5, r5, r3
 8013258:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
 801325c:	fb95 f5f3 	sdiv	r5, r5, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
 8013260:	687b      	ldr	r3, [r7, #4]

	return 0;
 8013262:	2000      	movs	r0, #0
	*block_p = block_num(p, data, lsizes[alloc_l]);
 8013264:	601d      	str	r5, [r3, #0]
}
 8013266:	371c      	adds	r7, #28
 8013268:	46bd      	mov	sp, r7
 801326a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 801326e:	6822      	ldr	r2, [r4, #0]
 8013270:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
	set_alloc_bit(p, l + 1, 4*bn);
 8013274:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
 8013276:	4631      	mov	r1, r6
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 8013278:	1aaa      	subs	r2, r5, r2
	int bit = get_bit_ptr(p, level, bn, &word);
 801327a:	4620      	mov	r0, r4
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 801327c:	fb92 f2f3 	sdiv	r2, r2, r3
	int bit = get_bit_ptr(p, level, bn, &word);
 8013280:	465b      	mov	r3, fp
 8013282:	0092      	lsls	r2, r2, #2
 8013284:	f7ff ff12 	bl	80130ac <get_bit_ptr>
	*word |= (1<<bit);
 8013288:	697a      	ldr	r2, [r7, #20]
 801328a:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
 801328c:	68e1      	ldr	r1, [r4, #12]
	*word |= (1<<bit);
 801328e:	fa03 f000 	lsl.w	r0, r3, r0
 8013292:	6813      	ldr	r3, [r2, #0]
 8013294:	4303      	orrs	r3, r0
 8013296:	6013      	str	r3, [r2, #0]
		int lsz = lsizes[l + 1];
 8013298:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
 801329c:	230c      	movs	r3, #12
 801329e:	fb03 1106 	mla	r1, r3, r6, r1
 80132a2:	2203      	movs	r2, #3
 80132a4:	f101 0e04 	add.w	lr, r1, #4
 80132a8:	182b      	adds	r3, r5, r0
 80132aa:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
 80132ac:	688a      	ldr	r2, [r1, #8]
 80132ae:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
 80132b0:	688a      	ldr	r2, [r1, #8]
	node->next = list;
 80132b2:	f8c3 e000 	str.w	lr, [r3]
	list->tail->next = node;
 80132b6:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
 80132b8:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
 80132ba:	608b      	str	r3, [r1, #8]
 80132bc:	3a01      	subs	r2, #1
 80132be:	4403      	add	r3, r0
 80132c0:	60fa      	str	r2, [r7, #12]
 80132c2:	d1f3      	bne.n	80132ac <z_sys_mem_pool_block_alloc+0x126>
				pool_irq_unlock(p, key);
 80132c4:	4641      	mov	r1, r8
 80132c6:	7c20      	ldrb	r0, [r4, #16]
 80132c8:	f7ff ff10 	bl	80130ec <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 80132cc:	7c23      	ldrb	r3, [r4, #16]
 80132ce:	07d9      	lsls	r1, r3, #31
 80132d0:	d503      	bpl.n	80132da <z_sys_mem_pool_block_alloc+0x154>
 80132d2:	f7ff ff02 	bl	80130da <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
 80132d6:	4680      	mov	r8, r0
 80132d8:	e7af      	b.n	801323a <z_sys_mem_pool_block_alloc+0xb4>
		return 0;
 80132da:	68f8      	ldr	r0, [r7, #12]
 80132dc:	e7fb      	b.n	80132d6 <z_sys_mem_pool_block_alloc+0x150>
	for (i = alloc_l; i >= 0; i--) {
 80132de:	3e01      	subs	r6, #1
 80132e0:	1c72      	adds	r2, r6, #1
 80132e2:	f1a3 030c 	sub.w	r3, r3, #12
 80132e6:	d187      	bne.n	80131f8 <z_sys_mem_pool_block_alloc+0x72>
 80132e8:	2500      	movs	r5, #0
 80132ea:	e7a8      	b.n	801323e <z_sys_mem_pool_block_alloc+0xb8>

080132ec <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
 80132ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132f0:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 80132f2:	7a83      	ldrb	r3, [r0, #10]
 80132f4:	009b      	lsls	r3, r3, #2
 80132f6:	3307      	adds	r3, #7
 80132f8:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
{
 80132fc:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 80132fe:	ebad 0d03 	sub.w	sp, sp, r3
 8013302:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
 8013304:	6843      	ldr	r3, [r0, #4]
 8013306:	f8cb 3000 	str.w	r3, [fp]
{
 801330a:	4606      	mov	r6, r0
	for (i = 1; i <= level; i++) {
 801330c:	465c      	mov	r4, fp
 801330e:	2001      	movs	r0, #1
 8013310:	4281      	cmp	r1, r0
 8013312:	d215      	bcs.n	8013340 <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 8013314:	7c30      	ldrb	r0, [r6, #16]
 8013316:	f010 0001 	ands.w	r0, r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
 801331a:	4688      	mov	r8, r1
 801331c:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 801331e:	d001      	beq.n	8013324 <z_sys_mem_pool_block_free+0x38>
 8013320:	f7ff fedb 	bl	80130da <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
 8013324:	4604      	mov	r4, r0
	while (level >= 0) {
 8013326:	f1b8 0f00 	cmp.w	r8, #0
 801332a:	da11      	bge.n	8013350 <z_sys_mem_pool_block_free+0x64>
	return -1;
 801332c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
 8013330:	4621      	mov	r1, r4
 8013332:	7c30      	ldrb	r0, [r6, #16]
 8013334:	f7ff feda 	bl	80130ec <pool_irq_unlock.isra.4>
}
 8013338:	3714      	adds	r7, #20
 801333a:	46bd      	mov	sp, r7
 801333c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
 8013340:	6823      	ldr	r3, [r4, #0]
 8013342:	089b      	lsrs	r3, r3, #2
 8013344:	f023 0303 	bic.w	r3, r3, #3
 8013348:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
 801334c:	3001      	adds	r0, #1
 801334e:	e7df      	b.n	8013310 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
 8013350:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8013354:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
 8013356:	fb03 fa05 	mul.w	sl, r3, r5
 801335a:	6833      	ldr	r3, [r6, #0]
 801335c:	603b      	str	r3, [r7, #0]
 801335e:	eb03 090a 	add.w	r9, r3, sl
	int bit = get_bit_ptr(p, level, bn, &word);
 8013362:	462a      	mov	r2, r5
 8013364:	f107 030c 	add.w	r3, r7, #12
 8013368:	4641      	mov	r1, r8
 801336a:	4630      	mov	r0, r6
 801336c:	f7ff fe9e 	bl	80130ac <get_bit_ptr>
	*word &= ~(1<<bit);
 8013370:	68fa      	ldr	r2, [r7, #12]
	node->next = list;
 8013372:	6839      	ldr	r1, [r7, #0]
 8013374:	2301      	movs	r3, #1
 8013376:	fa03 f000 	lsl.w	r0, r3, r0
 801337a:	6813      	ldr	r3, [r2, #0]
 801337c:	ea23 0300 	bic.w	r3, r3, r0
 8013380:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
 8013382:	68f3      	ldr	r3, [r6, #12]
 8013384:	220c      	movs	r2, #12
 8013386:	fb02 3308 	mla	r3, r2, r8, r3
 801338a:	1d1a      	adds	r2, r3, #4
 801338c:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
 8013390:	689a      	ldr	r2, [r3, #8]
 8013392:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
 8013396:	689a      	ldr	r2, [r3, #8]
 8013398:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
 801339c:	f8c3 9008 	str.w	r9, [r3, #8]
		pool_irq_unlock(p, key);
 80133a0:	7c30      	ldrb	r0, [r6, #16]
 80133a2:	4621      	mov	r1, r4
 80133a4:	f7ff fea2 	bl	80130ec <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 80133a8:	7c30      	ldrb	r0, [r6, #16]
 80133aa:	f010 0001 	ands.w	r0, r0, #1
 80133ae:	d001      	beq.n	80133b4 <z_sys_mem_pool_block_free+0xc8>
 80133b0:	f7ff fe93 	bl	80130da <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
 80133b4:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
 80133b6:	f1b8 0f00 	cmp.w	r8, #0
 80133ba:	d0b9      	beq.n	8013330 <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
 80133bc:	f107 030c 	add.w	r3, r7, #12
 80133c0:	462a      	mov	r2, r5
 80133c2:	4641      	mov	r1, r8
 80133c4:	4630      	mov	r0, r6
 80133c6:	f7ff fe71 	bl	80130ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	2800      	cmp	r0, #0
 80133ce:	bfb8      	it	lt
 80133d0:	3003      	addlt	r0, #3
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	f020 0003 	bic.w	r0, r0, #3
 80133d8:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
 80133dc:	f010 000f 	ands.w	r0, r0, #15
 80133e0:	d1a6      	bne.n	8013330 <z_sys_mem_pool_block_free+0x44>
			int b = (bn & ~3) + i;
 80133e2:	f025 0a03 	bic.w	sl, r5, #3
	node->next = NULL;
 80133e6:	4684      	mov	ip, r0
	return (u8_t *)p->buf + lsz * block;
 80133e8:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
 80133ea:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
 80133ee:	4353      	muls	r3, r2
 80133f0:	6832      	ldr	r2, [r6, #0]
 80133f2:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
 80133f4:	f852 e003 	ldr.w	lr, [r2, r3]
 80133f8:	f8d1 9004 	ldr.w	r9, [r1, #4]
		for (i = 0; i < 4; i++) {
 80133fc:	3001      	adds	r0, #1
 80133fe:	2804      	cmp	r0, #4
 8013400:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
 8013404:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
 8013408:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
 801340c:	f8c1 c004 	str.w	ip, [r1, #4]
 8013410:	d1ea      	bne.n	80133e8 <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
 8013412:	2d00      	cmp	r5, #0
 8013414:	bfb8      	it	lt
 8013416:	3503      	addlt	r5, #3
		level = level - 1;
 8013418:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
 801341c:	10ad      	asrs	r5, r5, #2
 801341e:	e782      	b.n	8013326 <z_sys_mem_pool_block_free+0x3a>

08013420 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
 8013420:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
 8013422:	f7ff fa57 	bl	80128d4 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
 8013426:	2000      	movs	r0, #0
 8013428:	bd08      	pop	{r3, pc}

0801342a <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, s32_t timeout)
{
 801342a:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
 801342c:	f7ff fa7e 	bl	801292c <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
 8013430:	f110 0f0b 	cmn.w	r0, #11
 8013434:	d005      	beq.n	8013442 <sys_sem_take+0x18>
 8013436:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
 801343a:	bf08      	it	eq
 801343c:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
 8013440:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
 8013442:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
 8013446:	e7fb      	b.n	8013440 <sys_sem_take+0x16>

08013448 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8013448:	4604      	mov	r4, r0
 801344a:	b508      	push	{r3, lr}
 801344c:	4608      	mov	r0, r1
 801344e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8013450:	461a      	mov	r2, r3
 8013452:	47a0      	blx	r4
	return z_impl_k_current_get();
 8013454:	f7ff fa38 	bl	80128c8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 8013458:	f7f6 ff9c 	bl	800a394 <z_impl_k_thread_abort>

0801345c <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
 801345c:	b510      	push	{r4, lr}
 801345e:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
 8013460:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013464:	4620      	mov	r0, r4
 8013466:	f005 f937 	bl	80186d8 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
 801346a:	4603      	mov	r3, r0
 801346c:	2800      	cmp	r0, #0
 801346e:	d0f7      	beq.n	8013460 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8013470:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
 8013472:	6842      	ldr	r2, [r0, #4]
 8013474:	f3bf 8f5b 	dmb	ish
 8013478:	e853 1f00 	ldrex	r1, [r3]
 801347c:	f021 0c01 	bic.w	ip, r1, #1
 8013480:	e843 ce00 	strex	lr, ip, [r3]
 8013484:	f1be 0f00 	cmp.w	lr, #0
 8013488:	d1f6      	bne.n	8013478 <z_work_q_main+0x1c>
 801348a:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
 801348e:	07cb      	lsls	r3, r1, #31
 8013490:	d500      	bpl.n	8013494 <z_work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
 8013492:	4790      	blx	r2
	z_impl_k_yield();
 8013494:	f7ff f9ae 	bl	80127f4 <z_impl_k_yield>
 8013498:	e7e2      	b.n	8013460 <z_work_q_main+0x4>

0801349a <arch_printk_char_out>:
}
 801349a:	2000      	movs	r0, #0
 801349c:	4770      	bx	lr

0801349e <print_err>:
{
 801349e:	b570      	push	{r4, r5, r6, lr}
 80134a0:	4604      	mov	r4, r0
 80134a2:	460d      	mov	r5, r1
	out('E', ctx);
 80134a4:	2045      	movs	r0, #69	; 0x45
 80134a6:	47a0      	blx	r4
	out('R', ctx);
 80134a8:	4629      	mov	r1, r5
 80134aa:	2052      	movs	r0, #82	; 0x52
 80134ac:	47a0      	blx	r4
	out('R', ctx);
 80134ae:	4629      	mov	r1, r5
 80134b0:	4623      	mov	r3, r4
 80134b2:	2052      	movs	r0, #82	; 0x52
}
 80134b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
 80134b8:	4718      	bx	r3

080134ba <str_out>:
{
 80134ba:	b530      	push	{r4, r5, lr}
 80134bc:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 80134be:	680c      	ldr	r4, [r1, #0]
 80134c0:	1c55      	adds	r5, r2, #1
 80134c2:	b114      	cbz	r4, 80134ca <str_out+0x10>
 80134c4:	684b      	ldr	r3, [r1, #4]
 80134c6:	4293      	cmp	r3, r2
 80134c8:	dc01      	bgt.n	80134ce <str_out+0x14>
		ctx->count++;
 80134ca:	608d      	str	r5, [r1, #8]
}
 80134cc:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 80134ce:	3b01      	subs	r3, #1
 80134d0:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 80134d2:	bf08      	it	eq
 80134d4:	2200      	moveq	r2, #0
 80134d6:	608d      	str	r5, [r1, #8]
 80134d8:	bf0c      	ite	eq
 80134da:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 80134dc:	54a0      	strbne	r0, [r4, r2]
 80134de:	e7f5      	b.n	80134cc <str_out+0x12>

080134e0 <z_vprintk>:
{
 80134e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134e4:	b08b      	sub	sp, #44	; 0x2c
 80134e6:	461c      	mov	r4, r3
	char length_mod = 0;
 80134e8:	f04f 0800 	mov.w	r8, #0
 80134ec:	1e53      	subs	r3, r2, #1
{
 80134ee:	4606      	mov	r6, r0
 80134f0:	460f      	mov	r7, r1
 80134f2:	9302      	str	r3, [sp, #8]
	int min_width = -1;
 80134f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 80134f8:	46c1      	mov	r9, r8
			might_format = 0;
 80134fa:	2500      	movs	r5, #0
					break;
 80134fc:	e005      	b.n	801350a <z_vprintk+0x2a>
		if (!might_format) {
 80134fe:	b96d      	cbnz	r5, 801351c <z_vprintk+0x3c>
			if (*fmt != '%') {
 8013500:	2825      	cmp	r0, #37	; 0x25
 8013502:	f000 814f 	beq.w	80137a4 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
 8013506:	4639      	mov	r1, r7
 8013508:	47b0      	blx	r6
	while (*fmt) {
 801350a:	9b02      	ldr	r3, [sp, #8]
 801350c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8013510:	9302      	str	r3, [sp, #8]
 8013512:	2800      	cmp	r0, #0
 8013514:	d1f3      	bne.n	80134fe <z_vprintk+0x1e>
}
 8013516:	b00b      	add	sp, #44	; 0x2c
 8013518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
 801351c:	2864      	cmp	r0, #100	; 0x64
 801351e:	d06e      	beq.n	80135fe <z_vprintk+0x11e>
 8013520:	d81a      	bhi.n	8013558 <z_vprintk+0x78>
 8013522:	2839      	cmp	r0, #57	; 0x39
 8013524:	d80a      	bhi.n	801353c <z_vprintk+0x5c>
 8013526:	2831      	cmp	r0, #49	; 0x31
 8013528:	d260      	bcs.n	80135ec <z_vprintk+0x10c>
 801352a:	282d      	cmp	r0, #45	; 0x2d
 801352c:	f000 8140 	beq.w	80137b0 <z_vprintk+0x2d0>
 8013530:	2830      	cmp	r0, #48	; 0x30
 8013532:	d04c      	beq.n	80135ce <z_vprintk+0xee>
 8013534:	2825      	cmp	r0, #37	; 0x25
 8013536:	d107      	bne.n	8013548 <z_vprintk+0x68>
				out((int)'%', ctx);
 8013538:	4639      	mov	r1, r7
 801353a:	e00b      	b.n	8013554 <z_vprintk+0x74>
			switch (*fmt) {
 801353c:	2858      	cmp	r0, #88	; 0x58
 801353e:	f000 80bb 	beq.w	80136b8 <z_vprintk+0x1d8>
 8013542:	2863      	cmp	r0, #99	; 0x63
 8013544:	f000 812a 	beq.w	801379c <z_vprintk+0x2bc>
					out((int)'%', ctx);
 8013548:	4639      	mov	r1, r7
 801354a:	2025      	movs	r0, #37	; 0x25
 801354c:	47b0      	blx	r6
					out((int)*fmt, ctx);
 801354e:	9b02      	ldr	r3, [sp, #8]
 8013550:	7818      	ldrb	r0, [r3, #0]
 8013552:	4639      	mov	r1, r7
 8013554:	47b0      	blx	r6
 8013556:	e7d0      	b.n	80134fa <z_vprintk+0x1a>
			switch (*fmt) {
 8013558:	2870      	cmp	r0, #112	; 0x70
 801355a:	f000 80a3 	beq.w	80136a4 <z_vprintk+0x1c4>
 801355e:	d811      	bhi.n	8013584 <z_vprintk+0xa4>
 8013560:	2869      	cmp	r0, #105	; 0x69
 8013562:	d04c      	beq.n	80135fe <z_vprintk+0x11e>
 8013564:	286c      	cmp	r0, #108	; 0x6c
 8013566:	d105      	bne.n	8013574 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
 8013568:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 801356c:	d12a      	bne.n	80135c4 <z_vprintk+0xe4>
					length_mod = 'L';
 801356e:	f04f 084c 	mov.w	r8, #76	; 0x4c
 8013572:	e7ca      	b.n	801350a <z_vprintk+0x2a>
			switch (*fmt) {
 8013574:	2868      	cmp	r0, #104	; 0x68
 8013576:	d1e7      	bne.n	8013548 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
 8013578:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
 801357c:	d122      	bne.n	80135c4 <z_vprintk+0xe4>
					length_mod = 'H';
 801357e:	f04f 0848 	mov.w	r8, #72	; 0x48
 8013582:	e7c2      	b.n	801350a <z_vprintk+0x2a>
			switch (*fmt) {
 8013584:	2875      	cmp	r0, #117	; 0x75
 8013586:	d071      	beq.n	801366c <z_vprintk+0x18c>
 8013588:	d818      	bhi.n	80135bc <z_vprintk+0xdc>
 801358a:	2873      	cmp	r0, #115	; 0x73
 801358c:	d1dc      	bne.n	8013548 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
 801358e:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
 8013592:	46ab      	mov	fp, r5
 8013594:	465b      	mov	r3, fp
 8013596:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801359a:	2800      	cmp	r0, #0
 801359c:	f040 80fb 	bne.w	8013796 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
 80135a0:	f1b9 0f03 	cmp.w	r9, #3
 80135a4:	f040 810a 	bne.w	80137bc <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
 80135a8:	1b5d      	subs	r5, r3, r5
 80135aa:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
 80135ae:	2d00      	cmp	r5, #0
 80135b0:	dda3      	ble.n	80134fa <z_vprintk+0x1a>
						out(' ', ctx);
 80135b2:	4639      	mov	r1, r7
 80135b4:	2020      	movs	r0, #32
 80135b6:	47b0      	blx	r6
 80135b8:	3d01      	subs	r5, #1
 80135ba:	e7f8      	b.n	80135ae <z_vprintk+0xce>
			switch (*fmt) {
 80135bc:	2878      	cmp	r0, #120	; 0x78
 80135be:	d07b      	beq.n	80136b8 <z_vprintk+0x1d8>
 80135c0:	287a      	cmp	r0, #122	; 0x7a
 80135c2:	d1c1      	bne.n	8013548 <z_vprintk+0x68>
				} else if (length_mod == 0) {
 80135c4:	f1b8 0f00 	cmp.w	r8, #0
 80135c8:	d1be      	bne.n	8013548 <z_vprintk+0x68>
 80135ca:	4680      	mov	r8, r0
 80135cc:	e79d      	b.n	801350a <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
 80135ce:	f1ba 0f00 	cmp.w	sl, #0
 80135d2:	da0e      	bge.n	80135f2 <z_vprintk+0x112>
 80135d4:	f1b9 0f00 	cmp.w	r9, #0
 80135d8:	f000 80ed 	beq.w	80137b6 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
 80135dc:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 80135e0:	f1b9 0f00 	cmp.w	r9, #0
 80135e4:	bf08      	it	eq
 80135e6:	f04f 0902 	moveq.w	r9, #2
 80135ea:	e78e      	b.n	801350a <z_vprintk+0x2a>
				if (min_width < 0) {
 80135ec:	f1ba 0f00 	cmp.w	sl, #0
 80135f0:	dbf4      	blt.n	80135dc <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
 80135f2:	230a      	movs	r3, #10
 80135f4:	fb03 0a0a 	mla	sl, r3, sl, r0
 80135f8:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 80135fc:	e7f0      	b.n	80135e0 <z_vprintk+0x100>
				if (length_mod == 'z') {
 80135fe:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
 8013602:	d102      	bne.n	801360a <z_vprintk+0x12a>
					d = va_arg(ap, int);
 8013604:	f854 5b04 	ldr.w	r5, [r4], #4
 8013608:	e01f      	b.n	801364a <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
 801360a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 801360e:	d0f9      	beq.n	8013604 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
 8013610:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 8013614:	d1f6      	bne.n	8013604 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
 8013616:	3407      	adds	r4, #7
 8013618:	f024 0407 	bic.w	r4, r4, #7
 801361c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
 8013620:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
 8013624:	9106      	str	r1, [sp, #24]
 8013626:	f143 0100 	adc.w	r1, r3, #0
 801362a:	9107      	str	r1, [sp, #28]
 801362c:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 8013630:	2100      	movs	r1, #0
 8013632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013636:	4561      	cmp	r1, ip
 8013638:	bf08      	it	eq
 801363a:	4558      	cmpeq	r0, fp
 801363c:	d204      	bcs.n	8013648 <z_vprintk+0x168>
						print_err(out, ctx);
 801363e:	4639      	mov	r1, r7
 8013640:	4630      	mov	r0, r6
 8013642:	f7ff ff2c 	bl	801349e <print_err>
						break;
 8013646:	e758      	b.n	80134fa <z_vprintk+0x1a>
					d = lld;
 8013648:	4615      	mov	r5, r2
				if (d < 0) {
 801364a:	2d00      	cmp	r5, #0
 801364c:	da05      	bge.n	801365a <z_vprintk+0x17a>
					out((int)'-', ctx);
 801364e:	4639      	mov	r1, r7
 8013650:	202d      	movs	r0, #45	; 0x2d
 8013652:	47b0      	blx	r6
					d = -d;
 8013654:	426d      	negs	r5, r5
					min_width--;
 8013656:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
 801365a:	f8cd a000 	str.w	sl, [sp]
 801365e:	464b      	mov	r3, r9
 8013660:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
 8013662:	4639      	mov	r1, r7
 8013664:	4630      	mov	r0, r6
 8013666:	f7f2 f959 	bl	800591c <_printk_dec_ulong>
				break;
 801366a:	e746      	b.n	80134fa <z_vprintk+0x1a>
				if (length_mod == 'z') {
 801366c:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
 8013670:	d102      	bne.n	8013678 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
 8013672:	f854 2b04 	ldr.w	r2, [r4], #4
 8013676:	e011      	b.n	801369c <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
 8013678:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 801367c:	d0f9      	beq.n	8013672 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
 801367e:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 8013682:	d1f6      	bne.n	8013672 <z_vprintk+0x192>
					unsigned long long llu =
 8013684:	3407      	adds	r4, #7
 8013686:	f024 0407 	bic.w	r4, r4, #7
 801368a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
 801368e:	2100      	movs	r1, #0
 8013690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013694:	4299      	cmp	r1, r3
 8013696:	bf08      	it	eq
 8013698:	4290      	cmpeq	r0, r2
 801369a:	d3d0      	bcc.n	801363e <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
 801369c:	f8cd a000 	str.w	sl, [sp]
 80136a0:	464b      	mov	r3, r9
 80136a2:	e7de      	b.n	8013662 <z_vprintk+0x182>
				out('0', ctx);
 80136a4:	4639      	mov	r1, r7
 80136a6:	2030      	movs	r0, #48	; 0x30
 80136a8:	47b0      	blx	r6
				out('x', ctx);
 80136aa:	4639      	mov	r1, r7
 80136ac:	2078      	movs	r0, #120	; 0x78
 80136ae:	47b0      	blx	r6
					min_width = 8;
 80136b0:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
 80136b4:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
 80136b8:	9b02      	ldr	r3, [sp, #8]
 80136ba:	781b      	ldrb	r3, [r3, #0]
 80136bc:	2b70      	cmp	r3, #112	; 0x70
 80136be:	d104      	bne.n	80136ca <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
 80136c0:	f854 3b04 	ldr.w	r3, [r4], #4
 80136c4:	9304      	str	r3, [sp, #16]
 80136c6:	2300      	movs	r3, #0
 80136c8:	e00d      	b.n	80136e6 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
 80136ca:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 80136ce:	d0f7      	beq.n	80136c0 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
 80136d0:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 80136d4:	d1f4      	bne.n	80136c0 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
 80136d6:	3407      	adds	r4, #7
 80136d8:	f024 0307 	bic.w	r3, r4, #7
 80136dc:	461c      	mov	r4, r3
 80136de:	685b      	ldr	r3, [r3, #4]
 80136e0:	f854 2b08 	ldr.w	r2, [r4], #8
 80136e4:	9204      	str	r2, [sp, #16]
	int digits = 0;
 80136e6:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
 80136e8:	2210      	movs	r2, #16
	int digits = 0;
 80136ea:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
 80136ec:	9105      	str	r1, [sp, #20]
	int shift = sizeof(num) * 8;
 80136ee:	f04f 0b40 	mov.w	fp, #64	; 0x40
		shift -= 4;
 80136f2:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
 80136f6:	9804      	ldr	r0, [sp, #16]
 80136f8:	f1cb 0c20 	rsb	ip, fp, #32
 80136fc:	f1ab 0120 	sub.w	r1, fp, #32
 8013700:	fa20 f00b 	lsr.w	r0, r0, fp
 8013704:	fa03 fc0c 	lsl.w	ip, r3, ip
 8013708:	ea40 000c 	orr.w	r0, r0, ip
 801370c:	fa23 f101 	lsr.w	r1, r3, r1
 8013710:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
 8013712:	f010 000f 	ands.w	r0, r0, #15
 8013716:	d108      	bne.n	801372a <z_vprintk+0x24a>
 8013718:	9905      	ldr	r1, [sp, #20]
 801371a:	b911      	cbnz	r1, 8013722 <z_vprintk+0x242>
 801371c:	f1bb 0f00 	cmp.w	fp, #0
 8013720:	d124      	bne.n	801376c <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
 8013722:	2130      	movs	r1, #48	; 0x30
 8013724:	e005      	b.n	8013732 <z_vprintk+0x252>
			found_largest_digit = 1;
 8013726:	9505      	str	r5, [sp, #20]
 8013728:	e7e3      	b.n	80136f2 <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
 801372a:	2809      	cmp	r0, #9
 801372c:	bf8c      	ite	hi
 801372e:	2157      	movhi	r1, #87	; 0x57
 8013730:	2130      	movls	r1, #48	; 0x30
 8013732:	4408      	add	r0, r1
			out((int)nibble, ctx);
 8013734:	b240      	sxtb	r0, r0
 8013736:	4639      	mov	r1, r7
 8013738:	9308      	str	r3, [sp, #32]
 801373a:	9205      	str	r2, [sp, #20]
 801373c:	47b0      	blx	r6
			digits++;
 801373e:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
 8013740:	9a05      	ldr	r2, [sp, #20]
			digits++;
 8013742:	3301      	adds	r3, #1
 8013744:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
 8013746:	9b08      	ldr	r3, [sp, #32]
 8013748:	f1bb 0f00 	cmp.w	fp, #0
 801374c:	d1eb      	bne.n	8013726 <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
 801374e:	f1b9 0f03 	cmp.w	r9, #3
 8013752:	f47f aed2 	bne.w	80134fa <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
 8013756:	9b03      	ldr	r3, [sp, #12]
 8013758:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
 801375c:	2d00      	cmp	r5, #0
 801375e:	f77f aecc 	ble.w	80134fa <z_vprintk+0x1a>
			out(' ', ctx);
 8013762:	4639      	mov	r1, r7
 8013764:	2020      	movs	r0, #32
 8013766:	47b0      	blx	r6
 8013768:	3d01      	subs	r5, #1
 801376a:	e7f7      	b.n	801375c <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
 801376c:	1e51      	subs	r1, r2, #1
 801376e:	4592      	cmp	sl, r2
 8013770:	9108      	str	r1, [sp, #32]
 8013772:	db07      	blt.n	8013784 <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
 8013774:	f1b9 0f01 	cmp.w	r9, #1
 8013778:	d106      	bne.n	8013788 <z_vprintk+0x2a8>
 801377a:	9309      	str	r3, [sp, #36]	; 0x24
				out('0', ctx);
 801377c:	4639      	mov	r1, r7
 801377e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
 8013780:	47b0      	blx	r6
 8013782:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
 8013784:	9a08      	ldr	r2, [sp, #32]
 8013786:	e7b4      	b.n	80136f2 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
 8013788:	f1b9 0f02 	cmp.w	r9, #2
 801378c:	d1fa      	bne.n	8013784 <z_vprintk+0x2a4>
 801378e:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
 8013790:	4639      	mov	r1, r7
 8013792:	2020      	movs	r0, #32
 8013794:	e7f4      	b.n	8013780 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
 8013796:	4639      	mov	r1, r7
 8013798:	47b0      	blx	r6
 801379a:	e6fb      	b.n	8013594 <z_vprintk+0xb4>
				out(c, ctx);
 801379c:	4639      	mov	r1, r7
 801379e:	f854 0b04 	ldr.w	r0, [r4], #4
 80137a2:	e6d7      	b.n	8013554 <z_vprintk+0x74>
				length_mod = 0;
 80137a4:	46a8      	mov	r8, r5
				padding = PAD_NONE;
 80137a6:	46a9      	mov	r9, r5
				min_width = -1;
 80137a8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
 80137ac:	2501      	movs	r5, #1
 80137ae:	e6ac      	b.n	801350a <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
 80137b0:	f04f 0903 	mov.w	r9, #3
 80137b4:	e6a9      	b.n	801350a <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
 80137b6:	f04f 0901 	mov.w	r9, #1
 80137ba:	e6a6      	b.n	801350a <z_vprintk+0x2a>
			might_format = 0;
 80137bc:	4605      	mov	r5, r0
		++fmt;
 80137be:	e6a4      	b.n	801350a <z_vprintk+0x2a>

080137c0 <printk>:
{
 80137c0:	b40f      	push	{r0, r1, r2, r3}
 80137c2:	b507      	push	{r0, r1, r2, lr}
 80137c4:	a904      	add	r1, sp, #16
 80137c6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 80137ca:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 80137cc:	f7f2 f8f8 	bl	80059c0 <vprintk>
}
 80137d0:	b003      	add	sp, #12
 80137d2:	f85d eb04 	ldr.w	lr, [sp], #4
 80137d6:	b004      	add	sp, #16
 80137d8:	4770      	bx	lr

080137da <snprintk>:
{
 80137da:	b40c      	push	{r2, r3}
 80137dc:	b507      	push	{r0, r1, r2, lr}
 80137de:	ab04      	add	r3, sp, #16
 80137e0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 80137e4:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 80137e6:	f7f2 f8f9 	bl	80059dc <vsnprintk>
}
 80137ea:	b003      	add	sp, #12
 80137ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80137f0:	b002      	add	sp, #8
 80137f2:	4770      	bx	lr

080137f4 <ring_buf_space_get>:
 *
 * @return Ring buffer free space (in 32-bit words or bytes).
 */
static inline u32_t ring_buf_space_get(struct ring_buf *buf)
{
	return z_ring_buf_custom_space_get(buf->size, buf->head, buf->tail);
 80137f4:	6903      	ldr	r3, [r0, #16]
 80137f6:	e9d0 2000 	ldrd	r2, r0, [r0]
	if (tail < head) {
 80137fa:	4282      	cmp	r2, r0
	return (size - tail) + head - 1;
 80137fc:	bf96      	itet	ls
 80137fe:	189b      	addls	r3, r3, r2
		return head - tail - 1;
 8013800:	f102 33ff 	addhi.w	r3, r2, #4294967295	; 0xffffffff
	return (size - tail) + head - 1;
 8013804:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
 8013808:	1a18      	subs	r0, r3, r0
}
 801380a:	4770      	bx	lr

0801380c <ring_buf_put_claim>:

u32_t ring_buf_put_claim(struct ring_buf *buf, u8_t **data, u32_t size)
{
	u32_t space, trail_size, allocated;

	space = z_ring_buf_custom_space_get(buf->size, buf->head,
 801380c:	6803      	ldr	r3, [r0, #0]
{
 801380e:	b570      	push	{r4, r5, r6, lr}
	space = z_ring_buf_custom_space_get(buf->size, buf->head,
 8013810:	6884      	ldr	r4, [r0, #8]
 8013812:	6906      	ldr	r6, [r0, #16]
	if (tail < head) {
 8013814:	42a3      	cmp	r3, r4
					    buf->misc.byte_mode.tmp_tail);

	/* Limit requested size to available size. */
	size = MIN(size, space);
	trail_size = buf->size - buf->misc.byte_mode.tmp_tail;
 8013816:	eba6 0504 	sub.w	r5, r6, r4
	return (size - tail) + head - 1;
 801381a:	bf98      	it	ls
 801381c:	199b      	addls	r3, r3, r6
 801381e:	3b01      	subs	r3, #1

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
 8013820:	4295      	cmp	r5, r2
 8013822:	eba3 0304 	sub.w	r3, r3, r4
 8013826:	bf28      	it	cs
 8013828:	4615      	movcs	r5, r2
 801382a:	42ab      	cmp	r3, r5

	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
 801382c:	6942      	ldr	r2, [r0, #20]
	allocated = MIN(trail_size, size);
 801382e:	bf28      	it	cs
 8013830:	462b      	movcs	r3, r5
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
 8013832:	4422      	add	r2, r4
	buf->misc.byte_mode.tmp_tail =
		wrap(buf->misc.byte_mode.tmp_tail + allocated, buf->size);
 8013834:	441c      	add	r4, r3
	return val >= max ? (val - max) : val;
 8013836:	42a6      	cmp	r6, r4
 8013838:	bf98      	it	ls
 801383a:	1ba4      	subls	r4, r4, r6
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
 801383c:	600a      	str	r2, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
 801383e:	6084      	str	r4, [r0, #8]

	return allocated;
}
 8013840:	4618      	mov	r0, r3
 8013842:	bd70      	pop	{r4, r5, r6, pc}

08013844 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, u32_t size)
{
 8013844:	b510      	push	{r4, lr}
 8013846:	4604      	mov	r4, r0
	if (size > ring_buf_space_get(buf)) {
 8013848:	f7ff ffd4 	bl	80137f4 <ring_buf_space_get>
 801384c:	4288      	cmp	r0, r1
 801384e:	d309      	bcc.n	8013864 <ring_buf_put_finish+0x20>
		return -EINVAL;
	}

	buf->tail = wrap(buf->tail + size, buf->size);
 8013850:	6863      	ldr	r3, [r4, #4]
 8013852:	4419      	add	r1, r3
 8013854:	6923      	ldr	r3, [r4, #16]
	return val >= max ? (val - max) : val;
 8013856:	4299      	cmp	r1, r3
 8013858:	bf28      	it	cs
 801385a:	1ac9      	subcs	r1, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
 801385c:	e9c4 1101 	strd	r1, r1, [r4, #4]

	return 0;
 8013860:	2000      	movs	r0, #0
}
 8013862:	bd10      	pop	{r4, pc}
		return -EINVAL;
 8013864:	f06f 0015 	mvn.w	r0, #21
 8013868:	e7fb      	b.n	8013862 <ring_buf_put_finish+0x1e>

0801386a <ring_buf_put>:

u32_t ring_buf_put(struct ring_buf *buf, const u8_t *data, u32_t size)
{
 801386a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801386e:	4680      	mov	r8, r0
 8013870:	460f      	mov	r7, r1
 8013872:	4616      	mov	r6, r2
	u8_t *dst;
	u32_t partial_size;
	u32_t total_size = 0U;
 8013874:	2500      	movs	r5, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
 8013876:	4632      	mov	r2, r6
 8013878:	a901      	add	r1, sp, #4
 801387a:	4640      	mov	r0, r8
 801387c:	f7ff ffc6 	bl	801380c <ring_buf_put_claim>
 8013880:	4639      	mov	r1, r7
 8013882:	4604      	mov	r4, r0
 8013884:	4602      	mov	r2, r0
 8013886:	9801      	ldr	r0, [sp, #4]
 8013888:	f7f1 f849 	bl	800491e <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
 801388c:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
 801388e:	4425      	add	r5, r4
		data += partial_size;
 8013890:	4427      	add	r7, r4
	} while (size && partial_size);
 8013892:	d001      	beq.n	8013898 <ring_buf_put+0x2e>
 8013894:	2c00      	cmp	r4, #0
 8013896:	d1ee      	bne.n	8013876 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
 8013898:	4629      	mov	r1, r5
 801389a:	4640      	mov	r0, r8
 801389c:	f7ff ffd2 	bl	8013844 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
 80138a0:	4628      	mov	r0, r5
 80138a2:	b002      	add	sp, #8
 80138a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080138a8 <ring_buf_get_claim>:

u32_t ring_buf_get_claim(struct ring_buf *buf, u8_t **data, u32_t size)
{
 80138a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t space, granted_size, trail_size;

	space = (buf->size - 1) -
		z_ring_buf_custom_space_get(buf->size,
 80138aa:	e9d0 3603 	ldrd	r3, r6, [r0, #12]
 80138ae:	6844      	ldr	r4, [r0, #4]
	if (tail < head) {
 80138b0:	42a3      	cmp	r3, r4
	return (size - tail) + head - 1;
 80138b2:	bf95      	itete	ls
 80138b4:	18f7      	addls	r7, r6, r3
		return head - tail - 1;
 80138b6:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
	return (size - tail) + head - 1;
 80138ba:	f107 37ff 	addls.w	r7, r7, #4294967295	; 0xffffffff
		return head - tail - 1;
 80138be:	1b2d      	subhi	r5, r5, r4
	return (size - tail) + head - 1;
 80138c0:	bf98      	it	ls
 80138c2:	1b3d      	subls	r5, r7, r4
	space = (buf->size - 1) -
 80138c4:	1e74      	subs	r4, r6, #1
 80138c6:	1b64      	subs	r4, r4, r5
					    buf->misc.byte_mode.tmp_head,
					    buf->tail);
	trail_size = buf->size - buf->misc.byte_mode.tmp_head;
 80138c8:	1af5      	subs	r5, r6, r3

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
 80138ca:	42aa      	cmp	r2, r5
 80138cc:	bf28      	it	cs
 80138ce:	462a      	movcs	r2, r5
 80138d0:	42a2      	cmp	r2, r4
 80138d2:	bf28      	it	cs
 80138d4:	4622      	movcs	r2, r4

	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
 80138d6:	6944      	ldr	r4, [r0, #20]
 80138d8:	441c      	add	r4, r3
	buf->misc.byte_mode.tmp_head =
		wrap(buf->misc.byte_mode.tmp_head + granted_size, buf->size);
 80138da:	4413      	add	r3, r2
	return val >= max ? (val - max) : val;
 80138dc:	429e      	cmp	r6, r3
 80138de:	bf98      	it	ls
 80138e0:	1b9b      	subls	r3, r3, r6
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
 80138e2:	600c      	str	r4, [r1, #0]
	buf->misc.byte_mode.tmp_head =
 80138e4:	60c3      	str	r3, [r0, #12]

	return granted_size;
}
 80138e6:	4610      	mov	r0, r2
 80138e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080138ea <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, u32_t size)
{
 80138ea:	b538      	push	{r3, r4, r5, lr}
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
 80138ec:	6905      	ldr	r5, [r0, #16]
{
 80138ee:	4604      	mov	r4, r0
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
 80138f0:	f7ff ff80 	bl	80137f4 <ring_buf_space_get>
 80138f4:	1e6b      	subs	r3, r5, #1
 80138f6:	1a18      	subs	r0, r3, r0

	if (size > allocated) {
 80138f8:	4288      	cmp	r0, r1
 80138fa:	d308      	bcc.n	801390e <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->head = wrap(buf->head + size, buf->size);
 80138fc:	6823      	ldr	r3, [r4, #0]
 80138fe:	4419      	add	r1, r3
	return val >= max ? (val - max) : val;
 8013900:	428d      	cmp	r5, r1
 8013902:	bf98      	it	ls
 8013904:	1b49      	subls	r1, r1, r5
	buf->head = wrap(buf->head + size, buf->size);
 8013906:	6021      	str	r1, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
 8013908:	60e1      	str	r1, [r4, #12]

	return 0;
 801390a:	2000      	movs	r0, #0
}
 801390c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 801390e:	f06f 0015 	mvn.w	r0, #21
 8013912:	e7fb      	b.n	801390c <ring_buf_get_finish+0x22>

08013914 <ring_buf_get>:

u32_t ring_buf_get(struct ring_buf *buf, u8_t *data, u32_t size)
{
 8013914:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013918:	4680      	mov	r8, r0
 801391a:	460f      	mov	r7, r1
 801391c:	4616      	mov	r6, r2
	u8_t *src;
	u32_t partial_size;
	u32_t total_size = 0U;
 801391e:	2500      	movs	r5, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
 8013920:	4632      	mov	r2, r6
 8013922:	a901      	add	r1, sp, #4
 8013924:	4640      	mov	r0, r8
 8013926:	f7ff ffbf 	bl	80138a8 <ring_buf_get_claim>
 801392a:	9901      	ldr	r1, [sp, #4]
 801392c:	4604      	mov	r4, r0
 801392e:	4602      	mov	r2, r0
 8013930:	4638      	mov	r0, r7
 8013932:	f7f0 fff4 	bl	800491e <memcpy>
		memcpy(data, src, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
 8013936:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
 8013938:	4425      	add	r5, r4
		data += partial_size;
 801393a:	4427      	add	r7, r4
	} while (size && partial_size);
 801393c:	d001      	beq.n	8013942 <ring_buf_get+0x2e>
 801393e:	2c00      	cmp	r4, #0
 8013940:	d1ee      	bne.n	8013920 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
 8013942:	4629      	mov	r1, r5
 8013944:	4640      	mov	r0, r8
 8013946:	f7ff ffd0 	bl	80138ea <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
 801394a:	4628      	mov	r0, r5
 801394c:	b002      	add	sp, #8
 801394e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013952 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);

GEN_ABS_SYM_END
 8013952:	4770      	bx	lr

08013954 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
 8013954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013958:	b087      	sub	sp, #28
 801395a:	468a      	mov	sl, r1
 801395c:	4614      	mov	r4, r2
 801395e:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
 8013960:	4605      	mov	r5, r0
 8013962:	b918      	cbnz	r0, 801396c <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
 8013964:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
 8013966:	b007      	add	sp, #28
 8013968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
 801396c:	2900      	cmp	r1, #0
 801396e:	d0f9      	beq.n	8013964 <fnmatchx+0x10>
    if (recursion-- == 0)
 8013970:	9b02      	ldr	r3, [sp, #8]
 8013972:	2b00      	cmp	r3, #0
 8013974:	f000 8114 	beq.w	8013ba0 <fnmatchx+0x24c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 8013978:	f004 0304 	and.w	r3, r4, #4
 801397c:	460a      	mov	r2, r1
 801397e:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
 8013980:	46a8      	mov	r8, r5
 8013982:	4621      	mov	r1, r4
 8013984:	f818 0b01 	ldrb.w	r0, [r8], #1
 8013988:	f7f2 f852 	bl	8005a30 <foldcase>
 801398c:	b2c0      	uxtb	r0, r0
 801398e:	283f      	cmp	r0, #63	; 0x3f
 8013990:	4606      	mov	r6, r0
 8013992:	7817      	ldrb	r7, [r2, #0]
 8013994:	d022      	beq.n	80139dc <fnmatchx+0x88>
 8013996:	dc0a      	bgt.n	80139ae <fnmatchx+0x5a>
 8013998:	b1c0      	cbz	r0, 80139cc <fnmatchx+0x78>
 801399a:	282a      	cmp	r0, #42	; 0x2a
 801399c:	d035      	beq.n	8013a0a <fnmatchx+0xb6>
            if (c != FOLDCASE(*string++, flags))
 801399e:	4621      	mov	r1, r4
 80139a0:	4638      	mov	r0, r7
 80139a2:	3201      	adds	r2, #1
 80139a4:	f7f2 f844 	bl	8005a30 <foldcase>
 80139a8:	4286      	cmp	r6, r0
 80139aa:	d01e      	beq.n	80139ea <fnmatchx+0x96>
 80139ac:	e7da      	b.n	8013964 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
 80139ae:	285b      	cmp	r0, #91	; 0x5b
 80139b0:	d07a      	beq.n	8013aa8 <fnmatchx+0x154>
 80139b2:	285c      	cmp	r0, #92	; 0x5c
 80139b4:	d1f3      	bne.n	801399e <fnmatchx+0x4a>
            if (!(flags & FNM_NOESCAPE)) {
 80139b6:	07e3      	lsls	r3, r4, #31
 80139b8:	d4f1      	bmi.n	801399e <fnmatchx+0x4a>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
 80139ba:	7868      	ldrb	r0, [r5, #1]
 80139bc:	f7f2 f838 	bl	8005a30 <foldcase>
 80139c0:	b2c6      	uxtb	r6, r0
 80139c2:	2e00      	cmp	r6, #0
 80139c4:	d0eb      	beq.n	801399e <fnmatchx+0x4a>
 80139c6:	f105 0802 	add.w	r8, r5, #2
 80139ca:	e7e8      	b.n	801399e <fnmatchx+0x4a>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
 80139cc:	06e4      	lsls	r4, r4, #27
 80139ce:	d501      	bpl.n	80139d4 <fnmatchx+0x80>
 80139d0:	2f2f      	cmp	r7, #47	; 0x2f
 80139d2:	d0c8      	beq.n	8013966 <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
 80139d4:	1c38      	adds	r0, r7, #0
                        0 : FNM_NOMATCH;
 80139d6:	bf18      	it	ne
 80139d8:	2001      	movne	r0, #1
 80139da:	e7c4      	b.n	8013966 <fnmatchx+0x12>
            if (*string == EOS)
 80139dc:	2f00      	cmp	r7, #0
 80139de:	d0c1      	beq.n	8013964 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
 80139e0:	2f2f      	cmp	r7, #47	; 0x2f
 80139e2:	d104      	bne.n	80139ee <fnmatchx+0x9a>
 80139e4:	07a1      	lsls	r1, r4, #30
 80139e6:	d4bd      	bmi.n	8013964 <fnmatchx+0x10>
            ++string;
 80139e8:	3201      	adds	r2, #1
            break;
 80139ea:	4645      	mov	r5, r8
 80139ec:	e7c8      	b.n	8013980 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 80139ee:	2f2e      	cmp	r7, #46	; 0x2e
 80139f0:	d1fa      	bne.n	80139e8 <fnmatchx+0x94>
 80139f2:	9b04      	ldr	r3, [sp, #16]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d0f7      	beq.n	80139e8 <fnmatchx+0x94>
 80139f8:	4552      	cmp	r2, sl
 80139fa:	d0b3      	beq.n	8013964 <fnmatchx+0x10>
                (string == stringstart ||
 80139fc:	07a3      	lsls	r3, r4, #30
 80139fe:	d5f3      	bpl.n	80139e8 <fnmatchx+0x94>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
 8013a00:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8013a04:	2b2f      	cmp	r3, #47	; 0x2f
 8013a06:	d1ef      	bne.n	80139e8 <fnmatchx+0x94>
 8013a08:	e7ac      	b.n	8013964 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
 8013a0a:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
 8013a0c:	f7f2 f810 	bl	8005a30 <foldcase>
 8013a10:	b2c1      	uxtb	r1, r0
            while (c == '*')
 8013a12:	292a      	cmp	r1, #42	; 0x2a
 8013a14:	d018      	beq.n	8013a48 <fnmatchx+0xf4>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 8013a16:	2f2e      	cmp	r7, #46	; 0x2e
 8013a18:	d109      	bne.n	8013a2e <fnmatchx+0xda>
 8013a1a:	9b04      	ldr	r3, [sp, #16]
 8013a1c:	b13b      	cbz	r3, 8013a2e <fnmatchx+0xda>
 8013a1e:	4552      	cmp	r2, sl
 8013a20:	d0a0      	beq.n	8013964 <fnmatchx+0x10>
                (string == stringstart ||
 8013a22:	07a7      	lsls	r7, r4, #30
 8013a24:	d503      	bpl.n	8013a2e <fnmatchx+0xda>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
 8013a26:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8013a2a:	2b2f      	cmp	r3, #47	; 0x2f
 8013a2c:	d09a      	beq.n	8013964 <fnmatchx+0x10>
            if (c == EOS) {
 8013a2e:	b979      	cbnz	r1, 8013a50 <fnmatchx+0xfc>
                if (flags & FNM_PATHNAME)
 8013a30:	f014 0002 	ands.w	r0, r4, #2
 8013a34:	d097      	beq.n	8013966 <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
 8013a36:	06e6      	lsls	r6, r4, #27
 8013a38:	f100 80b4 	bmi.w	8013ba4 <fnmatchx+0x250>
                        strchr(string, '/') == NULL ?
 8013a3c:	212f      	movs	r1, #47	; 0x2f
 8013a3e:	4610      	mov	r0, r2
 8013a40:	f7f0 ffb7 	bl	80049b2 <strchr>
                        0 : FNM_NOMATCH;
 8013a44:	3000      	adds	r0, #0
 8013a46:	e7c6      	b.n	80139d6 <fnmatchx+0x82>
                c = FOLDCASE(*++pattern, flags);
 8013a48:	4621      	mov	r1, r4
 8013a4a:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 8013a4e:	e7dd      	b.n	8013a0c <fnmatchx+0xb8>
            } else if (c == '/' && flags & FNM_PATHNAME) {
 8013a50:	292f      	cmp	r1, #47	; 0x2f
 8013a52:	d101      	bne.n	8013a58 <fnmatchx+0x104>
 8013a54:	07a5      	lsls	r5, r4, #30
 8013a56:	d420      	bmi.n	8013a9a <fnmatchx+0x146>
    if (recursion-- == 0)
 8013a58:	9b02      	ldr	r3, [sp, #8]
 8013a5a:	4615      	mov	r5, r2
 8013a5c:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
 8013a5e:	f024 0904 	bic.w	r9, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
 8013a62:	f004 0a02 	and.w	sl, r4, #2
 8013a66:	46ab      	mov	fp, r5
            while ((test = FOLDCASE(*string, flags)) != EOS) {
 8013a68:	4621      	mov	r1, r4
 8013a6a:	f89b 0000 	ldrb.w	r0, [fp]
 8013a6e:	f7f1 ffdf 	bl	8005a30 <foldcase>
 8013a72:	b2c6      	uxtb	r6, r0
 8013a74:	3501      	adds	r5, #1
 8013a76:	2e00      	cmp	r6, #0
 8013a78:	f43f af74 	beq.w	8013964 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
 8013a7c:	463b      	mov	r3, r7
 8013a7e:	464a      	mov	r2, r9
 8013a80:	4659      	mov	r1, fp
 8013a82:	4640      	mov	r0, r8
 8013a84:	f7ff ff66 	bl	8013954 <fnmatchx>
 8013a88:	2801      	cmp	r0, #1
 8013a8a:	f47f af6c 	bne.w	8013966 <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
 8013a8e:	2e2f      	cmp	r6, #47	; 0x2f
 8013a90:	d1e9      	bne.n	8013a66 <fnmatchx+0x112>
 8013a92:	f1ba 0f00 	cmp.w	sl, #0
 8013a96:	d0e6      	beq.n	8013a66 <fnmatchx+0x112>
 8013a98:	e764      	b.n	8013964 <fnmatchx+0x10>
                if ((string = strchr(string, '/')) == NULL)
 8013a9a:	4610      	mov	r0, r2
 8013a9c:	f7f0 ff89 	bl	80049b2 <strchr>
 8013aa0:	4602      	mov	r2, r0
 8013aa2:	2800      	cmp	r0, #0
 8013aa4:	d1a1      	bne.n	80139ea <fnmatchx+0x96>
 8013aa6:	e75d      	b.n	8013964 <fnmatchx+0x10>
            if (*string == EOS)
 8013aa8:	2f00      	cmp	r7, #0
 8013aaa:	f43f af5b 	beq.w	8013964 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
 8013aae:	2f2f      	cmp	r7, #47	; 0x2f
 8013ab0:	d102      	bne.n	8013ab8 <fnmatchx+0x164>
 8013ab2:	07a0      	lsls	r0, r4, #30
 8013ab4:	f53f af56 	bmi.w	8013964 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
 8013ab8:	4621      	mov	r1, r4
 8013aba:	4638      	mov	r0, r7
 8013abc:	f7f1 ffb8 	bl	8005a30 <foldcase>
 8013ac0:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
 8013ac2:	f1b8 0f00 	cmp.w	r8, #0
 8013ac6:	f43f af4d 	beq.w	8013964 <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 8013aca:	786b      	ldrb	r3, [r5, #1]
 8013acc:	2b21      	cmp	r3, #33	; 0x21
 8013ace:	d001      	beq.n	8013ad4 <fnmatchx+0x180>
 8013ad0:	2b5e      	cmp	r3, #94	; 0x5e
 8013ad2:	d126      	bne.n	8013b22 <fnmatchx+0x1ce>
        ++pattern;
 8013ad4:	3502      	adds	r5, #2
 8013ad6:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 8013ad8:	9301      	str	r3, [sp, #4]
    need = 1;
 8013ada:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 8013adc:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
 8013ae0:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 8013ae4:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
 8013ae6:	462e      	mov	r6, r5
 8013ae8:	4621      	mov	r1, r4
 8013aea:	f816 0b01 	ldrb.w	r0, [r6], #1
 8013aee:	9305      	str	r3, [sp, #20]
 8013af0:	f7f1 ff9e 	bl	8005a30 <foldcase>
 8013af4:	fa5f f980 	uxtb.w	r9, r0
 8013af8:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
 8013afc:	9b05      	ldr	r3, [sp, #20]
 8013afe:	d113      	bne.n	8013b28 <fnmatchx+0x1d4>
 8013b00:	bb2b      	cbnz	r3, 8013b4e <fnmatchx+0x1fa>
    return ok == negate ? NULL : pattern;
 8013b02:	9b01      	ldr	r3, [sp, #4]
 8013b04:	455b      	cmp	r3, fp
 8013b06:	f43f af2d 	beq.w	8013964 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
 8013b0a:	2e00      	cmp	r6, #0
 8013b0c:	f43f af2a 	beq.w	8013964 <fnmatchx+0x10>
            if (r == (void *)-1) {
 8013b10:	1c71      	adds	r1, r6, #1
 8013b12:	d103      	bne.n	8013b1c <fnmatchx+0x1c8>
                if (*string != '[')
 8013b14:	2f5b      	cmp	r7, #91	; 0x5b
 8013b16:	f47f af25 	bne.w	8013964 <fnmatchx+0x10>
 8013b1a:	4646      	mov	r6, r8
            ++string;
 8013b1c:	3201      	adds	r2, #1
            break;
 8013b1e:	46b0      	mov	r8, r6
 8013b20:	e763      	b.n	80139ea <fnmatchx+0x96>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 8013b22:	4645      	mov	r5, r8
 8013b24:	2300      	movs	r3, #0
 8013b26:	e7d7      	b.n	8013ad8 <fnmatchx+0x184>
        if (c == '/')
 8013b28:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
 8013b2c:	d0f2      	beq.n	8013b14 <fnmatchx+0x1c0>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 8013b2e:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
 8013b32:	d108      	bne.n	8013b46 <fnmatchx+0x1f2>
 8013b34:	9b03      	ldr	r3, [sp, #12]
 8013b36:	b953      	cbnz	r3, 8013b4e <fnmatchx+0x1fa>
            c = FOLDCASE(*pattern++, flags);
 8013b38:	4621      	mov	r1, r4
 8013b3a:	7868      	ldrb	r0, [r5, #1]
 8013b3c:	f7f1 ff78 	bl	8005a30 <foldcase>
 8013b40:	1cae      	adds	r6, r5, #2
 8013b42:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
 8013b46:	f1b9 0f00 	cmp.w	r9, #0
 8013b4a:	f43f af0b 	beq.w	8013964 <fnmatchx+0x10>
        if (*pattern == '-' 
 8013b4e:	7833      	ldrb	r3, [r6, #0]
 8013b50:	2b2d      	cmp	r3, #45	; 0x2d
 8013b52:	d11e      	bne.n	8013b92 <fnmatchx+0x23e>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
 8013b54:	4621      	mov	r1, r4
 8013b56:	7870      	ldrb	r0, [r6, #1]
 8013b58:	f7f1 ff6a 	bl	8005a30 <foldcase>
 8013b5c:	b2c0      	uxtb	r0, r0
 8013b5e:	b1c0      	cbz	r0, 8013b92 <fnmatchx+0x23e>
 8013b60:	285d      	cmp	r0, #93	; 0x5d
 8013b62:	d016      	beq.n	8013b92 <fnmatchx+0x23e>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
 8013b64:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
 8013b66:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
 8013b6a:	d109      	bne.n	8013b80 <fnmatchx+0x22c>
 8013b6c:	9b03      	ldr	r3, [sp, #12]
 8013b6e:	b93b      	cbnz	r3, 8013b80 <fnmatchx+0x22c>
                c2 = FOLDCASE(*pattern++, flags);
 8013b70:	78b0      	ldrb	r0, [r6, #2]
 8013b72:	f7f1 ff5d 	bl	8005a30 <foldcase>
 8013b76:	b2c0      	uxtb	r0, r0
 8013b78:	1cf5      	adds	r5, r6, #3
            if (c2 == EOS)
 8013b7a:	2800      	cmp	r0, #0
 8013b7c:	f43f aef2 	beq.w	8013964 <fnmatchx+0x10>
            if (c <= test && test <= c2)
 8013b80:	9b00      	ldr	r3, [sp, #0]
 8013b82:	454b      	cmp	r3, r9
 8013b84:	db03      	blt.n	8013b8e <fnmatchx+0x23a>
                ok = 1;
 8013b86:	4283      	cmp	r3, r0
 8013b88:	bfd8      	it	le
 8013b8a:	f04f 0b01 	movle.w	fp, #1
 8013b8e:	2300      	movs	r3, #0
 8013b90:	e7a9      	b.n	8013ae6 <fnmatchx+0x192>
        } else if (c == test)
 8013b92:	9b00      	ldr	r3, [sp, #0]
 8013b94:	4635      	mov	r5, r6
 8013b96:	454b      	cmp	r3, r9
 8013b98:	bf08      	it	eq
 8013b9a:	f04f 0b01 	moveq.w	fp, #1
 8013b9e:	e7f6      	b.n	8013b8e <fnmatchx+0x23a>
        return FNM_NORES;
 8013ba0:	2003      	movs	r0, #3
 8013ba2:	e6e0      	b.n	8013966 <fnmatchx+0x12>
                return 0;
 8013ba4:	4608      	mov	r0, r1
 8013ba6:	e6de      	b.n	8013966 <fnmatchx+0x12>

08013ba8 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
 8013ba8:	2340      	movs	r3, #64	; 0x40
 8013baa:	f7ff bed3 	b.w	8013954 <fnmatchx>

08013bae <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 8013bae:	2300      	movs	r3, #0
	list->head = NULL;
 8013bb0:	e9c0 3300 	strd	r3, r3, [r0]
}
 8013bb4:	4770      	bx	lr

08013bb6 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 8013bb6:	6803      	ldr	r3, [r0, #0]
 8013bb8:	b923      	cbnz	r3, 8013bc4 <log_list_add_tail+0xe>
		list->head = msg;
 8013bba:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
 8013bbc:	2300      	movs	r3, #0
	list->tail = msg;
 8013bbe:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 8013bc0:	600b      	str	r3, [r1, #0]
}
 8013bc2:	4770      	bx	lr
		list->tail->next = msg;
 8013bc4:	6843      	ldr	r3, [r0, #4]
 8013bc6:	6019      	str	r1, [r3, #0]
 8013bc8:	e7f8      	b.n	8013bbc <log_list_add_tail+0x6>

08013bca <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
 8013bca:	6800      	ldr	r0, [r0, #0]
 8013bcc:	4770      	bx	lr

08013bce <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
 8013bce:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
 8013bd0:	b10b      	cbz	r3, 8013bd6 <log_list_head_get+0x8>
		list->head = list->head->next;
 8013bd2:	681a      	ldr	r2, [r3, #0]
 8013bd4:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	4770      	bx	lr

08013bda <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
 8013bda:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8013bdc:	f7f2 fae0 	bl	80061a0 <log_msg_chunk_alloc>

	if (msg != NULL) {
 8013be0:	b118      	cbz	r0, 8013bea <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 8013be2:	2301      	movs	r3, #1
 8013be4:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8013be6:	2300      	movs	r3, #0
 8013be8:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
 8013bea:	bd08      	pop	{r3, pc}

08013bec <k_uptime_get_32>:
{
 8013bec:	b508      	push	{r3, lr}
	return z_impl_k_uptime_get();
 8013bee:	f004 ffd4 	bl	8018b9a <z_impl_k_uptime_get>
}
 8013bf2:	bd08      	pop	{r3, pc}

08013bf4 <dummy_timestamp>:
 8013bf4:	2000      	movs	r0, #0
 8013bf6:	4770      	bx	lr

08013bf8 <log_backend_disable>:
	backend->cb->active = false;
 8013bf8:	6843      	ldr	r3, [r0, #4]
 8013bfa:	2100      	movs	r1, #0
 8013bfc:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
 8013bfe:	f7f2 b837 	b.w	8005c70 <backend_filter_set>

08013c02 <log_0>:
{
 8013c02:	b538      	push	{r3, r4, r5, lr}
 8013c04:	4605      	mov	r5, r0
 8013c06:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
 8013c08:	f7ff ffe7 	bl	8013bda <z_log_msg_std_alloc>

	if (msg != NULL) {
 8013c0c:	b128      	cbz	r0, 8013c1a <log_0+0x18>
		msg->str = str;
 8013c0e:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
 8013c10:	4621      	mov	r1, r4
}
 8013c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
 8013c16:	f7f2 b9e5 	b.w	8005fe4 <msg_finalize>
}
 8013c1a:	bd38      	pop	{r3, r4, r5, pc}

08013c1c <log_1>:
{
 8013c1c:	b570      	push	{r4, r5, r6, lr}
 8013c1e:	4604      	mov	r4, r0
 8013c20:	460e      	mov	r6, r1
 8013c22:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8013c24:	f7ff ffd9 	bl	8013bda <z_log_msg_std_alloc>

	if (msg != NULL) {
 8013c28:	b158      	cbz	r0, 8013c42 <log_1+0x26>
		msg->str = str;
 8013c2a:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
 8013c2c:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
 8013c2e:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
 8013c30:	2201      	movs	r2, #1
 8013c32:	f362 1407 	bfi	r4, r2, #4, #4
 8013c36:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
 8013c38:	4629      	mov	r1, r5
}
 8013c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
 8013c3e:	f7f2 b9d1 	b.w	8005fe4 <msg_finalize>
}
 8013c42:	bd70      	pop	{r4, r5, r6, pc}

08013c44 <log_2>:
{
 8013c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c48:	4605      	mov	r5, r0
 8013c4a:	4688      	mov	r8, r1
 8013c4c:	4617      	mov	r7, r2
 8013c4e:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8013c50:	f7ff ffc3 	bl	8013bda <z_log_msg_std_alloc>

	if (msg != NULL) {
 8013c54:	b160      	cbz	r0, 8013c70 <log_2+0x2c>
		msg->str = str;
 8013c56:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
 8013c58:	7a45      	ldrb	r5, [r0, #9]
 8013c5a:	2302      	movs	r3, #2
 8013c5c:	f363 1507 	bfi	r5, r3, #4, #4
 8013c60:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
 8013c62:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg_finalize(msg, src_level);
 8013c66:	4631      	mov	r1, r6
}
 8013c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
 8013c6c:	f7f2 b9ba 	b.w	8005fe4 <msg_finalize>
}
 8013c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c74 <log_3>:
{
 8013c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c78:	4605      	mov	r5, r0
 8013c7a:	4689      	mov	r9, r1
 8013c7c:	4690      	mov	r8, r2
 8013c7e:	461f      	mov	r7, r3
 8013c80:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8013c84:	f7ff ffa9 	bl	8013bda <z_log_msg_std_alloc>

	if (msg != NULL) {
 8013c88:	b168      	cbz	r0, 8013ca6 <log_3+0x32>
		msg->str = str;
 8013c8a:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
 8013c8c:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
 8013c8e:	61c7      	str	r7, [r0, #28]
		msg->hdr.params.std.nargs = 3U;
 8013c90:	2303      	movs	r3, #3
 8013c92:	f363 1507 	bfi	r5, r3, #4, #4
 8013c96:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[1] = arg2;
 8013c98:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg_finalize(msg, src_level);
 8013c9c:	4631      	mov	r1, r6
}
 8013c9e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
 8013ca2:	f7f2 b99f 	b.w	8005fe4 <msg_finalize>
}
 8013ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013caa <log_n>:
{
 8013caa:	b510      	push	{r4, lr}
 8013cac:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
 8013cae:	f000 f89b 	bl	8013de8 <log_msg_create_n>
		if (msg == NULL) {
 8013cb2:	b120      	cbz	r0, 8013cbe <log_n+0x14>
		msg_finalize(msg, src_level);
 8013cb4:	4621      	mov	r1, r4
}
 8013cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
 8013cba:	f7f2 b993 	b.w	8005fe4 <msg_finalize>
}
 8013cbe:	bd10      	pop	{r4, pc}

08013cc0 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
 8013cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cc4:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
 8013cc6:	8903      	ldrh	r3, [r0, #8]
{
 8013cc8:	f89d 7020 	ldrb.w	r7, [sp, #32]
	u32_t available_len = msg->hdr.params.hexdump.length;
 8013ccc:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
 8013cce:	42a3      	cmp	r3, r4
{
 8013cd0:	460e      	mov	r6, r1
	if (offset >= available_len) {
 8013cd2:	d803      	bhi.n	8013cdc <log_msg_hexdump_data_op+0x1c>
		*length = 0;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
 8013cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
 8013cdc:	6811      	ldr	r1, [r2, #0]
 8013cde:	4421      	add	r1, r4
 8013ce0:	4299      	cmp	r1, r3
		*length = available_len - offset;
 8013ce2:	bf84      	itt	hi
 8013ce4:	1b19      	subhi	r1, r3, r4
 8013ce6:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 8013ce8:	2b0c      	cmp	r3, #12
	req_len = *length;
 8013cea:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 8013cee:	d928      	bls.n	8013d42 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
 8013cf0:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
 8013cf2:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
 8013cf6:	d82b      	bhi.n	8013d50 <log_msg_hexdump_data_op+0x90>
		head_data = msg->payload.ext.data.bytes;
 8013cf8:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 8013cfa:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8013cfc:	454b      	cmp	r3, r9
 8013cfe:	bf28      	it	cs
 8013d00:	464b      	movcs	r3, r9
 8013d02:	461d      	mov	r5, r3
		if (put_op) {
 8013d04:	4420      	add	r0, r4
 8013d06:	461a      	mov	r2, r3
 8013d08:	b1ff      	cbz	r7, 8013d4a <log_msg_hexdump_data_op+0x8a>
 8013d0a:	4631      	mov	r1, r6
 8013d0c:	f7f0 fe07 	bl	800491e <memcpy>
		req_len -= cpy_len;
 8013d10:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
 8013d14:	442e      	add	r6, r5
	while (req_len > 0) {
 8013d16:	f1b9 0f00 	cmp.w	r9, #0
 8013d1a:	d0dd      	beq.n	8013cd8 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 8013d1c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8013d20:	454d      	cmp	r5, r9
 8013d22:	bf28      	it	cs
 8013d24:	464d      	movcs	r5, r9
		if (put_op) {
 8013d26:	1d20      	adds	r0, r4, #4
 8013d28:	4440      	add	r0, r8
 8013d2a:	462a      	mov	r2, r5
 8013d2c:	b1bf      	cbz	r7, 8013d5e <log_msg_hexdump_data_op+0x9e>
 8013d2e:	4631      	mov	r1, r6
 8013d30:	f7f0 fdf5 	bl	800491e <memcpy>
		req_len -= cpy_len;
 8013d34:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
 8013d38:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
 8013d3c:	442e      	add	r6, r5
		offset = 0;
 8013d3e:	2400      	movs	r4, #0
 8013d40:	e7e9      	b.n	8013d16 <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
 8013d42:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
 8013d44:	f04f 0800 	mov.w	r8, #0
 8013d48:	e7d8      	b.n	8013cfc <log_msg_hexdump_data_op+0x3c>
 8013d4a:	4601      	mov	r1, r0
 8013d4c:	4630      	mov	r0, r6
 8013d4e:	e7dd      	b.n	8013d0c <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
 8013d50:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
 8013d52:	2c1b      	cmp	r4, #27
 8013d54:	d9df      	bls.n	8013d16 <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
 8013d56:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
 8013d5a:	3c1c      	subs	r4, #28
 8013d5c:	e7f9      	b.n	8013d52 <log_msg_hexdump_data_op+0x92>
 8013d5e:	4601      	mov	r1, r0
 8013d60:	4630      	mov	r0, r6
 8013d62:	e7e5      	b.n	8013d30 <log_msg_hexdump_data_op+0x70>

08013d64 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8013d64:	3004      	adds	r0, #4
 8013d66:	f3bf 8f5b 	dmb	ish
 8013d6a:	e850 3f00 	ldrex	r3, [r0]
 8013d6e:	3301      	adds	r3, #1
 8013d70:	e840 3200 	strex	r2, r3, [r0]
 8013d74:	2a00      	cmp	r2, #0
 8013d76:	d1f8      	bne.n	8013d6a <log_msg_get+0x6>
 8013d78:	f3bf 8f5b 	dmb	ish
}
 8013d7c:	4770      	bx	lr

08013d7e <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 8013d7e:	7a40      	ldrb	r0, [r0, #9]
}
 8013d80:	0900      	lsrs	r0, r0, #4
 8013d82:	4770      	bx	lr

08013d84 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
 8013d84:	7a43      	ldrb	r3, [r0, #9]
 8013d86:	091b      	lsrs	r3, r3, #4
 8013d88:	428b      	cmp	r3, r1
 8013d8a:	d916      	bls.n	8013dba <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 8013d8c:	2b03      	cmp	r3, #3
 8013d8e:	d803      	bhi.n	8013d98 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
 8013d90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013d94:	6948      	ldr	r0, [r1, #20]
 8013d96:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 8013d98:	2901      	cmp	r1, #1
 8013d9a:	d803      	bhi.n	8013da4 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
 8013d9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013da0:	6988      	ldr	r0, [r1, #24]
 8013da2:	4770      	bx	lr
	cont = msg->payload.ext.next;
 8013da4:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 8013da6:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
 8013da8:	2906      	cmp	r1, #6
 8013daa:	d803      	bhi.n	8013db4 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
 8013dac:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8013db0:	6848      	ldr	r0, [r1, #4]
 8013db2:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
 8013db4:	3907      	subs	r1, #7
		cont = cont->next;
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	e7f6      	b.n	8013da8 <log_msg_arg_get+0x24>
		return 0;
 8013dba:	2000      	movs	r0, #0
}
 8013dbc:	4770      	bx	lr

08013dbe <log_msg_put>:
{
 8013dbe:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8013dc0:	1d02      	adds	r2, r0, #4
 8013dc2:	f3bf 8f5b 	dmb	ish
 8013dc6:	e852 1f00 	ldrex	r1, [r2]
 8013dca:	3901      	subs	r1, #1
 8013dcc:	e842 1c00 	strex	ip, r1, [r2]
 8013dd0:	f1bc 0f00 	cmp.w	ip, #0
 8013dd4:	d1f7      	bne.n	8013dc6 <log_msg_put+0x8>
 8013dd6:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
 8013dda:	685b      	ldr	r3, [r3, #4]
 8013ddc:	b90b      	cbnz	r3, 8013de2 <log_msg_put+0x24>
		msg_free(msg);
 8013dde:	f7f2 b9f1 	b.w	80061c4 <msg_free>
}
 8013de2:	4770      	bx	lr

08013de4 <log_msg_str_get>:
}
 8013de4:	6900      	ldr	r0, [r0, #16]
 8013de6:	4770      	bx	lr

08013de8 <log_msg_create_n>:
{
 8013de8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dec:	4682      	mov	sl, r0
 8013dee:	4688      	mov	r8, r1
 8013df0:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8013df2:	f7f2 f9d5 	bl	80061a0 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8013df6:	4604      	mov	r4, r0
 8013df8:	b330      	cbz	r0, 8013e48 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
 8013dfa:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
 8013dfc:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 8013dfe:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
 8013e00:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8013e02:	8106      	strh	r6, [r0, #8]
 8013e04:	d909      	bls.n	8013e1a <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
 8013e06:	2202      	movs	r2, #2
 8013e08:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
 8013e0a:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
 8013e0e:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
 8013e12:	6146      	str	r6, [r0, #20]
	while (n > 0) {
 8013e14:	f1b9 0f00 	cmp.w	r9, #0
 8013e18:	dc0e      	bgt.n	8013e38 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
 8013e1a:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
 8013e1c:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
 8013e20:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 8013e24:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
 8013e26:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 8013e28:	d818      	bhi.n	8013e5c <log_msg_create_n+0x74>
 8013e2a:	00aa      	lsls	r2, r5, #2
 8013e2c:	4641      	mov	r1, r8
 8013e2e:	f104 0014 	add.w	r0, r4, #20
 8013e32:	f7f0 fd74 	bl	800491e <memcpy>
 8013e36:	e007      	b.n	8013e48 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
 8013e38:	f7f2 f9b2 	bl	80061a0 <log_msg_chunk_alloc>
		if (cont == NULL) {
 8013e3c:	4607      	mov	r7, r0
 8013e3e:	b930      	cbnz	r0, 8013e4e <log_msg_create_n+0x66>
			msg_free(msg);
 8013e40:	4620      	mov	r0, r4
 8013e42:	f7f2 f9bf 	bl	80061c4 <msg_free>
			return NULL;
 8013e46:	463c      	mov	r4, r7
}
 8013e48:	4620      	mov	r0, r4
 8013e4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
 8013e4e:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
 8013e52:	f1a9 0907 	sub.w	r9, r9, #7
 8013e56:	6006      	str	r6, [r0, #0]
		next = &cont->next;
 8013e58:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
 8013e5a:	e7db      	b.n	8013e14 <log_msg_create_n+0x2c>
 8013e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8013e60:	61a3      	str	r3, [r4, #24]
 8013e62:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct log_msg_cont *cont = msg->payload.ext.next;
 8013e66:	6967      	ldr	r7, [r4, #20]
 8013e68:	61e3      	str	r3, [r4, #28]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
 8013e6a:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
 8013e6c:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
 8013e70:	2d07      	cmp	r5, #7
 8013e72:	462e      	mov	r6, r5
 8013e74:	bf28      	it	cs
 8013e76:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
 8013e78:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8013e7c:	4641      	mov	r1, r8
 8013e7e:	1d38      	adds	r0, r7, #4
 8013e80:	464a      	mov	r2, r9
 8013e82:	f7f0 fd4c 	bl	800491e <memcpy>
	while (nargs != 0U) {
 8013e86:	1bad      	subs	r5, r5, r6
		args += cpy_args;
 8013e88:	44c8      	add	r8, r9
		cont = cont->next;
 8013e8a:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
 8013e8c:	d1f0      	bne.n	8013e70 <log_msg_create_n+0x88>
 8013e8e:	e7db      	b.n	8013e48 <log_msg_create_n+0x60>

08013e90 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
 8013e90:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 8013e92:	2400      	movs	r4, #0
 8013e94:	9400      	str	r4, [sp, #0]
 8013e96:	f7ff ff13 	bl	8013cc0 <log_msg_hexdump_data_op>
}
 8013e9a:	b002      	add	sp, #8
 8013e9c:	bd10      	pop	{r4, pc}

08013e9e <buffer_write>:
{
 8013e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ea0:	4606      	mov	r6, r0
 8013ea2:	460d      	mov	r5, r1
 8013ea4:	4614      	mov	r4, r2
 8013ea6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 8013ea8:	4621      	mov	r1, r4
 8013eaa:	4628      	mov	r0, r5
 8013eac:	463a      	mov	r2, r7
 8013eae:	47b0      	blx	r6
	} while (len != 0);
 8013eb0:	1a24      	subs	r4, r4, r0
		buf += processed;
 8013eb2:	4405      	add	r5, r0
	} while (len != 0);
 8013eb4:	d1f8      	bne.n	8013ea8 <buffer_write+0xa>
}
 8013eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013eb8 <std_print>:
{
 8013eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ebc:	b08e      	sub	sp, #56	; 0x38
 8013ebe:	af0e      	add	r7, sp, #56	; 0x38
 8013ec0:	4681      	mov	r9, r0
 8013ec2:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
 8013ec4:	f7ff ff8e 	bl	8013de4 <log_msg_str_get>
 8013ec8:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
 8013eca:	4648      	mov	r0, r9
 8013ecc:	f7ff ff57 	bl	8013d7e <log_msg_nargs_get>
	u32_t *args = alloca(sizeof(u32_t)*nargs);
 8013ed0:	0083      	lsls	r3, r0, #2
 8013ed2:	3307      	adds	r3, #7
 8013ed4:	f023 0307 	bic.w	r3, r3, #7
 8013ed8:	ebad 0d03 	sub.w	sp, sp, r3
	u32_t nargs = log_msg_nargs_get(msg);
 8013edc:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
 8013ede:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 8013ee0:	f04f 0800 	mov.w	r8, #0
 8013ee4:	45d0      	cmp	r8, sl
 8013ee6:	d116      	bne.n	8013f16 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
 8013ee8:	4648      	mov	r0, r9
 8013eea:	f7ff ff48 	bl	8013d7e <log_msg_nargs_get>
 8013eee:	280f      	cmp	r0, #15
 8013ef0:	d81e      	bhi.n	8013f30 <std_print+0x78>
 8013ef2:	e8df f010 	tbh	[pc, r0, lsl #1]
 8013ef6:	0019      	.short	0x0019
 8013ef8:	00260020 	.word	0x00260020
 8013efc:	0036002d 	.word	0x0036002d
 8013f00:	004e0041 	.word	0x004e0041
 8013f04:	006e005d 	.word	0x006e005d
 8013f08:	00960081 	.word	0x00960081
 8013f0c:	00c600ad 	.word	0x00c600ad
 8013f10:	00fe00e1 	.word	0x00fe00e1
 8013f14:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
 8013f16:	4641      	mov	r1, r8
 8013f18:	4648      	mov	r0, r9
 8013f1a:	f7ff ff33 	bl	8013d84 <log_msg_arg_get>
 8013f1e:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
 8013f22:	f108 0801 	add.w	r8, r8, #1
 8013f26:	e7dd      	b.n	8013ee4 <std_print+0x2c>
		print_formatted(log_output, str);
 8013f28:	4631      	mov	r1, r6
 8013f2a:	4628      	mov	r0, r5
 8013f2c:	f7f2 f97c 	bl	8006228 <print_formatted>
}
 8013f30:	46bd      	mov	sp, r7
 8013f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
 8013f36:	6822      	ldr	r2, [r4, #0]
 8013f38:	4631      	mov	r1, r6
 8013f3a:	4628      	mov	r0, r5
 8013f3c:	f7f2 f974 	bl	8006228 <print_formatted>
		break;
 8013f40:	e7f6      	b.n	8013f30 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
 8013f42:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013f46:	4631      	mov	r1, r6
 8013f48:	4628      	mov	r0, r5
 8013f4a:	f7f2 f96d 	bl	8006228 <print_formatted>
		break;
 8013f4e:	e7ef      	b.n	8013f30 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
 8013f50:	68a3      	ldr	r3, [r4, #8]
 8013f52:	9300      	str	r3, [sp, #0]
 8013f54:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013f58:	4631      	mov	r1, r6
 8013f5a:	4628      	mov	r0, r5
 8013f5c:	f7f2 f964 	bl	8006228 <print_formatted>
		break;
 8013f60:	e7e6      	b.n	8013f30 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8013f62:	68e3      	ldr	r3, [r4, #12]
 8013f64:	9301      	str	r3, [sp, #4]
 8013f66:	68a3      	ldr	r3, [r4, #8]
 8013f68:	9300      	str	r3, [sp, #0]
 8013f6a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013f6e:	4631      	mov	r1, r6
 8013f70:	4628      	mov	r0, r5
 8013f72:	f7f2 f959 	bl	8006228 <print_formatted>
		break;
 8013f76:	e7db      	b.n	8013f30 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8013f78:	6923      	ldr	r3, [r4, #16]
 8013f7a:	9302      	str	r3, [sp, #8]
 8013f7c:	68e3      	ldr	r3, [r4, #12]
 8013f7e:	9301      	str	r3, [sp, #4]
 8013f80:	68a3      	ldr	r3, [r4, #8]
 8013f82:	9300      	str	r3, [sp, #0]
 8013f84:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013f88:	4631      	mov	r1, r6
 8013f8a:	4628      	mov	r0, r5
 8013f8c:	f7f2 f94c 	bl	8006228 <print_formatted>
		break;
 8013f90:	e7ce      	b.n	8013f30 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8013f92:	6963      	ldr	r3, [r4, #20]
 8013f94:	9303      	str	r3, [sp, #12]
 8013f96:	6923      	ldr	r3, [r4, #16]
 8013f98:	9302      	str	r3, [sp, #8]
 8013f9a:	68e3      	ldr	r3, [r4, #12]
 8013f9c:	9301      	str	r3, [sp, #4]
 8013f9e:	68a3      	ldr	r3, [r4, #8]
 8013fa0:	9300      	str	r3, [sp, #0]
 8013fa2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013fa6:	4631      	mov	r1, r6
 8013fa8:	4628      	mov	r0, r5
 8013faa:	f7f2 f93d 	bl	8006228 <print_formatted>
		break;
 8013fae:	e7bf      	b.n	8013f30 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8013fb0:	69a3      	ldr	r3, [r4, #24]
 8013fb2:	9304      	str	r3, [sp, #16]
 8013fb4:	6963      	ldr	r3, [r4, #20]
 8013fb6:	9303      	str	r3, [sp, #12]
 8013fb8:	6923      	ldr	r3, [r4, #16]
 8013fba:	9302      	str	r3, [sp, #8]
 8013fbc:	68e3      	ldr	r3, [r4, #12]
 8013fbe:	9301      	str	r3, [sp, #4]
 8013fc0:	68a3      	ldr	r3, [r4, #8]
 8013fc2:	9300      	str	r3, [sp, #0]
 8013fc4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013fc8:	4631      	mov	r1, r6
 8013fca:	4628      	mov	r0, r5
 8013fcc:	f7f2 f92c 	bl	8006228 <print_formatted>
		break;
 8013fd0:	e7ae      	b.n	8013f30 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8013fd2:	69e3      	ldr	r3, [r4, #28]
 8013fd4:	9305      	str	r3, [sp, #20]
 8013fd6:	69a3      	ldr	r3, [r4, #24]
 8013fd8:	9304      	str	r3, [sp, #16]
 8013fda:	6963      	ldr	r3, [r4, #20]
 8013fdc:	9303      	str	r3, [sp, #12]
 8013fde:	6923      	ldr	r3, [r4, #16]
 8013fe0:	9302      	str	r3, [sp, #8]
 8013fe2:	68e3      	ldr	r3, [r4, #12]
 8013fe4:	9301      	str	r3, [sp, #4]
 8013fe6:	68a3      	ldr	r3, [r4, #8]
 8013fe8:	9300      	str	r3, [sp, #0]
 8013fea:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013fee:	4631      	mov	r1, r6
 8013ff0:	4628      	mov	r0, r5
 8013ff2:	f7f2 f919 	bl	8006228 <print_formatted>
		break;
 8013ff6:	e79b      	b.n	8013f30 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8013ff8:	6a23      	ldr	r3, [r4, #32]
 8013ffa:	9306      	str	r3, [sp, #24]
 8013ffc:	69e3      	ldr	r3, [r4, #28]
 8013ffe:	9305      	str	r3, [sp, #20]
 8014000:	69a3      	ldr	r3, [r4, #24]
 8014002:	9304      	str	r3, [sp, #16]
 8014004:	6963      	ldr	r3, [r4, #20]
 8014006:	9303      	str	r3, [sp, #12]
 8014008:	6923      	ldr	r3, [r4, #16]
 801400a:	9302      	str	r3, [sp, #8]
 801400c:	68e3      	ldr	r3, [r4, #12]
 801400e:	9301      	str	r3, [sp, #4]
 8014010:	68a3      	ldr	r3, [r4, #8]
 8014012:	9300      	str	r3, [sp, #0]
 8014014:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014018:	4631      	mov	r1, r6
 801401a:	4628      	mov	r0, r5
 801401c:	f7f2 f904 	bl	8006228 <print_formatted>
		break;
 8014020:	e786      	b.n	8013f30 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8014022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014024:	9307      	str	r3, [sp, #28]
 8014026:	6a23      	ldr	r3, [r4, #32]
 8014028:	9306      	str	r3, [sp, #24]
 801402a:	69e3      	ldr	r3, [r4, #28]
 801402c:	9305      	str	r3, [sp, #20]
 801402e:	69a3      	ldr	r3, [r4, #24]
 8014030:	9304      	str	r3, [sp, #16]
 8014032:	6963      	ldr	r3, [r4, #20]
 8014034:	9303      	str	r3, [sp, #12]
 8014036:	6923      	ldr	r3, [r4, #16]
 8014038:	9302      	str	r3, [sp, #8]
 801403a:	68e3      	ldr	r3, [r4, #12]
 801403c:	9301      	str	r3, [sp, #4]
 801403e:	68a3      	ldr	r3, [r4, #8]
 8014040:	9300      	str	r3, [sp, #0]
 8014042:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014046:	4631      	mov	r1, r6
 8014048:	4628      	mov	r0, r5
 801404a:	f7f2 f8ed 	bl	8006228 <print_formatted>
		break;
 801404e:	e76f      	b.n	8013f30 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8014050:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014052:	9308      	str	r3, [sp, #32]
 8014054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014056:	9307      	str	r3, [sp, #28]
 8014058:	6a23      	ldr	r3, [r4, #32]
 801405a:	9306      	str	r3, [sp, #24]
 801405c:	69e3      	ldr	r3, [r4, #28]
 801405e:	9305      	str	r3, [sp, #20]
 8014060:	69a3      	ldr	r3, [r4, #24]
 8014062:	9304      	str	r3, [sp, #16]
 8014064:	6963      	ldr	r3, [r4, #20]
 8014066:	9303      	str	r3, [sp, #12]
 8014068:	6923      	ldr	r3, [r4, #16]
 801406a:	9302      	str	r3, [sp, #8]
 801406c:	68e3      	ldr	r3, [r4, #12]
 801406e:	9301      	str	r3, [sp, #4]
 8014070:	68a3      	ldr	r3, [r4, #8]
 8014072:	9300      	str	r3, [sp, #0]
 8014074:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014078:	4631      	mov	r1, r6
 801407a:	4628      	mov	r0, r5
 801407c:	f7f2 f8d4 	bl	8006228 <print_formatted>
		break;
 8014080:	e756      	b.n	8013f30 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8014082:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014084:	9309      	str	r3, [sp, #36]	; 0x24
 8014086:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014088:	9308      	str	r3, [sp, #32]
 801408a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801408c:	9307      	str	r3, [sp, #28]
 801408e:	6a23      	ldr	r3, [r4, #32]
 8014090:	9306      	str	r3, [sp, #24]
 8014092:	69e3      	ldr	r3, [r4, #28]
 8014094:	9305      	str	r3, [sp, #20]
 8014096:	69a3      	ldr	r3, [r4, #24]
 8014098:	9304      	str	r3, [sp, #16]
 801409a:	6963      	ldr	r3, [r4, #20]
 801409c:	9303      	str	r3, [sp, #12]
 801409e:	6923      	ldr	r3, [r4, #16]
 80140a0:	9302      	str	r3, [sp, #8]
 80140a2:	68e3      	ldr	r3, [r4, #12]
 80140a4:	9301      	str	r3, [sp, #4]
 80140a6:	68a3      	ldr	r3, [r4, #8]
 80140a8:	9300      	str	r3, [sp, #0]
 80140aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80140ae:	4631      	mov	r1, r6
 80140b0:	4628      	mov	r0, r5
 80140b2:	f7f2 f8b9 	bl	8006228 <print_formatted>
		break;
 80140b6:	e73b      	b.n	8013f30 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 80140b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80140ba:	930a      	str	r3, [sp, #40]	; 0x28
 80140bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80140be:	9309      	str	r3, [sp, #36]	; 0x24
 80140c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80140c2:	9308      	str	r3, [sp, #32]
 80140c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140c6:	9307      	str	r3, [sp, #28]
 80140c8:	6a23      	ldr	r3, [r4, #32]
 80140ca:	9306      	str	r3, [sp, #24]
 80140cc:	69e3      	ldr	r3, [r4, #28]
 80140ce:	9305      	str	r3, [sp, #20]
 80140d0:	69a3      	ldr	r3, [r4, #24]
 80140d2:	9304      	str	r3, [sp, #16]
 80140d4:	6963      	ldr	r3, [r4, #20]
 80140d6:	9303      	str	r3, [sp, #12]
 80140d8:	6923      	ldr	r3, [r4, #16]
 80140da:	9302      	str	r3, [sp, #8]
 80140dc:	68e3      	ldr	r3, [r4, #12]
 80140de:	9301      	str	r3, [sp, #4]
 80140e0:	68a3      	ldr	r3, [r4, #8]
 80140e2:	9300      	str	r3, [sp, #0]
 80140e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80140e8:	4631      	mov	r1, r6
 80140ea:	4628      	mov	r0, r5
 80140ec:	f7f2 f89c 	bl	8006228 <print_formatted>
		break;
 80140f0:	e71e      	b.n	8013f30 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 80140f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80140f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80140f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80140f8:	930a      	str	r3, [sp, #40]	; 0x28
 80140fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80140fc:	9309      	str	r3, [sp, #36]	; 0x24
 80140fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014100:	9308      	str	r3, [sp, #32]
 8014102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014104:	9307      	str	r3, [sp, #28]
 8014106:	6a23      	ldr	r3, [r4, #32]
 8014108:	9306      	str	r3, [sp, #24]
 801410a:	69e3      	ldr	r3, [r4, #28]
 801410c:	9305      	str	r3, [sp, #20]
 801410e:	69a3      	ldr	r3, [r4, #24]
 8014110:	9304      	str	r3, [sp, #16]
 8014112:	6963      	ldr	r3, [r4, #20]
 8014114:	9303      	str	r3, [sp, #12]
 8014116:	6923      	ldr	r3, [r4, #16]
 8014118:	9302      	str	r3, [sp, #8]
 801411a:	68e3      	ldr	r3, [r4, #12]
 801411c:	9301      	str	r3, [sp, #4]
 801411e:	68a3      	ldr	r3, [r4, #8]
 8014120:	9300      	str	r3, [sp, #0]
 8014122:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014126:	4631      	mov	r1, r6
 8014128:	4628      	mov	r0, r5
 801412a:	f7f2 f87d 	bl	8006228 <print_formatted>
		break;
 801412e:	e6ff      	b.n	8013f30 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8014130:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014132:	930c      	str	r3, [sp, #48]	; 0x30
 8014134:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014136:	930b      	str	r3, [sp, #44]	; 0x2c
 8014138:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801413a:	930a      	str	r3, [sp, #40]	; 0x28
 801413c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801413e:	9309      	str	r3, [sp, #36]	; 0x24
 8014140:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014142:	9308      	str	r3, [sp, #32]
 8014144:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014146:	9307      	str	r3, [sp, #28]
 8014148:	6a23      	ldr	r3, [r4, #32]
 801414a:	9306      	str	r3, [sp, #24]
 801414c:	69e3      	ldr	r3, [r4, #28]
 801414e:	9305      	str	r3, [sp, #20]
 8014150:	69a3      	ldr	r3, [r4, #24]
 8014152:	9304      	str	r3, [sp, #16]
 8014154:	6963      	ldr	r3, [r4, #20]
 8014156:	9303      	str	r3, [sp, #12]
 8014158:	6923      	ldr	r3, [r4, #16]
 801415a:	9302      	str	r3, [sp, #8]
 801415c:	68e3      	ldr	r3, [r4, #12]
 801415e:	9301      	str	r3, [sp, #4]
 8014160:	68a3      	ldr	r3, [r4, #8]
 8014162:	9300      	str	r3, [sp, #0]
 8014164:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014168:	4631      	mov	r1, r6
 801416a:	4628      	mov	r0, r5
 801416c:	f7f2 f85c 	bl	8006228 <print_formatted>
}
 8014170:	e6de      	b.n	8013f30 <std_print+0x78>

08014172 <log_output_flush>:
		     log_output->control_block->offset,
 8014172:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
 8014174:	6881      	ldr	r1, [r0, #8]
{
 8014176:	b510      	push	{r4, lr}
 8014178:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
 801417a:	e9d2 2300 	ldrd	r2, r3, [r2]
 801417e:	6800      	ldr	r0, [r0, #0]
 8014180:	f7ff fe8d 	bl	8013e9e <buffer_write>
	log_output->control_block->offset = 0;
 8014184:	6863      	ldr	r3, [r4, #4]
 8014186:	2200      	movs	r2, #0
 8014188:	601a      	str	r2, [r3, #0]
}
 801418a:	bd10      	pop	{r4, pc}

0801418c <out_func>:
{
 801418c:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
 801418e:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
 8014196:	684a      	ldr	r2, [r1, #4]
 8014198:	6813      	ldr	r3, [r2, #0]
 801419a:	3301      	adds	r3, #1
 801419c:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
 801419e:	68ca      	ldr	r2, [r1, #12]
 80141a0:	4293      	cmp	r3, r2
 80141a2:	d102      	bne.n	80141aa <out_func+0x1e>
		log_output_flush(out_ctx);
 80141a4:	4608      	mov	r0, r1
 80141a6:	f7ff ffe4 	bl	8014172 <log_output_flush>
}
 80141aa:	2000      	movs	r0, #0
 80141ac:	bd08      	pop	{r3, pc}

080141ae <log_halt>:
 80141ae:	684b      	ldr	r3, [r1, #4]
 80141b0:	2000      	movs	r0, #0
 80141b2:	7158      	strb	r0, [r3, #5]
}
 80141b4:	4770      	bx	lr

080141b6 <log_go>:
	backend->cb->active = true;
 80141b6:	684b      	ldr	r3, [r1, #4]
 80141b8:	2201      	movs	r2, #1
 80141ba:	715a      	strb	r2, [r3, #5]
}
 80141bc:	2000      	movs	r0, #0
 80141be:	4770      	bx	lr

080141c0 <cmd_log_self_halt>:
{
 80141c0:	b510      	push	{r4, lr}
 80141c2:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
 80141c4:	f7f2 fb34 	bl	8006830 <shell_state_precheck>
 80141c8:	b120      	cbz	r0, 80141d4 <cmd_log_self_halt+0x14>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
 80141ca:	69e3      	ldr	r3, [r4, #28]
	log_backend_deactivate(backend);
 80141cc:	681b      	ldr	r3, [r3, #0]
	backend->cb->active = false;
 80141ce:	685b      	ldr	r3, [r3, #4]
 80141d0:	2200      	movs	r2, #0
 80141d2:	715a      	strb	r2, [r3, #5]
}
 80141d4:	2000      	movs	r0, #0
 80141d6:	bd10      	pop	{r4, pc}

080141d8 <cmd_log_self_go>:
{
 80141d8:	b510      	push	{r4, lr}
 80141da:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
 80141dc:	f7f2 fb28 	bl	8006830 <shell_state_precheck>
 80141e0:	b120      	cbz	r0, 80141ec <cmd_log_self_go+0x14>
	return log_go(shell, shell->log_backend->backend, argc, argv);
 80141e2:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
 80141e4:	681b      	ldr	r3, [r3, #0]
	backend->cb->active = true;
 80141e6:	685b      	ldr	r3, [r3, #4]
 80141e8:	2201      	movs	r2, #1
 80141ea:	715a      	strb	r2, [r3, #5]
}
 80141ec:	2000      	movs	r0, #0
 80141ee:	bd10      	pop	{r4, pc}

080141f0 <cmd_log_self_status>:
{
 80141f0:	b570      	push	{r4, r5, r6, lr}
 80141f2:	4604      	mov	r4, r0
 80141f4:	460d      	mov	r5, r1
 80141f6:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
 80141f8:	f7f2 fb1a 	bl	8006830 <shell_state_precheck>
 80141fc:	b130      	cbz	r0, 801420c <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
 80141fe:	69e0      	ldr	r0, [r4, #28]
 8014200:	4633      	mov	r3, r6
 8014202:	6801      	ldr	r1, [r0, #0]
 8014204:	462a      	mov	r2, r5
 8014206:	4620      	mov	r0, r4
 8014208:	f7f2 fa4e 	bl	80066a8 <log_status>
}
 801420c:	2000      	movs	r0, #0
 801420e:	bd70      	pop	{r4, r5, r6, pc}

08014210 <cmd_log_self_enable>:
{
 8014210:	b570      	push	{r4, r5, r6, lr}
 8014212:	4604      	mov	r4, r0
 8014214:	460d      	mov	r5, r1
 8014216:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
 8014218:	f7f2 fb0a 	bl	8006830 <shell_state_precheck>
 801421c:	b140      	cbz	r0, 8014230 <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
 801421e:	69e0      	ldr	r0, [r4, #28]
 8014220:	4633      	mov	r3, r6
 8014222:	462a      	mov	r2, r5
 8014224:	6801      	ldr	r1, [r0, #0]
 8014226:	4620      	mov	r0, r4
}
 8014228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
 801422c:	f7f2 bb78 	b.w	8006920 <log_enable>
}
 8014230:	bd70      	pop	{r4, r5, r6, pc}

08014232 <log_disable>:
{
 8014232:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
 8014234:	2400      	movs	r4, #0
 8014236:	9400      	str	r4, [sp, #0]
 8014238:	3304      	adds	r3, #4
 801423a:	3a01      	subs	r2, #1
 801423c:	f7f2 fb08 	bl	8006850 <filters_set>
}
 8014240:	4620      	mov	r0, r4
 8014242:	b002      	add	sp, #8
 8014244:	bd10      	pop	{r4, pc}

08014246 <cmd_log_self_disable>:
{
 8014246:	b570      	push	{r4, r5, r6, lr}
 8014248:	4604      	mov	r4, r0
 801424a:	460d      	mov	r5, r1
 801424c:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
 801424e:	f7f2 faef 	bl	8006830 <shell_state_precheck>
 8014252:	b140      	cbz	r0, 8014266 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
 8014254:	69e0      	ldr	r0, [r4, #28]
 8014256:	4633      	mov	r3, r6
 8014258:	462a      	mov	r2, r5
 801425a:	6801      	ldr	r1, [r0, #0]
 801425c:	4620      	mov	r0, r4
}
 801425e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
 8014262:	f7ff bfe6 	b.w	8014232 <log_disable>
}
 8014266:	bd70      	pop	{r4, r5, r6, pc}

08014268 <shell_signal_handle>:
{
 8014268:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
 801426a:	6884      	ldr	r4, [r0, #8]
 801426c:	0109      	lsls	r1, r1, #4
 801426e:	f501 7117 	add.w	r1, r1, #604	; 0x25c
{
 8014272:	4605      	mov	r5, r0
 8014274:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
 8014276:	440c      	add	r4, r1
		arch_syscall_invoke3(*(uintptr_t *)&signal, *(uintptr_t *)&signaled, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_CHECK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_check(signal, signaled, result);
 8014278:	aa01      	add	r2, sp, #4
 801427a:	4669      	mov	r1, sp
 801427c:	4620      	mov	r0, r4
 801427e:	f004 fdcc 	bl	8018e1a <z_impl_k_poll_signal_check>
	if (set) {
 8014282:	9b00      	ldr	r3, [sp, #0]
 8014284:	b11b      	cbz	r3, 801428e <shell_signal_handle+0x26>
 */
__syscall void k_poll_signal_reset(struct k_poll_signal *signal);

static inline void z_impl_k_poll_signal_reset(struct k_poll_signal *signal)
{
	signal->signaled = 0U;
 8014286:	2300      	movs	r3, #0
 8014288:	60a3      	str	r3, [r4, #8]
		handler(shell);
 801428a:	4628      	mov	r0, r5
 801428c:	47b0      	blx	r6
}
 801428e:	b002      	add	sp, #8
 8014290:	bd70      	pop	{r4, r5, r6, pc}

08014292 <kill_handler>:
{
 8014292:	b538      	push	{r3, r4, r5, lr}
	if (flag_processing_get(shell)) {
 8014294:	6883      	ldr	r3, [r0, #8]
	return shell->ctx->internal.flags.processing == 1 ? true : false;
 8014296:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 801429a:	071b      	lsls	r3, r3, #28
{
 801429c:	4604      	mov	r4, r0
	if (flag_processing_get(shell)) {
 801429e:	d40d      	bmi.n	80142bc <kill_handler+0x2a>
		shell_log_backend_disable(shell->log_backend);
 80142a0:	69c0      	ldr	r0, [r0, #28]
 80142a2:	f000 fcb9 	bl	8014c18 <shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
 80142a6:	6860      	ldr	r0, [r4, #4]
 80142a8:	6803      	ldr	r3, [r0, #0]
 80142aa:	685b      	ldr	r3, [r3, #4]
 80142ac:	4798      	blx	r3
	if (err != 0) {
 80142ae:	4605      	mov	r5, r0
 80142b0:	b920      	cbnz	r0, 80142bc <kill_handler+0x2a>
	shell_history_purge(shell->history);
 80142b2:	68e0      	ldr	r0, [r4, #12]
 80142b4:	f000 fb9f 	bl	80149f6 <shell_history_purge>
	shell->ctx->state = SHELL_STATE_UNINITIALIZED;
 80142b8:	68a3      	ldr	r3, [r4, #8]
 80142ba:	711d      	strb	r5, [r3, #4]
	return z_impl_k_current_get();
 80142bc:	f7fe fb04 	bl	80128c8 <z_impl_k_current_get>
}
 80142c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
 80142c4:	f7f6 b866 	b.w	800a394 <z_impl_k_thread_abort>

080142c8 <shell_strlen>:
{
 80142c8:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (u16_t)strlen(str);
 80142ca:	b110      	cbz	r0, 80142d2 <shell_strlen+0xa>
 80142cc:	f7f0 fb90 	bl	80049f0 <strlen>
 80142d0:	b280      	uxth	r0, r0
}
 80142d2:	bd08      	pop	{r3, pc}

080142d4 <shell_raw_fprintf>:
{
 80142d4:	b40e      	push	{r1, r2, r3}
 80142d6:	b503      	push	{r0, r1, lr}
 80142d8:	aa03      	add	r2, sp, #12
 80142da:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 80142de:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
 80142e0:	f7f3 f9f2 	bl	80076c8 <shell_fprintf_fmt>
}
 80142e4:	b002      	add	sp, #8
 80142e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80142ea:	b003      	add	sp, #12
 80142ec:	4770      	bx	lr

080142ee <shell_internal_help_print>:
{
 80142ee:	b510      	push	{r4, lr}
 80142f0:	4604      	mov	r4, r0
	shell_help_cmd_print(shell);
 80142f2:	f7f3 fed9 	bl	80080a8 <shell_help_cmd_print>
	shell_help_subcmd_print(shell);
 80142f6:	4620      	mov	r0, r4
}
 80142f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_help_subcmd_print(shell);
 80142fc:	f7f3 be46 	b.w	8007f8c <shell_help_subcmd_print>

08014300 <state_set.constprop.31>:
	shell->ctx->state = state;
 8014300:	6883      	ldr	r3, [r0, #8]
 8014302:	2202      	movs	r2, #2
 8014304:	711a      	strb	r2, [r3, #4]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
 8014306:	2200      	movs	r2, #0
 8014308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
 801430c:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
 801430e:	865a      	strh	r2, [r3, #50]	; 0x32
		shell_print_prompt_and_cmd(shell);
 8014310:	f7f3 bcea 	b.w	8007ce8 <shell_print_prompt_and_cmd>

08014314 <transport_evt_handler>:
	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
 8014314:	688b      	ldr	r3, [r1, #8]
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
 8014316:	b920      	cbnz	r0, 8014322 <transport_evt_handler+0xe>
 8014318:	f503 7017 	add.w	r0, r3, #604	; 0x25c
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
 801431c:	2100      	movs	r1, #0
 801431e:	f7fe be63 	b.w	8012fe8 <z_impl_k_poll_signal_raise>
 8014322:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8014326:	e7f9      	b.n	801431c <transport_evt_handler+0x8>

08014328 <k_mutex_lock.constprop.35>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8014328:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801432c:	f7fd bf54 	b.w	80121d8 <z_impl_k_mutex_lock>

08014330 <shell_log_process>:
{
 8014330:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
 8014332:	2300      	movs	r3, #0
{
 8014334:	4604      	mov	r4, r0
	int signaled = 0;
 8014336:	9300      	str	r3, [sp, #0]
			shell_cmd_line_erase(shell);
 8014338:	4620      	mov	r0, r4
 801433a:	f000 f999 	bl	8014670 <shell_cmd_line_erase>
			processed = shell_log_backend_process(shell->log_backend);
 801433e:	69e0      	ldr	r0, [r4, #28]
 8014340:	f000 fc7f 	bl	8014c42 <shell_log_backend_process>
 8014344:	4606      	mov	r6, r0
		shell_print_prompt_and_cmd(shell);
 8014346:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
 8014348:	68a5      	ldr	r5, [r4, #8]
		shell_print_prompt_and_cmd(shell);
 801434a:	f7f3 fccd 	bl	8007ce8 <shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
 801434e:	68a3      	ldr	r3, [r4, #8]
 8014350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
		struct k_poll_signal *signal =
 8014352:	f505 7517 	add.w	r5, r5, #604	; 0x25c
		if (shell->ctx->cmd_buff_len) {
 8014356:	b113      	cbz	r3, 801435e <shell_log_process+0x2e>
	return z_impl_k_sleep(ms);
 8014358:	200f      	movs	r0, #15
 801435a:	f7fe fa97 	bl	801288c <z_impl_k_sleep>
	z_impl_k_poll_signal_check(signal, signaled, result);
 801435e:	aa01      	add	r2, sp, #4
 8014360:	4669      	mov	r1, sp
 8014362:	4628      	mov	r0, r5
 8014364:	f004 fd59 	bl	8018e1a <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
 8014368:	b116      	cbz	r6, 8014370 <shell_log_process+0x40>
 801436a:	9b00      	ldr	r3, [sp, #0]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d0e3      	beq.n	8014338 <shell_log_process+0x8>
}
 8014370:	b002      	add	sp, #8
 8014372:	bd70      	pop	{r4, r5, r6, pc}

08014374 <shell_fprintf>:
/* This function mustn't be used from shell context to avoid deadlock.
 * However it can be used in shell command handlers.
 */
void shell_fprintf(const struct shell *shell, enum shell_vt100_color color,
		   const char *fmt, ...)
{
 8014374:	b40c      	push	{r2, r3}
 8014376:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014378:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 801437a:	6880      	ldr	r0, [r0, #8]
 801437c:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
{
 8014380:	460d      	mov	r5, r1
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8014382:	f7ff ffd1 	bl	8014328 <k_mutex_lock.constprop.35>
	if (!flag_cmd_ctx_get(shell)) {
 8014386:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1 ? true : false;
 8014388:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 801438c:	061a      	lsls	r2, r3, #24
 801438e:	d402      	bmi.n	8014396 <shell_fprintf+0x22>
		shell_cmd_line_erase(shell);
 8014390:	4620      	mov	r0, r4
 8014392:	f000 f96d 	bl	8014670 <shell_cmd_line_erase>
	}

	va_start(args, fmt);
 8014396:	ab07      	add	r3, sp, #28
	shell_internal_vfprintf(shell, color, fmt, args);
 8014398:	9a06      	ldr	r2, [sp, #24]
	va_start(args, fmt);
 801439a:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
 801439c:	4629      	mov	r1, r5
 801439e:	4620      	mov	r0, r4
 80143a0:	f000 f9b5 	bl	801470e <shell_internal_vfprintf>
	va_end(args);

	if (!flag_cmd_ctx_get(shell)) {
 80143a4:	68a3      	ldr	r3, [r4, #8]
 80143a6:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 80143aa:	061b      	lsls	r3, r3, #24
 80143ac:	d402      	bmi.n	80143b4 <shell_fprintf+0x40>
		shell_print_prompt_and_cmd(shell);
 80143ae:	4620      	mov	r0, r4
 80143b0:	f7f3 fc9a 	bl	8007ce8 <shell_print_prompt_and_cmd>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
 80143b4:	6960      	ldr	r0, [r4, #20]
 80143b6:	f000 f80a 	bl	80143ce <shell_fprintf_buffer_flush>
	}
	transport_buffer_flush(shell);
	k_mutex_unlock(&shell->ctx->wr_mtx);
 80143ba:	68a0      	ldr	r0, [r4, #8]
 80143bc:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
	z_impl_k_mutex_unlock(mutex);
 80143c0:	f7fd ff7c 	bl	80122bc <z_impl_k_mutex_unlock>
}
 80143c4:	b003      	add	sp, #12
 80143c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80143ca:	b002      	add	sp, #8
 80143cc:	4770      	bx	lr

080143ce <shell_fprintf_buffer_flush>:


void shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
 80143ce:	6902      	ldr	r2, [r0, #16]
 80143d0:	6883      	ldr	r3, [r0, #8]
 80143d2:	6812      	ldr	r2, [r2, #0]
 80143d4:	6801      	ldr	r1, [r0, #0]
{
 80143d6:	b510      	push	{r4, lr}
 80143d8:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
 80143da:	68c0      	ldr	r0, [r0, #12]
 80143dc:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
 80143de:	6923      	ldr	r3, [r4, #16]
 80143e0:	2200      	movs	r2, #0
 80143e2:	601a      	str	r2, [r3, #0]
}
 80143e4:	bd10      	pop	{r4, pc}

080143e6 <out_func>:
{
 80143e6:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
 80143e8:	68cb      	ldr	r3, [r1, #12]
 80143ea:	7c1b      	ldrb	r3, [r3, #16]
 80143ec:	2b02      	cmp	r3, #2
{
 80143ee:	4605      	mov	r5, r0
 80143f0:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
 80143f2:	d104      	bne.n	80143fe <out_func+0x18>
 80143f4:	280a      	cmp	r0, #10
 80143f6:	d102      	bne.n	80143fe <out_func+0x18>
		(void)out_func('\r', ctx);
 80143f8:	200d      	movs	r0, #13
 80143fa:	f7ff fff4 	bl	80143e6 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (u8_t)c;
 80143fe:	6923      	ldr	r3, [r4, #16]
 8014400:	6822      	ldr	r2, [r4, #0]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
 8014406:	6922      	ldr	r2, [r4, #16]
 8014408:	6813      	ldr	r3, [r2, #0]
 801440a:	3301      	adds	r3, #1
 801440c:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
 801440e:	6862      	ldr	r2, [r4, #4]
 8014410:	4293      	cmp	r3, r2
 8014412:	d102      	bne.n	801441a <out_func+0x34>
		shell_fprintf_buffer_flush(sh_fprintf);
 8014414:	4620      	mov	r0, r4
 8014416:	f7ff ffda 	bl	80143ce <shell_fprintf_buffer_flush>
}
 801441a:	2000      	movs	r0, #0
 801441c:	bd38      	pop	{r3, r4, r5, pc}

0801441e <shell_strlen>:
{
 801441e:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (u16_t)strlen(str);
 8014420:	b110      	cbz	r0, 8014428 <shell_strlen+0xa>
 8014422:	f7f0 fae5 	bl	80049f0 <strlen>
 8014426:	b280      	uxth	r0, r0
}
 8014428:	bd08      	pop	{r3, pc}

0801442a <column_span_with_buffer_offsets_get>:
{
 801442a:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
 801442c:	7b03      	ldrb	r3, [r0, #12]
 801442e:	8944      	ldrh	r4, [r0, #10]
 8014430:	441a      	add	r2, r3
 8014432:	4419      	add	r1, r3
 8014434:	fbb2 f0f4 	udiv	r0, r2, r4
 8014438:	fbb1 f3f4 	udiv	r3, r1, r4
 801443c:	fb04 2010 	mls	r0, r4, r0, r2
 8014440:	fb04 1313 	mls	r3, r4, r3, r1
}
 8014444:	1ac0      	subs	r0, r0, r3
 8014446:	bd10      	pop	{r4, pc}

08014448 <row_span_with_buffer_offsets_get>:
{
 8014448:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
 801444a:	7b03      	ldrb	r3, [r0, #12]
 801444c:	8944      	ldrh	r4, [r0, #10]
 801444e:	441a      	add	r2, r3
 8014450:	4419      	add	r1, r3
 8014452:	fbb2 f0f4 	udiv	r0, r2, r4
 8014456:	fbb1 f1f4 	udiv	r1, r1, r4
}
 801445a:	1a40      	subs	r0, r0, r1
 801445c:	bd10      	pop	{r4, pc}

0801445e <shell_multiline_data_calc>:
{
 801445e:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 8014460:	7b04      	ldrb	r4, [r0, #12]
 8014462:	8945      	ldrh	r5, [r0, #10]
 8014464:	4421      	add	r1, r4
 8014466:	fbb1 f3f5 	udiv	r3, r1, r5
 801446a:	fb05 1113 	mls	r1, r5, r3, r1
 801446e:	3101      	adds	r1, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
 8014470:	3301      	adds	r3, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 8014472:	4422      	add	r2, r4
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 8014474:	8001      	strh	r1, [r0, #0]
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
 8014476:	8083      	strh	r3, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 8014478:	fbb2 f3f5 	udiv	r3, r2, r5
 801447c:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 801447e:	fb05 2313 	mls	r3, r5, r3, r2
 8014482:	3301      	adds	r3, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 8014484:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 8014486:	8043      	strh	r3, [r0, #2]
}
 8014488:	bd30      	pop	{r4, r5, pc}

0801448a <shell_pattern_remove>:
{
 801448a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801448c:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
 801448e:	4611      	mov	r1, r2
{
 8014490:	4615      	mov	r5, r2
 8014492:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
 8014494:	f7f0 faed 	bl	8004a72 <strstr>
 8014498:	4604      	mov	r4, r0
	u16_t pattern_len = shell_strlen(pattern);
 801449a:	4628      	mov	r0, r5
 801449c:	f7ff ffbf 	bl	801441e <shell_strlen>
 80144a0:	4605      	mov	r5, r0
	if (!pattern_addr) {
 80144a2:	b1c4      	cbz	r4, 80144d6 <shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
 80144a4:	42a7      	cmp	r7, r4
 80144a6:	d207      	bcs.n	80144b8 <shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
 80144a8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80144ac:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
 80144ae:	bf02      	ittt	eq
 80144b0:	3501      	addeq	r5, #1
 80144b2:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
 80144b4:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 80144b8:	4620      	mov	r0, r4
 80144ba:	f7ff ffb0 	bl	801441e <shell_strlen>
	*buff_len -= pattern_len;
 80144be:	8833      	ldrh	r3, [r6, #0]
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 80144c0:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
 80144c2:	1b5b      	subs	r3, r3, r5
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 80144c4:	3201      	adds	r2, #1
	*buff_len -= pattern_len;
 80144c6:	8033      	strh	r3, [r6, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
 80144c8:	1961      	adds	r1, r4, r5
 80144ca:	4620      	mov	r0, r4
 80144cc:	b292      	uxth	r2, r2
}
 80144ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80144d2:	f7f0 ba32 	b.w	800493a <memmove>
 80144d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080144d8 <shell_get_last_command>:
{
 80144d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144dc:	b087      	sub	sp, #28
 80144de:	461d      	mov	r5, r3
	*match_arg = SHELL_CMD_ROOT_LVL;
 80144e0:	2400      	movs	r4, #0
{
 80144e2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80144e6:	9303      	str	r3, [sp, #12]
 80144e8:	4681      	mov	r9, r0
 80144ea:	4688      	mov	r8, r1
 80144ec:	4617      	mov	r7, r2
	*match_arg = SHELL_CMD_ROOT_LVL;
 80144ee:	602c      	str	r4, [r5, #0]
	const struct shell_static_entry *entry = NULL;
 80144f0:	46a2      	mov	sl, r4
	while (*match_arg < argc) {
 80144f2:	682b      	ldr	r3, [r5, #0]
 80144f4:	4543      	cmp	r3, r8
 80144f6:	d303      	bcc.n	8014500 <shell_get_last_command+0x28>
}
 80144f8:	4650      	mov	r0, sl
 80144fa:	b007      	add	sp, #28
 80144fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (shell_wildcard_character_exist(argv[*match_arg])) {
 8014500:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8014504:	f000 fc0d 	bl	8014d22 <shell_wildcard_character_exist>
 8014508:	682e      	ldr	r6, [r5, #0]
 801450a:	b110      	cbz	r0, 8014512 <shell_get_last_command+0x3a>
				(*match_arg)++;
 801450c:	3601      	adds	r6, #1
 801450e:	602e      	str	r6, [r5, #0]
				continue;
 8014510:	e7ef      	b.n	80144f2 <shell_get_last_command+0x1a>
		entry = find_cmd(shell, cmd, *match_arg, argv[*match_arg],
 8014512:	f857 b026 	ldr.w	fp, [r7, r6, lsl #2]
	const struct shell_static_entry *entry = NULL;
 8014516:	9005      	str	r0, [sp, #20]
	size_t idx = 0;
 8014518:	4603      	mov	r3, r0
		shell_cmd_get(shell, cmd, lvl, idx++, &entry, d_entry);
 801451a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801451c:	9201      	str	r2, [sp, #4]
 801451e:	aa05      	add	r2, sp, #20
 8014520:	9200      	str	r2, [sp, #0]
 8014522:	4621      	mov	r1, r4
 8014524:	4632      	mov	r2, r6
 8014526:	4648      	mov	r0, r9
 8014528:	f103 0a01 	add.w	sl, r3, #1
 801452c:	f7f3 f9a6 	bl	800787c <shell_cmd_get>
		if (entry && (strcmp(cmd_str, entry->syntax) == 0)) {
 8014530:	9b05      	ldr	r3, [sp, #20]
 8014532:	b13b      	cbz	r3, 8014544 <shell_get_last_command+0x6c>
 8014534:	6819      	ldr	r1, [r3, #0]
 8014536:	4658      	mov	r0, fp
 8014538:	f7f0 fa48 	bl	80049cc <strcmp>
 801453c:	9a05      	ldr	r2, [sp, #20]
 801453e:	b920      	cbnz	r0, 801454a <shell_get_last_command+0x72>
		if (entry) {
 8014540:	4692      	mov	sl, r2
 8014542:	b932      	cbnz	r2, 8014552 <shell_get_last_command+0x7a>
 8014544:	f04f 0a00 	mov.w	sl, #0
 8014548:	e7d6      	b.n	80144f8 <shell_get_last_command+0x20>
		shell_cmd_get(shell, cmd, lvl, idx++, &entry, d_entry);
 801454a:	4653      	mov	r3, sl
	} while (entry);
 801454c:	2a00      	cmp	r2, #0
 801454e:	d1e4      	bne.n	801451a <shell_get_last_command+0x42>
 8014550:	e7f8      	b.n	8014544 <shell_get_last_command+0x6c>
			(*match_arg)++;
 8014552:	682b      	ldr	r3, [r5, #0]
			cmd = entry->subcmd;
 8014554:	6894      	ldr	r4, [r2, #8]
			(*match_arg)++;
 8014556:	1c5a      	adds	r2, r3, #1
 8014558:	602a      	str	r2, [r5, #0]
		if (cmd == NULL) {
 801455a:	2c00      	cmp	r4, #0
 801455c:	d0f2      	beq.n	8014544 <shell_get_last_command+0x6c>
		if (only_static && cmd->is_dynamic) {
 801455e:	9a03      	ldr	r2, [sp, #12]
 8014560:	2a00      	cmp	r2, #0
 8014562:	d0c6      	beq.n	80144f2 <shell_get_last_command+0x1a>
 8014564:	7822      	ldrb	r2, [r4, #0]
 8014566:	2a00      	cmp	r2, #0
 8014568:	d0c3      	beq.n	80144f2 <shell_get_last_command+0x1a>
			(*match_arg)--;
 801456a:	602b      	str	r3, [r5, #0]
			return NULL;
 801456c:	e7ea      	b.n	8014544 <shell_get_last_command+0x6c>

0801456e <shell_raw_fprintf>:
{
 801456e:	b40e      	push	{r1, r2, r3}
 8014570:	b503      	push	{r0, r1, lr}
 8014572:	aa03      	add	r2, sp, #12
 8014574:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 8014578:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
 801457a:	f7f3 f8a5 	bl	80076c8 <shell_fprintf_fmt>
}
 801457e:	b002      	add	sp, #8
 8014580:	f85d eb04 	ldr.w	lr, [sp], #4
 8014584:	b003      	add	sp, #12
 8014586:	4770      	bx	lr

08014588 <full_line_cmd.isra.8>:
static inline bool full_line_cmd(const struct shell *shell)
 8014588:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
 801458a:	6803      	ldr	r3, [r0, #0]
static inline bool full_line_cmd(const struct shell *shell)
 801458c:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
 801458e:	6818      	ldr	r0, [r3, #0]
 8014590:	8e5d      	ldrh	r5, [r3, #50]	; 0x32
	return str == NULL ? 0U : (u16_t)strlen(str);
 8014592:	b110      	cbz	r0, 801459a <full_line_cmd.isra.8+0x12>
 8014594:	f7f0 fa2c 	bl	80049f0 <strlen>
 8014598:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 801459a:	6823      	ldr	r3, [r4, #0]
 801459c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
 801459e:	4428      	add	r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 80145a0:	fbb0 f3f2 	udiv	r3, r0, r2
 80145a4:	fb02 0013 	mls	r0, r2, r3, r0
}
 80145a8:	fab0 f080 	clz	r0, r0
 80145ac:	0940      	lsrs	r0, r0, #5
 80145ae:	bd38      	pop	{r3, r4, r5, pc}

080145b0 <shell_cursor_in_empty_line>:
{
 80145b0:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
 80145b2:	6883      	ldr	r3, [r0, #8]
{
 80145b4:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
 80145b6:	6818      	ldr	r0, [r3, #0]
 80145b8:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
 80145ba:	b110      	cbz	r0, 80145c2 <shell_cursor_in_empty_line+0x12>
 80145bc:	f7f0 fa18 	bl	80049f0 <strlen>
 80145c0:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 80145c2:	68a3      	ldr	r3, [r4, #8]
 80145c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
 80145c6:	4428      	add	r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 80145c8:	fbb0 f3f2 	udiv	r3, r0, r2
 80145cc:	fb02 0013 	mls	r0, r2, r3, r0
}
 80145d0:	fab0 f080 	clz	r0, r0
 80145d4:	0940      	lsrs	r0, r0, #5
 80145d6:	bd38      	pop	{r3, r4, r5, pc}

080145d8 <shell_op_cursor_move>:
{
 80145d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145da:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 80145dc:	6880      	ldr	r0, [r0, #8]
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
 80145de:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 80145e0:	8e42      	ldrh	r2, [r0, #50]	; 0x32
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
 80145e2:	4419      	add	r1, r3
 80145e4:	b28d      	uxth	r5, r1
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 80145e6:	3020      	adds	r0, #32
 80145e8:	4619      	mov	r1, r3
 80145ea:	f7ff ff38 	bl	801445e <shell_multiline_data_calc>
	row_span = row_span_with_buffer_offsets_get(&shell->ctx->vt100_ctx.cons,
 80145ee:	68a0      	ldr	r0, [r4, #8]
 80145f0:	462a      	mov	r2, r5
 80145f2:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80145f4:	3020      	adds	r0, #32
 80145f6:	f7ff ff27 	bl	8014448 <row_span_with_buffer_offsets_get>
 80145fa:	4607      	mov	r7, r0
						    &shell->ctx->vt100_ctx.cons,
 80145fc:	68a0      	ldr	r0, [r4, #8]
	col_span = column_span_with_buffer_offsets_get(
 80145fe:	462a      	mov	r2, r5
 8014600:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8014602:	3020      	adds	r0, #32
 8014604:	f7ff ff11 	bl	801442a <column_span_with_buffer_offsets_get>
	shell_op_cursor_vert_move(shell, -row_span);
 8014608:	4279      	negs	r1, r7
	col_span = column_span_with_buffer_offsets_get(
 801460a:	4606      	mov	r6, r0
	shell_op_cursor_vert_move(shell, -row_span);
 801460c:	4620      	mov	r0, r4
 801460e:	f7f3 f9d3 	bl	80079b8 <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, col_span);
 8014612:	4631      	mov	r1, r6
 8014614:	4620      	mov	r0, r4
 8014616:	f7f3 f9df 	bl	80079d8 <shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
 801461a:	68a3      	ldr	r3, [r4, #8]
 801461c:	869d      	strh	r5, [r3, #52]	; 0x34
}
 801461e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014620 <shell_op_cursor_home_move>:
	shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
 8014620:	6883      	ldr	r3, [r0, #8]
 8014622:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8014624:	4249      	negs	r1, r1
 8014626:	b209      	sxth	r1, r1
 8014628:	f7ff bfd6 	b.w	80145d8 <shell_op_cursor_move>

0801462c <shell_op_cursor_end_move>:
	shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
 801462c:	6883      	ldr	r3, [r0, #8]
 801462e:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 8014630:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8014632:	1ac9      	subs	r1, r1, r3
 8014634:	b209      	sxth	r1, r1
 8014636:	f7ff bfcf 	b.w	80145d8 <shell_op_cursor_move>

0801463a <shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
 801463a:	6883      	ldr	r3, [r0, #8]
 801463c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801463e:	b11b      	cbz	r3, 8014648 <shell_op_left_arrow+0xe>
		shell_op_cursor_move(shell, -1);
 8014640:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014644:	f7ff bfc8 	b.w	80145d8 <shell_op_cursor_move>
}
 8014648:	4770      	bx	lr

0801464a <shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
 801464a:	6883      	ldr	r3, [r0, #8]
 801464c:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 801464e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014650:	429a      	cmp	r2, r3
 8014652:	d202      	bcs.n	801465a <shell_op_right_arrow+0x10>
		shell_op_cursor_move(shell, 1);
 8014654:	2101      	movs	r1, #1
 8014656:	f7ff bfbf 	b.w	80145d8 <shell_op_cursor_move>
}
 801465a:	4770      	bx	lr

0801465c <shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
 801465c:	6883      	ldr	r3, [r0, #8]
 801465e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8014660:	865a      	strh	r2, [r3, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
 8014662:	4413      	add	r3, r2
 8014664:	2200      	movs	r2, #0
 8014666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	clear_eos(shell);
 801466a:	6940      	ldr	r0, [r0, #20]
 801466c:	f7f3 b99c 	b.w	80079a8 <clear_eos.isra.6>

08014670 <shell_cmd_line_erase>:
{
 8014670:	b510      	push	{r4, lr}
 8014672:	4604      	mov	r4, r0
	shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
 8014674:	6880      	ldr	r0, [r0, #8]
 8014676:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8014678:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 801467a:	3020      	adds	r0, #32
 801467c:	f7ff feef 	bl	801445e <shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
 8014680:	68a3      	ldr	r3, [r4, #8]
 8014682:	8c19      	ldrh	r1, [r3, #32]
	shell_op_cursor_horiz_move(shell,
 8014684:	4620      	mov	r0, r4
 8014686:	f1c1 0101 	rsb	r1, r1, #1
 801468a:	f7f3 f9a5 	bl	80079d8 <shell_op_cursor_horiz_move>
	shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
 801468e:	68a3      	ldr	r3, [r4, #8]
 8014690:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8014692:	4620      	mov	r0, r4
 8014694:	3901      	subs	r1, #1
 8014696:	f7f3 f98f 	bl	80079b8 <shell_op_cursor_vert_move>
	clear_eos(shell);
 801469a:	6960      	ldr	r0, [r4, #20]
}
 801469c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	clear_eos(shell);
 80146a0:	f7f3 b982 	b.w	80079a8 <clear_eos.isra.6>

080146a4 <shell_write>:
{
 80146a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80146a8:	4607      	mov	r7, r0
 80146aa:	4688      	mov	r8, r1
 80146ac:	4614      	mov	r4, r2
	size_t offset = 0;
 80146ae:	2600      	movs	r6, #0
	while (length) {
 80146b0:	b914      	cbnz	r4, 80146b8 <shell_write+0x14>
}
 80146b2:	b002      	add	sp, #8
 80146b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
 80146b8:	6878      	ldr	r0, [r7, #4]
 80146ba:	6803      	ldr	r3, [r0, #0]
 80146bc:	4622      	mov	r2, r4
 80146be:	68dd      	ldr	r5, [r3, #12]
 80146c0:	eb08 0106 	add.w	r1, r8, r6
 80146c4:	ab01      	add	r3, sp, #4
 80146c6:	47a8      	blx	r5
		offset += tmp_cnt;
 80146c8:	9d01      	ldr	r5, [sp, #4]
 80146ca:	442e      	add	r6, r5
		length -= tmp_cnt;
 80146cc:	1b64      	subs	r4, r4, r5
		if (tmp_cnt == 0 &&
 80146ce:	2d00      	cmp	r5, #0
 80146d0:	d1ee      	bne.n	80146b0 <shell_write+0xc>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
 80146d2:	68b8      	ldr	r0, [r7, #8]
 80146d4:	7903      	ldrb	r3, [r0, #4]
		if (tmp_cnt == 0 &&
 80146d6:	2b03      	cmp	r3, #3
 80146d8:	d0ea      	beq.n	80146b0 <shell_write+0xc>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
 80146da:	2b02      	cmp	r3, #2
 80146dc:	d80a      	bhi.n	80146f4 <shell_write+0x50>
	return z_impl_k_poll(events, num_events, timeout);
 80146de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80146e2:	2101      	movs	r1, #1
 80146e4:	f500 7036 	add.w	r0, r0, #728	; 0x2d8
 80146e8:	f7fe fc2a 	bl	8012f40 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	f8c3 5294 	str.w	r5, [r3, #660]	; 0x294
 80146f2:	e7dd      	b.n	80146b0 <shell_write+0xc>
	return shell->ctx->internal.flags.tx_rdy == 1 ? true : false;
 80146f4:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
		while (!flag_tx_rdy_get(shell)) {
 80146f8:	06db      	lsls	r3, r3, #27
 80146fa:	d5fb      	bpl.n	80146f4 <shell_write+0x50>
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
 80146fc:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 8014700:	f36f 1304 	bfc	r3, #4, #1
 8014704:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
 8014708:	e7d2      	b.n	80146b0 <shell_write+0xc>

0801470a <shell_print_stream>:
	shell_write((const struct shell *) user_ctx, data, data_len);
 801470a:	f7ff bfcb 	b.w	80146a4 <shell_write>

0801470e <shell_internal_vfprintf>:

void shell_internal_vfprintf(const struct shell *shell,
			     enum shell_vt100_color color, const char *fmt,
			     va_list args)
{
 801470e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
	    shell->ctx->internal.flags.use_colors &&
 8014710:	6885      	ldr	r5, [r0, #8]
{
 8014712:	461f      	mov	r7, r3
	    shell->ctx->internal.flags.use_colors &&
 8014714:	f8d5 3258 	ldr.w	r3, [r5, #600]	; 0x258
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
 8014718:	079b      	lsls	r3, r3, #30
{
 801471a:	4604      	mov	r4, r0
 801471c:	4616      	mov	r6, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
 801471e:	d513      	bpl.n	8014748 <shell_internal_vfprintf+0x3a>
	    shell->ctx->internal.flags.use_colors &&
 8014720:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 8014724:	428b      	cmp	r3, r1
 8014726:	d00f      	beq.n	8014748 <shell_internal_vfprintf+0x3a>
			   enum shell_vt100_color color);

static inline void shell_vt100_colors_store(const struct shell *shell,
					    struct shell_vt100_colors *color)
{
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
 8014728:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
 801472a:	f8ad 3004 	strh.w	r3, [sp, #4]
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		shell_vt100_colors_store(shell, &col);
		shell_vt100_color_set(shell, color);
 801472e:	f7f3 f9e1 	bl	8007af4 <shell_vt100_color_set>

		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 8014732:	4631      	mov	r1, r6
 8014734:	6960      	ldr	r0, [r4, #20]
 8014736:	463a      	mov	r2, r7
 8014738:	f7f2 ffc6 	bl	80076c8 <shell_fprintf_fmt>

		shell_vt100_colors_restore(shell, &col);
 801473c:	a901      	add	r1, sp, #4
 801473e:	4620      	mov	r0, r4
 8014740:	f7f3 f9fc 	bl	8007b3c <shell_vt100_colors_restore>
	} else {
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
 8014744:	b003      	add	sp, #12
 8014746:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 8014748:	463a      	mov	r2, r7
 801474a:	4631      	mov	r1, r6
 801474c:	6960      	ldr	r0, [r4, #20]
 801474e:	f7f2 ffbb 	bl	80076c8 <shell_fprintf_fmt>
}
 8014752:	e7f7      	b.n	8014744 <shell_internal_vfprintf+0x36>

08014754 <shell_internal_fprintf>:

void shell_internal_fprintf(const struct shell *shell,
			    enum shell_vt100_color color,
			    const char *fmt, ...)
{
 8014754:	b40c      	push	{r2, r3}
 8014756:	b507      	push	{r0, r1, r2, lr}
 8014758:	ab04      	add	r3, sp, #16
 801475a:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	va_start(args, fmt);
 801475e:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
 8014760:	f7ff ffd5 	bl	801470e <shell_internal_vfprintf>
	va_end(args);
}
 8014764:	b003      	add	sp, #12
 8014766:	f85d eb04 	ldr.w	lr, [sp], #4
 801476a:	b002      	add	sp, #8
 801476c:	4770      	bx	lr

0801476e <data_insert>:
{
 801476e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 8014772:	6886      	ldr	r6, [r0, #8]
 8014774:	8e74      	ldrh	r4, [r6, #50]	; 0x32
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 8014776:	18a3      	adds	r3, r4, r2
 8014778:	2bff      	cmp	r3, #255	; 0xff
{
 801477a:	4607      	mov	r7, r0
 801477c:	4688      	mov	r8, r1
 801477e:	4615      	mov	r5, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 8014780:	dc1f      	bgt.n	80147c2 <data_insert+0x54>
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 8014782:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 8014784:	1ae4      	subs	r4, r4, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
 8014786:	3338      	adds	r3, #56	; 0x38
 8014788:	441e      	add	r6, r3
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 801478a:	b2a4      	uxth	r4, r4
 801478c:	4622      	mov	r2, r4
 801478e:	4631      	mov	r1, r6
 8014790:	1970      	adds	r0, r6, r5
 8014792:	f7f0 f8d2 	bl	800493a <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8014796:	462a      	mov	r2, r5
 8014798:	4641      	mov	r1, r8
 801479a:	4630      	mov	r0, r6
 801479c:	f7f0 f8bf 	bl	800491e <memcpy>
	shell->ctx->cmd_buff_len += len;
 80147a0:	68ba      	ldr	r2, [r7, #8]
 80147a2:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 80147a4:	442b      	add	r3, r5
 80147a6:	b29b      	uxth	r3, r3
 80147a8:	8653      	strh	r3, [r2, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 80147aa:	4413      	add	r3, r2
 80147ac:	2200      	movs	r2, #0
 80147ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
 80147b2:	68bb      	ldr	r3, [r7, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
 80147b4:	f8d3 1258 	ldr.w	r1, [r3, #600]	; 0x258
 80147b8:	0749      	lsls	r1, r1, #29
 80147ba:	d404      	bmi.n	80147c6 <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
 80147bc:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80147be:	4415      	add	r5, r2
 80147c0:	869d      	strh	r5, [r3, #52]	; 0x34
}
 80147c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
 80147c6:	4621      	mov	r1, r4
 80147c8:	4638      	mov	r0, r7
}
 80147ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
 80147ce:	f7f3 ba2f 	b.w	8007c30 <reprint_from_cursor>

080147d2 <shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
 80147d2:	f7ff bfcc 	b.w	801476e <data_insert>

080147d6 <shell_op_char_delete>:
{
 80147d6:	b538      	push	{r3, r4, r5, lr}
 80147d8:	4605      	mov	r5, r0
	u16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 80147da:	6880      	ldr	r0, [r0, #8]
 80147dc:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 80147de:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 80147e0:	1ae4      	subs	r4, r4, r3
 80147e2:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
 80147e4:	b18c      	cbz	r4, 801480a <shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
 80147e6:	3338      	adds	r3, #56	; 0x38
 80147e8:	4418      	add	r0, r3
__ssp_bos_icheck3(memmove, void *, const void *)
 80147ea:	4622      	mov	r2, r4
 80147ec:	1c41      	adds	r1, r0, #1
 80147ee:	f7f0 f8a4 	bl	800493a <memmove>
	--shell->ctx->cmd_buff_len;
 80147f2:	68aa      	ldr	r2, [r5, #8]
 80147f4:	8e53      	ldrh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
 80147f6:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
 80147f8:	3b01      	subs	r3, #1
 80147fa:	8653      	strh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
 80147fc:	4628      	mov	r0, r5
 80147fe:	2201      	movs	r2, #1
 8014800:	b289      	uxth	r1, r1
}
 8014802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
 8014806:	f7f3 ba13 	b.w	8007c30 <reprint_from_cursor>
}
 801480a:	bd38      	pop	{r3, r4, r5, pc}

0801480c <shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
 801480c:	6883      	ldr	r3, [r0, #8]
 801480e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
 8014810:	b510      	push	{r4, lr}
 8014812:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
 8014814:	b152      	cbz	r2, 801482c <shell_op_char_backspace+0x20>
 8014816:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8014818:	b143      	cbz	r3, 801482c <shell_op_char_backspace+0x20>
	shell_op_cursor_move(shell, -1);
 801481a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801481e:	f7ff fedb 	bl	80145d8 <shell_op_cursor_move>
	shell_op_char_delete(shell);
 8014822:	4620      	mov	r0, r4
}
 8014824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_op_char_delete(shell);
 8014828:	f7ff bfd5 	b.w	80147d6 <shell_op_char_delete>
}
 801482c:	bd10      	pop	{r4, pc}

0801482e <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
 801482e:	6843      	ldr	r3, [r0, #4]
 8014830:	6a1b      	ldr	r3, [r3, #32]
 8014832:	b103      	cbz	r3, 8014836 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
 8014834:	4718      	bx	r3
}
 8014836:	4770      	bx	lr

08014838 <uninit>:
}
 8014838:	2000      	movs	r0, #0
 801483a:	4770      	bx	lr

0801483c <read>:
{
 801483c:	b510      	push	{r4, lr}
 801483e:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
 8014840:	6843      	ldr	r3, [r0, #4]
 8014842:	68d8      	ldr	r0, [r3, #12]
 8014844:	f7ff f866 	bl	8013914 <ring_buf_get>
 8014848:	6020      	str	r0, [r4, #0]
}
 801484a:	2000      	movs	r0, #0
 801484c:	bd10      	pop	{r4, pc}

0801484e <write>:
{
 801484e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 8014852:	6845      	ldr	r5, [r0, #4]
{
 8014854:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
 8014856:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
 8014858:	7c1b      	ldrb	r3, [r3, #16]
{
 801485a:	460c      	mov	r4, r1
 801485c:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
 801485e:	b153      	cbz	r3, 8014876 <write+0x28>
 8014860:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
 8014864:	4544      	cmp	r4, r8
 8014866:	682b      	ldr	r3, [r5, #0]
 8014868:	d120      	bne.n	80148ac <write+0x5e>
		*cnt = length;
 801486a:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 801486c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8014870:	2001      	movs	r0, #1
 8014872:	4790      	blx	r2
 8014874:	e017      	b.n	80148a6 <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
 8014876:	68a8      	ldr	r0, [r5, #8]
 8014878:	f7fe fff7 	bl	801386a <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 801487c:	682b      	ldr	r3, [r5, #0]
 801487e:	6030      	str	r0, [r6, #0]
 8014880:	330c      	adds	r3, #12
 8014882:	2101      	movs	r1, #1
 8014884:	f3bf 8f5b 	dmb	ish
 8014888:	e853 2f00 	ldrex	r2, [r3]
 801488c:	e843 1000 	strex	r0, r1, [r3]
 8014890:	2800      	cmp	r0, #0
 8014892:	d1f9      	bne.n	8014888 <write+0x3a>
 8014894:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
 8014898:	b92a      	cbnz	r2, 80148a6 <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
 801489a:	682b      	ldr	r3, [r5, #0]
 801489c:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable) {
 801489e:	6843      	ldr	r3, [r0, #4]
 80148a0:	69db      	ldr	r3, [r3, #28]
 80148a2:	b103      	cbz	r3, 80148a6 <write+0x58>
		api->irq_tx_enable(dev);
 80148a4:	4798      	blx	r3
}
 80148a6:	2000      	movs	r0, #0
 80148a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
 80148ac:	6818      	ldr	r0, [r3, #0]
 80148ae:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
 80148b2:	6843      	ldr	r3, [r0, #4]
 80148b4:	685b      	ldr	r3, [r3, #4]
 80148b6:	4798      	blx	r3
 80148b8:	e7d4      	b.n	8014864 <write+0x16>

080148ba <enable>:
{
 80148ba:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
 80148bc:	6843      	ldr	r3, [r0, #4]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
 80148c2:	b111      	cbz	r1, 80148ca <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
 80148c4:	6818      	ldr	r0, [r3, #0]
 80148c6:	f7ff ffb2 	bl	801482e <z_impl_uart_irq_tx_disable>
}
 80148ca:	2000      	movs	r0, #0
 80148cc:	bd08      	pop	{r3, pc}

080148ce <shell_raw_fprintf>:
{
 80148ce:	b40e      	push	{r1, r2, r3}
 80148d0:	b503      	push	{r0, r1, lr}
 80148d2:	aa03      	add	r2, sp, #12
 80148d4:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 80148d8:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
 80148da:	f7f2 fef5 	bl	80076c8 <shell_fprintf_fmt>
}
 80148de:	b002      	add	sp, #8
 80148e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80148e4:	b003      	add	sp, #12
 80148e6:	4770      	bx	lr

080148e8 <cmd_bacskpace_mode_backspace>:
	flag_mode_delete_set(shell, false);
 80148e8:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
 80148ea:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 80148ee:	f36f 1245 	bfc	r2, #5, #1
 80148f2:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
 80148f6:	2000      	movs	r0, #0
 80148f8:	4770      	bx	lr

080148fa <cmd_bacskpace_mode_delete>:
	flag_mode_delete_set(shell, true);
 80148fa:	6882      	ldr	r2, [r0, #8]
 80148fc:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 8014900:	f043 0320 	orr.w	r3, r3, #32
 8014904:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
 8014908:	2000      	movs	r0, #0
 801490a:	4770      	bx	lr

0801490c <cmd_colors_off>:
	flag_use_colors_set(shell, false);
 801490c:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
 801490e:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 8014912:	f36f 0241 	bfc	r2, #1, #1
 8014916:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
 801491a:	2000      	movs	r0, #0
 801491c:	4770      	bx	lr

0801491e <cmd_colors_on>:
	flag_use_colors_set(shell, true);
 801491e:	6882      	ldr	r2, [r0, #8]
 8014920:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 8014924:	f043 0302 	orr.w	r3, r3, #2
 8014928:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
 801492c:	2000      	movs	r0, #0
 801492e:	4770      	bx	lr

08014930 <cmd_echo_off>:
	flag_echo_set(shell, false);
 8014930:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.echo = val ? 1 : 0;
 8014932:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
 8014936:	f36f 0282 	bfc	r2, #2, #1
 801493a:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
}
 801493e:	2000      	movs	r0, #0
 8014940:	4770      	bx	lr

08014942 <cmd_echo_on>:
	flag_echo_set(shell, true);
 8014942:	6882      	ldr	r2, [r0, #8]
 8014944:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
 8014948:	f043 0304 	orr.w	r3, r3, #4
 801494c:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
}
 8014950:	2000      	movs	r0, #0
 8014952:	4770      	bx	lr

08014954 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
 8014954:	6983      	ldr	r3, [r0, #24]
 8014956:	2000      	movs	r0, #0
 8014958:	6018      	str	r0, [r3, #0]
}
 801495a:	4770      	bx	lr

0801495c <shell_raw_fprintf>:
{
 801495c:	b40e      	push	{r1, r2, r3}
 801495e:	b503      	push	{r0, r1, lr}
 8014960:	aa03      	add	r2, sp, #12
 8014962:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 8014966:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
 8014968:	f7f2 feae 	bl	80076c8 <shell_fprintf_fmt>
}
 801496c:	b002      	add	sp, #8
 801496e:	f85d eb04 	ldr.w	lr, [sp], #4
 8014972:	b003      	add	sp, #12
 8014974:	4770      	bx	lr

08014976 <remove_from_tail.part.4>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
 8014976:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8014978:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
 801497a:	6800      	ldr	r0, [r0, #0]
	node->prev->next = node->next;
 801497c:	e9d3 2100 	ldrd	r2, r1, [r3]
 8014980:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
 8014982:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 8014984:	2200      	movs	r2, #0
	node->prev = NULL;
 8014986:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
 801498a:	8919      	ldrh	r1, [r3, #8]
 801498c:	895b      	ldrh	r3, [r3, #10]
 801498e:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
 8014990:	310c      	adds	r1, #12
 8014992:	f7fe ffaa 	bl	80138ea <ring_buf_get_finish>

	return true;
}
 8014996:	2001      	movs	r0, #1
 8014998:	bd08      	pop	{r3, pc}

0801499a <shell_history_mode_exit>:
	history->current = NULL;
 801499a:	2300      	movs	r3, #0
 801499c:	60c3      	str	r3, [r0, #12]
}
 801499e:	4770      	bx	lr

080149a0 <shell_history_get>:
{
 80149a0:	b570      	push	{r4, r5, r6, lr}
 80149a2:	4615      	mov	r5, r2
	return list->head == list;
 80149a4:	4602      	mov	r2, r0
 80149a6:	461e      	mov	r6, r3
 80149a8:	f852 4f04 	ldr.w	r4, [r2, #4]!
	if (sys_dlist_is_empty(&history->list)) {
 80149ac:	4294      	cmp	r4, r2
 80149ae:	d102      	bne.n	80149b6 <shell_history_get+0x16>
		*len = 0U;
 80149b0:	2000      	movs	r0, #0
 80149b2:	8030      	strh	r0, [r6, #0]
}
 80149b4:	bd70      	pop	{r4, r5, r6, pc}
	if (!up) { /* button down */
 80149b6:	68c2      	ldr	r2, [r0, #12]
 80149b8:	b9b1      	cbnz	r1, 80149e8 <shell_history_get+0x48>
		if (history->current == NULL) {
 80149ba:	2a00      	cmp	r2, #0
 80149bc:	d0f8      	beq.n	80149b0 <shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
 80149be:	42a2      	cmp	r2, r4
 80149c0:	d102      	bne.n	80149c8 <shell_history_get+0x28>
	history->current = l_item;
 80149c2:	2300      	movs	r3, #0
 80149c4:	60c3      	str	r3, [r0, #12]
	if (l_item) {
 80149c6:	e7f3      	b.n	80149b0 <shell_history_get+0x10>
 80149c8:	6854      	ldr	r4, [r2, #4]
	history->current = l_item;
 80149ca:	60c4      	str	r4, [r0, #12]
	if (l_item) {
 80149cc:	2c00      	cmp	r4, #0
 80149ce:	d0ef      	beq.n	80149b0 <shell_history_get+0x10>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80149d0:	8922      	ldrh	r2, [r4, #8]
 80149d2:	f104 010c 	add.w	r1, r4, #12
 80149d6:	4628      	mov	r0, r5
 80149d8:	f7ef ffa1 	bl	800491e <memcpy>
		*len = h_item->len;
 80149dc:	8922      	ldrh	r2, [r4, #8]
 80149de:	8032      	strh	r2, [r6, #0]
		dst[*len] = '\0';
 80149e0:	2300      	movs	r3, #0
 80149e2:	54ab      	strb	r3, [r5, r2]
		return true;
 80149e4:	2001      	movs	r0, #1
 80149e6:	e7e5      	b.n	80149b4 <shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
 80149e8:	2a00      	cmp	r2, #0
 80149ea:	d0ee      	beq.n	80149ca <shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
 80149ec:	6883      	ldr	r3, [r0, #8]
 80149ee:	429a      	cmp	r2, r3
 80149f0:	d0e7      	beq.n	80149c2 <shell_history_get+0x22>
 80149f2:	6814      	ldr	r4, [r2, #0]
 80149f4:	e7e9      	b.n	80149ca <shell_history_get+0x2a>

080149f6 <shell_history_purge>:

void shell_history_purge(struct shell_history *history)
{
 80149f6:	b538      	push	{r3, r4, r5, lr}
 80149f8:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
 80149fa:	1d05      	adds	r5, r0, #4
 80149fc:	6863      	ldr	r3, [r4, #4]
 80149fe:	42ab      	cmp	r3, r5
 8014a00:	d004      	beq.n	8014a0c <shell_history_purge+0x16>
 8014a02:	4620      	mov	r0, r4
 8014a04:	f7ff ffb7 	bl	8014976 <remove_from_tail.part.4>
	while (remove_from_tail(history)) {
 8014a08:	2800      	cmp	r0, #0
 8014a0a:	d1f7      	bne.n	80149fc <shell_history_purge+0x6>
	}
}
 8014a0c:	bd38      	pop	{r3, r4, r5, pc}

08014a0e <shell_history_put>:
	u16_t padding = (~total_len + 1) & (sizeof(void *) - 1);

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 8014a0e:	6803      	ldr	r3, [r0, #0]
{
 8014a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t total_len = len + offsetof(struct shell_history_item, data);
 8014a14:	f102 050c 	add.w	r5, r2, #12
	u16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
 8014a18:	426f      	negs	r7, r5
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline u32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	/* One element is used to distinguish between empty and full state. */
	return buf->size - 1;
 8014a1a:	691b      	ldr	r3, [r3, #16]
 8014a1c:	f007 0703 	and.w	r7, r7, #3
	total_len += padding;
 8014a20:	443d      	add	r5, r7
 8014a22:	3b01      	subs	r3, #1
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 8014a24:	429d      	cmp	r5, r3
{
 8014a26:	4604      	mov	r4, r0
 8014a28:	468a      	mov	sl, r1
 8014a2a:	4690      	mov	r8, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 8014a2c:	d840      	bhi.n	8014ab0 <shell_history_put+0xa2>
	history->current = NULL;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	60c3      	str	r3, [r0, #12]
		return;
	}

	shell_history_mode_exit(history);

	if (len == 0) {
 8014a32:	2a00      	cmp	r2, #0
 8014a34:	d03c      	beq.n	8014ab0 <shell_history_put+0xa2>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
 8014a36:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
 8014a3a:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8014a3c:	4581      	cmp	r9, r0
 8014a3e:	d12c      	bne.n	8014a9a <shell_history_put+0x8c>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
 8014a40:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
 8014a42:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
 8014a46:	462a      	mov	r2, r5
 8014a48:	a901      	add	r1, sp, #4
 8014a4a:	6820      	ldr	r0, [r4, #0]
 8014a4c:	f7fe fede 	bl	801380c <ring_buf_put_claim>
		if (claim_len < total_len) {
 8014a50:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
 8014a52:	4606      	mov	r6, r0
		if (claim_len < total_len) {
 8014a54:	d92f      	bls.n	8014ab6 <shell_history_put+0xa8>
				ring_buf_put_claim(history->ring_buf,
 8014a56:	462a      	mov	r2, r5
 8014a58:	a901      	add	r1, sp, #4
 8014a5a:	6820      	ldr	r0, [r4, #0]
 8014a5c:	f7fe fed6 	bl	801380c <ring_buf_put_claim>
			if (claim2_len == total_len) {
 8014a60:	4285      	cmp	r5, r0
 8014a62:	d129      	bne.n	8014ab8 <shell_history_put+0xaa>
				ring_buf_put_finish(history->ring_buf,
 8014a64:	4631      	mov	r1, r6
 8014a66:	6820      	ldr	r0, [r4, #0]
 8014a68:	f7fe feec 	bl	8013844 <ring_buf_put_finish>
				padding += claim_len;
 8014a6c:	4437      	add	r7, r6
 8014a6e:	b2bf      	uxth	r7, r7
 8014a70:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
 8014a72:	9d01      	ldr	r5, [sp, #4]
 8014a74:	4651      	mov	r1, sl
	item->len = len;
 8014a76:	f8a5 8008 	strh.w	r8, [r5, #8]
	item->padding = padding;
 8014a7a:	816f      	strh	r7, [r5, #10]
 8014a7c:	4642      	mov	r2, r8
 8014a7e:	f105 000c 	add.w	r0, r5, #12
 8014a82:	f7ef ff4c 	bl	800491e <memcpy>
	node->next = list->head;
 8014a86:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
 8014a88:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
 8014a8a:	e9c5 3900 	strd	r3, r9, [r5]
 8014a8e:	4631      	mov	r1, r6
	list->head->prev = node;
 8014a90:	605d      	str	r5, [r3, #4]
	list->head = node;
 8014a92:	6065      	str	r5, [r4, #4]
 8014a94:	f7fe fed6 	bl	8013844 <ring_buf_put_finish>
			break;
 8014a98:	e00a      	b.n	8014ab0 <shell_history_put+0xa2>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
 8014a9a:	9001      	str	r0, [sp, #4]
	if (l_item &&
 8014a9c:	2800      	cmp	r0, #0
 8014a9e:	d0d0      	beq.n	8014a42 <shell_history_put+0x34>
	   (h_item->len == len) &&
 8014aa0:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
 8014aa2:	4293      	cmp	r3, r2
 8014aa4:	d1cd      	bne.n	8014a42 <shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
 8014aa6:	300c      	adds	r0, #12
 8014aa8:	f7ef ff2b 	bl	8004902 <memcmp>
	   (h_item->len == len) &&
 8014aac:	2800      	cmp	r0, #0
 8014aae:	d1c8      	bne.n	8014a42 <shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
 8014ab0:	b003      	add	sp, #12
 8014ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
 8014ab6:	d0dc      	beq.n	8014a72 <shell_history_put+0x64>
		ring_buf_put_finish(history->ring_buf, 0);
 8014ab8:	2100      	movs	r1, #0
 8014aba:	6820      	ldr	r0, [r4, #0]
 8014abc:	f7fe fec2 	bl	8013844 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
 8014ac0:	6863      	ldr	r3, [r4, #4]
 8014ac2:	4599      	cmp	r9, r3
 8014ac4:	d107      	bne.n	8014ad6 <shell_history_put+0xc8>
			ring_buf_reset(history->ring_buf);
 8014ac6:	6823      	ldr	r3, [r4, #0]
	buf->tail = 0;
 8014ac8:	e9c3 bb00 	strd	fp, fp, [r3]
__ssp_bos_icheck3(memset, void *, int)
 8014acc:	f8c3 b008 	str.w	fp, [r3, #8]
 8014ad0:	f8c3 b00c 	str.w	fp, [r3, #12]
 8014ad4:	e7b7      	b.n	8014a46 <shell_history_put+0x38>
 8014ad6:	4620      	mov	r0, r4
 8014ad8:	f7ff ff4d 	bl	8014976 <remove_from_tail.part.4>
		if (remove_from_tail(history) == false) {
 8014adc:	2800      	cmp	r0, #0
 8014ade:	d1b2      	bne.n	8014a46 <shell_history_put+0x38>
 8014ae0:	e7f1      	b.n	8014ac6 <shell_history_put+0xb8>

08014ae2 <shell_history_init>:

void shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
 8014ae2:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
 8014ae4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
 8014ae8:	2300      	movs	r3, #0
 8014aea:	60c3      	str	r3, [r0, #12]
}
 8014aec:	4770      	bx	lr

08014aee <dropped>:
	}
}

static void dropped(const struct log_backend *const backend, u32_t cnt)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
 8014aee:	6843      	ldr	r3, [r0, #4]
 8014af0:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8014af2:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
 8014af6:	f3bf 8f5b 	dmb	ish
 8014afa:	e853 0f00 	ldrex	r0, [r3]
 8014afe:	4408      	add	r0, r1
 8014b00:	e843 0c00 	strex	ip, r0, [r3]
 8014b04:	f1bc 0f00 	cmp.w	ip, #0
 8014b08:	d1f7      	bne.n	8014afa <dropped+0xc>
 8014b0a:	f3bf 8f5b 	dmb	ish
 8014b0e:	68d3      	ldr	r3, [r2, #12]
 8014b10:	f3bf 8f5b 	dmb	ish
 8014b14:	e853 2f00 	ldrex	r2, [r3]
 8014b18:	440a      	add	r2, r1
 8014b1a:	e843 2000 	strex	r0, r2, [r3]
 8014b1e:	2800      	cmp	r0, #0
 8014b20:	d1f8      	bne.n	8014b14 <dropped+0x26>
 8014b22:	f3bf 8f5b 	dmb	ish
	const struct shell_log_backend *log_backend = shell->log_backend;

	atomic_add(&shell->stats->log_lost_cnt, cnt);
	atomic_add(&log_backend->control_block->dropped_cnt, cnt);
}
 8014b26:	4770      	bx	lr

08014b28 <put>:
{
 8014b28:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
 8014b2a:	6843      	ldr	r3, [r0, #4]
 8014b2c:	681c      	ldr	r4, [r3, #0]
			shell->ctx->internal.flags.use_colors;
 8014b2e:	68a3      	ldr	r3, [r4, #8]
{
 8014b30:	b087      	sub	sp, #28
	log_msg_get(msg);
 8014b32:	4608      	mov	r0, r1
			shell->ctx->internal.flags.use_colors;
 8014b34:	f8d3 6258 	ldr.w	r6, [r3, #600]	; 0x258
{
 8014b38:	460d      	mov	r5, r1
	log_msg_get(msg);
 8014b3a:	f7ff f913 	bl	8013d64 <log_msg_get>
	switch (shell->log_backend->control_block->state) {
 8014b3e:	69e3      	ldr	r3, [r4, #28]
 8014b40:	68db      	ldr	r3, [r3, #12]
 8014b42:	791b      	ldrb	r3, [r3, #4]
 8014b44:	2b01      	cmp	r3, #1
			shell->ctx->internal.flags.use_colors;
 8014b46:	f3c6 0640 	ubfx	r6, r6, #1, #1
	switch (shell->log_backend->control_block->state) {
 8014b4a:	d005      	beq.n	8014b58 <put+0x30>
 8014b4c:	2b03      	cmp	r3, #3
 8014b4e:	d03d      	beq.n	8014bcc <put+0xa4>
		log_msg_put(msg);
 8014b50:	4628      	mov	r0, r5
 8014b52:	f7ff f934 	bl	8013dbe <log_msg_put>
}
 8014b56:	e037      	b.n	8014bc8 <put+0xa0>
	struct shell_log_backend_msg t_msg = {
 8014b58:	e9cd 5501 	strd	r5, r5, [sp, #4]
	return z_impl_k_uptime_get();
 8014b5c:	f004 f81d 	bl	8018b9a <z_impl_k_uptime_get>
	err = k_msgq_put(shell->log_backend->msgq, &t_msg,
 8014b60:	69e3      	ldr	r3, [r4, #28]
	return (u32_t)k_uptime_get();
 8014b62:	9003      	str	r0, [sp, #12]
 8014b64:	691a      	ldr	r2, [r3, #16]
 8014b66:	6858      	ldr	r0, [r3, #4]
	return z_impl_k_msgq_put(q, data, timeout);
 8014b68:	a902      	add	r1, sp, #8
 8014b6a:	f7fd fa85 	bl	8012078 <z_impl_k_msgq_put>
	switch (err) {
 8014b6e:	f110 0f23 	cmn.w	r0, #35	; 0x23
 8014b72:	d001      	beq.n	8014b78 <put+0x50>
 8014b74:	300b      	adds	r0, #11
 8014b76:	d121      	bne.n	8014bbc <put+0x94>
	struct k_msgq *msgq = shell->log_backend->msgq;
 8014b78:	69e3      	ldr	r3, [r4, #28]
 8014b7a:	685d      	ldr	r5, [r3, #4]
	u32_t timeout = shell->log_backend->timeout;
 8014b7c:	691e      	ldr	r6, [r3, #16]
	return z_impl_k_uptime_get();
 8014b7e:	f004 f80c 	bl	8018b9a <z_impl_k_uptime_get>
 8014b82:	4607      	mov	r7, r0
	return z_impl_k_msgq_peek(q, data);
 8014b84:	a904      	add	r1, sp, #16
 8014b86:	4628      	mov	r0, r5
 8014b88:	f003 fd02 	bl	8018590 <z_impl_k_msgq_peek>
		if (err == 0 && ((now - msg.timestamp) > timeout)) {
 8014b8c:	4602      	mov	r2, r0
 8014b8e:	b978      	cbnz	r0, 8014bb0 <put+0x88>
 8014b90:	9b05      	ldr	r3, [sp, #20]
 8014b92:	1afb      	subs	r3, r7, r3
 8014b94:	429e      	cmp	r6, r3
 8014b96:	d20b      	bcs.n	8014bb0 <put+0x88>
	return z_impl_k_msgq_get(q, data, timeout);
 8014b98:	a904      	add	r1, sp, #16
 8014b9a:	4628      	mov	r0, r5
 8014b9c:	f7fd fabe 	bl	801211c <z_impl_k_msgq_get>
			log_msg_put(msg.msg);
 8014ba0:	9804      	ldr	r0, [sp, #16]
 8014ba2:	f7ff f90c 	bl	8013dbe <log_msg_put>
				shell->stats->log_lost_cnt++;
 8014ba6:	69a2      	ldr	r2, [r4, #24]
 8014ba8:	6813      	ldr	r3, [r2, #0]
 8014baa:	3301      	adds	r3, #1
 8014bac:	6013      	str	r3, [r2, #0]
 8014bae:	e7e9      	b.n	8014b84 <put+0x5c>
		err = k_msgq_put(shell->log_backend->msgq, &msg, K_NO_WAIT);
 8014bb0:	69e3      	ldr	r3, [r4, #28]
 8014bb2:	6858      	ldr	r0, [r3, #4]
	return z_impl_k_msgq_put(q, data, timeout);
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	a901      	add	r1, sp, #4
 8014bb8:	f7fd fa5e 	bl	8012078 <z_impl_k_msgq_put>
			signal = &shell->ctx->signals[SHELL_SIGNAL_LOG_MSG];
 8014bbc:	68a0      	ldr	r0, [r4, #8]
 8014bbe:	f500 701b 	add.w	r0, r0, #620	; 0x26c
	return z_impl_k_poll_signal_raise(signal, result);
 8014bc2:	2100      	movs	r1, #0
 8014bc4:	f7fe fa10 	bl	8012fe8 <z_impl_k_poll_signal_raise>
}
 8014bc8:	b007      	add	sp, #28
 8014bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_cmd_line_erase(shell);
 8014bcc:	4620      	mov	r0, r4
 8014bce:	f7ff fd4f 	bl	8014670 <shell_cmd_line_erase>
		msg_process(shell->log_backend->log_output, msg, colors);
 8014bd2:	69e3      	ldr	r3, [r4, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
 8014bd4:	2e00      	cmp	r6, #0
	log_output_msg_process(log_output, msg, flags);
 8014bd6:	bf0c      	ite	eq
 8014bd8:	220e      	moveq	r2, #14
 8014bda:	220f      	movne	r2, #15
 8014bdc:	4629      	mov	r1, r5
 8014bde:	6898      	ldr	r0, [r3, #8]
 8014be0:	f7f1 fc50 	bl	8006484 <log_output_msg_process>
	log_msg_put(msg);
 8014be4:	e7b4      	b.n	8014b50 <put+0x28>

08014be6 <shell_log_backend_output_func>:
{
 8014be6:	b510      	push	{r4, lr}
 8014be8:	4613      	mov	r3, r2
 8014bea:	460c      	mov	r4, r1
	shell_print_stream(ctx, data, length);
 8014bec:	460a      	mov	r2, r1
 8014bee:	4601      	mov	r1, r0
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f7ff fd8a 	bl	801470a <shell_print_stream>
}
 8014bf6:	4620      	mov	r0, r4
 8014bf8:	bd10      	pop	{r4, pc}

08014bfa <shell_log_backend_enable>:
{
 8014bfa:	b538      	push	{r3, r4, r5, lr}
 8014bfc:	4604      	mov	r4, r0
		log_backend_enable(backend->backend, ctx, init_log_level);
 8014bfe:	6800      	ldr	r0, [r0, #0]
{
 8014c00:	460d      	mov	r5, r1
		log_backend_enable(backend->backend, ctx, init_log_level);
 8014c02:	f7f1 f84d 	bl	8005ca0 <log_backend_enable>
		log_output_ctx_set(backend->log_output, ctx);
 8014c06:	68a3      	ldr	r3, [r4, #8]
 8014c08:	685b      	ldr	r3, [r3, #4]
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
 8014c0a:	605d      	str	r5, [r3, #4]
	backend->control_block->dropped_cnt = 0;
 8014c0c:	68e3      	ldr	r3, [r4, #12]
 8014c0e:	2200      	movs	r2, #0
 8014c10:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
 8014c12:	2201      	movs	r2, #1
 8014c14:	711a      	strb	r2, [r3, #4]
}
 8014c16:	bd38      	pop	{r3, r4, r5, pc}

08014c18 <shell_log_backend_disable>:
{
 8014c18:	b513      	push	{r0, r1, r4, lr}
 8014c1a:	4604      	mov	r4, r0
	while ((msg = msg_from_fifo(backend)) != NULL) {
 8014c1c:	6860      	ldr	r0, [r4, #4]
	return z_impl_k_msgq_get(q, data, timeout);
 8014c1e:	2200      	movs	r2, #0
 8014c20:	4669      	mov	r1, sp
 8014c22:	f7fd fa7b 	bl	801211c <z_impl_k_msgq_get>
	return (err == 0) ? msg.msg : NULL;
 8014c26:	b908      	cbnz	r0, 8014c2c <shell_log_backend_disable+0x14>
 8014c28:	9800      	ldr	r0, [sp, #0]
	while ((msg = msg_from_fifo(backend)) != NULL) {
 8014c2a:	b938      	cbnz	r0, 8014c3c <shell_log_backend_disable+0x24>
	log_backend_disable(backend->backend);
 8014c2c:	6820      	ldr	r0, [r4, #0]
 8014c2e:	f7fe ffe3 	bl	8013bf8 <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
 8014c32:	68e3      	ldr	r3, [r4, #12]
 8014c34:	2202      	movs	r2, #2
 8014c36:	711a      	strb	r2, [r3, #4]
}
 8014c38:	b002      	add	sp, #8
 8014c3a:	bd10      	pop	{r4, pc}
		log_msg_put(msg);
 8014c3c:	f7ff f8bf 	bl	8013dbe <log_msg_put>
 8014c40:	e7ec      	b.n	8014c1c <shell_log_backend_disable+0x4>

08014c42 <shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
 8014c42:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
 8014c44:	685b      	ldr	r3, [r3, #4]
{
 8014c46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct shell *shell =
 8014c4a:	681e      	ldr	r6, [r3, #0]
			shell->ctx->internal.flags.use_colors;
 8014c4c:	68b3      	ldr	r3, [r6, #8]
 8014c4e:	f8d3 5258 	ldr.w	r5, [r3, #600]	; 0x258
{
 8014c52:	4607      	mov	r7, r0
			shell->ctx->internal.flags.use_colors;
 8014c54:	f3c5 0540 	ubfx	r5, r5, #1, #1
	struct log_msg *msg = msg_from_fifo(backend);
 8014c58:	6840      	ldr	r0, [r0, #4]
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	4669      	mov	r1, sp
 8014c5e:	f7fd fa5d 	bl	801211c <z_impl_k_msgq_get>
	return (err == 0) ? msg.msg : NULL;
 8014c62:	b118      	cbz	r0, 8014c6c <shell_log_backend_process+0x2a>
		return false;
 8014c64:	2000      	movs	r0, #0
}
 8014c66:	b002      	add	sp, #8
 8014c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (err == 0) ? msg.msg : NULL;
 8014c6c:	9c00      	ldr	r4, [sp, #0]
	if (!msg) {
 8014c6e:	b36c      	cbz	r4, 8014ccc <shell_log_backend_process+0x8a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	f3bf 8f5b 	dmb	ish
 8014c76:	e853 8f00 	ldrex	r8, [r3]
 8014c7a:	e843 0200 	strex	r2, r0, [r3]
 8014c7e:	2a00      	cmp	r2, #0
 8014c80:	d1f9      	bne.n	8014c76 <shell_log_backend_process+0x34>
 8014c82:	f3bf 8f5b 	dmb	ish
	if (dropped) {
 8014c86:	f1b8 0f00 	cmp.w	r8, #0
 8014c8a:	d011      	beq.n	8014cb0 <shell_log_backend_process+0x6e>
		if (colors) {
 8014c8c:	b13d      	cbz	r5, 8014c9e <shell_log_backend_process+0x5c>
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
 8014c8e:	68b3      	ldr	r3, [r6, #8]
			shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
 8014c90:	2102      	movs	r1, #2
 8014c92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8014c94:	f8ad 3000 	strh.w	r3, [sp]
 8014c98:	4630      	mov	r0, r6
 8014c9a:	f7f2 ff2b 	bl	8007af4 <shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
 8014c9e:	4641      	mov	r1, r8
 8014ca0:	68b8      	ldr	r0, [r7, #8]
 8014ca2:	f7f1 fc65 	bl	8006570 <log_output_dropped_process>
		if (colors) {
 8014ca6:	b11d      	cbz	r5, 8014cb0 <shell_log_backend_process+0x6e>
			shell_vt100_colors_restore(shell, &col);
 8014ca8:	4669      	mov	r1, sp
 8014caa:	4630      	mov	r0, r6
 8014cac:	f7f2 ff46 	bl	8007b3c <shell_vt100_colors_restore>
	msg_process(shell->log_backend->log_output, msg, colors);
 8014cb0:	69f3      	ldr	r3, [r6, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
 8014cb2:	2d00      	cmp	r5, #0
	log_output_msg_process(log_output, msg, flags);
 8014cb4:	6898      	ldr	r0, [r3, #8]
 8014cb6:	bf0c      	ite	eq
 8014cb8:	220e      	moveq	r2, #14
 8014cba:	220f      	movne	r2, #15
 8014cbc:	4621      	mov	r1, r4
 8014cbe:	f7f1 fbe1 	bl	8006484 <log_output_msg_process>
	log_msg_put(msg);
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	f7ff f87b 	bl	8013dbe <log_msg_put>
	return true;
 8014cc8:	2001      	movs	r0, #1
 8014cca:	e7cc      	b.n	8014c66 <shell_log_backend_process+0x24>
		return false;
 8014ccc:	4620      	mov	r0, r4
 8014cce:	e7ca      	b.n	8014c66 <shell_log_backend_process+0x24>

08014cd0 <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
 8014cd0:	6843      	ldr	r3, [r0, #4]
{
 8014cd2:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
 8014cd4:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
 8014cd6:	6860      	ldr	r0, [r4, #4]
 8014cd8:	6803      	ldr	r3, [r0, #0]
 8014cda:	2101      	movs	r1, #1
 8014cdc:	689b      	ldr	r3, [r3, #8]
 8014cde:	4798      	blx	r3
	if (err == 0) {
 8014ce0:	b9d0      	cbnz	r0, 8014d18 <panic+0x48>
		shell->log_backend->control_block->state =
 8014ce2:	69e3      	ldr	r3, [r4, #28]
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
 8014ce4:	68a0      	ldr	r0, [r4, #8]
		shell->log_backend->control_block->state =
 8014ce6:	68db      	ldr	r3, [r3, #12]
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
 8014ce8:	8e81      	ldrh	r1, [r0, #52]	; 0x34
		shell->log_backend->control_block->state =
 8014cea:	2203      	movs	r2, #3
 8014cec:	711a      	strb	r2, [r3, #4]
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
 8014cee:	3020      	adds	r0, #32
 8014cf0:	8a42      	ldrh	r2, [r0, #18]
 8014cf2:	f7ff fbb4 	bl	801445e <shell_multiline_data_calc>
		shell_op_cursor_vert_move(shell, -1);
 8014cf6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014cfa:	4620      	mov	r0, r4
 8014cfc:	f7f2 fe5c 	bl	80079b8 <shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
 8014d00:	68a3      	ldr	r3, [r4, #8]
 8014d02:	8c19      	ldrh	r1, [r3, #32]
		shell_op_cursor_horiz_move(shell,
 8014d04:	4620      	mov	r0, r4
 8014d06:	4249      	negs	r1, r1
 8014d08:	f7f2 fe66 	bl	80079d8 <shell_op_cursor_horiz_move>
		while (shell_log_backend_process(shell->log_backend)) {
 8014d0c:	69e0      	ldr	r0, [r4, #28]
 8014d0e:	f7ff ff98 	bl	8014c42 <shell_log_backend_process>
 8014d12:	2800      	cmp	r0, #0
 8014d14:	d1fa      	bne.n	8014d0c <panic+0x3c>
}
 8014d16:	bd10      	pop	{r4, pc}
		shell_log_backend_disable(shell->log_backend);
 8014d18:	69e0      	ldr	r0, [r4, #28]
}
 8014d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_log_backend_disable(shell->log_backend);
 8014d1e:	f7ff bf7b 	b.w	8014c18 <shell_log_backend_disable>

08014d22 <shell_wildcard_character_exist>:
{
 8014d22:	b510      	push	{r4, lr}
 8014d24:	4604      	mov	r4, r0
 8014d26:	b908      	cbnz	r0, 8014d2c <shell_wildcard_character_exist+0xa>
	return false;
 8014d28:	2000      	movs	r0, #0
}
 8014d2a:	bd10      	pop	{r4, pc}
 8014d2c:	f7ef fe60 	bl	80049f0 <strlen>
	for (size_t i = 0; i < str_len; i++) {
 8014d30:	2300      	movs	r3, #0
 8014d32:	b280      	uxth	r0, r0
 8014d34:	4283      	cmp	r3, r0
 8014d36:	d2f7      	bcs.n	8014d28 <shell_wildcard_character_exist+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
 8014d38:	5ce2      	ldrb	r2, [r4, r3]
 8014d3a:	2a3f      	cmp	r2, #63	; 0x3f
 8014d3c:	d003      	beq.n	8014d46 <shell_wildcard_character_exist+0x24>
 8014d3e:	2a2a      	cmp	r2, #42	; 0x2a
 8014d40:	d001      	beq.n	8014d46 <shell_wildcard_character_exist+0x24>
	for (size_t i = 0; i < str_len; i++) {
 8014d42:	3301      	adds	r3, #1
 8014d44:	e7f6      	b.n	8014d34 <shell_wildcard_character_exist+0x12>
			return true;
 8014d46:	2001      	movs	r0, #1
 8014d48:	e7ef      	b.n	8014d2a <shell_wildcard_character_exist+0x8>

08014d4a <shell_wildcard_prepare>:
{
 8014d4a:	b510      	push	{r4, lr}
 8014d4c:	4604      	mov	r4, r0
 8014d4e:	6880      	ldr	r0, [r0, #8]
 8014d50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014d54:	2100      	movs	r1, #0
 8014d56:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8014d5a:	f7ef fe08 	bl	800496e <memset>
	memcpy(shell->ctx->temp_buff,
 8014d5e:	68a0      	ldr	r0, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8014d60:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8014d62:	f100 0138 	add.w	r1, r0, #56	; 0x38
 8014d66:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8014d6a:	f7ef fdd8 	bl	800491e <memcpy>
	shell_spaces_trim(shell->ctx->temp_buff);
 8014d6e:	68a0      	ldr	r0, [r4, #8]
 8014d70:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8014d74:	f7f2 fdac 	bl	80078d0 <shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = shell_strlen(shell->ctx->temp_buff) + 1;
 8014d78:	68a0      	ldr	r0, [r4, #8]
 8014d7a:	f510 709c 	adds.w	r0, r0, #312	; 0x138
 8014d7e:	d002      	beq.n	8014d86 <shell_wildcard_prepare+0x3c>
 8014d80:	f7ef fe36 	bl	80049f0 <strlen>
 8014d84:	b280      	uxth	r0, r0
 8014d86:	68a3      	ldr	r3, [r4, #8]
 8014d88:	3001      	adds	r0, #1
 8014d8a:	86d8      	strh	r0, [r3, #54]	; 0x36
}
 8014d8c:	bd10      	pop	{r4, pc}

08014d8e <shell_wildcard_finalize>:

void shell_wildcard_finalize(const struct shell *shell)
{
 8014d8e:	b510      	push	{r4, lr}
 8014d90:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
 8014d92:	6880      	ldr	r0, [r0, #8]
 8014d94:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8014d96:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8014d9a:	3038      	adds	r0, #56	; 0x38
 8014d9c:	f7ef fdbf 	bl	800491e <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
 8014da0:	68a3      	ldr	r3, [r4, #8]
 8014da2:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8014da4:	865a      	strh	r2, [r3, #50]	; 0x32
}
 8014da6:	bd10      	pop	{r4, pc}

08014da8 <append_u8>:
{
 8014da8:	b510      	push	{r4, lr}
	if (!cpkt) {
 8014daa:	b158      	cbz	r0, 8014dc4 <append_u8+0x1c>
	if (cpkt->max_len - cpkt->offset < 1) {
 8014dac:	8883      	ldrh	r3, [r0, #4]
 8014dae:	88c2      	ldrh	r2, [r0, #6]
 8014db0:	1ad2      	subs	r2, r2, r3
 8014db2:	2a00      	cmp	r2, #0
	cpkt->data[cpkt->offset++] = data;
 8014db4:	bfc1      	itttt	gt
 8014db6:	6802      	ldrgt	r2, [r0, #0]
 8014db8:	1c5c      	addgt	r4, r3, #1
 8014dba:	8084      	strhgt	r4, [r0, #4]
 8014dbc:	54d1      	strbgt	r1, [r2, r3]
	return true;
 8014dbe:	bfcc      	ite	gt
 8014dc0:	2001      	movgt	r0, #1
		return false;
 8014dc2:	2000      	movle	r0, #0
}
 8014dc4:	bd10      	pop	{r4, pc}

08014dc6 <append_be16>:
{
 8014dc6:	b510      	push	{r4, lr}
	if (!cpkt) {
 8014dc8:	b178      	cbz	r0, 8014dea <append_be16+0x24>
	if (cpkt->max_len - cpkt->offset < 2) {
 8014dca:	8883      	ldrh	r3, [r0, #4]
 8014dcc:	88c2      	ldrh	r2, [r0, #6]
 8014dce:	1ad2      	subs	r2, r2, r3
 8014dd0:	2a01      	cmp	r2, #1
 8014dd2:	dd0b      	ble.n	8014dec <append_be16+0x26>
	cpkt->data[cpkt->offset++] = data >> 8;
 8014dd4:	6802      	ldr	r2, [r0, #0]
 8014dd6:	1c5c      	adds	r4, r3, #1
 8014dd8:	8084      	strh	r4, [r0, #4]
 8014dda:	0a0c      	lsrs	r4, r1, #8
 8014ddc:	54d4      	strb	r4, [r2, r3]
	cpkt->data[cpkt->offset++] = (u8_t) data;
 8014dde:	8883      	ldrh	r3, [r0, #4]
 8014de0:	6802      	ldr	r2, [r0, #0]
 8014de2:	1c5c      	adds	r4, r3, #1
 8014de4:	8084      	strh	r4, [r0, #4]
 8014de6:	54d1      	strb	r1, [r2, r3]
	return true;
 8014de8:	2001      	movs	r0, #1
}
 8014dea:	bd10      	pop	{r4, pc}
		return false;
 8014dec:	2000      	movs	r0, #0
 8014dee:	e7fc      	b.n	8014dea <append_be16+0x24>

08014df0 <decode_delta>:
{
 8014df0:	b570      	push	{r4, r5, r6, lr}
 8014df2:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8014df6:	9d06      	ldr	r5, [sp, #24]
	if (opt == COAP_OPTION_EXT_13) {
 8014df8:	2c0d      	cmp	r4, #13
 8014dfa:	d111      	bne.n	8014e20 <decode_delta+0x30>
		*hdr_len = 1U;
 8014dfc:	2401      	movs	r4, #1
 8014dfe:	802c      	strh	r4, [r5, #0]
	if (max_len - offset < 1) {
 8014e00:	1a5c      	subs	r4, r3, r1
 8014e02:	2c00      	cmp	r4, #0
 8014e04:	dc02      	bgt.n	8014e0c <decode_delta+0x1c>
			return -EINVAL;
 8014e06:	f06f 0015 	mvn.w	r0, #21
}
 8014e0a:	bd70      	pop	{r4, r5, r6, pc}
	*value = data[offset++];
 8014e0c:	1c4d      	adds	r5, r1, #1
 8014e0e:	b2ad      	uxth	r5, r5
 8014e10:	5c44      	ldrb	r4, [r0, r1]
	*pos = offset;
 8014e12:	8015      	strh	r5, [r2, #0]
		if (ret < 0) {
 8014e14:	1b58      	subs	r0, r3, r5
 8014e16:	d4f6      	bmi.n	8014e06 <decode_delta+0x16>
		opt = val + COAP_OPTION_EXT_13;
 8014e18:	340d      	adds	r4, #13
	*opt_ext = opt;
 8014e1a:	9b05      	ldr	r3, [sp, #20]
 8014e1c:	801c      	strh	r4, [r3, #0]
	return ret;
 8014e1e:	e7f4      	b.n	8014e0a <decode_delta+0x1a>
	} else if (opt == COAP_OPTION_EXT_14) {
 8014e20:	2c0e      	cmp	r4, #14
 8014e22:	d113      	bne.n	8014e4c <decode_delta+0x5c>
		*hdr_len = 2U;
 8014e24:	2402      	movs	r4, #2
 8014e26:	802c      	strh	r4, [r5, #0]
	if (max_len - offset < 2) {
 8014e28:	1a5c      	subs	r4, r3, r1
 8014e2a:	2c01      	cmp	r4, #1
 8014e2c:	ddeb      	ble.n	8014e06 <decode_delta+0x16>
	*value = data[offset++] << 8;
 8014e2e:	5c46      	ldrb	r6, [r0, r1]
	*value |= data[offset++];
 8014e30:	1c8d      	adds	r5, r1, #2
	*value = data[offset++] << 8;
 8014e32:	3101      	adds	r1, #1
	*value |= data[offset++];
 8014e34:	b289      	uxth	r1, r1
 8014e36:	b2ad      	uxth	r5, r5
 8014e38:	5c44      	ldrb	r4, [r0, r1]
	*pos = offset;
 8014e3a:	8015      	strh	r5, [r2, #0]
		if (ret < 0) {
 8014e3c:	1b58      	subs	r0, r3, r5
	*value |= data[offset++];
 8014e3e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
		if (ret < 0) {
 8014e42:	d4e0      	bmi.n	8014e06 <decode_delta+0x16>
		opt = val + COAP_OPTION_EXT_269;
 8014e44:	f204 140d 	addw	r4, r4, #269	; 0x10d
 8014e48:	b2a4      	uxth	r4, r4
 8014e4a:	e7e6      	b.n	8014e1a <decode_delta+0x2a>
	} else if (opt == COAP_OPTION_EXT_15) {
 8014e4c:	2c0f      	cmp	r4, #15
 8014e4e:	d0da      	beq.n	8014e06 <decode_delta+0x16>
	int ret = 0;
 8014e50:	2000      	movs	r0, #0
 8014e52:	e7e2      	b.n	8014e1a <decode_delta+0x2a>

08014e54 <append.part.8>:
static inline bool append(struct coap_packet *cpkt, const u8_t *data, u16_t len)
 8014e54:	b538      	push	{r3, r4, r5, lr}
 8014e56:	4604      	mov	r4, r0
	if (cpkt->max_len - cpkt->offset < len) {
 8014e58:	8880      	ldrh	r0, [r0, #4]
 8014e5a:	88e3      	ldrh	r3, [r4, #6]
 8014e5c:	1a1b      	subs	r3, r3, r0
 8014e5e:	4293      	cmp	r3, r2
static inline bool append(struct coap_packet *cpkt, const u8_t *data, u16_t len)
 8014e60:	4615      	mov	r5, r2
	if (cpkt->max_len - cpkt->offset < len) {
 8014e62:	db08      	blt.n	8014e76 <append.part.8+0x22>
	memcpy(cpkt->data + cpkt->offset, data, len);
 8014e64:	6823      	ldr	r3, [r4, #0]
 8014e66:	4418      	add	r0, r3
 8014e68:	f7ef fd59 	bl	800491e <memcpy>
	cpkt->offset += len;
 8014e6c:	88a3      	ldrh	r3, [r4, #4]
 8014e6e:	441d      	add	r5, r3
 8014e70:	80a5      	strh	r5, [r4, #4]
	return true;
 8014e72:	2001      	movs	r0, #1
}
 8014e74:	bd38      	pop	{r3, r4, r5, pc}
		return false;
 8014e76:	2000      	movs	r0, #0
 8014e78:	e7fc      	b.n	8014e74 <append.part.8+0x20>

08014e7a <coap_packet_init>:
{
 8014e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e7c:	9f08      	ldr	r7, [sp, #32]
 8014e7e:	f89d 601c 	ldrb.w	r6, [sp, #28]
	if (!cpkt || !data || !max_len) {
 8014e82:	4604      	mov	r4, r0
 8014e84:	b910      	cbnz	r0, 8014e8c <coap_packet_init+0x12>
		return -EINVAL;
 8014e86:	f06f 0015 	mvn.w	r0, #21
}
 8014e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!cpkt || !data || !max_len) {
 8014e8c:	2900      	cmp	r1, #0
 8014e8e:	d0fa      	beq.n	8014e86 <coap_packet_init+0xc>
 8014e90:	2a00      	cmp	r2, #0
 8014e92:	d0f8      	beq.n	8014e86 <coap_packet_init+0xc>
	cpkt->data = data;
 8014e94:	6001      	str	r1, [r0, #0]
	hdr |= (type & 0x3) << 4;
 8014e96:	f89d 1018 	ldrb.w	r1, [sp, #24]
	cpkt->max_len = max_len;
 8014e9a:	80c2      	strh	r2, [r0, #6]
__ssp_bos_icheck3(memset, void *, int)
 8014e9c:	2500      	movs	r5, #0
	hdr |= (type & 0x3) << 4;
 8014e9e:	0109      	lsls	r1, r1, #4
 8014ea0:	60c5      	str	r5, [r0, #12]
 8014ea2:	6085      	str	r5, [r0, #8]
	cpkt->offset = 0U;
 8014ea4:	8085      	strh	r5, [r0, #4]
	cpkt->delta = 0U;
 8014ea6:	8185      	strh	r5, [r0, #12]
	hdr |= (type & 0x3) << 4;
 8014ea8:	f001 0130 	and.w	r1, r1, #48	; 0x30
	hdr |= tokenlen & 0xF;
 8014eac:	b275      	sxtb	r5, r6
	hdr |= (type & 0x3) << 4;
 8014eae:	ea41 1183 	orr.w	r1, r1, r3, lsl #6
	hdr |= tokenlen & 0xF;
 8014eb2:	f005 030f 	and.w	r3, r5, #15
 8014eb6:	4319      	orrs	r1, r3
	res = append_u8(cpkt, hdr);
 8014eb8:	b2c9      	uxtb	r1, r1
 8014eba:	f7ff ff75 	bl	8014da8 <append_u8>
	if (!res) {
 8014ebe:	2800      	cmp	r0, #0
 8014ec0:	d0e1      	beq.n	8014e86 <coap_packet_init+0xc>
	res = append_u8(cpkt, code);
 8014ec2:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8014ec6:	4620      	mov	r0, r4
 8014ec8:	f7ff ff6e 	bl	8014da8 <append_u8>
	if (!res) {
 8014ecc:	2800      	cmp	r0, #0
 8014ece:	d0da      	beq.n	8014e86 <coap_packet_init+0xc>
	res = append_be16(cpkt, id);
 8014ed0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8014ed4:	4620      	mov	r0, r4
 8014ed6:	f7ff ff76 	bl	8014dc6 <append_be16>
	if (!res) {
 8014eda:	2800      	cmp	r0, #0
 8014edc:	d0d3      	beq.n	8014e86 <coap_packet_init+0xc>
	if (token && tokenlen) {
 8014ede:	b91f      	cbnz	r7, 8014ee8 <coap_packet_init+0x6e>
	cpkt->hdr_len = 1 + 1 + 2 + tokenlen;
 8014ee0:	3504      	adds	r5, #4
 8014ee2:	7225      	strb	r5, [r4, #8]
	return 0;
 8014ee4:	2000      	movs	r0, #0
 8014ee6:	e7d0      	b.n	8014e8a <coap_packet_init+0x10>
	if (token && tokenlen) {
 8014ee8:	2e00      	cmp	r6, #0
 8014eea:	d0f9      	beq.n	8014ee0 <coap_packet_init+0x66>
	if (!cpkt || !data) {
 8014eec:	4632      	mov	r2, r6
 8014eee:	4639      	mov	r1, r7
 8014ef0:	4620      	mov	r0, r4
 8014ef2:	f7ff ffaf 	bl	8014e54 <append.part.8>
		if (!res) {
 8014ef6:	2800      	cmp	r0, #0
 8014ef8:	d1f2      	bne.n	8014ee0 <coap_packet_init+0x66>
 8014efa:	e7c4      	b.n	8014e86 <coap_packet_init+0xc>

08014efc <coap_packet_append_payload_marker>:
{
 8014efc:	b508      	push	{r3, lr}
	return append_u8(cpkt, COAP_MARKER) ? 0 : -EINVAL;
 8014efe:	21ff      	movs	r1, #255	; 0xff
 8014f00:	f7ff ff52 	bl	8014da8 <append_u8>
 8014f04:	2800      	cmp	r0, #0
}
 8014f06:	bf0c      	ite	eq
 8014f08:	f06f 0015 	mvneq.w	r0, #21
 8014f0c:	2000      	movne	r0, #0
 8014f0e:	bd08      	pop	{r3, pc}

08014f10 <coap_packet_append_payload>:
{
 8014f10:	b508      	push	{r3, lr}
	if (!cpkt || !data) {
 8014f12:	b118      	cbz	r0, 8014f1c <coap_packet_append_payload+0xc>
 8014f14:	b111      	cbz	r1, 8014f1c <coap_packet_append_payload+0xc>
 8014f16:	f7ff ff9d 	bl	8014e54 <append.part.8>
	return append(cpkt, payload, payload_len) ? 0 : -EINVAL;
 8014f1a:	b910      	cbnz	r0, 8014f22 <coap_packet_append_payload+0x12>
 8014f1c:	f06f 0015 	mvn.w	r0, #21
}
 8014f20:	bd08      	pop	{r3, pc}
	return append(cpkt, payload, payload_len) ? 0 : -EINVAL;
 8014f22:	2000      	movs	r0, #0
 8014f24:	e7fc      	b.n	8014f20 <coap_packet_append_payload+0x10>

08014f26 <coap_packet_parse>:
{
 8014f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f2a:	b086      	sub	sp, #24
 8014f2c:	4688      	mov	r8, r1
 8014f2e:	4617      	mov	r7, r2
 8014f30:	461d      	mov	r5, r3
 8014f32:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	if (!cpkt || !data) {
 8014f36:	4604      	mov	r4, r0
 8014f38:	b920      	cbnz	r0, 8014f44 <coap_packet_parse+0x1e>
		return -EINVAL;
 8014f3a:	f06f 0015 	mvn.w	r0, #21
}
 8014f3e:	b006      	add	sp, #24
 8014f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cpkt || !data) {
 8014f44:	2900      	cmp	r1, #0
 8014f46:	d0f8      	beq.n	8014f3a <coap_packet_parse+0x14>
	if (len < BASIC_HEADER_SIZE) {
 8014f48:	2a03      	cmp	r2, #3
 8014f4a:	d9f6      	bls.n	8014f3a <coap_packet_parse+0x14>
	if (options) {
 8014f4c:	b123      	cbz	r3, 8014f58 <coap_packet_parse+0x32>
 8014f4e:	0132      	lsls	r2, r6, #4
 8014f50:	2100      	movs	r1, #0
 8014f52:	4618      	mov	r0, r3
 8014f54:	f7ef fd0b 	bl	800496e <memset>
	cpkt->offset = 0U;
 8014f58:	2000      	movs	r0, #0
	cpkt->data = data;
 8014f5a:	f8c4 8000 	str.w	r8, [r4]
	cpkt->offset = 0U;
 8014f5e:	80a0      	strh	r0, [r4, #4]
	cpkt->max_len = len;
 8014f60:	80e7      	strh	r7, [r4, #6]
	cpkt->opt_len = 0U;
 8014f62:	8160      	strh	r0, [r4, #10]
	cpkt->hdr_len = 0U;
 8014f64:	7220      	strb	r0, [r4, #8]
	cpkt->delta = 0U;
 8014f66:	81a0      	strh	r0, [r4, #12]
	tkl = cpkt->data[0] & 0x0f;
 8014f68:	f898 3000 	ldrb.w	r3, [r8]
 8014f6c:	f003 030f 	and.w	r3, r3, #15
	if (tkl > 8) {
 8014f70:	2b08      	cmp	r3, #8
 8014f72:	d8e2      	bhi.n	8014f3a <coap_packet_parse+0x14>
	cpkt->hdr_len = BASIC_HEADER_SIZE + tkl;
 8014f74:	3304      	adds	r3, #4
 8014f76:	7223      	strb	r3, [r4, #8]
	if (cpkt->hdr_len > len) {
 8014f78:	b29b      	uxth	r3, r3
 8014f7a:	42bb      	cmp	r3, r7
 8014f7c:	d8dd      	bhi.n	8014f3a <coap_packet_parse+0x14>
	cpkt->offset = cpkt->hdr_len;
 8014f7e:	80a3      	strh	r3, [r4, #4]
	if (cpkt->hdr_len == len) {
 8014f80:	d0dd      	beq.n	8014f3e <coap_packet_parse+0x18>
	offset = cpkt->offset;
 8014f82:	f8ad 3014 	strh.w	r3, [sp, #20]
	opt_len = 0U;
 8014f86:	f8ad 0012 	strh.w	r0, [sp, #18]
	delta = 0U;
 8014f8a:	f8ad 0016 	strh.w	r0, [sp, #22]
	num = 0U;
 8014f8e:	4607      	mov	r7, r0
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
 8014f90:	f10d 0812 	add.w	r8, sp, #18
		option = num < opt_num ? &options[num++] : NULL;
 8014f94:	42b7      	cmp	r7, r6
 8014f96:	bf34      	ite	cc
 8014f98:	eb05 1307 	addcc.w	r3, r5, r7, lsl #4
 8014f9c:	2300      	movcs	r3, #0
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
 8014f9e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8014fa2:	f10d 0316 	add.w	r3, sp, #22
		option = num < opt_num ? &options[num++] : NULL;
 8014fa6:	bf38      	it	cc
 8014fa8:	1c7a      	addcc	r2, r7, #1
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
 8014faa:	9300      	str	r3, [sp, #0]
		option = num < opt_num ? &options[num++] : NULL;
 8014fac:	bf38      	it	cc
 8014fae:	b2d7      	uxtbcc	r7, r2
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
 8014fb0:	88e3      	ldrh	r3, [r4, #6]
 8014fb2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8014fb6:	6820      	ldr	r0, [r4, #0]
 8014fb8:	aa05      	add	r2, sp, #20
 8014fba:	f7f3 fa6d 	bl	8008498 <parse_option>
		if (ret < 0) {
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	dbbd      	blt.n	8014f3e <coap_packet_parse+0x18>
		} else if (ret == 0) {
 8014fc2:	d1e7      	bne.n	8014f94 <coap_packet_parse+0x6e>
	cpkt->opt_len = opt_len;
 8014fc4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014fc8:	8163      	strh	r3, [r4, #10]
	cpkt->delta = delta;
 8014fca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8014fce:	81a3      	strh	r3, [r4, #12]
	cpkt->offset = offset;
 8014fd0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8014fd4:	80a3      	strh	r3, [r4, #4]
	return 0;
 8014fd6:	e7b2      	b.n	8014f3e <coap_packet_parse+0x18>

08014fd8 <coap_packet_get_payload>:
{
 8014fd8:	b510      	push	{r4, lr}
	if (!cpkt || !len) {
 8014fda:	b908      	cbnz	r0, 8014fe0 <coap_packet_get_payload+0x8>
		return NULL;
 8014fdc:	2000      	movs	r0, #0
}
 8014fde:	bd10      	pop	{r4, pc}
	if (!cpkt || !len) {
 8014fe0:	2900      	cmp	r1, #0
 8014fe2:	d0fb      	beq.n	8014fdc <coap_packet_get_payload+0x4>
	payload_len = cpkt->max_len - cpkt->hdr_len - cpkt->opt_len;
 8014fe4:	7a02      	ldrb	r2, [r0, #8]
 8014fe6:	8944      	ldrh	r4, [r0, #10]
 8014fe8:	88c3      	ldrh	r3, [r0, #6]
 8014fea:	4422      	add	r2, r4
 8014fec:	1a9b      	subs	r3, r3, r2
	if (payload_len > 0) {
 8014fee:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
	return !(*len) ? NULL :
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	800a      	strh	r2, [r1, #0]
 8014ff6:	ddf1      	ble.n	8014fdc <coap_packet_get_payload+0x4>
		cpkt->data + cpkt->hdr_len + cpkt->opt_len;
 8014ff8:	7a03      	ldrb	r3, [r0, #8]
 8014ffa:	8942      	ldrh	r2, [r0, #10]
	return !(*len) ? NULL :
 8014ffc:	6800      	ldr	r0, [r0, #0]
		cpkt->data + cpkt->hdr_len + cpkt->opt_len;
 8014ffe:	4413      	add	r3, r2
	return !(*len) ? NULL :
 8015000:	4418      	add	r0, r3
 8015002:	e7ec      	b.n	8014fde <coap_packet_get_payload+0x6>

08015004 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
 8015004:	b40c      	push	{r2, r3}
 8015006:	b513      	push	{r0, r1, r4, lr}
 8015008:	aa04      	add	r2, sp, #16
 801500a:	460c      	mov	r4, r1
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
 801500c:	6883      	ldr	r3, [r0, #8]
{
 801500e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, request);
 8015012:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
 8015014:	4620      	mov	r0, r4
 8015016:	4798      	blx	r3
	va_end(args);

	return res;
}
 8015018:	b002      	add	sp, #8
 801501a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801501e:	b002      	add	sp, #8
 8015020:	4770      	bx	lr

08015022 <k_fifo_wait_non_empty>:
{
 8015022:	b530      	push	{r4, r5, lr}
 8015024:	b087      	sub	sp, #28
 8015026:	4605      	mov	r5, r0
 8015028:	460c      	mov	r4, r1
	struct k_poll_event events[] = {
 801502a:	2210      	movs	r2, #16
 801502c:	2100      	movs	r1, #0
 801502e:	a801      	add	r0, sp, #4
 8015030:	f7ef fc9d 	bl	800496e <memset>
 8015034:	2304      	movs	r3, #4
 8015036:	f88d 3011 	strb.w	r3, [sp, #17]
 801503a:	9505      	str	r5, [sp, #20]
	return z_impl_k_poll(events, num_events, timeout);
 801503c:	2101      	movs	r1, #1
 801503e:	4622      	mov	r2, r4
 8015040:	eb0d 0003 	add.w	r0, sp, r3
 8015044:	f7fd ff7c 	bl	8012f40 <z_impl_k_poll>
}
 8015048:	b007      	add	sp, #28
 801504a:	bd30      	pop	{r4, r5, pc}

0801504c <sock_getsockopt_vmeth>:
 801504c:	b508      	push	{r3, lr}
 801504e:	f000 fc5d 	bl	801590c <__errno>
 8015052:	236d      	movs	r3, #109	; 0x6d
 8015054:	6003      	str	r3, [r0, #0]
 8015056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801505a:	bd08      	pop	{r3, pc}

0801505c <zsock_received_cb>:
{
 801505c:	b570      	push	{r4, r5, r6, lr}
 801505e:	4604      	mov	r4, r0
 8015060:	f100 066c 	add.w	r6, r0, #108	; 0x6c
	if (!pkt) {
 8015064:	460d      	mov	r5, r1
 8015066:	b999      	cbnz	r1, 8015090 <zsock_received_cb+0x34>
	return z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
 8015068:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801506a:	f003 fb02 	bl	8018672 <z_queue_node_peek>
		if (!last_pkt) {
 801506e:	b940      	cbnz	r0, 8015082 <zsock_received_cb+0x26>
	val = (val & ~mask) | flag;
 8015070:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8015072:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
 8015076:	66a3      	str	r3, [r4, #104]	; 0x68
	z_impl_k_queue_cancel_wait(queue);
 8015078:	4630      	mov	r0, r6
}
 801507a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801507e:	f003 bb0c 	b.w	801869a <z_impl_k_queue_cancel_wait>
	pkt->sent_or_eof = eof;
 8015082:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8015086:	f043 0302 	orr.w	r3, r3, #2
 801508a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 801508e:	bd70      	pop	{r4, r5, r6, pc}
 8015090:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 8015094:	f36f 0341 	bfc	r3, #1, #1
 8015098:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 801509c:	f8b0 307e 	ldrh.w	r3, [r0, #126]	; 0x7e
 80150a0:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (net_context_get_type(ctx) == SOCK_STREAM) {
 80150a4:	2b01      	cmp	r3, #1
 80150a6:	d106      	bne.n	80150b6 <zsock_received_cb+0x5a>
		net_context_update_recv_wnd(ctx, -net_pkt_remaining_data(pkt));
 80150a8:	4608      	mov	r0, r1
 80150aa:	f001 fdde 	bl	8016c6a <net_pkt_remaining_data>
 80150ae:	4241      	negs	r1, r0
 80150b0:	4620      	mov	r0, r4
 80150b2:	f001 fb85 	bl	80167c0 <net_context_update_recv_wnd>
	k_fifo_put(&ctx->recv_q, pkt);
 80150b6:	4629      	mov	r1, r5
 80150b8:	4630      	mov	r0, r6
}
 80150ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_fifo_put(&ctx->recv_q, pkt);
 80150be:	f003 bb01 	b.w	80186c4 <k_queue_append>

080150c2 <zsock_close_ctx>:
{
 80150c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
 80150c4:	f8b0 307e 	ldrh.w	r3, [r0, #126]	; 0x7e
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
 80150c8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80150cc:	2b03      	cmp	r3, #3
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
 80150ce:	f04f 0300 	mov.w	r3, #0
{
 80150d2:	4605      	mov	r5, r0
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
 80150d4:	461a      	mov	r2, r3
 80150d6:	4619      	mov	r1, r3
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
 80150d8:	d11c      	bne.n	8015114 <zsock_close_ctx+0x52>
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
 80150da:	f001 fadd 	bl	8016698 <net_context_accept>
 80150de:	f8b5 607e 	ldrh.w	r6, [r5, #126]	; 0x7e
	while ((p = k_fifo_get(&ctx->recv_q, K_NO_WAIT)) != NULL) {
 80150e2:	f105 076c 	add.w	r7, r5, #108	; 0x6c
	return (enum net_context_state)
 80150e6:	f3c6 0641 	ubfx	r6, r6, #1, #2
	return z_impl_k_queue_get(queue, timeout);
 80150ea:	2100      	movs	r1, #0
 80150ec:	4638      	mov	r0, r7
 80150ee:	f003 faf3 	bl	80186d8 <z_impl_k_queue_get>
 80150f2:	4604      	mov	r4, r0
 80150f4:	b988      	cbnz	r0, 801511a <zsock_close_ctx+0x58>
	z_impl_k_queue_cancel_wait(queue);
 80150f6:	4638      	mov	r0, r7
 80150f8:	f003 facf 	bl	801869a <z_impl_k_queue_cancel_wait>
	SET_ERRNO(net_context_put(ctx));
 80150fc:	4628      	mov	r0, r5
 80150fe:	f7f7 fac5 	bl	800c68c <net_context_put>
 8015102:	1e05      	subs	r5, r0, #0
 8015104:	da11      	bge.n	801512a <zsock_close_ctx+0x68>
 8015106:	f000 fc01 	bl	801590c <__errno>
 801510a:	426d      	negs	r5, r5
 801510c:	6005      	str	r5, [r0, #0]
 801510e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8015112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		(void)net_context_recv(ctx, NULL, K_NO_WAIT, NULL);
 8015114:	f7f7 fb64 	bl	800c7e0 <net_context_recv>
 8015118:	e7e1      	b.n	80150de <zsock_close_ctx+0x1c>
		if (is_listen) {
 801511a:	2e03      	cmp	r6, #3
 801511c:	d102      	bne.n	8015124 <zsock_close_ctx+0x62>
			net_context_put(p);
 801511e:	f7f7 fab5 	bl	800c68c <net_context_put>
 8015122:	e7e2      	b.n	80150ea <zsock_close_ctx+0x28>
			net_pkt_unref(p);
 8015124:	f001 fc32 	bl	801698c <net_pkt_unref>
 8015128:	e7df      	b.n	80150ea <zsock_close_ctx+0x28>
	return 0;
 801512a:	4620      	mov	r0, r4
 801512c:	e7f1      	b.n	8015112 <zsock_close_ctx+0x50>

0801512e <sock_bind_vmeth>:
}

static int sock_bind_vmeth(void *obj, const struct sockaddr *addr,
			   socklen_t addrlen)
{
	return zsock_bind_ctx(obj, addr, addrlen);
 801512e:	f7f3 bbab 	b.w	8008888 <zsock_bind_ctx>

08015132 <sock_connect_vmeth>:
}

static int sock_connect_vmeth(void *obj, const struct sockaddr *addr,
			      socklen_t addrlen)
{
	return zsock_connect_ctx(obj, addr, addrlen);
 8015132:	f7f3 bbcd 	b.w	80088d0 <zsock_connect_ctx>

08015136 <z_impl_zsock_connect>:
{
 8015136:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015138:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
 801513a:	a901      	add	r1, sp, #4
{
 801513c:	4615      	mov	r5, r2
	return z_get_fd_obj_and_vtable(sock,
 801513e:	f7f0 fb9d 	bl	800587c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
 8015142:	b138      	cbz	r0, 8015154 <z_impl_zsock_connect+0x1e>
 8015144:	9b01      	ldr	r3, [sp, #4]
 8015146:	691b      	ldr	r3, [r3, #16]
 8015148:	b123      	cbz	r3, 8015154 <z_impl_zsock_connect+0x1e>
 801514a:	462a      	mov	r2, r5
 801514c:	4621      	mov	r1, r4
 801514e:	4798      	blx	r3
}
 8015150:	b003      	add	sp, #12
 8015152:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
 8015154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015158:	e7fa      	b.n	8015150 <z_impl_zsock_connect+0x1a>

0801515a <sock_listen_vmeth>:
}

static int sock_listen_vmeth(void *obj, int backlog)
{
	return zsock_listen_ctx(obj, backlog);
 801515a:	f7f3 bbd9 	b.w	8008910 <zsock_listen_ctx>

0801515e <sock_accept_vmeth>:
}

static int sock_accept_vmeth(void *obj, struct sockaddr *addr,
			     socklen_t *addrlen)
{
	return zsock_accept_ctx(obj, addr, addrlen);
 801515e:	f7f3 bbf1 	b.w	8008944 <zsock_accept_ctx>

08015162 <sock_sendto_vmeth>:

static ssize_t sock_sendto_vmeth(void *obj, const void *buf, size_t len,
				 int flags, const struct sockaddr *dest_addr,
				 socklen_t addrlen)
{
	return zsock_sendto_ctx(obj, buf, len, flags, dest_addr, addrlen);
 8015162:	f7f3 bc47 	b.w	80089f4 <zsock_sendto_ctx>

08015166 <sock_write_vmeth>:
{
 8015166:	b507      	push	{r0, r1, r2, lr}
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
 8015168:	2300      	movs	r3, #0
 801516a:	e9cd 3300 	strd	r3, r3, [sp]
 801516e:	f7f3 fc41 	bl	80089f4 <zsock_sendto_ctx>
}
 8015172:	b003      	add	sp, #12
 8015174:	f85d fb04 	ldr.w	pc, [sp], #4

08015178 <z_impl_zsock_sendto>:
{
 8015178:	b5f0      	push	{r4, r5, r6, r7, lr}
 801517a:	b085      	sub	sp, #20
 801517c:	460d      	mov	r5, r1
	return z_get_fd_obj_and_vtable(sock,
 801517e:	a903      	add	r1, sp, #12
{
 8015180:	4616      	mov	r6, r2
 8015182:	461f      	mov	r7, r3
	return z_get_fd_obj_and_vtable(sock,
 8015184:	f7f0 fb7a 	bl	800587c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
 8015188:	b160      	cbz	r0, 80151a4 <z_impl_zsock_sendto+0x2c>
 801518a:	9b03      	ldr	r3, [sp, #12]
 801518c:	69dc      	ldr	r4, [r3, #28]
 801518e:	b14c      	cbz	r4, 80151a4 <z_impl_zsock_sendto+0x2c>
 8015190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015192:	9301      	str	r3, [sp, #4]
 8015194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015196:	9300      	str	r3, [sp, #0]
 8015198:	4632      	mov	r2, r6
 801519a:	463b      	mov	r3, r7
 801519c:	4629      	mov	r1, r5
 801519e:	47a0      	blx	r4
}
 80151a0:	b005      	add	sp, #20
 80151a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
 80151a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80151a8:	e7fa      	b.n	80151a0 <z_impl_zsock_sendto+0x28>

080151aa <zsock_sendmsg_ctx>:
{
 80151aa:	b513      	push	{r0, r1, r4, lr}
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
 80151ac:	0653      	lsls	r3, r2, #25
 80151ae:	bf5d      	ittte	pl
 80151b0:	6e84      	ldrpl	r4, [r0, #104]	; 0x68
 80151b2:	f084 0402 	eorpl.w	r4, r4, #2
 80151b6:	f344 0440 	sbfxpl	r4, r4, #1, #1
		timeout = K_NO_WAIT;
 80151ba:	2400      	movmi	r4, #0
	status = net_context_sendmsg(ctx, msg, flags, NULL, timeout, NULL);
 80151bc:	2300      	movs	r3, #0
 80151be:	e9cd 4300 	strd	r4, r3, [sp]
 80151c2:	f001 fabf 	bl	8016744 <net_context_sendmsg>
	if (status < 0) {
 80151c6:	1e04      	subs	r4, r0, #0
 80151c8:	da05      	bge.n	80151d6 <zsock_sendmsg_ctx+0x2c>
		errno = -status;
 80151ca:	f000 fb9f 	bl	801590c <__errno>
 80151ce:	4264      	negs	r4, r4
 80151d0:	6004      	str	r4, [r0, #0]
		return -1;
 80151d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 80151d6:	4620      	mov	r0, r4
 80151d8:	b002      	add	sp, #8
 80151da:	bd10      	pop	{r4, pc}

080151dc <sock_sendmsg_vmeth>:
}

static ssize_t sock_sendmsg_vmeth(void *obj, const struct msghdr *msg,
				  int flags)
{
	return zsock_sendmsg_ctx(obj, msg, flags);
 80151dc:	f7ff bfe5 	b.w	80151aa <zsock_sendmsg_ctx>

080151e0 <zsock_recvfrom_ctx>:
{
 80151e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151e4:	b08d      	sub	sp, #52	; 0x34
 80151e6:	4605      	mov	r5, r0
 80151e8:	9101      	str	r1, [sp, #4]
 80151ea:	4698      	mov	r8, r3
 80151ec:	e9dd 4716 	ldrd	r4, r7, [sp, #88]	; 0x58
	if (max_len == 0) {
 80151f0:	9200      	str	r2, [sp, #0]
 80151f2:	b922      	cbnz	r2, 80151fe <zsock_recvfrom_ctx+0x1e>
		return 0;
 80151f4:	2400      	movs	r4, #0
}
 80151f6:	4620      	mov	r0, r4
 80151f8:	b00d      	add	sp, #52	; 0x34
 80151fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	enum net_sock_type sock_type = net_context_get_type(ctx);
 80151fe:	f8b0 307e 	ldrh.w	r3, [r0, #126]	; 0x7e
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
 8015202:	f3c3 1281 	ubfx	r2, r3, #6, #2
	if (sock_type == SOCK_DGRAM) {
 8015206:	2a02      	cmp	r2, #2
 8015208:	f040 80c4 	bne.w	8015394 <zsock_recvfrom_ctx+0x1b4>
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
 801520c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8015210:	bf03      	ittte	eq
 8015212:	6e81      	ldreq	r1, [r0, #104]	; 0x68
 8015214:	f081 0102 	eoreq.w	r1, r1, #2
 8015218:	f341 0140 	sbfxeq	r1, r1, #1, #1
		timeout = K_NO_WAIT;
 801521c:	2100      	movne	r1, #0
	if (flags & ZSOCK_MSG_PEEK) {
 801521e:	f018 0302 	ands.w	r3, r8, #2
 8015222:	f100 006c 	add.w	r0, r0, #108	; 0x6c
 8015226:	9302      	str	r3, [sp, #8]
 8015228:	d01e      	beq.n	8015268 <zsock_recvfrom_ctx+0x88>
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
 801522a:	f7ff fefa 	bl	8015022 <k_fifo_wait_non_empty>
		if (res && res != -EAGAIN && res != -EINTR) {
 801522e:	f100 030b 	add.w	r3, r0, #11
 8015232:	2b0b      	cmp	r3, #11
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
 8015234:	4606      	mov	r6, r0
		if (res && res != -EAGAIN && res != -EINTR) {
 8015236:	d806      	bhi.n	8015246 <zsock_recvfrom_ctx+0x66>
 8015238:	f640 0181 	movw	r1, #2177	; 0x881
 801523c:	40d9      	lsrs	r1, r3
 801523e:	43c9      	mvns	r1, r1
 8015240:	f011 0101 	ands.w	r1, r1, #1
 8015244:	d006      	beq.n	8015254 <zsock_recvfrom_ctx+0x74>
			errno = -res;
 8015246:	f000 fb61 	bl	801590c <__errno>
 801524a:	4276      	negs	r6, r6
 801524c:	6006      	str	r6, [r0, #0]
		return -1;
 801524e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015252:	e7d0      	b.n	80151f6 <zsock_recvfrom_ctx+0x16>
	return z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
 8015254:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8015256:	f003 fa0c 	bl	8018672 <z_queue_node_peek>
	return z_impl_k_queue_get(queue, timeout);
 801525a:	4606      	mov	r6, r0
	if (!pkt) {
 801525c:	b938      	cbnz	r0, 801526e <zsock_recvfrom_ctx+0x8e>
		errno = EAGAIN;
 801525e:	f000 fb55 	bl	801590c <__errno>
 8015262:	230b      	movs	r3, #11
 8015264:	6003      	str	r3, [r0, #0]
 8015266:	e7f2      	b.n	801524e <zsock_recvfrom_ctx+0x6e>
 8015268:	f003 fa36 	bl	80186d8 <z_impl_k_queue_get>
 801526c:	e7f5      	b.n	801525a <zsock_recvfrom_ctx+0x7a>
	backup->pos = pkt->cursor.pos;
 801526e:	e9d0 9805 	ldrd	r9, r8, [r0, #20]
	if (src_addr && addrlen) {
 8015272:	2c00      	cmp	r4, #0
 8015274:	d06b      	beq.n	801534e <zsock_recvfrom_ctx+0x16e>
 8015276:	2f00      	cmp	r7, #0
 8015278:	d069      	beq.n	801534e <zsock_recvfrom_ctx+0x16e>
		rv = sock_get_pkt_src_addr(pkt, net_context_get_ip_proto(ctx),
 801527a:	f8b5 b07c 	ldrh.w	fp, [r5, #124]	; 0x7c
 801527e:	683d      	ldr	r5, [r7, #0]
	net_pkt_cursor_init(pkt);
 8015280:	f001 fc02 	bl	8016a88 <net_pkt_cursor_init>
	return pkt->family;
 8015284:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
 8015288:	f3c3 0342 	ubfx	r3, r3, #1, #3
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 801528c:	2b02      	cmp	r3, #2
	addr->sa_family = net_pkt_family(pkt);
 801528e:	8023      	strh	r3, [r4, #0]
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8015290:	d00a      	beq.n	80152a8 <zsock_recvfrom_ctx+0xc8>
		ret = -ENOTSUP;
 8015292:	f06f 0585 	mvn.w	r5, #133	; 0x85
	pkt->cursor.pos = backup->pos;
 8015296:	e9c6 9805 	strd	r9, r8, [r6, #20]
		if (rv < 0) {
 801529a:	2d00      	cmp	r5, #0
 801529c:	d052      	beq.n	8015344 <zsock_recvfrom_ctx+0x164>
			errno = -rv;
 801529e:	f000 fb35 	bl	801590c <__errno>
 80152a2:	426d      	negs	r5, r5
 80152a4:	6005      	str	r5, [r0, #0]
			return -1;
 80152a6:	e7d2      	b.n	801524e <zsock_recvfrom_ctx+0x6e>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access,
 80152a8:	f04f 0c00 	mov.w	ip, #0
 80152ac:	2328      	movs	r3, #40	; 0x28
		if (addrlen < sizeof(struct sockaddr_in6)) {
 80152ae:	2d17      	cmp	r5, #23
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access,
 80152b0:	e9cd c306 	strd	ip, r3, [sp, #24]
		if (addrlen < sizeof(struct sockaddr_in6)) {
 80152b4:	d943      	bls.n	801533e <zsock_recvfrom_ctx+0x15e>
		ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(
 80152b6:	a906      	add	r1, sp, #24
 80152b8:	4630      	mov	r0, r6
 80152ba:	f7f7 fc63 	bl	800cb84 <net_pkt_get_data>
		if (!ipv6_hdr ||
 80152be:	4682      	mov	sl, r0
 80152c0:	b910      	cbnz	r0, 80152c8 <zsock_recvfrom_ctx+0xe8>
			ret = -ENOBUFS;
 80152c2:	f06f 0568 	mvn.w	r5, #104	; 0x68
 80152c6:	e7e6      	b.n	8015296 <zsock_recvfrom_ctx+0xb6>
	return net_pkt_skip(pkt, access->size);
 80152c8:	9907      	ldr	r1, [sp, #28]
 80152ca:	4630      	mov	r0, r6
 80152cc:	f001 fc56 	bl	8016b7c <net_pkt_skip>
		if (!ipv6_hdr ||
 80152d0:	2800      	cmp	r0, #0
 80152d2:	d1f6      	bne.n	80152c2 <zsock_recvfrom_ctx+0xe2>
		    net_pkt_skip(pkt, net_pkt_ipv6_ext_len(pkt))) {
 80152d4:	8ff1      	ldrh	r1, [r6, #62]	; 0x3e
 80152d6:	4630      	mov	r0, r6
 80152d8:	f001 fc50 	bl	8016b7c <net_pkt_skip>
		    net_pkt_acknowledge_data(pkt, &ipv6_access) ||
 80152dc:	4605      	mov	r5, r0
 80152de:	2800      	cmp	r0, #0
 80152e0:	d1ef      	bne.n	80152c2 <zsock_recvfrom_ctx+0xe2>
		net_ipaddr_copy(&addr6->sin6_addr, &ipv6_hdr->src);
 80152e2:	f10a 0308 	add.w	r3, sl, #8
 80152e6:	aa08      	add	r2, sp, #32
 80152e8:	f10a 0a18 	add.w	sl, sl, #24
 80152ec:	6818      	ldr	r0, [r3, #0]
 80152ee:	6859      	ldr	r1, [r3, #4]
 80152f0:	4694      	mov	ip, r2
 80152f2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80152f6:	3308      	adds	r3, #8
 80152f8:	4553      	cmp	r3, sl
 80152fa:	4662      	mov	r2, ip
 80152fc:	d1f6      	bne.n	80152ec <zsock_recvfrom_ctx+0x10c>
 80152fe:	f10d 0c20 	add.w	ip, sp, #32
 8015302:	1d22      	adds	r2, r4, #4
 8015304:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8015308:	4663      	mov	r3, ip
 801530a:	cb03      	ldmia	r3!, {r0, r1}
 801530c:	4573      	cmp	r3, lr
 801530e:	6010      	str	r0, [r2, #0]
 8015310:	6051      	str	r1, [r2, #4]
 8015312:	469c      	mov	ip, r3
 8015314:	f102 0208 	add.w	r2, r2, #8
 8015318:	d1f6      	bne.n	8015308 <zsock_recvfrom_ctx+0x128>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 801531a:	fa5f fb8b 	uxtb.w	fp, fp
 801531e:	f1bb 0f11 	cmp.w	fp, #17
 8015322:	d1b6      	bne.n	8015292 <zsock_recvfrom_ctx+0xb2>
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 8015324:	ab04      	add	r3, sp, #16
 8015326:	9306      	str	r3, [sp, #24]
		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
 8015328:	a906      	add	r1, sp, #24
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 801532a:	2308      	movs	r3, #8
		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
 801532c:	4630      	mov	r0, r6
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 801532e:	9307      	str	r3, [sp, #28]
		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
 8015330:	f7f7 fc28 	bl	800cb84 <net_pkt_get_data>
		if (!udp_hdr) {
 8015334:	2800      	cmp	r0, #0
 8015336:	d0c4      	beq.n	80152c2 <zsock_recvfrom_ctx+0xe2>
		*port = udp_hdr->src_port;
 8015338:	8803      	ldrh	r3, [r0, #0]
 801533a:	8063      	strh	r3, [r4, #2]
 801533c:	e7ab      	b.n	8015296 <zsock_recvfrom_ctx+0xb6>
			ret = -EINVAL;
 801533e:	f06f 0515 	mvn.w	r5, #21
 8015342:	e7a8      	b.n	8015296 <zsock_recvfrom_ctx+0xb6>
		if (src_addr->sa_family == AF_INET) {
 8015344:	8823      	ldrh	r3, [r4, #0]
 8015346:	2b01      	cmp	r3, #1
 8015348:	d113      	bne.n	8015372 <zsock_recvfrom_ctx+0x192>
			*addrlen = sizeof(struct sockaddr_in);
 801534a:	2308      	movs	r3, #8
			*addrlen = sizeof(struct sockaddr_in6);
 801534c:	603b      	str	r3, [r7, #0]
	recv_len = net_pkt_remaining_data(pkt);
 801534e:	4630      	mov	r0, r6
 8015350:	f001 fc8b 	bl	8016c6a <net_pkt_remaining_data>
	if (recv_len > max_len) {
 8015354:	9b00      	ldr	r3, [sp, #0]
	if (net_pkt_read(pkt, buf, recv_len)) {
 8015356:	9901      	ldr	r1, [sp, #4]
 8015358:	4283      	cmp	r3, r0
 801535a:	bf28      	it	cs
 801535c:	4603      	movcs	r3, r0
 801535e:	461a      	mov	r2, r3
 8015360:	4630      	mov	r0, r6
 8015362:	461c      	mov	r4, r3
 8015364:	f001 fc20 	bl	8016ba8 <net_pkt_read>
 8015368:	b158      	cbz	r0, 8015382 <zsock_recvfrom_ctx+0x1a2>
			errno = ENOBUFS;
 801536a:	f000 facf 	bl	801590c <__errno>
 801536e:	2369      	movs	r3, #105	; 0x69
 8015370:	e778      	b.n	8015264 <zsock_recvfrom_ctx+0x84>
		} else if (src_addr->sa_family == AF_INET6) {
 8015372:	2b02      	cmp	r3, #2
 8015374:	d101      	bne.n	801537a <zsock_recvfrom_ctx+0x19a>
			*addrlen = sizeof(struct sockaddr_in6);
 8015376:	2318      	movs	r3, #24
 8015378:	e7e8      	b.n	801534c <zsock_recvfrom_ctx+0x16c>
			errno = ENOTSUP;
 801537a:	f000 fac7 	bl	801590c <__errno>
 801537e:	2386      	movs	r3, #134	; 0x86
 8015380:	e770      	b.n	8015264 <zsock_recvfrom_ctx+0x84>
	if (!(flags & ZSOCK_MSG_PEEK)) {
 8015382:	9b02      	ldr	r3, [sp, #8]
 8015384:	b91b      	cbnz	r3, 801538e <zsock_recvfrom_ctx+0x1ae>
		net_pkt_unref(pkt);
 8015386:	4630      	mov	r0, r6
 8015388:	f001 fb00 	bl	801698c <net_pkt_unref>
 801538c:	e733      	b.n	80151f6 <zsock_recvfrom_ctx+0x16>
	pkt->cursor.pos = backup->pos;
 801538e:	e9c6 9805 	strd	r9, r8, [r6, #20]
	return recv_len;
 8015392:	e730      	b.n	80151f6 <zsock_recvfrom_ctx+0x16>
	} else if (sock_type == SOCK_STREAM) {
 8015394:	2a01      	cmp	r2, #1
 8015396:	f47f af2d 	bne.w	80151f4 <zsock_recvfrom_ctx+0x14>
	if (!net_context_is_used(ctx)) {
 801539a:	07d8      	lsls	r0, r3, #31
 801539c:	d403      	bmi.n	80153a6 <zsock_recvfrom_ctx+0x1c6>
		errno = EBADF;
 801539e:	f000 fab5 	bl	801590c <__errno>
 80153a2:	2309      	movs	r3, #9
 80153a4:	e75e      	b.n	8015264 <zsock_recvfrom_ctx+0x84>
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
 80153a6:	6eaf      	ldr	r7, [r5, #104]	; 0x68
 80153a8:	f018 0f40 	tst.w	r8, #64	; 0x40
 80153ac:	bf06      	itte	eq
 80153ae:	f087 0702 	eoreq.w	r7, r7, #2
 80153b2:	f347 0740 	sbfxeq	r7, r7, #1, #1
		timeout = K_NO_WAIT;
 80153b6:	2700      	movne	r7, #0
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
 80153b8:	f105 0a6c 	add.w	sl, r5, #108	; 0x6c
}

static inline uintptr_t sock_get_flag(struct net_context *ctx, uintptr_t mask)
{
	return POINTER_TO_UINT(ctx->socket_data) & mask;
 80153bc:	6eab      	ldr	r3, [r5, #104]	; 0x68
		if (sock_is_eof(ctx)) {
 80153be:	07d9      	lsls	r1, r3, #31
 80153c0:	f53f af18 	bmi.w	80151f4 <zsock_recvfrom_ctx+0x14>
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
 80153c4:	4639      	mov	r1, r7
 80153c6:	4650      	mov	r0, sl
 80153c8:	f7ff fe2b 	bl	8015022 <k_fifo_wait_non_empty>
		if (res && res != -EAGAIN && res != -EINTR) {
 80153cc:	f100 010b 	add.w	r1, r0, #11
 80153d0:	290b      	cmp	r1, #11
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
 80153d2:	4604      	mov	r4, r0
		if (res && res != -EAGAIN && res != -EINTR) {
 80153d4:	d807      	bhi.n	80153e6 <zsock_recvfrom_ctx+0x206>
 80153d6:	f640 0381 	movw	r3, #2177	; 0x881
 80153da:	fa23 f101 	lsr.w	r1, r3, r1
 80153de:	43c9      	mvns	r1, r1
 80153e0:	f011 0101 	ands.w	r1, r1, #1
 80153e4:	d004      	beq.n	80153f0 <zsock_recvfrom_ctx+0x210>
			errno = -res;
 80153e6:	f000 fa91 	bl	801590c <__errno>
 80153ea:	4264      	negs	r4, r4
 80153ec:	6004      	str	r4, [r0, #0]
			return -1;
 80153ee:	e72e      	b.n	801524e <zsock_recvfrom_ctx+0x6e>
 80153f0:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80153f2:	f003 f93e 	bl	8018672 <z_queue_node_peek>
		if (!pkt) {
 80153f6:	4606      	mov	r6, r0
 80153f8:	b920      	cbnz	r0, 8015404 <zsock_recvfrom_ctx+0x224>
 80153fa:	6eab      	ldr	r3, [r5, #104]	; 0x68
			if (sock_is_eof(ctx)) {
 80153fc:	07da      	lsls	r2, r3, #31
 80153fe:	f53f aef9 	bmi.w	80151f4 <zsock_recvfrom_ctx+0x14>
 8015402:	e72c      	b.n	801525e <zsock_recvfrom_ctx+0x7e>
	backup->buf = pkt->cursor.buf;
 8015404:	6943      	ldr	r3, [r0, #20]
 8015406:	9303      	str	r3, [sp, #12]
	backup->pos = pkt->cursor.pos;
 8015408:	6983      	ldr	r3, [r0, #24]
 801540a:	9302      	str	r3, [sp, #8]
		data_len = net_pkt_remaining_data(pkt);
 801540c:	f001 fc2d 	bl	8016c6a <net_pkt_remaining_data>
 8015410:	9b00      	ldr	r3, [sp, #0]
		if (net_pkt_read(pkt, buf, recv_len)) {
 8015412:	9901      	ldr	r1, [sp, #4]
 8015414:	4283      	cmp	r3, r0
 8015416:	bf28      	it	cs
 8015418:	4603      	movcs	r3, r0
 801541a:	461a      	mov	r2, r3
		data_len = net_pkt_remaining_data(pkt);
 801541c:	4683      	mov	fp, r0
		if (net_pkt_read(pkt, buf, recv_len)) {
 801541e:	4630      	mov	r0, r6
 8015420:	461c      	mov	r4, r3
 8015422:	f001 fbc1 	bl	8016ba8 <net_pkt_read>
 8015426:	9b03      	ldr	r3, [sp, #12]
 8015428:	2800      	cmp	r0, #0
 801542a:	d19e      	bne.n	801536a <zsock_recvfrom_ctx+0x18a>
		if (!(flags & ZSOCK_MSG_PEEK)) {
 801542c:	f018 0902 	ands.w	r9, r8, #2
 8015430:	d11c      	bne.n	801546c <zsock_recvfrom_ctx+0x28c>
			if (recv_len == data_len) {
 8015432:	9b00      	ldr	r3, [sp, #0]
 8015434:	455b      	cmp	r3, fp
 8015436:	d30e      	bcc.n	8015456 <zsock_recvfrom_ctx+0x276>
 8015438:	4649      	mov	r1, r9
 801543a:	4650      	mov	r0, sl
 801543c:	f003 f94c 	bl	80186d8 <z_impl_k_queue_get>
	return pkt->sent_or_eof;
 8015440:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
				if (net_pkt_eof(pkt)) {
 8015444:	079b      	lsls	r3, r3, #30
	val = (val & ~mask) | flag;
 8015446:	bf42      	ittt	mi
 8015448:	6eab      	ldrmi	r3, [r5, #104]	; 0x68
 801544a:	f043 0301 	orrmi.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
 801544e:	66ab      	strmi	r3, [r5, #104]	; 0x68
				net_pkt_unref(pkt);
 8015450:	4630      	mov	r0, r6
 8015452:	f001 fa9b 	bl	801698c <net_pkt_unref>
	} while (recv_len == 0);
 8015456:	2c00      	cmp	r4, #0
 8015458:	d0b0      	beq.n	80153bc <zsock_recvfrom_ctx+0x1dc>
	if (!(flags & ZSOCK_MSG_PEEK)) {
 801545a:	f1b9 0f00 	cmp.w	r9, #0
 801545e:	f47f aeca 	bne.w	80151f6 <zsock_recvfrom_ctx+0x16>
		net_context_update_recv_wnd(ctx, recv_len);
 8015462:	4621      	mov	r1, r4
 8015464:	4628      	mov	r0, r5
 8015466:	f001 f9ab 	bl	80167c0 <net_context_update_recv_wnd>
	return recv_len;
 801546a:	e6c4      	b.n	80151f6 <zsock_recvfrom_ctx+0x16>
	pkt->cursor.buf = backup->buf;
 801546c:	6173      	str	r3, [r6, #20]
	pkt->cursor.pos = backup->pos;
 801546e:	9b02      	ldr	r3, [sp, #8]
 8015470:	61b3      	str	r3, [r6, #24]
 8015472:	e7f0      	b.n	8015456 <zsock_recvfrom_ctx+0x276>

08015474 <sock_recvfrom_vmeth>:

static ssize_t sock_recvfrom_vmeth(void *obj, void *buf, size_t max_len,
				   int flags, struct sockaddr *src_addr,
				   socklen_t *addrlen)
{
	return zsock_recvfrom_ctx(obj, buf, max_len, flags,
 8015474:	f7ff beb4 	b.w	80151e0 <zsock_recvfrom_ctx>

08015478 <sock_read_vmeth>:
{
 8015478:	b507      	push	{r0, r1, r2, lr}
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
 801547a:	2300      	movs	r3, #0
 801547c:	e9cd 3300 	strd	r3, r3, [sp]
 8015480:	f7ff feae 	bl	80151e0 <zsock_recvfrom_ctx>
}
 8015484:	b003      	add	sp, #12
 8015486:	f85d fb04 	ldr.w	pc, [sp], #4

0801548a <z_impl_zsock_recvfrom>:
{
 801548a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801548c:	b085      	sub	sp, #20
 801548e:	460d      	mov	r5, r1
	return z_get_fd_obj_and_vtable(sock,
 8015490:	a903      	add	r1, sp, #12
{
 8015492:	4616      	mov	r6, r2
 8015494:	461f      	mov	r7, r3
	return z_get_fd_obj_and_vtable(sock,
 8015496:	f7f0 f9f1 	bl	800587c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
 801549a:	b160      	cbz	r0, 80154b6 <z_impl_zsock_recvfrom+0x2c>
 801549c:	9b03      	ldr	r3, [sp, #12]
 801549e:	6a1c      	ldr	r4, [r3, #32]
 80154a0:	b14c      	cbz	r4, 80154b6 <z_impl_zsock_recvfrom+0x2c>
 80154a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154a4:	9301      	str	r3, [sp, #4]
 80154a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154a8:	9300      	str	r3, [sp, #0]
 80154aa:	4632      	mov	r2, r6
 80154ac:	463b      	mov	r3, r7
 80154ae:	4629      	mov	r1, r5
 80154b0:	47a0      	blx	r4
}
 80154b2:	b005      	add	sp, #20
 80154b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
 80154b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80154ba:	e7fa      	b.n	80154b2 <z_impl_zsock_recvfrom+0x28>

080154bc <z_impl_zsock_inet_pton>:
{
 80154bc:	b508      	push	{r3, lr}
 80154be:	f000 fdcb 	bl	8016058 <z_impl_net_addr_pton>
}
 80154c2:	fab0 f080 	clz	r0, r0
 80154c6:	0940      	lsrs	r0, r0, #5
 80154c8:	bd08      	pop	{r3, pc}

080154ca <zsock_setsockopt_ctx>:
	switch (level) {
 80154ca:	2906      	cmp	r1, #6
{
 80154cc:	b508      	push	{r3, lr}
	switch (level) {
 80154ce:	d00c      	beq.n	80154ea <zsock_setsockopt_ctx+0x20>
 80154d0:	2929      	cmp	r1, #41	; 0x29
 80154d2:	d00c      	beq.n	80154ee <zsock_setsockopt_ctx+0x24>
 80154d4:	2901      	cmp	r1, #1
 80154d6:	d101      	bne.n	80154dc <zsock_setsockopt_ctx+0x12>
		switch (optname) {
 80154d8:	2a02      	cmp	r2, #2
 80154da:	d00a      	beq.n	80154f2 <zsock_setsockopt_ctx+0x28>
	errno = ENOPROTOOPT;
 80154dc:	f000 fa16 	bl	801590c <__errno>
 80154e0:	236d      	movs	r3, #109	; 0x6d
 80154e2:	6003      	str	r3, [r0, #0]
 80154e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80154e8:	bd08      	pop	{r3, pc}
		switch (optname) {
 80154ea:	2a01      	cmp	r2, #1
 80154ec:	e7f5      	b.n	80154da <zsock_setsockopt_ctx+0x10>
		switch (optname) {
 80154ee:	2a1a      	cmp	r2, #26
 80154f0:	e7f3      	b.n	80154da <zsock_setsockopt_ctx+0x10>
			return 0;
 80154f2:	2000      	movs	r0, #0
 80154f4:	e7f8      	b.n	80154e8 <zsock_setsockopt_ctx+0x1e>

080154f6 <sock_setsockopt_vmeth>:
}

static int sock_setsockopt_vmeth(void *obj, int level, int optname,
				 const void *optval, socklen_t optlen)
{
	return zsock_setsockopt_ctx(obj, level, optname, optval, optlen);
 80154f6:	f7ff bfe8 	b.w	80154ca <zsock_setsockopt_ctx>

080154fa <zsock_getsockname_ctx>:
{
 80154fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154fc:	4615      	mov	r5, r2
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 80154fe:	8b82      	ldrh	r2, [r0, #28]
 8015500:	2a02      	cmp	r2, #2
{
 8015502:	b087      	sub	sp, #28
 8015504:	460e      	mov	r6, r1
 8015506:	f04f 0300 	mov.w	r3, #0
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 801550a:	d11a      	bne.n	8015542 <zsock_getsockname_ctx+0x48>
		struct sockaddr_in6 addr6 = { 0 };
 801550c:	9305      	str	r3, [sp, #20]
		addr6.sin6_port = net_sin6_ptr(&ctx->local)->sin6_port;
 801550e:	8bc3      	ldrh	r3, [r0, #30]
 8015510:	f8ad 3002 	strh.w	r3, [sp, #2]
		memcpy(&addr6.sin6_addr, net_sin6_ptr(&ctx->local)->sin6_addr,
 8015514:	6a03      	ldr	r3, [r0, #32]
		addr6.sin6_family = AF_INET6;
 8015516:	f8ad 2000 	strh.w	r2, [sp]
		memcpy(&addr6.sin6_addr, net_sin6_ptr(&ctx->local)->sin6_addr,
 801551a:	ac01      	add	r4, sp, #4
 801551c:	f103 0710 	add.w	r7, r3, #16
 8015520:	6818      	ldr	r0, [r3, #0]
 8015522:	6859      	ldr	r1, [r3, #4]
 8015524:	4622      	mov	r2, r4
 8015526:	c203      	stmia	r2!, {r0, r1}
 8015528:	3308      	adds	r3, #8
 801552a:	42bb      	cmp	r3, r7
 801552c:	4614      	mov	r4, r2
 801552e:	d1f7      	bne.n	8015520 <zsock_getsockname_ctx+0x26>
		memcpy(addr, &addr6, MIN(*addrlen, newlen));
 8015530:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8015532:	2a18      	cmp	r2, #24
 8015534:	bf28      	it	cs
 8015536:	2218      	movcs	r2, #24
 8015538:	4669      	mov	r1, sp
 801553a:	4630      	mov	r0, r6
 801553c:	f7ef f9ef 	bl	800491e <memcpy>
		newlen = sizeof(struct sockaddr_in6);
 8015540:	2318      	movs	r3, #24
}
 8015542:	2000      	movs	r0, #0
	*addrlen = newlen;
 8015544:	602b      	str	r3, [r5, #0]
}
 8015546:	b007      	add	sp, #28
 8015548:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801554a <sock_ioctl_vmeth>:
	switch (request) {
 801554a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 801554e:	b510      	push	{r4, lr}
 8015550:	4613      	mov	r3, r2
 8015552:	4604      	mov	r4, r0
	switch (request) {
 8015554:	d035      	beq.n	80155c2 <sock_ioctl_vmeth+0x78>
 8015556:	d807      	bhi.n	8015568 <sock_ioctl_vmeth+0x1e>
 8015558:	2903      	cmp	r1, #3
 801555a:	d020      	beq.n	801559e <sock_ioctl_vmeth+0x54>
 801555c:	2904      	cmp	r1, #4
 801555e:	d023      	beq.n	80155a8 <sock_ioctl_vmeth+0x5e>
		errno = EOPNOTSUPP;
 8015560:	f000 f9d4 	bl	801590c <__errno>
 8015564:	235f      	movs	r3, #95	; 0x5f
 8015566:	e016      	b.n	8015596 <sock_ioctl_vmeth+0x4c>
	switch (request) {
 8015568:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 801556c:	d04a      	beq.n	8015604 <sock_ioctl_vmeth+0xba>
 801556e:	f240 1205 	movw	r2, #261	; 0x105
 8015572:	4291      	cmp	r1, r2
 8015574:	d060      	beq.n	8015638 <sock_ioctl_vmeth+0xee>
 8015576:	f240 1203 	movw	r2, #259	; 0x103
 801557a:	4291      	cmp	r1, r2
 801557c:	d1f0      	bne.n	8015560 <sock_ioctl_vmeth+0x16>
		return zsock_poll_prepare_ctx(obj, pfd, pev, pev_end);
 801557e:	681a      	ldr	r2, [r3, #0]
	if (pfd->events & ZSOCK_POLLIN) {
 8015580:	8892      	ldrh	r2, [r2, #4]
 8015582:	07d1      	lsls	r1, r2, #31
 8015584:	d537      	bpl.n	80155f6 <sock_ioctl_vmeth+0xac>
		pev = va_arg(args, struct k_poll_event **);
 8015586:	685a      	ldr	r2, [r3, #4]
		if (*pev == pev_end) {
 8015588:	689b      	ldr	r3, [r3, #8]
 801558a:	6811      	ldr	r1, [r2, #0]
 801558c:	428b      	cmp	r3, r1
 801558e:	d11c      	bne.n	80155ca <sock_ioctl_vmeth+0x80>
			errno = ENOMEM;
 8015590:	f000 f9bc 	bl	801590c <__errno>
 8015594:	230c      	movs	r3, #12
		errno = EOPNOTSUPP;
 8015596:	6003      	str	r3, [r0, #0]
		return -1;
 8015598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801559c:	e010      	b.n	80155c0 <sock_ioctl_vmeth+0x76>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
 801559e:	6e83      	ldr	r3, [r0, #104]	; 0x68
		if (sock_is_nonblock(obj)) {
 80155a0:	0798      	lsls	r0, r3, #30
 80155a2:	d44f      	bmi.n	8015644 <sock_ioctl_vmeth+0xfa>
		return zsock_poll_update_ctx(obj, pfd, pev);
 80155a4:	2000      	movs	r0, #0
 80155a6:	e00b      	b.n	80155c0 <sock_ioctl_vmeth+0x76>
		if (flags & O_NONBLOCK) {
 80155a8:	6810      	ldr	r0, [r2, #0]
 80155aa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80155ac:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80155b0:	f023 0302 	bic.w	r3, r3, #2
 80155b4:	d003      	beq.n	80155be <sock_ioctl_vmeth+0x74>
	val = (val & ~mask) | flag;
 80155b6:	f043 0302 	orr.w	r3, r3, #2
	(ctx)->socket_data = UINT_TO_POINTER(val);
 80155ba:	66a3      	str	r3, [r4, #104]	; 0x68
 80155bc:	e7f2      	b.n	80155a4 <sock_ioctl_vmeth+0x5a>
 80155be:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80155c0:	bd10      	pop	{r4, pc}
 80155c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return zsock_close_ctx(obj);
 80155c6:	f7ff bd7c 	b.w	80150c2 <zsock_close_ctx>
		(*pev)->obj = &ctx->recv_q;
 80155ca:	f100 036c 	add.w	r3, r0, #108	; 0x6c
 80155ce:	610b      	str	r3, [r1, #16]
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
 80155d0:	6813      	ldr	r3, [r2, #0]
 80155d2:	7b59      	ldrb	r1, [r3, #13]
 80155d4:	2004      	movs	r0, #4
 80155d6:	f360 0103 	bfi	r1, r0, #0, #4
 80155da:	7359      	strb	r1, [r3, #13]
		(*pev)->mode = K_POLL_MODE_NOTIFY_ONLY;
 80155dc:	6813      	ldr	r3, [r2, #0]
 80155de:	7b99      	ldrb	r1, [r3, #14]
 80155e0:	f36f 0141 	bfc	r1, #1, #1
 80155e4:	7399      	strb	r1, [r3, #14]
		(*pev)->state = K_POLL_STATE_NOT_READY;
 80155e6:	6813      	ldr	r3, [r2, #0]
 80155e8:	68d9      	ldr	r1, [r3, #12]
 80155ea:	f36f 3110 	bfc	r1, #12, #5
 80155ee:	60d9      	str	r1, [r3, #12]
		(*pev)++;
 80155f0:	6813      	ldr	r3, [r2, #0]
 80155f2:	3314      	adds	r3, #20
 80155f4:	6013      	str	r3, [r2, #0]
	return POINTER_TO_UINT(ctx->socket_data) & mask;
 80155f6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	if (sock_is_eof(ctx)) {
 80155f8:	07da      	lsls	r2, r3, #31
 80155fa:	d5d3      	bpl.n	80155a4 <sock_ioctl_vmeth+0x5a>
		errno = EALREADY;
 80155fc:	f000 f986 	bl	801590c <__errno>
 8015600:	2378      	movs	r3, #120	; 0x78
 8015602:	e7c8      	b.n	8015596 <sock_ioctl_vmeth+0x4c>
		pev = va_arg(args, struct k_poll_event **);
 8015604:	e9d2 2000 	ldrd	r2, r0, [r2]
	if (pfd->events & ZSOCK_POLLOUT) {
 8015608:	8891      	ldrh	r1, [r2, #4]
 801560a:	074b      	lsls	r3, r1, #29
		pfd->revents |= ZSOCK_POLLOUT;
 801560c:	bf42      	ittt	mi
 801560e:	88d3      	ldrhmi	r3, [r2, #6]
 8015610:	f043 0304 	orrmi.w	r3, r3, #4
 8015614:	80d3      	strhmi	r3, [r2, #6]
	if (pfd->events & ZSOCK_POLLIN) {
 8015616:	07cb      	lsls	r3, r1, #31
 8015618:	d5c4      	bpl.n	80155a4 <sock_ioctl_vmeth+0x5a>
		if ((*pev)->state != K_POLL_STATE_NOT_READY || sock_is_eof(ctx)) {
 801561a:	6803      	ldr	r3, [r0, #0]
 801561c:	68d9      	ldr	r1, [r3, #12]
 801561e:	f411 3ff8 	tst.w	r1, #126976	; 0x1f000
 8015622:	d102      	bne.n	801562a <sock_ioctl_vmeth+0xe0>
 8015624:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8015626:	07c9      	lsls	r1, r1, #31
 8015628:	d503      	bpl.n	8015632 <sock_ioctl_vmeth+0xe8>
			pfd->revents |= ZSOCK_POLLIN;
 801562a:	88d1      	ldrh	r1, [r2, #6]
 801562c:	f041 0101 	orr.w	r1, r1, #1
 8015630:	80d1      	strh	r1, [r2, #6]
		(*pev)++;
 8015632:	3314      	adds	r3, #20
 8015634:	6003      	str	r3, [r0, #0]
 8015636:	e7b5      	b.n	80155a4 <sock_ioctl_vmeth+0x5a>
		return zsock_getsockname_ctx(obj, addr, addrlen);
 8015638:	e9d3 1200 	ldrd	r1, r2, [r3]
}
 801563c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return zsock_getsockname_ctx(obj, addr, addrlen);
 8015640:	f7ff bf5b 	b.w	80154fa <zsock_getsockname_ctx>
		    return O_NONBLOCK;
 8015644:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8015648:	e7ba      	b.n	80155c0 <sock_ioctl_vmeth+0x76>

0801564a <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 801564a:	4602      	mov	r2, r0
 801564c:	2101      	movs	r1, #1
 801564e:	2000      	movs	r0, #0
 8015650:	f7f3 bad8 	b.w	8008c04 <__stm32_exti_isr>

08015654 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8015654:	4602      	mov	r2, r0
 8015656:	2102      	movs	r1, #2
 8015658:	2001      	movs	r0, #1
 801565a:	f7f3 bad3 	b.w	8008c04 <__stm32_exti_isr>

0801565e <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 801565e:	4602      	mov	r2, r0
 8015660:	2103      	movs	r1, #3
 8015662:	2002      	movs	r0, #2
 8015664:	f7f3 bace 	b.w	8008c04 <__stm32_exti_isr>

08015668 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 8015668:	4602      	mov	r2, r0
 801566a:	2104      	movs	r1, #4
 801566c:	2003      	movs	r0, #3
 801566e:	f7f3 bac9 	b.w	8008c04 <__stm32_exti_isr>

08015672 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8015672:	4602      	mov	r2, r0
 8015674:	2105      	movs	r1, #5
 8015676:	2004      	movs	r0, #4
 8015678:	f7f3 bac4 	b.w	8008c04 <__stm32_exti_isr>

0801567c <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 801567c:	4602      	mov	r2, r0
 801567e:	210a      	movs	r1, #10
 8015680:	2005      	movs	r0, #5
 8015682:	f7f3 babf 	b.w	8008c04 <__stm32_exti_isr>

08015686 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8015686:	4602      	mov	r2, r0
 8015688:	2110      	movs	r1, #16
 801568a:	200a      	movs	r0, #10
 801568c:	f7f3 baba 	b.w	8008c04 <__stm32_exti_isr>

08015690 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	IRQ_CONNECT(EXTI0_IRQn,
 8015690:	2200      	movs	r2, #0
{
 8015692:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8015694:	4611      	mov	r1, r2
 8015696:	2006      	movs	r0, #6
 8015698:	f7f4 f9fa 	bl	8009a90 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 801569c:	2200      	movs	r2, #0
 801569e:	4611      	mov	r1, r2
 80156a0:	2007      	movs	r0, #7
 80156a2:	f7f4 f9f5 	bl	8009a90 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI1_IRQ_PRI,
		__stm32_exti_isr_1, DEVICE_GET(exti_stm32),
		0);
#ifdef CONFIG_SOC_SERIES_STM32F3X
	IRQ_CONNECT(EXTI2_TSC_IRQn,
 80156a6:	2200      	movs	r2, #0
 80156a8:	4611      	mov	r1, r2
 80156aa:	2008      	movs	r0, #8
 80156ac:	f7f4 f9f0 	bl	8009a90 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 80156b0:	2200      	movs	r2, #0
 80156b2:	4611      	mov	r1, r2
 80156b4:	2009      	movs	r0, #9
 80156b6:	f7f4 f9eb 	bl	8009a90 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 80156ba:	2200      	movs	r2, #0
 80156bc:	4611      	mov	r1, r2
 80156be:	200a      	movs	r0, #10
 80156c0:	f7f4 f9e6 	bl	8009a90 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#ifndef CONFIG_SOC_SERIES_STM32MP1X
	IRQ_CONNECT(EXTI9_5_IRQn,
 80156c4:	2200      	movs	r2, #0
 80156c6:	4611      	mov	r1, r2
 80156c8:	2017      	movs	r0, #23
 80156ca:	f7f4 f9e1 	bl	8009a90 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 80156ce:	2200      	movs	r2, #0
 80156d0:	4611      	mov	r1, r2
 80156d2:	2028      	movs	r0, #40	; 0x28
 80156d4:	f7f4 f9dc 	bl	8009a90 <z_arm_irq_priority_set>
}
 80156d8:	2000      	movs	r0, #0
 80156da:	bd08      	pop	{r3, pc}

080156dc <config_pll_init>:
	 * 2  -> LL_RCC_PREDIV_DIV_2  -> 0x00000001
	 * 3  -> LL_RCC_PREDIV_DIV_3  -> 0x00000002
	 * ...
	 * 16 -> LL_RCC_PREDIV_DIV_16 -> 0x0000000F
	 */
	pllinit->Prediv = CONFIG_CLOCK_STM32_PLL_PREDIV - 1;
 80156dc:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80156e0:	2300      	movs	r3, #0
 80156e2:	e9c0 2300 	strd	r2, r3, [r0]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80156e6:	4770      	bx	lr

080156e8 <config_enable_default_clocks>:
#if defined(CONFIG_EXTI_STM32) || defined(CONFIG_USB_DC_STM32)
	/* Enable System Configuration Controller clock. */
	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
#endif
#endif /* !CONFIG_SOC_SERIES_STM32F3X */
}
 80156e8:	4770      	bx	lr

080156ea <LL_RCC_MSI_Disable>:
 80156ea:	4770      	bx	lr

080156ec <z_impl_spi_transceive>:

static inline int z_impl_spi_transceive(struct device *dev,
				       const struct spi_config *config,
				       const struct spi_buf_set *tx_bufs,
				       const struct spi_buf_set *rx_bufs)
{
 80156ec:	b410      	push	{r4}
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->driver_api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 80156ee:	6844      	ldr	r4, [r0, #4]
 80156f0:	6824      	ldr	r4, [r4, #0]
 80156f2:	46a4      	mov	ip, r4
}
 80156f4:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 80156f8:	4760      	bx	ip

080156fa <eth_enc28j60_get_capabilities>:
}
 80156fa:	2010      	movs	r0, #16
 80156fc:	4770      	bx	lr

080156fe <eth_enc28j60_iface_init>:
	struct device *dev = net_if_get_device(iface);
 80156fe:	6802      	ldr	r2, [r0, #0]
	struct eth_enc28j60_runtime *context = dev->driver_data;
 8015700:	6813      	ldr	r3, [r2, #0]
 8015702:	689b      	ldr	r3, [r3, #8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8015704:	f3bf 8f5b 	dmb	ish
 8015708:	68d2      	ldr	r2, [r2, #12]
 801570a:	f3bf 8f5b 	dmb	ish
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
 801570e:	07d2      	lsls	r2, r2, #31
	net_if_get_link_addr(iface)->addr = addr;
 8015710:	bf58      	it	pl
 8015712:	6802      	ldrpl	r2, [r0, #0]
	net_if_set_link_addr(iface, context->mac_address,
 8015714:	f503 7163 	add.w	r1, r3, #908	; 0x38c
 8015718:	bf5e      	ittt	pl
 801571a:	6111      	strpl	r1, [r2, #16]
	net_if_get_link_addr(iface)->len = len;
 801571c:	f240 3106 	movwpl	r1, #774	; 0x306
 8015720:	8291      	strhpl	r1, [r2, #20]
	context->iface = iface;
 8015722:	6018      	str	r0, [r3, #0]
	ethernet_init(iface);
 8015724:	f000 b9bd 	b.w	8015aa2 <ethernet_init>

08015728 <eth_enc28j60_gpio_callback>:
	z_impl_k_sem_give(sem);
 8015728:	f101 0024 	add.w	r0, r1, #36	; 0x24
 801572c:	f7fd b8d2 	b.w	80128d4 <z_impl_k_sem_give>

08015730 <spi_write>:
 8015730:	2300      	movs	r3, #0
 8015732:	f7ff bfdb 	b.w	80156ec <z_impl_spi_transceive>

08015736 <eth_enc28j60_write_reg.isra.6>:
static void eth_enc28j60_write_reg(struct device *dev, u16_t reg_addr,
 8015736:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct spi_buf tx_buf = {
 8015738:	ab01      	add	r3, sp, #4
 801573a:	9302      	str	r3, [sp, #8]
 801573c:	2302      	movs	r3, #2
 801573e:	9303      	str	r3, [sp, #12]
	buf[0] = ENC28J60_SPI_WCR | (reg_addr & 0xFF);
 8015740:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	const struct spi_buf_set tx = {
 8015744:	ab02      	add	r3, sp, #8
 8015746:	9304      	str	r3, [sp, #16]
	buf[0] = ENC28J60_SPI_WCR | (reg_addr & 0xFF);
 8015748:	f88d 1004 	strb.w	r1, [sp, #4]
	const struct spi_buf_set tx = {
 801574c:	2301      	movs	r3, #1
	buf[1] = value;
 801574e:	f88d 2005 	strb.w	r2, [sp, #5]
	spi_write(context->spi, &context->spi_cfg, &tx);
 8015752:	f500 716a 	add.w	r1, r0, #936	; 0x3a8
 8015756:	aa04      	add	r2, sp, #16
 8015758:	f8d0 0398 	ldr.w	r0, [r0, #920]	; 0x398
	const struct spi_buf_set tx = {
 801575c:	9305      	str	r3, [sp, #20]
	spi_write(context->spi, &context->spi_cfg, &tx);
 801575e:	f7ff ffe7 	bl	8015730 <spi_write>
}
 8015762:	b007      	add	sp, #28
 8015764:	f85d fb04 	ldr.w	pc, [sp], #4

08015768 <eth_enc28j60_set_eth_reg.isra.8>:
static void eth_enc28j60_set_eth_reg(struct device *dev, u16_t reg_addr,
 8015768:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct spi_buf tx_buf = {
 801576a:	ab01      	add	r3, sp, #4
 801576c:	9302      	str	r3, [sp, #8]
 801576e:	2302      	movs	r3, #2
 8015770:	9303      	str	r3, [sp, #12]
	buf[0] = ENC28J60_SPI_BFS | (reg_addr & 0xFF);
 8015772:	f061 017f 	orn	r1, r1, #127	; 0x7f
	const struct spi_buf_set tx = {
 8015776:	ab02      	add	r3, sp, #8
 8015778:	9304      	str	r3, [sp, #16]
	buf[0] = ENC28J60_SPI_BFS | (reg_addr & 0xFF);
 801577a:	f88d 1004 	strb.w	r1, [sp, #4]
	const struct spi_buf_set tx = {
 801577e:	2301      	movs	r3, #1
	buf[1] = value;
 8015780:	f88d 2005 	strb.w	r2, [sp, #5]
	spi_write(context->spi, &context->spi_cfg, &tx);
 8015784:	f500 716a 	add.w	r1, r0, #936	; 0x3a8
 8015788:	aa04      	add	r2, sp, #16
 801578a:	f8d0 0398 	ldr.w	r0, [r0, #920]	; 0x398
	const struct spi_buf_set tx = {
 801578e:	9305      	str	r3, [sp, #20]
	spi_write(context->spi, &context->spi_cfg, &tx);
 8015790:	f7ff ffce 	bl	8015730 <spi_write>
}
 8015794:	b007      	add	sp, #28
 8015796:	f85d fb04 	ldr.w	pc, [sp], #4

0801579a <eth_enc28j60_read_reg.isra.7>:
static void eth_enc28j60_read_reg(struct device *dev, u16_t reg_addr,
 801579a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801579c:	b08b      	sub	sp, #44	; 0x2c
	const struct spi_buf tx_buf = {
 801579e:	2302      	movs	r3, #2
 80157a0:	9303      	str	r3, [sp, #12]
	const struct spi_buf_set tx = {
 80157a2:	ab02      	add	r3, sp, #8
	if (reg_addr & 0xF000) {
 80157a4:	f411 4f70 	tst.w	r1, #61440	; 0xf000
static void eth_enc28j60_read_reg(struct device *dev, u16_t reg_addr,
 80157a8:	4616      	mov	r6, r2
	const struct spi_buf_set tx = {
 80157aa:	9304      	str	r3, [sp, #16]
	const struct spi_buf tx_buf = {
 80157ac:	aa01      	add	r2, sp, #4
	const struct spi_buf_set tx = {
 80157ae:	f04f 0301 	mov.w	r3, #1
		rx_size = 3U;
 80157b2:	bf0c      	ite	eq
 80157b4:	2502      	moveq	r5, #2
 80157b6:	2503      	movne	r5, #3
	const struct spi_buf tx_buf = {
 80157b8:	9202      	str	r2, [sp, #8]
	struct spi_buf rx_buf = {
 80157ba:	e9cd 3205 	strd	r3, r2, [sp, #20]
	buf[1] = 0x0;
 80157be:	2400      	movs	r4, #0
	const struct spi_buf_set rx = {
 80157c0:	aa06      	add	r2, sp, #24
 80157c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
	rx_buf.len = rx_size;
 80157c6:	9507      	str	r5, [sp, #28]
	buf[0] = ENC28J60_SPI_RCR | (reg_addr & 0xFF);
 80157c8:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0x0;
 80157cc:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!spi_transceive(context->spi, &context->spi_cfg, &tx, &rx)) {
 80157d0:	f8d0 7398 	ldr.w	r7, [r0, #920]	; 0x398
 80157d4:	f500 716a 	add.w	r1, r0, #936	; 0x3a8
 80157d8:	ab08      	add	r3, sp, #32
 80157da:	aa04      	add	r2, sp, #16
 80157dc:	4638      	mov	r0, r7
 80157de:	f7ff ff85 	bl	80156ec <z_impl_spi_transceive>
 80157e2:	b918      	cbnz	r0, 80157ec <eth_enc28j60_read_reg.isra.7+0x52>
		*value = buf[rx_size - 1];
 80157e4:	ab0a      	add	r3, sp, #40	; 0x28
 80157e6:	441d      	add	r5, r3
 80157e8:	f815 4c25 	ldrb.w	r4, [r5, #-37]
 80157ec:	7034      	strb	r4, [r6, #0]
}
 80157ee:	b00b      	add	sp, #44	; 0x2c
 80157f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080157f2 <eth_enc28j60_set_bank.isra.5>:
static void eth_enc28j60_set_bank(struct device *dev, u16_t reg_addr)
 80157f2:	b570      	push	{r4, r5, r6, lr}
 80157f4:	b08a      	sub	sp, #40	; 0x28
	const struct spi_buf tx_buf = {
 80157f6:	aa01      	add	r2, sp, #4
 80157f8:	2302      	movs	r3, #2
	const struct spi_buf rx_buf = {
 80157fa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80157fe:	9305      	str	r3, [sp, #20]
	const struct spi_buf_set tx = {
 8015800:	ab02      	add	r3, sp, #8
	const struct spi_buf tx_buf = {
 8015802:	9202      	str	r2, [sp, #8]
	const struct spi_buf_set tx = {
 8015804:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set rx = {
 8015806:	aa04      	add	r2, sp, #16
	const struct spi_buf_set tx = {
 8015808:	2301      	movs	r3, #1
static void eth_enc28j60_set_bank(struct device *dev, u16_t reg_addr)
 801580a:	4604      	mov	r4, r0
	const struct spi_buf_set tx = {
 801580c:	9307      	str	r3, [sp, #28]
	const struct spi_buf_set rx = {
 801580e:	e9cd 2308 	strd	r2, r3, [sp, #32]
	buf[0] = ENC28J60_SPI_RCR | ENC28J60_REG_ECON1;
 8015812:	231f      	movs	r3, #31
static void eth_enc28j60_set_bank(struct device *dev, u16_t reg_addr)
 8015814:	460d      	mov	r5, r1
	buf[0] = ENC28J60_SPI_RCR | ENC28J60_REG_ECON1;
 8015816:	f8ad 3004 	strh.w	r3, [sp, #4]
	if (!spi_transceive(context->spi, &context->spi_cfg, &tx, &rx)) {
 801581a:	f8d0 0398 	ldr.w	r0, [r0, #920]	; 0x398
 801581e:	f504 766a 	add.w	r6, r4, #936	; 0x3a8
 8015822:	ab08      	add	r3, sp, #32
 8015824:	aa06      	add	r2, sp, #24
 8015826:	4631      	mov	r1, r6
 8015828:	f7ff ff60 	bl	80156ec <z_impl_spi_transceive>
 801582c:	b988      	cbnz	r0, 8015852 <eth_enc28j60_set_bank.isra.5+0x60>
		buf[1] = (buf[1] & 0xFC) | ((reg_addr >> 8) & 0x0F);
 801582e:	f89d 1005 	ldrb.w	r1, [sp, #5]
		spi_write(context->spi, &context->spi_cfg, &tx);
 8015832:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
		buf[1] = (buf[1] & 0xFC) | ((reg_addr >> 8) & 0x0F);
 8015836:	f021 0103 	bic.w	r1, r1, #3
 801583a:	f3c5 2503 	ubfx	r5, r5, #8, #4
 801583e:	4329      	orrs	r1, r5
		buf[0] = ENC28J60_SPI_WCR | ENC28J60_REG_ECON1;
 8015840:	235f      	movs	r3, #95	; 0x5f
		buf[1] = (buf[1] & 0xFC) | ((reg_addr >> 8) & 0x0F);
 8015842:	f88d 1005 	strb.w	r1, [sp, #5]
		spi_write(context->spi, &context->spi_cfg, &tx);
 8015846:	aa06      	add	r2, sp, #24
 8015848:	4631      	mov	r1, r6
		buf[0] = ENC28J60_SPI_WCR | ENC28J60_REG_ECON1;
 801584a:	f88d 3004 	strb.w	r3, [sp, #4]
		spi_write(context->spi, &context->spi_cfg, &tx);
 801584e:	f7ff ff6f 	bl	8015730 <spi_write>
}
 8015852:	b00a      	add	sp, #40	; 0x28
 8015854:	bd70      	pop	{r4, r5, r6, pc}

08015856 <eth_enc28j60_write_phy>:
{
 8015856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015858:	4604      	mov	r4, r0
 801585a:	460e      	mov	r6, r1
	eth_enc28j60_set_bank(dev, ENC28J60_REG_MIREGADR);
 801585c:	6880      	ldr	r0, [r0, #8]
 801585e:	f242 2114 	movw	r1, #8724	; 0x2214
{
 8015862:	4615      	mov	r5, r2
	eth_enc28j60_set_bank(dev, ENC28J60_REG_MIREGADR);
 8015864:	f7ff ffc5 	bl	80157f2 <eth_enc28j60_set_bank.isra.5>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_MIREGADR, reg_addr);
 8015868:	b2f2      	uxtb	r2, r6
 801586a:	f242 2114 	movw	r1, #8724	; 0x2214
 801586e:	68a0      	ldr	r0, [r4, #8]
 8015870:	f7ff ff61 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_MIWRL, data & 0xFF);
 8015874:	b2ea      	uxtb	r2, r5
 8015876:	f242 2116 	movw	r1, #8726	; 0x2216
 801587a:	68a0      	ldr	r0, [r4, #8]
 801587c:	f7ff ff5b 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_write_reg(dev, ENC28J60_REG_MIWRH, data >> 8);
 8015880:	f242 2117 	movw	r1, #8727	; 0x2217
 8015884:	68a0      	ldr	r0, [r4, #8]
 8015886:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801588a:	f7ff ff54 	bl	8015736 <eth_enc28j60_write_reg.isra.6>
	eth_enc28j60_set_bank(dev, ENC28J60_REG_MISTAT);
 801588e:	f242 310a 	movw	r1, #8970	; 0x230a
 8015892:	68a0      	ldr	r0, [r4, #8]
 8015894:	f7ff ffad 	bl	80157f2 <eth_enc28j60_set_bank.isra.5>
	z_impl_k_busy_wait(usec_to_wait);
 8015898:	200b      	movs	r0, #11
 801589a:	f7fd f885 	bl	80129a8 <z_impl_k_busy_wait>
		eth_enc28j60_read_reg(dev, ENC28J60_REG_MISTAT,
 801589e:	f10d 0207 	add.w	r2, sp, #7
 80158a2:	f242 310a 	movw	r1, #8970	; 0x230a
 80158a6:	68a0      	ldr	r0, [r4, #8]
 80158a8:	f7ff ff77 	bl	801579a <eth_enc28j60_read_reg.isra.7>
	} while ((data_mistat & ENC28J60_BIT_MISTAT_BUSY));
 80158ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80158b0:	07db      	lsls	r3, r3, #31
 80158b2:	d4f1      	bmi.n	8015898 <eth_enc28j60_write_phy+0x42>
}
 80158b4:	b002      	add	sp, #8
 80158b6:	bd70      	pop	{r4, r5, r6, pc}

080158b8 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
 80158b8:	f7f4 b948 	b.w	8009b4c <z_arm_bus_fault>

080158bc <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 80158bc:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
 80158be:	6800      	ldr	r0, [r0, #0]
 80158c0:	f7f4 b94e 	b.w	8009b60 <z_arm_fatal_error>

080158c4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 80158c4:	b508      	push	{r3, lr}
	handler();
 80158c6:	f7f4 f9ab 	bl	8009c20 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
 80158ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
 80158ce:	f7f4 b873 	b.w	80099b8 <z_arm_exc_exit>

080158d2 <_stdout_hook_default>:
}
 80158d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80158d6:	4770      	bx	lr

080158d8 <_stdin_hook_default>:
}
 80158d8:	2000      	movs	r0, #0
 80158da:	4770      	bx	lr

080158dc <_read>:
{
 80158dc:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
 80158de:	4611      	mov	r1, r2
 80158e0:	f7f4 bd84 	b.w	800a3ec <z_impl_zephyr_read_stdin>

080158e4 <_write>:
{
 80158e4:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
 80158e6:	4611      	mov	r1, r2
 80158e8:	f7f4 bd94 	b.w	800a414 <z_impl_zephyr_write_stdout>

080158ec <_close>:
 80158ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80158f0:	4770      	bx	lr

080158f2 <_lseek>:
}
 80158f2:	2000      	movs	r0, #0
 80158f4:	4770      	bx	lr

080158f6 <_isatty>:
}
 80158f6:	2001      	movs	r0, #1
 80158f8:	4770      	bx	lr

080158fa <_kill>:
}
 80158fa:	2000      	movs	r0, #0
 80158fc:	4770      	bx	lr

080158fe <_getpid>:
}
 80158fe:	2000      	movs	r0, #0
 8015900:	4770      	bx	lr

08015902 <_fstat>:
	st->st_mode = S_IFCHR;
 8015902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015906:	604b      	str	r3, [r1, #4]
}
 8015908:	2000      	movs	r0, #0
 801590a:	4770      	bx	lr

0801590c <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 801590c:	f7fc b93a 	b.w	8011b84 <z_impl_z_errno>

08015910 <fixed_data_unref>:
}
 8015910:	4770      	bx	lr

08015912 <k_uptime_get_32>:
{
 8015912:	b508      	push	{r3, lr}
	return z_impl_k_uptime_get();
 8015914:	f003 f941 	bl	8018b9a <z_impl_k_uptime_get>
}
 8015918:	bd08      	pop	{r3, pc}

0801591a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 801591a:	6983      	ldr	r3, [r0, #24]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
 801591c:	685b      	ldr	r3, [r3, #4]
 801591e:	460a      	mov	r2, r1
 8015920:	6819      	ldr	r1, [r3, #0]
 8015922:	f7f4 bde5 	b.w	800a4f0 <net_buf_alloc_len>

08015926 <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
 8015926:	6803      	ldr	r3, [r0, #0]
 8015928:	b903      	cbnz	r3, 801592c <net_buf_frag_last+0x6>
		buf = buf->frags;
	}

	return buf;
}
 801592a:	4770      	bx	lr
 801592c:	4618      	mov	r0, r3
 801592e:	e7fa      	b.n	8015926 <net_buf_frag_last>

08015930 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
 8015930:	6802      	ldr	r2, [r0, #0]
{
 8015932:	b510      	push	{r4, lr}
	if (parent->frags) {
 8015934:	b11a      	cbz	r2, 801593e <net_buf_frag_insert+0xe>
 8015936:	460b      	mov	r3, r1
	while (buf->frags) {
 8015938:	681c      	ldr	r4, [r3, #0]
 801593a:	b914      	cbnz	r4, 8015942 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
 801593c:	601a      	str	r2, [r3, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
 801593e:	6001      	str	r1, [r0, #0]
}
 8015940:	bd10      	pop	{r4, pc}
	while (buf->frags) {
 8015942:	4623      	mov	r3, r4
 8015944:	e7f8      	b.n	8015938 <net_buf_frag_insert+0x8>

08015946 <net_buf_simple_add>:
	return buf->data + buf->len;
 8015946:	8883      	ldrh	r3, [r0, #4]
 8015948:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
 801594a:	4419      	add	r1, r3
 801594c:	8081      	strh	r1, [r0, #4]
	return tail;
}
 801594e:	18d0      	adds	r0, r2, r3
 8015950:	4770      	bx	lr

08015952 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
 8015952:	8883      	ldrh	r3, [r0, #4]
 8015954:	1a5b      	subs	r3, r3, r1
 8015956:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
 8015958:	6803      	ldr	r3, [r0, #0]
 801595a:	4419      	add	r1, r3
 801595c:	6001      	str	r1, [r0, #0]
}
 801595e:	4608      	mov	r0, r1
 8015960:	4770      	bx	lr

08015962 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
 8015962:	8883      	ldrh	r3, [r0, #4]
 8015964:	88c2      	ldrh	r2, [r0, #6]
 8015966:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
 8015968:	6803      	ldr	r3, [r0, #0]
 801596a:	6880      	ldr	r0, [r0, #8]
 801596c:	1a18      	subs	r0, r3, r0
}
 801596e:	1a10      	subs	r0, r2, r0
 8015970:	4770      	bx	lr

08015972 <net_eth_get_hw_capabilities>:
	return iface->if_dev->dev;
 8015972:	6803      	ldr	r3, [r0, #0]
 8015974:	6818      	ldr	r0, [r3, #0]
	if (!eth->get_capabilities) {
 8015976:	6843      	ldr	r3, [r0, #4]
 8015978:	68db      	ldr	r3, [r3, #12]
 801597a:	b103      	cbz	r3, 801597e <net_eth_get_hw_capabilities+0xc>
	return eth->get_capabilities(net_if_get_device(iface));
 801597c:	4718      	bx	r3
}
 801597e:	4618      	mov	r0, r3
 8015980:	4770      	bx	lr

08015982 <ethernet_enable>:
 8015982:	6803      	ldr	r3, [r0, #0]
 8015984:	6818      	ldr	r0, [r3, #0]

static inline int ethernet_enable(struct net_if *iface, bool state)
{
	const struct ethernet_api *eth =
 8015986:	6843      	ldr	r3, [r0, #4]
{
 8015988:	b510      	push	{r4, lr}
		net_if_get_device(iface)->driver_api;

	if (!eth) {
 801598a:	b14b      	cbz	r3, 80159a0 <ethernet_enable+0x1e>
		return -ENOENT;
	}

	if (!state) {
 801598c:	b921      	cbnz	r1, 8015998 <ethernet_enable+0x16>
		net_arp_clear_cache(iface);

		if (eth->stop) {
 801598e:	689b      	ldr	r3, [r3, #8]
 8015990:	b103      	cbz	r3, 8015994 <ethernet_enable+0x12>
			eth->stop(net_if_get_device(iface));
 8015992:	4798      	blx	r3
		if (eth->start) {
			eth->start(net_if_get_device(iface));
		}
	}

	return 0;
 8015994:	2000      	movs	r0, #0
}
 8015996:	bd10      	pop	{r4, pc}
		if (eth->start) {
 8015998:	6859      	ldr	r1, [r3, #4]
 801599a:	b121      	cbz	r1, 80159a6 <ethernet_enable+0x24>
			eth->start(net_if_get_device(iface));
 801599c:	4788      	blx	r1
 801599e:	e7f9      	b.n	8015994 <ethernet_enable+0x12>
		return -ENOENT;
 80159a0:	f06f 0001 	mvn.w	r0, #1
 80159a4:	e7f7      	b.n	8015996 <ethernet_enable+0x14>
	return 0;
 80159a6:	4608      	mov	r0, r1
 80159a8:	e7f5      	b.n	8015996 <ethernet_enable+0x14>

080159aa <ethernet_flags>:
	return iface->if_dev->l2_data;
 80159aa:	6803      	ldr	r3, [r0, #0]

enum net_l2_flags ethernet_flags(struct net_if *iface)
{
	struct ethernet_context *ctx = net_if_l2_data(iface);

	return ctx->ethernet_l2_flags;
 80159ac:	689b      	ldr	r3, [r3, #8]
}
 80159ae:	7c18      	ldrb	r0, [r3, #16]
 80159b0:	4770      	bx	lr

080159b2 <ethernet_recv>:
{
 80159b2:	b510      	push	{r4, lr}
	return pkt->frags->data;
 80159b4:	690b      	ldr	r3, [r1, #16]
 80159b6:	460c      	mov	r4, r1
 80159b8:	6899      	ldr	r1, [r3, #8]
	u16_t type = ntohs(hdr->type);
 80159ba:	898a      	ldrh	r2, [r1, #12]
 80159bc:	0213      	lsls	r3, r2, #8
 80159be:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 80159c2:	b29b      	uxth	r3, r3
	switch (type) {
 80159c4:	f640 0206 	movw	r2, #2054	; 0x806
 80159c8:	4293      	cmp	r3, r2
 80159ca:	d006      	beq.n	80159da <ethernet_recv+0x28>
 80159cc:	f248 62dd 	movw	r2, #34525	; 0x86dd
 80159d0:	4293      	cmp	r3, r2
 80159d2:	d040      	beq.n	8015a56 <ethernet_recv+0xa4>
 80159d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80159d8:	d14a      	bne.n	8015a70 <ethernet_recv+0xbe>
	pkt->family = family;
 80159da:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 80159de:	2201      	movs	r2, #1
 80159e0:	f362 0343 	bfi	r3, r2, #1, #3
 80159e4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	lladdr->addr = hdr->src.addr;
 80159e8:	1d8b      	adds	r3, r1, #6
 80159ea:	62a3      	str	r3, [r4, #40]	; 0x28
	lladdr->len = sizeof(struct net_eth_addr);
 80159ec:	f240 3306 	movw	r3, #774	; 0x306
 80159f0:	85a3      	strh	r3, [r4, #44]	; 0x2c
	lladdr->addr = hdr->dst.addr;
 80159f2:	6321      	str	r1, [r4, #48]	; 0x30
	lladdr->len = sizeof(struct net_eth_addr);
 80159f4:	86a3      	strh	r3, [r4, #52]	; 0x34
	if (addr->addr[0] == 0xff &&
 80159f6:	780b      	ldrb	r3, [r1, #0]
 80159f8:	2bff      	cmp	r3, #255	; 0xff
 80159fa:	d130      	bne.n	8015a5e <ethernet_recv+0xac>
 80159fc:	784b      	ldrb	r3, [r1, #1]
 80159fe:	2bff      	cmp	r3, #255	; 0xff
 8015a00:	d132      	bne.n	8015a68 <ethernet_recv+0xb6>
	    addr->addr[1] == 0xff &&
 8015a02:	788b      	ldrb	r3, [r1, #2]
 8015a04:	2bff      	cmp	r3, #255	; 0xff
 8015a06:	d12f      	bne.n	8015a68 <ethernet_recv+0xb6>
	    addr->addr[2] == 0xff &&
 8015a08:	78cb      	ldrb	r3, [r1, #3]
 8015a0a:	2bff      	cmp	r3, #255	; 0xff
 8015a0c:	d12c      	bne.n	8015a68 <ethernet_recv+0xb6>
	    addr->addr[3] == 0xff &&
 8015a0e:	790b      	ldrb	r3, [r1, #4]
 8015a10:	2bff      	cmp	r3, #255	; 0xff
 8015a12:	d129      	bne.n	8015a68 <ethernet_recv+0xb6>
	    addr->addr[4] == 0xff &&
 8015a14:	794b      	ldrb	r3, [r1, #5]
 8015a16:	2bff      	cmp	r3, #255	; 0xff
 8015a18:	d126      	bne.n	8015a68 <ethernet_recv+0xb6>
	net_buf_pull(pkt->frags, hdr_len);
 8015a1a:	6920      	ldr	r0, [r4, #16]
 8015a1c:	210e      	movs	r1, #14
 8015a1e:	3008      	adds	r0, #8
 8015a20:	f7ff ff97 	bl	8015952 <net_buf_simple_pull>
	ethernet_update_rx_stats(iface, pkt, net_pkt_get_len(pkt) + hdr_len);
 8015a24:	6922      	ldr	r2, [r4, #16]
 8015a26:	4613      	mov	r3, r2
	while (buf) {
 8015a28:	bb6b      	cbnz	r3, 8015a86 <ethernet_recv+0xd4>
	return pkt->family;
 8015a2a:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8015a2e:	6891      	ldr	r1, [r2, #8]
	if (net_pkt_family(pkt) == AF_INET) {
 8015a30:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8015a34:	2b01      	cmp	r3, #1
		len = ntohs(NET_IPV6_HDR(pkt)->len) + NET_IPV6H_LEN;
 8015a36:	bf15      	itete	ne
 8015a38:	8889      	ldrhne	r1, [r1, #4]
		len = ntohs(NET_IPV4_HDR(pkt)->len);
 8015a3a:	8849      	ldrheq	r1, [r1, #2]
		len = ntohs(NET_IPV6_HDR(pkt)->len) + NET_IPV6H_LEN;
 8015a3c:	020b      	lslne	r3, r1, #8
		len = ntohs(NET_IPV4_HDR(pkt)->len);
 8015a3e:	020b      	lsleq	r3, r1, #8
		len = ntohs(NET_IPV6_HDR(pkt)->len) + NET_IPV6H_LEN;
 8015a40:	bf16      	itet	ne
 8015a42:	ea43 2311 	orrne.w	r3, r3, r1, lsr #8
		len = ntohs(NET_IPV4_HDR(pkt)->len);
 8015a46:	ea43 2311 	orreq.w	r3, r3, r1, lsr #8
		len = ntohs(NET_IPV6_HDR(pkt)->len) + NET_IPV6H_LEN;
 8015a4a:	3328      	addne	r3, #40	; 0x28
 8015a4c:	b29b      	uxth	r3, r3
	if (len < NET_ETH_MINIMAL_FRAME_SIZE - sizeof(struct net_eth_hdr)) {
 8015a4e:	2b2d      	cmp	r3, #45	; 0x2d
 8015a50:	d91b      	bls.n	8015a8a <ethernet_recv+0xd8>
	return NET_CONTINUE;
 8015a52:	2001      	movs	r0, #1
}
 8015a54:	bd10      	pop	{r4, pc}
	pkt->family = family;
 8015a56:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8015a5a:	2202      	movs	r2, #2
 8015a5c:	e7c0      	b.n	80159e0 <ethernet_recv+0x2e>
	if (addr->addr[0] == 0x33 &&
 8015a5e:	2b33      	cmp	r3, #51	; 0x33
 8015a60:	d102      	bne.n	8015a68 <ethernet_recv+0xb6>
 8015a62:	784b      	ldrb	r3, [r1, #1]
 8015a64:	2b33      	cmp	r3, #51	; 0x33
 8015a66:	e7d7      	b.n	8015a18 <ethernet_recv+0x66>
	    !net_linkaddr_cmp(net_if_get_link_addr(iface), lladdr)) {
 8015a68:	6803      	ldr	r3, [r0, #0]
	if (!lladdr1 || !lladdr2) {
 8015a6a:	f113 0f10 	cmn.w	r3, #16
 8015a6e:	d101      	bne.n	8015a74 <ethernet_recv+0xc2>
	return NET_DROP;
 8015a70:	2002      	movs	r0, #2
 8015a72:	e7ef      	b.n	8015a54 <ethernet_recv+0xa2>
	if (lladdr1->len != lladdr2->len) {
 8015a74:	7d1a      	ldrb	r2, [r3, #20]
 8015a76:	2a06      	cmp	r2, #6
 8015a78:	d1fa      	bne.n	8015a70 <ethernet_recv+0xbe>
	return !memcmp(lladdr1->addr, lladdr2->addr, lladdr1->len);
 8015a7a:	6918      	ldr	r0, [r3, #16]
 8015a7c:	f7ee ff41 	bl	8004902 <memcmp>
		    (struct net_eth_addr *)lladdr->addr) &&
 8015a80:	2800      	cmp	r0, #0
 8015a82:	d0ca      	beq.n	8015a1a <ethernet_recv+0x68>
 8015a84:	e7f4      	b.n	8015a70 <ethernet_recv+0xbe>
		buf = buf->frags;
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	e7ce      	b.n	8015a28 <ethernet_recv+0x76>
			if (frag->len < len) {
 8015a8a:	8991      	ldrh	r1, [r2, #12]
 8015a8c:	4299      	cmp	r1, r3
				frag->len = len;
 8015a8e:	bf28      	it	cs
 8015a90:	8193      	strhcs	r3, [r2, #12]
		for (frag = pkt->frags; frag; frag = frag->frags) {
 8015a92:	6812      	ldr	r2, [r2, #0]
				len -= frag->len;
 8015a94:	bf3a      	itte	cc
 8015a96:	1a5b      	subcc	r3, r3, r1
 8015a98:	b29b      	uxthcc	r3, r3
				len = 0U;
 8015a9a:	2300      	movcs	r3, #0
		for (frag = pkt->frags; frag; frag = frag->frags) {
 8015a9c:	2a00      	cmp	r2, #0
 8015a9e:	d1f4      	bne.n	8015a8a <ethernet_recv+0xd8>
 8015aa0:	e7d7      	b.n	8015a52 <ethernet_recv+0xa0>

08015aa2 <ethernet_init>:
	return net_mgmt(NET_REQUEST_ETHERNET_SET_PROMISC_MODE, iface,
			&params, sizeof(struct ethernet_req_params));
}

void ethernet_init(struct net_if *iface)
{
 8015aa2:	b538      	push	{r3, r4, r5, lr}
 8015aa4:	6803      	ldr	r3, [r0, #0]
 8015aa6:	689c      	ldr	r4, [r3, #8]
	int i;
#endif

	NET_DBG("Initializing Ethernet L2 %p for iface %p", ctx, iface);

	ctx->ethernet_l2_flags = NET_L2_MULTICAST;
 8015aa8:	2501      	movs	r5, #1
 8015aaa:	7425      	strb	r5, [r4, #16]

	if (net_eth_get_hw_capabilities(iface) & ETHERNET_PROMISC_MODE) {
 8015aac:	f7ff ff61 	bl	8015972 <net_eth_get_hw_capabilities>
 8015ab0:	0543      	lsls	r3, r0, #21
		ctx->ethernet_l2_flags |= NET_L2_PROMISC_MODE;
 8015ab2:	bf48      	it	mi
 8015ab4:	7c23      	ldrbmi	r3, [r4, #16]
	}
#endif

	net_arp_init();

	ctx->is_init = true;
 8015ab6:	7465      	strb	r5, [r4, #17]
		ctx->ethernet_l2_flags |= NET_L2_PROMISC_MODE;
 8015ab8:	bf44      	itt	mi
 8015aba:	f043 0304 	orrmi.w	r3, r3, #4
 8015abe:	7423      	strbmi	r3, [r4, #16]
}
 8015ac0:	bd38      	pop	{r3, r4, r5, pc}

08015ac2 <net_ipv6_is_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8015ac2:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8015ac4:	b94a      	cbnz	r2, 8015ada <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8015ac6:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8015ac8:	b93b      	cbnz	r3, 8015ada <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8015aca:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8015acc:	b92a      	cbnz	r2, 8015ada <net_ipv6_is_addr_loopback+0x18>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
 8015ace:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8015ad0:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
 8015ad4:	4258      	negs	r0, r3
 8015ad6:	4158      	adcs	r0, r3
 8015ad8:	4770      	bx	lr
 8015ada:	2000      	movs	r0, #0
 8015adc:	4770      	bx	lr

08015ade <processing_data>:
{
 8015ade:	b538      	push	{r3, r4, r5, lr}
	if (!pkt->frags) {
 8015ae0:	6903      	ldr	r3, [r0, #16]
{
 8015ae2:	4604      	mov	r4, r0
 8015ae4:	460d      	mov	r5, r1
	if (!pkt->frags) {
 8015ae6:	b923      	cbnz	r3, 8015af2 <processing_data+0x14>
		net_pkt_unref(pkt);
 8015ae8:	4620      	mov	r0, r4
}
 8015aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_pkt_unref(pkt);
 8015aee:	f000 bf4d 	b.w	801698c <net_pkt_unref>
	if (!is_loopback && !locally_routed) {
 8015af2:	b171      	cbz	r1, 8015b12 <processing_data+0x34>
	net_pkt_cursor_init(pkt);
 8015af4:	4620      	mov	r0, r4
 8015af6:	f000 ffc7 	bl	8016a88 <net_pkt_cursor_init>
	return pkt->frags->data;
 8015afa:	6923      	ldr	r3, [r4, #16]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
 8015afc:	689b      	ldr	r3, [r3, #8]
 8015afe:	781b      	ldrb	r3, [r3, #0]
 8015b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b04:	2b60      	cmp	r3, #96	; 0x60
 8015b06:	d1ef      	bne.n	8015ae8 <processing_data+0xa>
		return net_ipv6_input(pkt, is_loopback);
 8015b08:	4629      	mov	r1, r5
 8015b0a:	4620      	mov	r0, r4
 8015b0c:	f7f7 f9b4 	bl	800ce78 <net_ipv6_input>
 8015b10:	e005      	b.n	8015b1e <processing_data+0x40>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
 8015b12:	4601      	mov	r1, r0
 8015b14:	6a00      	ldr	r0, [r0, #32]
 8015b16:	f000 fa5c 	bl	8015fd2 <net_if_recv_data>
		if (ret != NET_CONTINUE) {
 8015b1a:	2801      	cmp	r0, #1
 8015b1c:	d0ea      	beq.n	8015af4 <processing_data+0x16>
	switch (process_data(pkt, is_loopback)) {
 8015b1e:	2800      	cmp	r0, #0
 8015b20:	d1e2      	bne.n	8015ae8 <processing_data+0xa>
}
 8015b22:	bd38      	pop	{r3, r4, r5, pc}

08015b24 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
 8015b24:	b508      	push	{r3, lr}
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
 8015b26:	f001 f97f 	bl	8016e28 <net_pkt_init>

	net_context_init();
 8015b2a:	f7f6 ff0f 	bl	800c94c <net_context_init>
	net_icmpv6_init();
 8015b2e:	f7f7 f91b 	bl	800cd68 <net_icmpv6_init>
	net_ipv6_init();
 8015b32:	f001 fbec 	bl	801730e <net_ipv6_init>
		net_conn_init();
 8015b36:	f7f9 f8c1 	bl	800ecbc <net_conn_init>
	net_route_init();
 8015b3a:	f001 ffbf 	bl	8017abc <net_route_init>

	l3_init();

	net_mgmt_event_init();
 8015b3e:	f7f6 fc1d 	bl	800c37c <net_mgmt_event_init>
	net_if_init();
 8015b42:	f7f6 f8e1 	bl	800bd08 <net_if_init>
	net_tc_rx_init();
 8015b46:	f7f7 f897 	bl	800cc78 <net_tc_rx_init>
	net_if_post_init();
 8015b4a:	f7f6 f9a9 	bl	800bea0 <net_if_post_init>
	net_coap_init();
 8015b4e:	f7f2 fe11 	bl	8008774 <net_coap_init>
	net_shell_init();
 8015b52:	f002 f86d 	bl	8017c30 <net_shell_init>

	init_rx_queues();

	return services_init();
}
 8015b56:	2000      	movs	r0, #0
 8015b58:	bd08      	pop	{r3, pc}

08015b5a <process_rx_packet>:
	pkt_len = net_pkt_get_len(pkt);
 8015b5a:	6901      	ldr	r1, [r0, #16]
	while (buf) {
 8015b5c:	b909      	cbnz	r1, 8015b62 <process_rx_packet+0x8>
	processing_data(pkt, is_loopback);
 8015b5e:	f7ff bfbe 	b.w	8015ade <processing_data>
		buf = buf->frags;
 8015b62:	6809      	ldr	r1, [r1, #0]
 8015b64:	e7fa      	b.n	8015b5c <process_rx_packet+0x2>

08015b66 <net_send_data>:
{
 8015b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pkt || !pkt->frags) {
 8015b6a:	4604      	mov	r4, r0
{
 8015b6c:	b090      	sub	sp, #64	; 0x40
	if (!pkt || !pkt->frags) {
 8015b6e:	2800      	cmp	r0, #0
 8015b70:	f000 8090 	beq.w	8015c94 <net_send_data+0x12e>
 8015b74:	6903      	ldr	r3, [r0, #16]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	f000 808c 	beq.w	8015c94 <net_send_data+0x12e>
	if (!net_pkt_iface(pkt)) {
 8015b7c:	6a03      	ldr	r3, [r0, #32]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	f000 808b 	beq.w	8015c9a <net_send_data+0x134>
	net_pkt_trim_buffer(pkt);
 8015b84:	f000 ff66 	bl	8016a54 <net_pkt_trim_buffer>
	net_pkt_cursor_init(pkt);
 8015b88:	4620      	mov	r0, r4
 8015b8a:	f000 ff7d 	bl	8016a88 <net_pkt_cursor_init>
	return pkt->family;
 8015b8e:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
	if (net_pkt_family(pkt) == AF_INET6) {
 8015b92:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8015b96:	2b02      	cmp	r3, #2
 8015b98:	d172      	bne.n	8015c80 <net_send_data+0x11a>
	return pkt->frags->data;
 8015b9a:	6923      	ldr	r3, [r4, #16]
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
 8015b9c:	689d      	ldr	r5, [r3, #8]
 8015b9e:	f7f6 fab1 	bl	800c104 <net_ipv6_unspecified_address>
 8015ba2:	3518      	adds	r5, #24
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 8015ba4:	4601      	mov	r1, r0
 8015ba6:	2210      	movs	r2, #16
 8015ba8:	4628      	mov	r0, r5
 8015baa:	f7ee feaa 	bl	8004902 <memcmp>
 8015bae:	b920      	cbnz	r0, 8015bba <net_send_data+0x54>
			return -EADDRNOTAVAIL;
 8015bb0:	f06f 007c 	mvn.w	r0, #124	; 0x7c
}
 8015bb4:	b010      	add	sp, #64	; 0x40
 8015bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bba:	6923      	ldr	r3, [r4, #16]
		if (net_ipv6_is_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
 8015bbc:	689d      	ldr	r5, [r3, #8]
 8015bbe:	3518      	adds	r5, #24
 8015bc0:	4628      	mov	r0, r5
 8015bc2:	f7ff ff7e 	bl	8015ac2 <net_ipv6_is_addr_loopback>
 8015bc6:	4601      	mov	r1, r0
 8015bc8:	2800      	cmp	r0, #0
 8015bca:	d047      	beq.n	8015c5c <net_send_data+0xf6>
 8015bcc:	6923      	ldr	r3, [r4, #16]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
 8015bce:	689a      	ldr	r2, [r3, #8]
 8015bd0:	ae0c      	add	r6, sp, #48	; 0x30
 8015bd2:	f102 0308 	add.w	r3, r2, #8
 8015bd6:	4635      	mov	r5, r6
 8015bd8:	3218      	adds	r2, #24
 8015bda:	6818      	ldr	r0, [r3, #0]
 8015bdc:	6859      	ldr	r1, [r3, #4]
 8015bde:	4637      	mov	r7, r6
 8015be0:	c703      	stmia	r7!, {r0, r1}
 8015be2:	3308      	adds	r3, #8
 8015be4:	4293      	cmp	r3, r2
 8015be6:	463e      	mov	r6, r7
 8015be8:	d1f7      	bne.n	8015bda <net_send_data+0x74>
 8015bea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015bee:	466e      	mov	r6, sp
 8015bf0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8015bf4:	6923      	ldr	r3, [r4, #16]
 8015bf6:	689b      	ldr	r3, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
 8015bf8:	af08      	add	r7, sp, #32
 8015bfa:	f103 0218 	add.w	r2, r3, #24
 8015bfe:	f103 0828 	add.w	r8, r3, #40	; 0x28
 8015c02:	46bc      	mov	ip, r7
 8015c04:	6810      	ldr	r0, [r2, #0]
 8015c06:	6851      	ldr	r1, [r2, #4]
 8015c08:	46be      	mov	lr, r7
 8015c0a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8015c0e:	3208      	adds	r2, #8
 8015c10:	4542      	cmp	r2, r8
 8015c12:	4677      	mov	r7, lr
 8015c14:	d1f6      	bne.n	8015c04 <net_send_data+0x9e>
 8015c16:	4667      	mov	r7, ip
 8015c18:	3308      	adds	r3, #8
 8015c1a:	463a      	mov	r2, r7
 8015c1c:	ca03      	ldmia	r2!, {r0, r1}
 8015c1e:	42aa      	cmp	r2, r5
 8015c20:	6018      	str	r0, [r3, #0]
 8015c22:	6059      	str	r1, [r3, #4]
 8015c24:	4617      	mov	r7, r2
 8015c26:	f103 0308 	add.w	r3, r3, #8
 8015c2a:	d1f6      	bne.n	8015c1a <net_send_data+0xb4>
 8015c2c:	6923      	ldr	r3, [r4, #16]
 8015c2e:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
 8015c30:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8015c34:	ad04      	add	r5, sp, #16
 8015c36:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8015c3a:	f107 0318 	add.w	r3, r7, #24
 8015c3e:	462a      	mov	r2, r5
 8015c40:	ca03      	ldmia	r2!, {r0, r1}
 8015c42:	4562      	cmp	r2, ip
 8015c44:	6018      	str	r0, [r3, #0]
 8015c46:	6059      	str	r1, [r3, #4]
 8015c48:	4615      	mov	r5, r2
 8015c4a:	f103 0308 	add.w	r3, r3, #8
 8015c4e:	d1f6      	bne.n	8015c3e <net_send_data+0xd8>
		processing_data(pkt, true);
 8015c50:	4620      	mov	r0, r4
 8015c52:	2101      	movs	r1, #1
 8015c54:	f7ff ff43 	bl	8015ade <processing_data>
		return 0;
 8015c58:	2000      	movs	r0, #0
 8015c5a:	e7ab      	b.n	8015bb4 <net_send_data+0x4e>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
 8015c5c:	4628      	mov	r0, r5
 8015c5e:	f7f4 ffeb 	bl	800ac38 <net_if_ipv6_addr_lookup>
		if (net_ipv6_is_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
 8015c62:	2800      	cmp	r0, #0
 8015c64:	d1b2      	bne.n	8015bcc <net_send_data+0x66>
 8015c66:	6923      	ldr	r3, [r4, #16]
 8015c68:	6898      	ldr	r0, [r3, #8]
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 8015c6a:	7e03      	ldrb	r3, [r0, #24]
 8015c6c:	2bff      	cmp	r3, #255	; 0xff
 8015c6e:	d102      	bne.n	8015c76 <net_send_data+0x110>
 8015c70:	7e43      	ldrb	r3, [r0, #25]
 8015c72:	2b01      	cmp	r3, #1
 8015c74:	d0ec      	beq.n	8015c50 <net_send_data+0xea>
		if (net_ipv6_is_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
 8015c76:	3008      	adds	r0, #8
 8015c78:	f7ff ff23 	bl	8015ac2 <net_ipv6_is_addr_loopback>
 8015c7c:	2800      	cmp	r0, #0
 8015c7e:	d197      	bne.n	8015bb0 <net_send_data+0x4a>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
 8015c80:	4621      	mov	r1, r4
 8015c82:	6a20      	ldr	r0, [r4, #32]
 8015c84:	f7f5 ff10 	bl	800baa8 <net_if_send_data>
		return -EIO;
 8015c88:	2802      	cmp	r0, #2
 8015c8a:	bf14      	ite	ne
 8015c8c:	2000      	movne	r0, #0
 8015c8e:	f06f 0004 	mvneq.w	r0, #4
 8015c92:	e78f      	b.n	8015bb4 <net_send_data+0x4e>
		return -ENODATA;
 8015c94:	f06f 003c 	mvn.w	r0, #60	; 0x3c
 8015c98:	e78c      	b.n	8015bb4 <net_send_data+0x4e>
		return -EINVAL;
 8015c9a:	f06f 0015 	mvn.w	r0, #21
 8015c9e:	e789      	b.n	8015bb4 <net_send_data+0x4e>

08015ca0 <sys_slist_append>:
	parent->next = child;
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	600b      	str	r3, [r1, #0]
Z_GENLIST_APPEND(slist, snode)
 8015ca4:	6843      	ldr	r3, [r0, #4]
 8015ca6:	b913      	cbnz	r3, 8015cae <sys_slist_append+0xe>
	list->head = node;
 8015ca8:	e9c0 1100 	strd	r1, r1, [r0]
 8015cac:	4770      	bx	lr
	parent->next = child;
 8015cae:	6019      	str	r1, [r3, #0]
	list->tail = node;
 8015cb0:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
 8015cb2:	4770      	bx	lr

08015cb4 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8015cb4:	6803      	ldr	r3, [r0, #0]
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	b90b      	cbnz	r3, 8015cbe <sys_slist_find_and_remove+0xa>
 8015cba:	4618      	mov	r0, r3
 8015cbc:	4770      	bx	lr
 8015cbe:	428b      	cmp	r3, r1
 8015cc0:	d110      	bne.n	8015ce4 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
 8015cc2:	680b      	ldr	r3, [r1, #0]
 8015cc4:	b942      	cbnz	r2, 8015cd8 <sys_slist_find_and_remove+0x24>
 8015cc6:	6842      	ldr	r2, [r0, #4]
	list->head = node;
 8015cc8:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
 8015cca:	4291      	cmp	r1, r2
 8015ccc:	d100      	bne.n	8015cd0 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
 8015cce:	6043      	str	r3, [r0, #4]
	parent->next = child;
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8015cd4:	2001      	movs	r0, #1
 8015cd6:	4770      	bx	lr
	parent->next = child;
 8015cd8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
 8015cda:	6843      	ldr	r3, [r0, #4]
 8015cdc:	4299      	cmp	r1, r3
	list->tail = node;
 8015cde:	bf08      	it	eq
 8015ce0:	6042      	streq	r2, [r0, #4]
 8015ce2:	e7f5      	b.n	8015cd0 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8015ce4:	461a      	mov	r2, r3
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	e7e6      	b.n	8015cb8 <sys_slist_find_and_remove+0x4>

08015cea <net_if_l2>:
	if (!iface) {
 8015cea:	b108      	cbz	r0, 8015cf0 <net_if_l2+0x6>
	return iface->if_dev->l2;
 8015cec:	6803      	ldr	r3, [r0, #0]
 8015cee:	6858      	ldr	r0, [r3, #4]
}
 8015cf0:	4770      	bx	lr

08015cf2 <net_context_send_cb>:
	if (!context) {
 8015cf2:	b118      	cbz	r0, 8015cfc <net_context_send_cb+0xa>
	if (context->send_cb) {
 8015cf4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8015cf6:	b10b      	cbz	r3, 8015cfc <net_context_send_cb+0xa>
		context->send_cb(context, status, context->user_data);
 8015cf8:	6802      	ldr	r2, [r0, #0]
 8015cfa:	4718      	bx	r3
}
 8015cfc:	4770      	bx	lr

08015cfe <l2_flags_get>:
{
 8015cfe:	b510      	push	{r4, lr}
 8015d00:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
 8015d02:	f7ff fff2 	bl	8015cea <net_if_l2>
 8015d06:	b128      	cbz	r0, 8015d14 <l2_flags_get+0x16>
 8015d08:	68c3      	ldr	r3, [r0, #12]
 8015d0a:	b11b      	cbz	r3, 8015d14 <l2_flags_get+0x16>
		flags = net_if_l2(iface)->get_flags(iface);
 8015d0c:	4610      	mov	r0, r2
}
 8015d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
 8015d12:	4718      	bx	r3
}
 8015d14:	2000      	movs	r0, #0
 8015d16:	bd10      	pop	{r4, pc}

08015d18 <atomic_test_bit>:
 8015d18:	f3bf 8f5b 	dmb	ish
 8015d1c:	6800      	ldr	r0, [r0, #0]
 8015d1e:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 8015d22:	4108      	asrs	r0, r1
}
 8015d24:	f000 0001 	and.w	r0, r0, #1
 8015d28:	4770      	bx	lr

08015d2a <net_ipv6_is_prefix>:
	if (length > 128) {
 8015d2a:	2a80      	cmp	r2, #128	; 0x80
{
 8015d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d2e:	4607      	mov	r7, r0
 8015d30:	460e      	mov	r6, r1
 8015d32:	4614      	mov	r4, r2
	if (length > 128) {
 8015d34:	d901      	bls.n	8015d3a <net_ipv6_is_prefix+0x10>
		return false;
 8015d36:	2000      	movs	r0, #0
}
 8015d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (memcmp(addr1, addr2, bytes)) {
 8015d3a:	08d5      	lsrs	r5, r2, #3
 8015d3c:	462a      	mov	r2, r5
 8015d3e:	f7ee fde0 	bl	8004902 <memcmp>
 8015d42:	2800      	cmp	r0, #0
 8015d44:	d1f7      	bne.n	8015d36 <net_ipv6_is_prefix+0xc>
	u8_t bits = 128 - length;
 8015d46:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
 8015d4a:	f014 0407 	ands.w	r4, r4, #7
 8015d4e:	d00f      	beq.n	8015d70 <net_ipv6_is_prefix+0x46>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
 8015d50:	5d73      	ldrb	r3, [r6, r5]
 8015d52:	5d7a      	ldrb	r2, [r7, r5]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
 8015d54:	f1c4 0108 	rsb	r1, r4, #8
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
 8015d58:	405a      	eors	r2, r3
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
 8015d5a:	23ff      	movs	r3, #255	; 0xff
 8015d5c:	408b      	lsls	r3, r1
 8015d5e:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8015d62:	fa03 f404 	lsl.w	r4, r3, r4
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
 8015d66:	4222      	tst	r2, r4
 8015d68:	bf0c      	ite	eq
 8015d6a:	2001      	moveq	r0, #1
 8015d6c:	2000      	movne	r0, #0
 8015d6e:	e7e3      	b.n	8015d38 <net_ipv6_is_prefix+0xe>
		return true;
 8015d70:	2001      	movs	r0, #1
 8015d72:	e7e1      	b.n	8015d38 <net_ipv6_is_prefix+0xe>

08015d74 <net_ipv6_addr_cmp>:
{
 8015d74:	b508      	push	{r3, lr}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 8015d76:	2210      	movs	r2, #16
 8015d78:	f7ee fdc3 	bl	8004902 <memcmp>
}
 8015d7c:	fab0 f080 	clz	r0, r0
 8015d80:	0940      	lsrs	r0, r0, #5
 8015d82:	bd08      	pop	{r3, pc}

08015d84 <k_uptime_get_32>:
{
 8015d84:	b508      	push	{r3, lr}
 8015d86:	f002 ff08 	bl	8018b9a <z_impl_k_uptime_get>
}
 8015d8a:	bd08      	pop	{r3, pc}

08015d8c <need_calc_checksum.part.18>:
	return iface->if_dev->dev;
 8015d8c:	6803      	ldr	r3, [r0, #0]
 8015d8e:	6818      	ldr	r0, [r3, #0]
	if (!eth->get_capabilities) {
 8015d90:	6843      	ldr	r3, [r0, #4]
 8015d92:	68db      	ldr	r3, [r3, #12]
static bool need_calc_checksum(struct net_if *iface, enum ethernet_hw_caps caps)
 8015d94:	b510      	push	{r4, lr}
 8015d96:	460c      	mov	r4, r1
 8015d98:	b12b      	cbz	r3, 8015da6 <need_calc_checksum.part.18+0x1a>
	return eth->get_capabilities(net_if_get_device(iface));
 8015d9a:	4798      	blx	r3
	return !(net_eth_get_hw_capabilities(iface) & caps);
 8015d9c:	4204      	tst	r4, r0
}
 8015d9e:	bf0c      	ite	eq
 8015da0:	2001      	moveq	r0, #1
 8015da2:	2000      	movne	r0, #0
 8015da4:	bd10      	pop	{r4, pc}
		return (enum ethernet_hw_caps)0;
 8015da6:	4618      	mov	r0, r3
 8015da8:	e7f8      	b.n	8015d9c <need_calc_checksum.part.18+0x10>

08015daa <net_if_ipv6_addr_lookup_by_iface>:
{
 8015daa:	b538      	push	{r3, r4, r5, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 8015dac:	6844      	ldr	r4, [r0, #4]
{
 8015dae:	460d      	mov	r5, r1
	if (!ipv6) {
 8015db0:	b90c      	cbnz	r4, 8015db6 <net_if_ipv6_addr_lookup_by_iface+0xc>
		return NULL;
 8015db2:	2000      	movs	r0, #0
}
 8015db4:	bd38      	pop	{r3, r4, r5, pc}
		if (!ipv6->unicast[i].is_used ||
 8015db6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8015dba:	079a      	lsls	r2, r3, #30
 8015dbc:	d508      	bpl.n	8015dd0 <net_if_ipv6_addr_lookup_by_iface+0x26>
 8015dbe:	8823      	ldrh	r3, [r4, #0]
 8015dc0:	2b02      	cmp	r3, #2
 8015dc2:	d105      	bne.n	8015dd0 <net_if_ipv6_addr_lookup_by_iface+0x26>
		if (net_ipv6_is_prefix(
 8015dc4:	2280      	movs	r2, #128	; 0x80
 8015dc6:	1d21      	adds	r1, r4, #4
 8015dc8:	4628      	mov	r0, r5
 8015dca:	f7ff ffae 	bl	8015d2a <net_ipv6_is_prefix>
 8015dce:	b988      	cbnz	r0, 8015df4 <net_if_ipv6_addr_lookup_by_iface+0x4a>
		if (!ipv6->unicast[i].is_used ||
 8015dd0:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 8015dd4:	079b      	lsls	r3, r3, #30
 8015dd6:	d5ec      	bpl.n	8015db2 <net_if_ipv6_addr_lookup_by_iface+0x8>
 8015dd8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8015dda:	2b02      	cmp	r3, #2
 8015ddc:	d1e9      	bne.n	8015db2 <net_if_ipv6_addr_lookup_by_iface+0x8>
		if (net_ipv6_is_prefix(
 8015dde:	2280      	movs	r2, #128	; 0x80
 8015de0:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8015de4:	4628      	mov	r0, r5
 8015de6:	f7ff ffa0 	bl	8015d2a <net_ipv6_is_prefix>
 8015dea:	2800      	cmp	r0, #0
 8015dec:	d0e1      	beq.n	8015db2 <net_if_ipv6_addr_lookup_by_iface+0x8>
 8015dee:	2030      	movs	r0, #48	; 0x30
			return &ipv6->unicast[i];
 8015df0:	4420      	add	r0, r4
 8015df2:	e7df      	b.n	8015db4 <net_if_ipv6_addr_lookup_by_iface+0xa>
		if (net_ipv6_is_prefix(
 8015df4:	2000      	movs	r0, #0
 8015df6:	e7fb      	b.n	8015df0 <net_if_ipv6_addr_lookup_by_iface+0x46>

08015df8 <remove_prefix_addresses>:
{
 8015df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dfc:	461f      	mov	r7, r3
		if (!ipv6->unicast[i].is_used ||
 8015dfe:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
{
 8015e02:	4616      	mov	r6, r2
		if (!ipv6->unicast[i].is_used ||
 8015e04:	079a      	lsls	r2, r3, #30
{
 8015e06:	4605      	mov	r5, r0
 8015e08:	460c      	mov	r4, r1
		if (!ipv6->unicast[i].is_used ||
 8015e0a:	d512      	bpl.n	8015e32 <remove_prefix_addresses+0x3a>
 8015e0c:	880b      	ldrh	r3, [r1, #0]
 8015e0e:	2b02      	cmp	r3, #2
 8015e10:	d10f      	bne.n	8015e32 <remove_prefix_addresses+0x3a>
		    ipv6->unicast[i].address.family != AF_INET6 ||
 8015e12:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8015e16:	2b01      	cmp	r3, #1
 8015e18:	d10b      	bne.n	8015e32 <remove_prefix_addresses+0x3a>
				ipv6->unicast[i].address.in6_addr.s6_addr,
 8015e1a:	f101 0804 	add.w	r8, r1, #4
		if (net_ipv6_is_prefix(
 8015e1e:	463a      	mov	r2, r7
 8015e20:	4641      	mov	r1, r8
 8015e22:	4630      	mov	r0, r6
 8015e24:	f7ff ff81 	bl	8015d2a <net_ipv6_is_prefix>
 8015e28:	b118      	cbz	r0, 8015e32 <remove_prefix_addresses+0x3a>
			net_if_ipv6_addr_rm(iface,
 8015e2a:	4641      	mov	r1, r8
 8015e2c:	4628      	mov	r0, r5
 8015e2e:	f7f5 fa29 	bl	800b284 <net_if_ipv6_addr_rm>
		if (!ipv6->unicast[i].is_used ||
 8015e32:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 8015e36:	079b      	lsls	r3, r3, #30
 8015e38:	d513      	bpl.n	8015e62 <remove_prefix_addresses+0x6a>
 8015e3a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8015e3c:	2b02      	cmp	r3, #2
 8015e3e:	d110      	bne.n	8015e62 <remove_prefix_addresses+0x6a>
		    ipv6->unicast[i].address.family != AF_INET6 ||
 8015e40:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8015e44:	2b01      	cmp	r3, #1
 8015e46:	d10c      	bne.n	8015e62 <remove_prefix_addresses+0x6a>
				ipv6->unicast[i].address.in6_addr.s6_addr,
 8015e48:	3434      	adds	r4, #52	; 0x34
		if (net_ipv6_is_prefix(
 8015e4a:	463a      	mov	r2, r7
 8015e4c:	4621      	mov	r1, r4
 8015e4e:	4630      	mov	r0, r6
 8015e50:	f7ff ff6b 	bl	8015d2a <net_ipv6_is_prefix>
 8015e54:	b128      	cbz	r0, 8015e62 <remove_prefix_addresses+0x6a>
			net_if_ipv6_addr_rm(iface,
 8015e56:	4621      	mov	r1, r4
 8015e58:	4628      	mov	r0, r5
}
 8015e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			net_if_ipv6_addr_rm(iface,
 8015e5e:	f7f5 ba11 	b.w	800b284 <net_if_ipv6_addr_rm>
}
 8015e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e66 <net_if_ipv6_prefix_get>:
{
 8015e66:	b570      	push	{r4, r5, r6, lr}
 8015e68:	460e      	mov	r6, r1
	if (!iface) {
 8015e6a:	b908      	cbnz	r0, 8015e70 <net_if_ipv6_prefix_get+0xa>
		iface = net_if_get_default();
 8015e6c:	f7f4 fe34 	bl	800aad8 <net_if_get_default>
	ipv6 = iface->config.ip.ipv6;
 8015e70:	6845      	ldr	r5, [r0, #4]
	if (!ipv6) {
 8015e72:	b325      	cbz	r5, 8015ebe <net_if_ipv6_prefix_get+0x58>
		if (!ipv6->prefix[i].is_used) {
 8015e74:	f895 40cd 	ldrb.w	r4, [r5, #205]	; 0xcd
 8015e78:	f3c4 0440 	ubfx	r4, r4, #1, #1
 8015e7c:	b14c      	cbz	r4, 8015e92 <net_if_ipv6_prefix_get+0x2c>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
 8015e7e:	f895 20cc 	ldrb.w	r2, [r5, #204]	; 0xcc
 8015e82:	4631      	mov	r1, r6
 8015e84:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
 8015e88:	f7ff ff4f 	bl	8015d2a <net_ipv6_is_prefix>
 8015e8c:	b1c8      	cbz	r0, 8015ec2 <net_if_ipv6_prefix_get+0x5c>
				prefix = &ipv6->prefix[i];
 8015e8e:	f105 04a8 	add.w	r4, r5, #168	; 0xa8
		if (!ipv6->prefix[i].is_used) {
 8015e92:	f895 30f5 	ldrb.w	r3, [r5, #245]	; 0xf5
 8015e96:	079b      	lsls	r3, r3, #30
 8015e98:	d510      	bpl.n	8015ebc <net_if_ipv6_prefix_get+0x56>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
 8015e9a:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
 8015e9e:	4631      	mov	r1, r6
 8015ea0:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
 8015ea4:	f7ff ff41 	bl	8015d2a <net_ipv6_is_prefix>
 8015ea8:	b140      	cbz	r0, 8015ebc <net_if_ipv6_prefix_get+0x56>
			if (!prefix || prefix->len > ipv6->prefix[i].len) {
 8015eaa:	b12c      	cbz	r4, 8015eb8 <net_if_ipv6_prefix_get+0x52>
 8015eac:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8015eb0:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
 8015eb4:	429a      	cmp	r2, r3
 8015eb6:	d901      	bls.n	8015ebc <net_if_ipv6_prefix_get+0x56>
				prefix = &ipv6->prefix[i];
 8015eb8:	f105 04d0 	add.w	r4, r5, #208	; 0xd0
	struct net_if_ipv6_prefix *prefix = NULL;
 8015ebc:	4625      	mov	r5, r4
}
 8015ebe:	4628      	mov	r0, r5
 8015ec0:	bd70      	pop	{r4, r5, r6, pc}
	struct net_if_ipv6_prefix *prefix = NULL;
 8015ec2:	4604      	mov	r4, r0
 8015ec4:	e7e5      	b.n	8015e92 <net_if_ipv6_prefix_get+0x2c>

08015ec6 <net_if_ipv6_prefix_lookup>:
{
 8015ec6:	b570      	push	{r4, r5, r6, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 8015ec8:	6844      	ldr	r4, [r0, #4]
{
 8015eca:	460d      	mov	r5, r1
 8015ecc:	4616      	mov	r6, r2
	if (!ipv6) {
 8015ece:	b90c      	cbnz	r4, 8015ed4 <net_if_ipv6_prefix_lookup+0xe>
		return NULL;
 8015ed0:	2000      	movs	r0, #0
}
 8015ed2:	bd70      	pop	{r4, r5, r6, pc}
		if (!ipv6->prefix[i].is_used) {
 8015ed4:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
 8015ed8:	0798      	lsls	r0, r3, #30
 8015eda:	d411      	bmi.n	8015f00 <net_if_ipv6_prefix_lookup+0x3a>
 8015edc:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
 8015ee0:	079b      	lsls	r3, r3, #30
 8015ee2:	d5f5      	bpl.n	8015ed0 <net_if_ipv6_prefix_lookup+0xa>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
 8015ee4:	4632      	mov	r2, r6
 8015ee6:	4629      	mov	r1, r5
 8015ee8:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8015eec:	f7ff ff1d 	bl	8015d2a <net_ipv6_is_prefix>
 8015ef0:	2800      	cmp	r0, #0
 8015ef2:	d0ed      	beq.n	8015ed0 <net_if_ipv6_prefix_lookup+0xa>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 8015ef4:	2001      	movs	r0, #1
			return &ipv6->prefix[i];
 8015ef6:	2328      	movs	r3, #40	; 0x28
 8015ef8:	fb03 4000 	mla	r0, r3, r0, r4
 8015efc:	30a8      	adds	r0, #168	; 0xa8
 8015efe:	e7e8      	b.n	8015ed2 <net_if_ipv6_prefix_lookup+0xc>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
 8015f00:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8015f04:	f7ff ff11 	bl	8015d2a <net_ipv6_is_prefix>
 8015f08:	2800      	cmp	r0, #0
 8015f0a:	d0e7      	beq.n	8015edc <net_if_ipv6_prefix_lookup+0x16>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 8015f0c:	2000      	movs	r0, #0
 8015f0e:	e7f2      	b.n	8015ef6 <net_if_ipv6_prefix_lookup+0x30>

08015f10 <net_if_ipv6_router_update_lifetime>:
{
 8015f10:	b538      	push	{r3, r4, r5, lr}
 8015f12:	4604      	mov	r4, r0
 8015f14:	460d      	mov	r5, r1
	router->life_start = k_uptime_get_32();
 8015f16:	f7ff ff35 	bl	8015d84 <k_uptime_get_32>
	router->lifetime = lifetime;
 8015f1a:	8425      	strh	r5, [r4, #32]
	router->life_start = k_uptime_get_32();
 8015f1c:	61e0      	str	r0, [r4, #28]
}
 8015f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	iface_router_run_timer(router->life_start);
 8015f22:	f7f4 bd37 	b.w	800a994 <iface_router_run_timer>

08015f26 <net_if_ipv6_get_ll>:
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 8015f26:	6840      	ldr	r0, [r0, #4]
{
 8015f28:	b510      	push	{r4, lr}
	if (!ipv6) {
 8015f2a:	b180      	cbz	r0, 8015f4e <net_if_ipv6_get_ll+0x28>
		if (!ipv6->unicast[i].is_used ||
 8015f2c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8015f30:	079c      	lsls	r4, r3, #30
 8015f32:	d511      	bpl.n	8015f58 <net_if_ipv6_get_ll+0x32>
 8015f34:	1c4a      	adds	r2, r1, #1
 8015f36:	d10b      	bne.n	8015f50 <net_if_ipv6_get_ll+0x2a>
		     ipv6->unicast[i].addr_state != addr_state) ||
 8015f38:	8803      	ldrh	r3, [r0, #0]
 8015f3a:	2b02      	cmp	r3, #2
 8015f3c:	d10c      	bne.n	8015f58 <net_if_ipv6_get_ll+0x32>
		if (net_ipv6_is_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
 8015f3e:	8884      	ldrh	r4, [r0, #4]
 8015f40:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8015f44:	4294      	cmp	r4, r2
 8015f46:	f100 0304 	add.w	r3, r0, #4
 8015f4a:	d105      	bne.n	8015f58 <net_if_ipv6_get_ll+0x32>
 8015f4c:	4618      	mov	r0, r3
}
 8015f4e:	bd10      	pop	{r4, pc}
		    (addr_state != NET_ADDR_ANY_STATE &&
 8015f50:	f990 302d 	ldrsb.w	r3, [r0, #45]	; 0x2d
 8015f54:	428b      	cmp	r3, r1
 8015f56:	d0ef      	beq.n	8015f38 <net_if_ipv6_get_ll+0x12>
		if (!ipv6->unicast[i].is_used ||
 8015f58:	f890 305f 	ldrb.w	r3, [r0, #95]	; 0x5f
 8015f5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8015f60:	b17b      	cbz	r3, 8015f82 <net_if_ipv6_get_ll+0x5c>
 8015f62:	1c4b      	adds	r3, r1, #1
 8015f64:	d003      	beq.n	8015f6e <net_if_ipv6_get_ll+0x48>
		    (addr_state != NET_ADDR_ANY_STATE &&
 8015f66:	f990 305d 	ldrsb.w	r3, [r0, #93]	; 0x5d
 8015f6a:	428b      	cmp	r3, r1
 8015f6c:	d109      	bne.n	8015f82 <net_if_ipv6_get_ll+0x5c>
		     ipv6->unicast[i].addr_state != addr_state) ||
 8015f6e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8015f70:	2b02      	cmp	r3, #2
 8015f72:	d106      	bne.n	8015f82 <net_if_ipv6_get_ll+0x5c>
		if (net_ipv6_is_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
 8015f74:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8015f76:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8015f7a:	4291      	cmp	r1, r2
 8015f7c:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8015f80:	d0e4      	beq.n	8015f4c <net_if_ipv6_get_ll+0x26>
		return NULL;
 8015f82:	2000      	movs	r0, #0
 8015f84:	e7e3      	b.n	8015f4e <net_if_ipv6_get_ll+0x28>

08015f86 <net_if_ipv6_select_src_iface>:
{
 8015f86:	b513      	push	{r0, r1, r4, lr}
	src = net_if_ipv6_select_src_addr(NULL, dst);
 8015f88:	4601      	mov	r1, r0
 8015f8a:	2000      	movs	r0, #0
 8015f8c:	f7f5 fcf0 	bl	800b970 <net_if_ipv6_select_src_addr>
 8015f90:	4604      	mov	r4, r0
	if (src == net_ipv6_unspecified_address()) {
 8015f92:	f7f6 f8b7 	bl	800c104 <net_ipv6_unspecified_address>
 8015f96:	4284      	cmp	r4, r0
 8015f98:	d103      	bne.n	8015fa2 <net_if_ipv6_select_src_iface+0x1c>
		return net_if_get_default();
 8015f9a:	f7f4 fd9d 	bl	800aad8 <net_if_get_default>
}
 8015f9e:	b002      	add	sp, #8
 8015fa0:	bd10      	pop	{r4, pc}
	if (!net_if_ipv6_addr_lookup(src, &iface)) {
 8015fa2:	a901      	add	r1, sp, #4
 8015fa4:	4620      	mov	r0, r4
 8015fa6:	f7f4 fe47 	bl	800ac38 <net_if_ipv6_addr_lookup>
 8015faa:	2800      	cmp	r0, #0
 8015fac:	d0f5      	beq.n	8015f9a <net_if_ipv6_select_src_iface+0x14>
	return iface;
 8015fae:	9801      	ldr	r0, [sp, #4]
 8015fb0:	e7f5      	b.n	8015f9e <net_if_ipv6_select_src_iface+0x18>

08015fb2 <net_if_ipv6_calc_reachable_time>:
{
 8015fb2:	b538      	push	{r3, r4, r5, lr}
	min_reachable = (MIN_RANDOM_NUMER * ipv6->base_reachable_time)
 8015fb4:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
	       sys_rand32_get() % (max_reachable - min_reachable);
 8015fb8:	f7fa f92e 	bl	8010218 <sys_rand32_get>
	min_reachable = (MIN_RANDOM_NUMER * ipv6->base_reachable_time)
 8015fbc:	0865      	lsrs	r5, r4, #1
	max_reachable = (MAX_RANDOM_NUMER * ipv6->base_reachable_time)
 8015fbe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
	       sys_rand32_get() % (max_reachable - min_reachable);
 8015fc2:	ebc5 0454 	rsb	r4, r5, r4, lsr #1
 8015fc6:	fbb0 f3f4 	udiv	r3, r0, r4
 8015fca:	fb03 0014 	mls	r0, r3, r4, r0
}
 8015fce:	4428      	add	r0, r5
 8015fd0:	bd38      	pop	{r3, r4, r5, pc}

08015fd2 <net_if_recv_data>:
{
 8015fd2:	b510      	push	{r4, lr}
 8015fd4:	4602      	mov	r2, r0
	return net_if_l2(iface)->recv(iface, pkt);
 8015fd6:	f7ff fe88 	bl	8015cea <net_if_l2>
}
 8015fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_l2(iface)->recv(iface, pkt);
 8015fde:	6803      	ldr	r3, [r0, #0]
 8015fe0:	4610      	mov	r0, r2
 8015fe2:	4718      	bx	r3

08015fe4 <calc_chksum>:
{
 8015fe4:	b510      	push	{r4, lr}
	end = data + len - 1;
 8015fe6:	3a01      	subs	r2, #1
 8015fe8:	440a      	add	r2, r1
	while (data < end) {
 8015fea:	4291      	cmp	r1, r2
 8015fec:	d309      	bcc.n	8016002 <calc_chksum+0x1e>
	if (data == end) {
 8015fee:	d107      	bne.n	8016000 <calc_chksum+0x1c>
		tmp = data[0] << 8;
 8015ff0:	780b      	ldrb	r3, [r1, #0]
 8015ff2:	021b      	lsls	r3, r3, #8
		sum += tmp;
 8015ff4:	4418      	add	r0, r3
 8015ff6:	b280      	uxth	r0, r0
		if (sum < tmp) {
 8015ff8:	4283      	cmp	r3, r0
			sum++;
 8015ffa:	bf84      	itt	hi
 8015ffc:	3001      	addhi	r0, #1
 8015ffe:	b280      	uxthhi	r0, r0
}
 8016000:	bd10      	pop	{r4, pc}
		tmp = (data[0] << 8) + data[1];
 8016002:	780c      	ldrb	r4, [r1, #0]
 8016004:	784b      	ldrb	r3, [r1, #1]
 8016006:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 801600a:	b29b      	uxth	r3, r3
		sum += tmp;
 801600c:	4418      	add	r0, r3
 801600e:	b280      	uxth	r0, r0
		if (sum < tmp) {
 8016010:	4283      	cmp	r3, r0
			sum++;
 8016012:	bf84      	itt	hi
 8016014:	3001      	addhi	r0, #1
 8016016:	b280      	uxthhi	r0, r0
		data += 2;
 8016018:	3102      	adds	r1, #2
 801601a:	e7e6      	b.n	8015fea <calc_chksum+0x6>

0801601c <net_byte_to_hex>:
{
 801601c:	b570      	push	{r4, r5, r6, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
 801601e:	090e      	lsrs	r6, r1, #4
		if (i == 0 && !pad && !val) {
 8016020:	b1b3      	cbz	r3, 8016050 <net_byte_to_hex+0x34>
		if (val < 10) {
 8016022:	2e09      	cmp	r6, #9
			*ptr++ = (char) (val - 10 + base);
 8016024:	b274      	sxtb	r4, r6
 8016026:	bf86      	itte	hi
 8016028:	f1a2 030a 	subhi.w	r3, r2, #10
 801602c:	18e4      	addhi	r4, r4, r3
			*ptr++ = (char) (val + '0');
 801602e:	3430      	addls	r4, #48	; 0x30
 8016030:	1c45      	adds	r5, r0, #1
 8016032:	7004      	strb	r4, [r0, #0]
 8016034:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
 8016038:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
 801603a:	b24b      	sxtb	r3, r1
 801603c:	bf83      	ittte	hi
 801603e:	3a0a      	subhi	r2, #10
 8016040:	189b      	addhi	r3, r3, r2
 8016042:	b2db      	uxtbhi	r3, r3
			*ptr++ = (char) (val + '0');
 8016044:	3330      	addls	r3, #48	; 0x30
 8016046:	702b      	strb	r3, [r5, #0]
	*ptr = '\0';
 8016048:	2300      	movs	r3, #0
 801604a:	706b      	strb	r3, [r5, #1]
 801604c:	1c68      	adds	r0, r5, #1
}
 801604e:	bd70      	pop	{r4, r5, r6, pc}
		if (i == 0 && !pad && !val) {
 8016050:	2e00      	cmp	r6, #0
 8016052:	d1e6      	bne.n	8016022 <net_byte_to_hex+0x6>
 8016054:	4605      	mov	r5, r0
 8016056:	e7ed      	b.n	8016034 <net_byte_to_hex+0x18>

08016058 <z_impl_net_addr_pton>:
	if (family == AF_INET) {
 8016058:	2801      	cmp	r0, #1
{
 801605a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801605e:	460c      	mov	r4, r1
 8016060:	4616      	mov	r6, r2
	if (family == AF_INET) {
 8016062:	d126      	bne.n	80160b2 <z_impl_net_addr_pton+0x5a>
		len = strlen(src);
 8016064:	4608      	mov	r0, r1
 8016066:	f7ee fcc3 	bl	80049f0 <strlen>
		for (i = 0; i < len; i++) {
 801606a:	4623      	mov	r3, r4
 801606c:	4420      	add	r0, r4
 801606e:	4283      	cmp	r3, r0
 8016070:	d112      	bne.n	8016098 <z_impl_net_addr_pton+0x40>
__ssp_bos_icheck3(memset, void *, int)
 8016072:	4635      	mov	r5, r6
 8016074:	2300      	movs	r3, #0
 8016076:	f845 3901 	str.w	r3, [r5], #-1
 801607a:	3603      	adds	r6, #3
			addr->s4_addr[i] = strtol(src, &endptr, 10);
 801607c:	4620      	mov	r0, r4
 801607e:	220a      	movs	r2, #10
 8016080:	a901      	add	r1, sp, #4
 8016082:	f7ec fe3b 	bl	8002cfc <strtol>
 8016086:	f805 0f01 	strb.w	r0, [r5, #1]!
			src = ++endptr;
 801608a:	9c01      	ldr	r4, [sp, #4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
 801608c:	42ae      	cmp	r6, r5
			src = ++endptr;
 801608e:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
 8016092:	d1f3      	bne.n	801607c <z_impl_net_addr_pton+0x24>
	return 0;
 8016094:	2000      	movs	r0, #0
 8016096:	e009      	b.n	80160ac <z_impl_net_addr_pton+0x54>
			if (!(src[i] >= '0' && src[i] <= '9') &&
 8016098:	f813 2b01 	ldrb.w	r2, [r3], #1
 801609c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80160a0:	2909      	cmp	r1, #9
 80160a2:	d9e4      	bls.n	801606e <z_impl_net_addr_pton+0x16>
 80160a4:	2a2e      	cmp	r2, #46	; 0x2e
 80160a6:	d0e2      	beq.n	801606e <z_impl_net_addr_pton+0x16>
				return -EINVAL;
 80160a8:	f06f 0015 	mvn.w	r0, #21
}
 80160ac:	b003      	add	sp, #12
 80160ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
 80160b2:	2802      	cmp	r0, #2
 80160b4:	d1f8      	bne.n	80160a8 <z_impl_net_addr_pton+0x50>
		int expected_groups = strchr(src, '.') ? 6 : 8;
 80160b6:	212e      	movs	r1, #46	; 0x2e
 80160b8:	4620      	mov	r0, r4
 80160ba:	f7ee fc7a 	bl	80049b2 <strchr>
		if (*src == ':') {
 80160be:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
 80160c0:	2800      	cmp	r0, #0
 80160c2:	bf14      	ite	ne
 80160c4:	2706      	movne	r7, #6
 80160c6:	2708      	moveq	r7, #8
		if (*src == ':') {
 80160c8:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
 80160ca:	bf08      	it	eq
 80160cc:	3401      	addeq	r4, #1
		len = strlen(src);
 80160ce:	4620      	mov	r0, r4
 80160d0:	f7ee fc8e 	bl	80049f0 <strlen>
		for (i = 0; i < len; i++) {
 80160d4:	2300      	movs	r3, #0
 80160d6:	4283      	cmp	r3, r0
 80160d8:	db21      	blt.n	801611e <z_impl_net_addr_pton+0xc6>
		for (i = 0; i < expected_groups; i++) {
 80160da:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
 80160dc:	46a9      	mov	r9, r5
			if (!src || *src == '\0') {
 80160de:	2c00      	cmp	r4, #0
 80160e0:	d0e2      	beq.n	80160a8 <z_impl_net_addr_pton+0x50>
 80160e2:	7823      	ldrb	r3, [r4, #0]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d0df      	beq.n	80160a8 <z_impl_net_addr_pton+0x50>
			if (*src != ':') {
 80160e8:	2b3a      	cmp	r3, #58	; 0x3a
 80160ea:	d02d      	beq.n	8016148 <z_impl_net_addr_pton+0xf0>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
 80160ec:	2210      	movs	r2, #16
 80160ee:	2100      	movs	r1, #0
 80160f0:	4620      	mov	r0, r4
 80160f2:	f7ec fe03 	bl	8002cfc <strtol>
 80160f6:	2210      	movs	r2, #16
 80160f8:	4680      	mov	r8, r0
 80160fa:	2100      	movs	r1, #0
 80160fc:	4620      	mov	r0, r4
 80160fe:	f7ec fdfd 	bl	8002cfc <strtol>
 8016102:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8016106:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
 801610a:	f826 8015 	strh.w	r8, [r6, r5, lsl #1]
				src = strchr(src, ':');
 801610e:	213a      	movs	r1, #58	; 0x3a
 8016110:	4620      	mov	r0, r4
 8016112:	f7ee fc4e 	bl	80049b2 <strchr>
				if (src) {
 8016116:	4604      	mov	r4, r0
 8016118:	b178      	cbz	r0, 801613a <z_impl_net_addr_pton+0xe2>
			src++;
 801611a:	3401      	adds	r4, #1
 801611c:	e010      	b.n	8016140 <z_impl_net_addr_pton+0xe8>
			if (!(src[i] >= '0' && src[i] <= '9') &&
 801611e:	5ce2      	ldrb	r2, [r4, r3]
 8016120:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016124:	290a      	cmp	r1, #10
 8016126:	d906      	bls.n	8016136 <z_impl_net_addr_pton+0xde>
 8016128:	f022 0120 	bic.w	r1, r2, #32
 801612c:	3941      	subs	r1, #65	; 0x41
 801612e:	2905      	cmp	r1, #5
 8016130:	d901      	bls.n	8016136 <z_impl_net_addr_pton+0xde>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
 8016132:	2a2e      	cmp	r2, #46	; 0x2e
 8016134:	d1b8      	bne.n	80160a8 <z_impl_net_addr_pton+0x50>
		for (i = 0; i < len; i++) {
 8016136:	3301      	adds	r3, #1
 8016138:	e7cd      	b.n	80160d6 <z_impl_net_addr_pton+0x7e>
					if (i < expected_groups - 1) {
 801613a:	1e7b      	subs	r3, r7, #1
 801613c:	42ab      	cmp	r3, r5
 801613e:	dcb3      	bgt.n	80160a8 <z_impl_net_addr_pton+0x50>
		for (i = 0; i < expected_groups; i++) {
 8016140:	3501      	adds	r5, #1
 8016142:	42af      	cmp	r7, r5
 8016144:	dccb      	bgt.n	80160de <z_impl_net_addr_pton+0x86>
 8016146:	e013      	b.n	8016170 <z_impl_net_addr_pton+0x118>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
 8016148:	eb06 0345 	add.w	r3, r6, r5, lsl #1
 801614c:	f806 9015 	strb.w	r9, [r6, r5, lsl #1]
 8016150:	f883 9001 	strb.w	r9, [r3, #1]
			for (; i < expected_groups; i++) {
 8016154:	3501      	adds	r5, #1
 8016156:	42af      	cmp	r7, r5
 8016158:	dcf6      	bgt.n	8016148 <z_impl_net_addr_pton+0xf0>
			tmp = strrchr(src, ':');
 801615a:	213a      	movs	r1, #58	; 0x3a
 801615c:	4620      	mov	r0, r4
 801615e:	f7ee fc74 	bl	8004a4a <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
 8016162:	42a0      	cmp	r0, r4
 8016164:	d11f      	bne.n	80161a6 <z_impl_net_addr_pton+0x14e>
 8016166:	2f06      	cmp	r7, #6
 8016168:	d001      	beq.n	801616e <z_impl_net_addr_pton+0x116>
 801616a:	7863      	ldrb	r3, [r4, #1]
 801616c:	bb63      	cbnz	r3, 80161c8 <z_impl_net_addr_pton+0x170>
				src++;
 801616e:	3401      	adds	r4, #1
		if (expected_groups == 6) {
 8016170:	2f06      	cmp	r7, #6
 8016172:	d18f      	bne.n	8016094 <z_impl_net_addr_pton+0x3c>
 8016174:	360c      	adds	r6, #12
			for (i = 0; i < 4; i++) {
 8016176:	2500      	movs	r5, #0
				if (!src || !*src) {
 8016178:	2c00      	cmp	r4, #0
 801617a:	d095      	beq.n	80160a8 <z_impl_net_addr_pton+0x50>
 801617c:	7823      	ldrb	r3, [r4, #0]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d092      	beq.n	80160a8 <z_impl_net_addr_pton+0x50>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
 8016182:	220a      	movs	r2, #10
 8016184:	2100      	movs	r1, #0
 8016186:	4620      	mov	r0, r4
 8016188:	f7ec fdb8 	bl	8002cfc <strtol>
				src = strchr(src, '.');
 801618c:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
 801618e:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
 8016192:	4620      	mov	r0, r4
 8016194:	f7ee fc0d 	bl	80049b2 <strchr>
				if (src) {
 8016198:	4604      	mov	r4, r0
 801619a:	b1b8      	cbz	r0, 80161cc <z_impl_net_addr_pton+0x174>
					src++;
 801619c:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
 801619e:	3501      	adds	r5, #1
 80161a0:	2d04      	cmp	r5, #4
 80161a2:	d1e9      	bne.n	8016178 <z_impl_net_addr_pton+0x120>
 80161a4:	e776      	b.n	8016094 <z_impl_net_addr_pton+0x3c>
			if (expected_groups == 6) {
 80161a6:	2f06      	cmp	r7, #6
 80161a8:	d100      	bne.n	80161ac <z_impl_net_addr_pton+0x154>
				tmp--;
 80161aa:	3801      	subs	r0, #1
			i = expected_groups - 1;
 80161ac:	1e7d      	subs	r5, r7, #1
 80161ae:	3001      	adds	r0, #1
				if (*tmp == ':') {
 80161b0:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
 80161b4:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
 80161b6:	bf08      	it	eq
 80161b8:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
 80161bc:	2d00      	cmp	r5, #0
 80161be:	f6ff af73 	blt.w	80160a8 <z_impl_net_addr_pton+0x50>
			} while (tmp-- != src);
 80161c2:	42a0      	cmp	r0, r4
 80161c4:	d1f4      	bne.n	80161b0 <z_impl_net_addr_pton+0x158>
 80161c6:	e7a8      	b.n	801611a <z_impl_net_addr_pton+0xc2>
 80161c8:	4620      	mov	r0, r4
 80161ca:	e7ef      	b.n	80161ac <z_impl_net_addr_pton+0x154>
					if (i < 3) {
 80161cc:	2d03      	cmp	r5, #3
 80161ce:	f47f af6b 	bne.w	80160a8 <z_impl_net_addr_pton+0x50>
 80161d2:	e7e4      	b.n	801619e <z_impl_net_addr_pton+0x146>

080161d4 <net_calc_chksum>:
	return pkt->family;
 80161d4:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 80161d8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80161dc:	2b02      	cmp	r3, #2
{
 80161de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161e2:	4604      	mov	r4, r0
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 80161e4:	d171      	bne.n	80162ca <net_calc_chksum+0xf6>
		sum =  net_pkt_get_len(pkt) -
 80161e6:	6903      	ldr	r3, [r0, #16]
	size_t bytes = 0;
 80161e8:	2200      	movs	r2, #0
	while (buf) {
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d143      	bne.n	8016276 <net_calc_chksum+0xa2>
 80161ee:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
 80161f0:	1b4d      	subs	r5, r1, r5
			net_pkt_ip_hdr_len(pkt) -
 80161f2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	net_pkt_cursor_init(pkt);
 80161f6:	4620      	mov	r0, r4
		sum =  net_pkt_get_len(pkt) -
 80161f8:	1a6d      	subs	r5, r5, r1
 80161fa:	4415      	add	r5, r2
	backup->pos = pkt->cursor.pos;
 80161fc:	e9d4 8705 	ldrd	r8, r7, [r4, #20]
	net_pkt_cursor_init(pkt);
 8016200:	f000 fc42 	bl	8016a88 <net_pkt_cursor_init>
	return pkt->overwrite;
 8016204:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
 8016208:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801620c:	f003 0601 	and.w	r6, r3, #1
	pkt->overwrite = overwrite;
 8016210:	f043 0301 	orr.w	r3, r3, #1
 8016214:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		sum =  net_pkt_get_len(pkt) -
 8016218:	b2ad      	uxth	r5, r5
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
 801621a:	3920      	subs	r1, #32
 801621c:	4620      	mov	r0, r4
 801621e:	f000 fcad 	bl	8016b7c <net_pkt_skip>
	sum = calc_chksum(sum, pkt->cursor.pos, len);
 8016222:	2220      	movs	r2, #32
 8016224:	69a1      	ldr	r1, [r4, #24]
 8016226:	4628      	mov	r0, r5
 8016228:	f7ff fedc 	bl	8015fe4 <calc_chksum>
	net_pkt_skip(pkt, len + net_pkt_ipv6_ext_len(pkt));
 801622c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
	sum = calc_chksum(sum, pkt->cursor.pos, len);
 801622e:	4605      	mov	r5, r0
	net_pkt_skip(pkt, len + net_pkt_ipv6_ext_len(pkt));
 8016230:	3120      	adds	r1, #32
 8016232:	4620      	mov	r0, r4
 8016234:	f000 fca2 	bl	8016b7c <net_pkt_skip>
	if (!cur->buf || !cur->pos) {
 8016238:	6962      	ldr	r2, [r4, #20]
 801623a:	b162      	cbz	r2, 8016256 <net_calc_chksum+0x82>
 801623c:	69a3      	ldr	r3, [r4, #24]
 801623e:	b153      	cbz	r3, 8016256 <net_calc_chksum+0x82>
	len = cur->buf->len - (cur->pos - cur->buf->data);
 8016240:	f8b2 900c 	ldrh.w	r9, [r2, #12]
 8016244:	6892      	ldr	r2, [r2, #8]
 8016246:	1a9b      	subs	r3, r3, r2
 8016248:	eba9 0903 	sub.w	r9, r9, r3
	while (cur->buf) {
 801624c:	f8d4 a014 	ldr.w	sl, [r4, #20]
 8016250:	f1ba 0f00 	cmp.w	sl, #0
 8016254:	d113      	bne.n	801627e <net_calc_chksum+0xaa>
	sum = (sum == 0U) ? 0xffff : htons(sum);
 8016256:	2d00      	cmp	r5, #0
 8016258:	d034      	beq.n	80162c4 <net_calc_chksum+0xf0>
 801625a:	ba68      	rev16	r0, r5
 801625c:	b280      	uxth	r0, r0
 801625e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	pkt->cursor.pos = backup->pos;
 8016262:	e9c4 8705 	strd	r8, r7, [r4, #20]
	pkt->overwrite = overwrite;
 8016266:	f366 0300 	bfi	r3, r6, #0, #1
	return ~sum;
 801626a:	43c0      	mvns	r0, r0
 801626c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8016270:	b280      	uxth	r0, r0
}
 8016272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
 8016276:	8998      	ldrh	r0, [r3, #12]
		buf = buf->frags;
 8016278:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
 801627a:	4402      	add	r2, r0
		buf = buf->frags;
 801627c:	e7b5      	b.n	80161ea <net_calc_chksum+0x16>
		sum = calc_chksum(sum, cur->pos, len);
 801627e:	4628      	mov	r0, r5
 8016280:	464a      	mov	r2, r9
 8016282:	69a1      	ldr	r1, [r4, #24]
 8016284:	f7ff feae 	bl	8015fe4 <calc_chksum>
		cur->buf = cur->buf->frags;
 8016288:	f8da 3000 	ldr.w	r3, [sl]
 801628c:	6163      	str	r3, [r4, #20]
		sum = calc_chksum(sum, cur->pos, len);
 801628e:	4605      	mov	r5, r0
		if (!cur->buf || !cur->buf->len) {
 8016290:	2b00      	cmp	r3, #0
 8016292:	d0e0      	beq.n	8016256 <net_calc_chksum+0x82>
 8016294:	899a      	ldrh	r2, [r3, #12]
 8016296:	2a00      	cmp	r2, #0
 8016298:	d0dd      	beq.n	8016256 <net_calc_chksum+0x82>
		cur->pos = cur->buf->data;
 801629a:	689b      	ldr	r3, [r3, #8]
 801629c:	61a3      	str	r3, [r4, #24]
		if (len % 2) {
 801629e:	f019 0f01 	tst.w	r9, #1
 80162a2:	d00d      	beq.n	80162c0 <net_calc_chksum+0xec>
			sum += *cur->pos;
 80162a4:	7819      	ldrb	r1, [r3, #0]
 80162a6:	440d      	add	r5, r1
 80162a8:	b2ad      	uxth	r5, r5
			if (sum < *cur->pos) {
 80162aa:	42a9      	cmp	r1, r5
				sum++;
 80162ac:	bf88      	it	hi
 80162ae:	3501      	addhi	r5, #1
			cur->pos++;
 80162b0:	f103 0301 	add.w	r3, r3, #1
				sum++;
 80162b4:	bf88      	it	hi
 80162b6:	b2ad      	uxthhi	r5, r5
			cur->pos++;
 80162b8:	61a3      	str	r3, [r4, #24]
			len = cur->buf->len - 1;
 80162ba:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
 80162be:	e7c5      	b.n	801624c <net_calc_chksum+0x78>
			len = cur->buf->len;
 80162c0:	4691      	mov	r9, r2
 80162c2:	e7c3      	b.n	801624c <net_calc_chksum+0x78>
	sum = (sum == 0U) ? 0xffff : htons(sum);
 80162c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80162c8:	e7c9      	b.n	801625e <net_calc_chksum+0x8a>
		return 0;
 80162ca:	2000      	movs	r0, #0
 80162cc:	e7d1      	b.n	8016272 <net_calc_chksum+0x9e>

080162ce <k_sem_take>:
	return z_impl_k_sem_take(sem, timeout);
 80162ce:	f7fc bb2d 	b.w	801292c <z_impl_k_sem_take>

080162d2 <k_sem_give>:
	z_impl_k_sem_give(sem);
 80162d2:	f7fc baff 	b.w	80128d4 <z_impl_k_sem_give>

080162d6 <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 80162d6:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80162d8:	b942      	cbnz	r2, 80162ec <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 80162da:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 80162dc:	b933      	cbnz	r3, 80162ec <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80162de:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 80162e0:	b922      	cbnz	r2, 80162ec <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
 80162e2:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80162e4:	fab0 f080 	clz	r0, r0
 80162e8:	0940      	lsrs	r0, r0, #5
 80162ea:	4770      	bx	lr
 80162ec:	2000      	movs	r0, #0
 80162ee:	4770      	bx	lr

080162f0 <k_mutex_unlock>:
	z_impl_k_mutex_unlock(mutex);
 80162f0:	f7fb bfe4 	b.w	80122bc <z_impl_k_mutex_unlock>

080162f4 <k_mutex_lock.constprop.38>:
	return z_impl_k_mutex_lock(mutex, timeout);
 80162f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80162f8:	f7fb bf6e 	b.w	80121d8 <z_impl_k_mutex_lock>

080162fc <net_context_ref>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80162fc:	1d03      	adds	r3, r0, #4
 80162fe:	f3bf 8f5b 	dmb	ish
 8016302:	e853 0f00 	ldrex	r0, [r3]
 8016306:	1c42      	adds	r2, r0, #1
 8016308:	e843 2100 	strex	r1, r2, [r3]
 801630c:	2900      	cmp	r1, #0
 801630e:	d1f8      	bne.n	8016302 <net_context_ref+0x6>
 8016310:	f3bf 8f5b 	dmb	ish
}
 8016314:	3001      	adds	r0, #1
 8016316:	4770      	bx	lr

08016318 <net_context_unref>:
{
 8016318:	b538      	push	{r3, r4, r5, lr}
 801631a:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 801631c:	1d03      	adds	r3, r0, #4
 801631e:	f3bf 8f5b 	dmb	ish
 8016322:	e853 0f00 	ldrex	r0, [r3]
 8016326:	1e42      	subs	r2, r0, #1
 8016328:	e843 2100 	strex	r1, r2, [r3]
 801632c:	2900      	cmp	r1, #0
 801632e:	d1f8      	bne.n	8016322 <net_context_unref+0xa>
 8016330:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
 8016334:	2801      	cmp	r0, #1
 8016336:	d001      	beq.n	801633c <net_context_unref+0x24>
		return old_rc - 1;
 8016338:	3801      	subs	r0, #1
}
 801633a:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_lock(&context->lock, K_FOREVER);
 801633c:	f104 0508 	add.w	r5, r4, #8
 8016340:	4628      	mov	r0, r5
 8016342:	f7ff ffd7 	bl	80162f4 <k_mutex_lock.constprop.38>
	if (context->conn_handler) {
 8016346:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016348:	b118      	cbz	r0, 8016352 <net_context_unref+0x3a>
			net_conn_unregister(context->conn_handler);
 801634a:	f7f8 fb95 	bl	800ea78 <net_conn_unregister>
		context->conn_handler = NULL;
 801634e:	2300      	movs	r3, #0
 8016350:	6423      	str	r3, [r4, #64]	; 0x40
	context->flags &= ~NET_CONTEXT_IN_USE;
 8016352:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 8016356:	f023 0307 	bic.w	r3, r3, #7
	k_mutex_unlock(&context->lock);
 801635a:	4628      	mov	r0, r5
	context->flags &= ~NET_CONTEXT_IN_USE;
 801635c:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
	k_mutex_unlock(&context->lock);
 8016360:	f7ff ffc6 	bl	80162f0 <k_mutex_unlock>
 8016364:	2000      	movs	r0, #0
 8016366:	e7e8      	b.n	801633a <net_context_unref+0x22>

08016368 <bind_default>:
{
 8016368:	b570      	push	{r4, r5, r6, lr}
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 801636a:	f8b0 307e 	ldrh.w	r3, [r0, #126]	; 0x7e
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
 801636e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8016372:	2b02      	cmp	r3, #2
{
 8016374:	b086      	sub	sp, #24
 8016376:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
 8016378:	d120      	bne.n	80163bc <bind_default+0x54>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
 801637a:	6a02      	ldr	r2, [r0, #32]
 801637c:	b9e2      	cbnz	r2, 80163b8 <bind_default+0x50>
		addr6.sin6_family = AF_INET6;
 801637e:	f8ad 3000 	strh.w	r3, [sp]
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
 8016382:	f7f5 febf 	bl	800c104 <net_ipv6_unspecified_address>
 8016386:	ad01      	add	r5, sp, #4
 8016388:	4603      	mov	r3, r0
 801638a:	f100 0610 	add.w	r6, r0, #16
 801638e:	6818      	ldr	r0, [r3, #0]
 8016390:	6859      	ldr	r1, [r3, #4]
 8016392:	462a      	mov	r2, r5
 8016394:	c203      	stmia	r2!, {r0, r1}
 8016396:	3308      	adds	r3, #8
 8016398:	42b3      	cmp	r3, r6
 801639a:	4615      	mov	r5, r2
 801639c:	d1f7      	bne.n	801638e <bind_default+0x26>
			find_available_port(context,
 801639e:	4669      	mov	r1, sp
 80163a0:	4620      	mov	r0, r4
 80163a2:	f7f6 f851 	bl	800c448 <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr6,
 80163a6:	2218      	movs	r2, #24
		addr6.sin6_port =
 80163a8:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
 80163ac:	4669      	mov	r1, sp
 80163ae:	4620      	mov	r0, r4
 80163b0:	f7f6 f98c 	bl	800c6cc <net_context_bind>
}
 80163b4:	b006      	add	sp, #24
 80163b6:	bd70      	pop	{r4, r5, r6, pc}
			return 0;
 80163b8:	2000      	movs	r0, #0
 80163ba:	e7fb      	b.n	80163b4 <bind_default+0x4c>
	return -EINVAL;
 80163bc:	f06f 0015 	mvn.w	r0, #21
 80163c0:	e7f8      	b.n	80163b4 <bind_default+0x4c>

080163c2 <net_context_listen>:
	if (!net_context_is_used(context)) {
 80163c2:	f8b0 307e 	ldrh.w	r3, [r0, #126]	; 0x7e
 80163c6:	07db      	lsls	r3, r3, #31
{
 80163c8:	b510      	push	{r4, lr}
	if (!net_context_is_used(context)) {
 80163ca:	d50a      	bpl.n	80163e2 <net_context_listen+0x20>
	k_mutex_lock(&context->lock, K_FOREVER);
 80163cc:	f100 0408 	add.w	r4, r0, #8
 80163d0:	4620      	mov	r0, r4
 80163d2:	f7ff ff8f 	bl	80162f4 <k_mutex_lock.constprop.38>
	k_mutex_unlock(&context->lock);
 80163d6:	4620      	mov	r0, r4
 80163d8:	f7ff ff8a 	bl	80162f0 <k_mutex_unlock>
	return -EOPNOTSUPP;
 80163dc:	f06f 005e 	mvn.w	r0, #94	; 0x5e
}
 80163e0:	bd10      	pop	{r4, pc}
		return -EBADF;
 80163e2:	f06f 0008 	mvn.w	r0, #8
 80163e6:	e7fb      	b.n	80163e0 <net_context_listen+0x1e>

080163e8 <net_context_create_ipv6_new>:
{
 80163e8:	b570      	push	{r4, r5, r6, lr}
 80163ea:	460c      	mov	r4, r1
 80163ec:	4606      	mov	r6, r0
 80163ee:	461d      	mov	r5, r3
	if (!src) {
 80163f0:	4611      	mov	r1, r2
 80163f2:	b902      	cbnz	r2, 80163f6 <net_context_create_ipv6_new+0xe>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
 80163f4:	6a01      	ldr	r1, [r0, #32]
	if (net_ipv6_is_addr_unspecified(src)
 80163f6:	4608      	mov	r0, r1
 80163f8:	f7ff ff6d 	bl	80162d6 <net_ipv6_is_addr_unspecified>
 80163fc:	b910      	cbnz	r0, 8016404 <net_context_create_ipv6_new+0x1c>
	    || net_ipv6_is_addr_mcast(src)) {
 80163fe:	780b      	ldrb	r3, [r1, #0]
 8016400:	2bff      	cmp	r3, #255	; 0xff
 8016402:	d104      	bne.n	801640e <net_context_create_ipv6_new+0x26>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
 8016404:	4629      	mov	r1, r5
 8016406:	6a20      	ldr	r0, [r4, #32]
 8016408:	f7f5 fab2 	bl	800b970 <net_if_ipv6_select_src_addr>
 801640c:	4601      	mov	r1, r0
	net_pkt_set_ipv6_hop_limit(pkt,
 801640e:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
	pkt->ipv6_hop_limit = hop_limit;
 8016412:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	return net_ipv6_create(pkt, src, dst);
 8016416:	462a      	mov	r2, r5
 8016418:	4620      	mov	r0, r4
}
 801641a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_ipv6_create(pkt, src, dst);
 801641e:	f000 bece 	b.w	80171be <net_ipv6_create>

08016422 <context_sendto.isra.35>:
static int context_sendto(struct net_context *context,
 8016422:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016426:	4690      	mov	r8, r2
	if (!net_context_is_used(context)) {
 8016428:	f8b0 207e 	ldrh.w	r2, [r0, #126]	; 0x7e
static int context_sendto(struct net_context *context,
 801642c:	4605      	mov	r5, r0
	if (!net_context_is_used(context)) {
 801642e:	07d0      	lsls	r0, r2, #31
static int context_sendto(struct net_context *context,
 8016430:	468a      	mov	sl, r1
 8016432:	469b      	mov	fp, r3
 8016434:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8016438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (!net_context_is_used(context)) {
 801643a:	f140 80bb 	bpl.w	80165b4 <context_sendto.isra.35+0x192>
	if (sendto && addrlen == 0 && dst_addr == NULL && buf != NULL) {
 801643e:	b149      	cbz	r1, 8016454 <context_sendto.isra.35+0x32>
 8016440:	b943      	cbnz	r3, 8016454 <context_sendto.isra.35+0x32>
 8016442:	f1bb 0f00 	cmp.w	fp, #0
 8016446:	d108      	bne.n	801645a <context_sendto.isra.35+0x38>
 8016448:	f1ba 0f00 	cmp.w	sl, #0
 801644c:	d16d      	bne.n	801652a <context_sendto.isra.35+0x108>
		return -EDESTADDRREQ;
 801644e:	f06f 0478 	mvn.w	r4, #120	; 0x78
 8016452:	e09d      	b.n	8016590 <context_sendto.isra.35+0x16e>
	if (!msghdr && !dst_addr &&
 8016454:	f1bb 0f00 	cmp.w	fp, #0
 8016458:	d0f9      	beq.n	801644e <context_sendto.isra.35+0x2c>
 801645a:	2600      	movs	r6, #0
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 801645c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
 8016460:	2a02      	cmp	r2, #2
 8016462:	d166      	bne.n	8016532 <context_sendto.isra.35+0x110>
		if (msghdr) {
 8016464:	2e00      	cmp	r6, #0
 8016466:	d062      	beq.n	801652e <context_sendto.isra.35+0x10c>
			addrlen = msghdr->msg_namelen;
 8016468:	e9d6 b300 	ldrd	fp, r3, [r6]
			if (!addr6) {
 801646c:	f1bb 0f00 	cmp.w	fp, #0
 8016470:	d15d      	bne.n	801652e <context_sendto.isra.35+0x10c>
				addr6 = net_sin6(&context->remote);
 8016472:	f105 0b28 	add.w	fp, r5, #40	; 0x28
		if (net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
 8016476:	f10b 0404 	add.w	r4, fp, #4
 801647a:	4620      	mov	r0, r4
 801647c:	f7ff ff2b 	bl	80162d6 <net_ipv6_is_addr_unspecified>
 8016480:	2800      	cmp	r0, #0
 8016482:	d1e4      	bne.n	801644e <context_sendto.isra.35+0x2c>
	if (msghdr && len == 0) {
 8016484:	b136      	cbz	r6, 8016494 <context_sendto.isra.35+0x72>
 8016486:	f1b8 0f00 	cmp.w	r8, #0
 801648a:	d103      	bne.n	8016494 <context_sendto.isra.35+0x72>
 801648c:	68f1      	ldr	r1, [r6, #12]
		for (i = 0; i < msghdr->msg_iovlen; i++) {
 801648e:	4643      	mov	r3, r8
 8016490:	428b      	cmp	r3, r1
 8016492:	d151      	bne.n	8016538 <context_sendto.isra.35+0x116>
	return net_if_get_by_index(context->iface);
 8016494:	f995 0080 	ldrsb.w	r0, [r5, #128]	; 0x80
 8016498:	f7f5 fb88 	bl	800bbac <net_if_get_by_index>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 801649c:	f8b5 207e 	ldrh.w	r2, [r5, #126]	; 0x7e
	pkt = net_pkt_alloc_with_buffer(net_context_get_iface(context), len,
 80164a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80164a4:	9300      	str	r3, [sp, #0]
 80164a6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
 80164aa:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
 80164ae:	4641      	mov	r1, r8
 80164b0:	f7f6 fb4c 	bl	800cb4c <net_pkt_alloc_with_buffer>
	if (pkt) {
 80164b4:	4607      	mov	r7, r0
 80164b6:	2800      	cmp	r0, #0
 80164b8:	d07f      	beq.n	80165ba <context_sendto.isra.35+0x198>
	pkt->context = ctx;
 80164ba:	61c5      	str	r5, [r0, #28]
	tmp_len = net_pkt_available_payload_buffer(
 80164bc:	f895 107c 	ldrb.w	r1, [r5, #124]	; 0x7c
 80164c0:	f000 faa6 	bl	8016a10 <net_pkt_available_payload_buffer>
	context->send_cb = cb;
 80164c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164c6:	64ab      	str	r3, [r5, #72]	; 0x48
	context->user_data = user_data;
 80164c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164ca:	602b      	str	r3, [r5, #0]
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
 80164cc:	f8b5 307c 	ldrh.w	r3, [r5, #124]	; 0x7c
 80164d0:	2b11      	cmp	r3, #17
	tmp_len = net_pkt_available_payload_buffer(
 80164d2:	4681      	mov	r9, r0
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
 80164d4:	d168      	bne.n	80165a8 <context_sendto.isra.35+0x186>
 80164d6:	f8b5 307e 	ldrh.w	r3, [r5, #126]	; 0x7e
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 80164da:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80164de:	2b02      	cmp	r3, #2
 80164e0:	d165      	bne.n	80165ae <context_sendto.isra.35+0x18c>
		ret = net_context_create_ipv6_new(context, pkt,
 80164e2:	4623      	mov	r3, r4
 80164e4:	2200      	movs	r2, #0
 80164e6:	4639      	mov	r1, r7
 80164e8:	4628      	mov	r0, r5
		dst_port = addr6->sin6_port;
 80164ea:	f8bb b002 	ldrh.w	fp, [fp, #2]
		ret = net_context_create_ipv6_new(context, pkt,
 80164ee:	f7ff ff7b 	bl	80163e8 <net_context_create_ipv6_new>
	if (ret < 0) {
 80164f2:	1e04      	subs	r4, r0, #0
 80164f4:	db54      	blt.n	80165a0 <context_sendto.isra.35+0x17e>
 80164f6:	45c8      	cmp	r8, r9
	ret = bind_default(context);
 80164f8:	4628      	mov	r0, r5
 80164fa:	bf28      	it	cs
 80164fc:	46c8      	movcs	r8, r9
 80164fe:	f7ff ff33 	bl	8016368 <bind_default>
	if (ret) {
 8016502:	4604      	mov	r4, r0
 8016504:	2800      	cmp	r0, #0
 8016506:	d149      	bne.n	801659c <context_sendto.isra.35+0x17a>
	ret = net_udp_create(pkt,
 8016508:	465a      	mov	r2, fp
 801650a:	8be9      	ldrh	r1, [r5, #30]
 801650c:	4638      	mov	r0, r7
 801650e:	f001 fae3 	bl	8017ad8 <net_udp_create>
	if (ret) {
 8016512:	4604      	mov	r4, r0
 8016514:	2800      	cmp	r0, #0
 8016516:	d141      	bne.n	801659c <context_sendto.isra.35+0x17a>
	if (msghdr) {
 8016518:	2e00      	cmp	r6, #0
 801651a:	d13d      	bne.n	8016598 <context_sendto.isra.35+0x176>
		ret = net_pkt_write(pkt, buf, buf_len);
 801651c:	4642      	mov	r2, r8
 801651e:	4651      	mov	r1, sl
 8016520:	4638      	mov	r0, r7
 8016522:	f000 fc62 	bl	8016dea <net_pkt_write>
 8016526:	4604      	mov	r4, r0
 8016528:	e01d      	b.n	8016566 <context_sendto.isra.35+0x144>
	if (sendto && addrlen == 0 && dst_addr == NULL && buf != NULL) {
 801652a:	4656      	mov	r6, sl
 801652c:	e796      	b.n	801645c <context_sendto.isra.35+0x3a>
		if (addrlen < sizeof(struct sockaddr_in6)) {
 801652e:	2b17      	cmp	r3, #23
 8016530:	d8a1      	bhi.n	8016476 <context_sendto.isra.35+0x54>
		return -EINVAL;
 8016532:	f06f 0415 	mvn.w	r4, #21
 8016536:	e02b      	b.n	8016590 <context_sendto.isra.35+0x16e>
			len += msghdr->msg_iov[i].iov_len;
 8016538:	68b2      	ldr	r2, [r6, #8]
 801653a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
		for (i = 0; i < msghdr->msg_iovlen; i++) {
 801653e:	3301      	adds	r3, #1
			len += msghdr->msg_iov[i].iov_len;
 8016540:	6852      	ldr	r2, [r2, #4]
 8016542:	4490      	add	r8, r2
 8016544:	e7a4      	b.n	8016490 <context_sendto.isra.35+0x6e>
			ret = net_pkt_write(pkt, msghdr->msg_iov[i].iov_base,
 8016546:	68b3      	ldr	r3, [r6, #8]
 8016548:	eb03 02ca 	add.w	r2, r3, sl, lsl #3
 801654c:	f853 103a 	ldr.w	r1, [r3, sl, lsl #3]
 8016550:	6852      	ldr	r2, [r2, #4]
 8016552:	4638      	mov	r0, r7
 8016554:	f000 fc49 	bl	8016dea <net_pkt_write>
			if (ret < 0) {
 8016558:	1e04      	subs	r4, r0, #0
 801655a:	db21      	blt.n	80165a0 <context_sendto.isra.35+0x17e>
		for (i = 0; i < msghdr->msg_iovlen; i++) {
 801655c:	f10a 0a01 	add.w	sl, sl, #1
 8016560:	68f3      	ldr	r3, [r6, #12]
 8016562:	4553      	cmp	r3, sl
 8016564:	d8ef      	bhi.n	8016546 <context_sendto.isra.35+0x124>
	if (ret) {
 8016566:	b9cc      	cbnz	r4, 801659c <context_sendto.isra.35+0x17a>
	net_pkt_cursor_init(pkt);
 8016568:	4638      	mov	r0, r7
 801656a:	f000 fa8d 	bl	8016a88 <net_pkt_cursor_init>
 801656e:	f8b5 307e 	ldrh.w	r3, [r5, #126]	; 0x7e
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8016572:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8016576:	2b02      	cmp	r3, #2
 8016578:	d104      	bne.n	8016584 <context_sendto.isra.35+0x162>
		net_ipv6_finalize(pkt, net_context_get_ip_proto(context));
 801657a:	f895 107c 	ldrb.w	r1, [r5, #124]	; 0x7c
 801657e:	4638      	mov	r0, r7
 8016580:	f000 fe80 	bl	8017284 <net_ipv6_finalize>
		ret = net_send_data(pkt);
 8016584:	4638      	mov	r0, r7
 8016586:	f7ff faee 	bl	8015b66 <net_send_data>
	if (ret < 0) {
 801658a:	1e04      	subs	r4, r0, #0
 801658c:	db08      	blt.n	80165a0 <context_sendto.isra.35+0x17e>
	return len;
 801658e:	4644      	mov	r4, r8
}
 8016590:	4620      	mov	r0, r4
 8016592:	b003      	add	sp, #12
 8016594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < msghdr->msg_iovlen; i++) {
 8016598:	4682      	mov	sl, r0
 801659a:	e7e1      	b.n	8016560 <context_sendto.isra.35+0x13e>
		if (ret < 0) {
 801659c:	2c00      	cmp	r4, #0
 801659e:	dae3      	bge.n	8016568 <context_sendto.isra.35+0x146>
	net_pkt_unref(pkt);
 80165a0:	4638      	mov	r0, r7
 80165a2:	f000 f9f3 	bl	801698c <net_pkt_unref>
	return ret;
 80165a6:	e7f3      	b.n	8016590 <context_sendto.isra.35+0x16e>
		ret = -EPROTONOSUPPORT;
 80165a8:	f06f 047a 	mvn.w	r4, #122	; 0x7a
 80165ac:	e7f8      	b.n	80165a0 <context_sendto.isra.35+0x17e>
	int ret = -EINVAL;
 80165ae:	f06f 0415 	mvn.w	r4, #21
 80165b2:	e7f5      	b.n	80165a0 <context_sendto.isra.35+0x17e>
		return -EBADF;
 80165b4:	f06f 0408 	mvn.w	r4, #8
 80165b8:	e7ea      	b.n	8016590 <context_sendto.isra.35+0x16e>
		return -ENOMEM;
 80165ba:	f06f 040b 	mvn.w	r4, #11
 80165be:	e7e7      	b.n	8016590 <context_sendto.isra.35+0x16e>

080165c0 <net_context_connect>:
{
 80165c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165c4:	4604      	mov	r4, r0
	k_mutex_lock(&context->lock, K_FOREVER);
 80165c6:	f100 0708 	add.w	r7, r0, #8
 80165ca:	4638      	mov	r0, r7
{
 80165cc:	4698      	mov	r8, r3
 80165ce:	460e      	mov	r6, r1
 80165d0:	4691      	mov	r9, r2
	k_mutex_lock(&context->lock, K_FOREVER);
 80165d2:	f7ff fe8f 	bl	80162f4 <k_mutex_lock.constprop.38>
	if (!net_context_is_used(context)) {
 80165d6:	f8b4 507e 	ldrh.w	r5, [r4, #126]	; 0x7e
 80165da:	07eb      	lsls	r3, r5, #31
 80165dc:	d54d      	bpl.n	801667a <net_context_connect+0xba>
	if (addr->sa_family != net_context_get_family(context)) {
 80165de:	8831      	ldrh	r1, [r6, #0]
 80165e0:	f3c5 03c2 	ubfx	r3, r5, #3, #3
 80165e4:	4299      	cmp	r1, r3
 80165e6:	d14e      	bne.n	8016686 <net_context_connect+0xc6>
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
 80165e8:	f3c5 0341 	ubfx	r3, r5, #1, #2
 80165ec:	2b03      	cmp	r3, #3
 80165ee:	d047      	beq.n	8016680 <net_context_connect+0xc0>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 80165f0:	2902      	cmp	r1, #2
 80165f2:	d148      	bne.n	8016686 <net_context_connect+0xc6>
		if (addrlen < sizeof(struct sockaddr_in6)) {
 80165f4:	f1b9 0f17 	cmp.w	r9, #23
 80165f8:	d945      	bls.n	8016686 <net_context_connect+0xc6>
		if (net_context_get_ip_proto(context) == IPPROTO_TCP &&
 80165fa:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80165fe:	2b06      	cmp	r3, #6
 8016600:	d103      	bne.n	801660a <net_context_connect+0x4a>
 8016602:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016606:	2bff      	cmp	r3, #255	; 0xff
 8016608:	d040      	beq.n	801668c <net_context_connect+0xcc>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
 801660a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 801660e:	1d33      	adds	r3, r6, #4
 8016610:	4602      	mov	r2, r0
 8016612:	f106 0114 	add.w	r1, r6, #20
 8016616:	f853 cb04 	ldr.w	ip, [r3], #4
 801661a:	f842 cb04 	str.w	ip, [r2], #4
 801661e:	428b      	cmp	r3, r1
 8016620:	d1f9      	bne.n	8016616 <net_context_connect+0x56>
		addr6->sin6_port = net_sin6(addr)->sin6_port;
 8016622:	8873      	ldrh	r3, [r6, #2]
 8016624:	8563      	strh	r3, [r4, #42]	; 0x2a
		addr6->sin6_family = AF_INET6;
 8016626:	2302      	movs	r3, #2
 8016628:	8523      	strh	r3, [r4, #40]	; 0x28
		if (!net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
 801662a:	f7ff fe54 	bl	80162d6 <net_ipv6_is_addr_unspecified>
 801662e:	bb00      	cbnz	r0, 8016672 <net_context_connect+0xb2>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
 8016630:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8016634:	f8a4 507e 	strh.w	r5, [r4, #126]	; 0x7e
		ret = bind_default(context);
 8016638:	4620      	mov	r0, r4
 801663a:	f7ff fe95 	bl	8016368 <bind_default>
		if (ret) {
 801663e:	4605      	mov	r5, r0
 8016640:	b988      	cbnz	r0, 8016666 <net_context_connect+0xa6>
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
 8016642:	2302      	movs	r3, #2
 8016644:	83a3      	strh	r3, [r4, #28]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
 8016646:	6a23      	ldr	r3, [r4, #32]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d0ff      	beq.n	801664c <net_context_connect+0x8c>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
 801664c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 8016650:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (IS_ENABLED(CONFIG_NET_UDP) &&
 8016654:	2b02      	cmp	r3, #2
 8016656:	d11c      	bne.n	8016692 <net_context_connect+0xd2>
		if (cb) {
 8016658:	f1b8 0f00 	cmp.w	r8, #0
 801665c:	d003      	beq.n	8016666 <net_context_connect+0xa6>
			cb(context, 0, user_data);
 801665e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016660:	2100      	movs	r1, #0
 8016662:	4620      	mov	r0, r4
 8016664:	47c0      	blx	r8
	k_mutex_unlock(&context->lock);
 8016666:	4638      	mov	r0, r7
 8016668:	f7ff fe42 	bl	80162f0 <k_mutex_unlock>
}
 801666c:	4628      	mov	r0, r5
 801666e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
 8016672:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8016676:	b2ad      	uxth	r5, r5
 8016678:	e7dc      	b.n	8016634 <net_context_connect+0x74>
		ret = -EBADF;
 801667a:	f06f 0508 	mvn.w	r5, #8
 801667e:	e7f2      	b.n	8016666 <net_context_connect+0xa6>
		ret = -EOPNOTSUPP;
 8016680:	f06f 055e 	mvn.w	r5, #94	; 0x5e
 8016684:	e7ef      	b.n	8016666 <net_context_connect+0xa6>
		ret = -EINVAL;
 8016686:	f06f 0515 	mvn.w	r5, #21
 801668a:	e7ec      	b.n	8016666 <net_context_connect+0xa6>
			ret = -EADDRNOTAVAIL;
 801668c:	f06f 057c 	mvn.w	r5, #124	; 0x7c
 8016690:	e7e9      	b.n	8016666 <net_context_connect+0xa6>
		ret = -ENOTSUP;
 8016692:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8016696:	e7e6      	b.n	8016666 <net_context_connect+0xa6>

08016698 <net_context_accept>:
{
 8016698:	b538      	push	{r3, r4, r5, lr}
	if (!net_context_is_used(context)) {
 801669a:	f8b0 307e 	ldrh.w	r3, [r0, #126]	; 0x7e
 801669e:	07db      	lsls	r3, r3, #31
{
 80166a0:	4604      	mov	r4, r0
	if (!net_context_is_used(context)) {
 80166a2:	d51d      	bpl.n	80166e0 <net_context_accept+0x48>
	k_mutex_lock(&context->lock, K_FOREVER);
 80166a4:	f100 0508 	add.w	r5, r0, #8
 80166a8:	4628      	mov	r0, r5
 80166aa:	f7ff fe23 	bl	80162f4 <k_mutex_lock.constprop.38>
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
 80166ae:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 80166b2:	f3c3 0241 	ubfx	r2, r3, #1, #2
 80166b6:	2a03      	cmp	r2, #3
 80166b8:	d003      	beq.n	80166c2 <net_context_accept+0x2a>
 80166ba:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80166be:	2b01      	cmp	r3, #1
 80166c0:	d10b      	bne.n	80166da <net_context_accept+0x42>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
 80166c2:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
		ret = net_tcp_accept(context, cb, user_data);
 80166c6:	2b06      	cmp	r3, #6
 80166c8:	bf14      	ite	ne
 80166ca:	2400      	movne	r4, #0
 80166cc:	f06f 047a 	mvneq.w	r4, #122	; 0x7a
	k_mutex_unlock(&context->lock);
 80166d0:	4628      	mov	r0, r5
 80166d2:	f7ff fe0d 	bl	80162f0 <k_mutex_unlock>
}
 80166d6:	4620      	mov	r0, r4
 80166d8:	bd38      	pop	{r3, r4, r5, pc}
		ret = -EINVAL;
 80166da:	f06f 0415 	mvn.w	r4, #21
 80166de:	e7f7      	b.n	80166d0 <net_context_accept+0x38>
		return -EBADF;
 80166e0:	f06f 0408 	mvn.w	r4, #8
 80166e4:	e7f7      	b.n	80166d6 <net_context_accept+0x3e>

080166e6 <net_context_send>:
{
 80166e6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80166ea:	4604      	mov	r4, r0
	k_mutex_lock(&context->lock, K_FOREVER);
 80166ec:	f100 0508 	add.w	r5, r0, #8
 80166f0:	4628      	mov	r0, r5
{
 80166f2:	4698      	mov	r8, r3
 80166f4:	460e      	mov	r6, r1
 80166f6:	4617      	mov	r7, r2
	k_mutex_lock(&context->lock, K_FOREVER);
 80166f8:	f7ff fdfc 	bl	80162f4 <k_mutex_lock.constprop.38>
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
 80166fc:	f8b4 007e 	ldrh.w	r0, [r4, #126]	; 0x7e
 8016700:	05c3      	lsls	r3, r0, #23
 8016702:	d51c      	bpl.n	801673e <net_context_send+0x58>
 8016704:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8016706:	b1d3      	cbz	r3, 801673e <net_context_send+0x58>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8016708:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	ret = context_sendto(context, buf, len, &context->remote,
 801670c:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 801670e:	2802      	cmp	r0, #2
	ret = context_sendto(context, buf, len, &context->remote,
 8016710:	9303      	str	r3, [sp, #12]
 8016712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		addrlen = 0;
 8016714:	bf0c      	ite	eq
 8016716:	2218      	moveq	r2, #24
 8016718:	2200      	movne	r2, #0
	ret = context_sendto(context, buf, len, &context->remote,
 801671a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 801671e:	9200      	str	r2, [sp, #0]
 8016720:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8016724:	4620      	mov	r0, r4
 8016726:	463a      	mov	r2, r7
 8016728:	4631      	mov	r1, r6
 801672a:	f7ff fe7a 	bl	8016422 <context_sendto.isra.35>
 801672e:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
 8016730:	4628      	mov	r0, r5
 8016732:	f7ff fddd 	bl	80162f0 <k_mutex_unlock>
}
 8016736:	4620      	mov	r0, r4
 8016738:	b004      	add	sp, #16
 801673a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = -EDESTADDRREQ;
 801673e:	f06f 0478 	mvn.w	r4, #120	; 0x78
 8016742:	e7f5      	b.n	8016730 <net_context_send+0x4a>

08016744 <net_context_sendmsg>:
{
 8016744:	b5f0      	push	{r4, r5, r6, r7, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
 8016746:	f100 0408 	add.w	r4, r0, #8
{
 801674a:	b085      	sub	sp, #20
 801674c:	4605      	mov	r5, r0
	k_mutex_lock(&context->lock, K_FOREVER);
 801674e:	4620      	mov	r0, r4
{
 8016750:	461f      	mov	r7, r3
 8016752:	460e      	mov	r6, r1
	k_mutex_lock(&context->lock, K_FOREVER);
 8016754:	f7ff fdce 	bl	80162f4 <k_mutex_lock.constprop.38>
	ret = context_sendto(context, msghdr, 0, NULL, 0,
 8016758:	2301      	movs	r3, #1
 801675a:	9303      	str	r3, [sp, #12]
 801675c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801675e:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8016762:	2300      	movs	r3, #0
 8016764:	9300      	str	r3, [sp, #0]
 8016766:	461a      	mov	r2, r3
 8016768:	4631      	mov	r1, r6
 801676a:	4628      	mov	r0, r5
 801676c:	f7ff fe59 	bl	8016422 <context_sendto.isra.35>
 8016770:	4605      	mov	r5, r0
	k_mutex_unlock(&context->lock);
 8016772:	4620      	mov	r0, r4
 8016774:	f7ff fdbc 	bl	80162f0 <k_mutex_unlock>
}
 8016778:	4628      	mov	r0, r5
 801677a:	b005      	add	sp, #20
 801677c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801677e <net_context_sendto>:
{
 801677e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
 8016782:	f100 0408 	add.w	r4, r0, #8
{
 8016786:	4605      	mov	r5, r0
	k_mutex_lock(&context->lock, K_FOREVER);
 8016788:	4620      	mov	r0, r4
{
 801678a:	4698      	mov	r8, r3
 801678c:	460e      	mov	r6, r1
 801678e:	4617      	mov	r7, r2
	k_mutex_lock(&context->lock, K_FOREVER);
 8016790:	f7ff fdb0 	bl	80162f4 <k_mutex_lock.constprop.38>
	ret = context_sendto(context, buf, len, dst_addr, addrlen,
 8016794:	2301      	movs	r3, #1
 8016796:	9303      	str	r3, [sp, #12]
 8016798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801679a:	9302      	str	r3, [sp, #8]
 801679c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801679e:	9301      	str	r3, [sp, #4]
 80167a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167a2:	9300      	str	r3, [sp, #0]
 80167a4:	463a      	mov	r2, r7
 80167a6:	4643      	mov	r3, r8
 80167a8:	4631      	mov	r1, r6
 80167aa:	4628      	mov	r0, r5
 80167ac:	f7ff fe39 	bl	8016422 <context_sendto.isra.35>
 80167b0:	4605      	mov	r5, r0
	k_mutex_unlock(&context->lock);
 80167b2:	4620      	mov	r0, r4
 80167b4:	f7ff fd9c 	bl	80162f0 <k_mutex_unlock>
}
 80167b8:	4628      	mov	r0, r5
 80167ba:	b004      	add	sp, #16
 80167bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080167c0 <net_context_update_recv_wnd>:
{
 80167c0:	b510      	push	{r4, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
 80167c2:	f100 0408 	add.w	r4, r0, #8
 80167c6:	4620      	mov	r0, r4
 80167c8:	f7ff fd94 	bl	80162f4 <k_mutex_lock.constprop.38>
	k_mutex_unlock(&context->lock);
 80167cc:	4620      	mov	r0, r4
 80167ce:	f7ff fd8f 	bl	80162f0 <k_mutex_unlock>
}
 80167d2:	f06f 007a 	mvn.w	r0, #122	; 0x7a
 80167d6:	bd10      	pop	{r4, pc}

080167d8 <net_buf_frags_len>:
{
 80167d8:	4603      	mov	r3, r0
	size_t bytes = 0;
 80167da:	2000      	movs	r0, #0
	while (buf) {
 80167dc:	b903      	cbnz	r3, 80167e0 <net_buf_frags_len+0x8>
	}

	return bytes;
}
 80167de:	4770      	bx	lr
		bytes += buf->len;
 80167e0:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
 80167e2:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
 80167e4:	4410      	add	r0, r2
		buf = buf->frags;
 80167e6:	e7f9      	b.n	80167dc <net_buf_frags_len+0x4>

080167e8 <pkt_cursor_jump>:
	cursor->buf = cursor->buf->frags;
 80167e8:	6943      	ldr	r3, [r0, #20]
			cursor->buf = cursor->buf->frags;
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	6143      	str	r3, [r0, #20]
	while (cursor->buf) {
 80167ee:	6943      	ldr	r3, [r0, #20]
 80167f0:	b90b      	cbnz	r3, 80167f6 <pkt_cursor_jump+0xe>
		cursor->pos = NULL;
 80167f2:	6183      	str	r3, [r0, #24]
}
 80167f4:	4770      	bx	lr
		size_t len = write ? cursor->buf->size : cursor->buf->len;
 80167f6:	b121      	cbz	r1, 8016802 <pkt_cursor_jump+0x1a>
 80167f8:	89da      	ldrh	r2, [r3, #14]
		if (!len) {
 80167fa:	2a00      	cmp	r2, #0
 80167fc:	d0f5      	beq.n	80167ea <pkt_cursor_jump+0x2>
		cursor->pos = cursor->buf->data;
 80167fe:	689b      	ldr	r3, [r3, #8]
 8016800:	e7f7      	b.n	80167f2 <pkt_cursor_jump+0xa>
		size_t len = write ? cursor->buf->size : cursor->buf->len;
 8016802:	899a      	ldrh	r2, [r3, #12]
 8016804:	e7f9      	b.n	80167fa <pkt_cursor_jump+0x12>

08016806 <pkt_cursor_advance>:
	if (!cursor->buf) {
 8016806:	6943      	ldr	r3, [r0, #20]
{
 8016808:	b410      	push	{r4}
	if (!cursor->buf) {
 801680a:	b163      	cbz	r3, 8016826 <pkt_cursor_advance+0x20>
	len = write ? cursor->buf->size : cursor->buf->len;
 801680c:	b149      	cbz	r1, 8016822 <pkt_cursor_advance+0x1c>
 801680e:	89dc      	ldrh	r4, [r3, #14]
	if ((cursor->pos - cursor->buf->data) == len) {
 8016810:	6982      	ldr	r2, [r0, #24]
 8016812:	689b      	ldr	r3, [r3, #8]
 8016814:	1ad2      	subs	r2, r2, r3
 8016816:	42a2      	cmp	r2, r4
 8016818:	d105      	bne.n	8016826 <pkt_cursor_advance+0x20>
}
 801681a:	f85d 4b04 	ldr.w	r4, [sp], #4
		pkt_cursor_jump(pkt, write);
 801681e:	f7ff bfe3 	b.w	80167e8 <pkt_cursor_jump>
	len = write ? cursor->buf->size : cursor->buf->len;
 8016822:	899c      	ldrh	r4, [r3, #12]
 8016824:	e7f4      	b.n	8016810 <pkt_cursor_advance+0xa>
}
 8016826:	f85d 4b04 	ldr.w	r4, [sp], #4
 801682a:	4770      	bx	lr

0801682c <pkt_cursor_update>:
	return pkt->overwrite;
 801682c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8016830:	b4f0      	push	{r4, r5, r6, r7}
	if (net_pkt_is_being_overwritten(pkt)) {
 8016832:	f013 0601 	ands.w	r6, r3, #1
 8016836:	6945      	ldr	r5, [r0, #20]
 8016838:	d10f      	bne.n	801685a <pkt_cursor_update+0x2e>
	len = write ? cursor->buf->size : cursor->buf->len;
 801683a:	b172      	cbz	r2, 801685a <pkt_cursor_update+0x2e>
 801683c:	89ef      	ldrh	r7, [r5, #14]
	if (length + (cursor->pos - cursor->buf->data) == len &&
 801683e:	6984      	ldr	r4, [r0, #24]
 8016840:	68ab      	ldr	r3, [r5, #8]
 8016842:	1ae3      	subs	r3, r4, r3
 8016844:	440b      	add	r3, r1
 8016846:	42bb      	cmp	r3, r7
 8016848:	d10a      	bne.n	8016860 <pkt_cursor_update+0x34>
 801684a:	b116      	cbz	r6, 8016852 <pkt_cursor_update+0x26>
	    !(net_pkt_is_being_overwritten(pkt) && len < cursor->buf->size)) {
 801684c:	89eb      	ldrh	r3, [r5, #14]
 801684e:	42bb      	cmp	r3, r7
 8016850:	d806      	bhi.n	8016860 <pkt_cursor_update+0x34>
		pkt_cursor_jump(pkt, write);
 8016852:	4611      	mov	r1, r2
}
 8016854:	bcf0      	pop	{r4, r5, r6, r7}
		pkt_cursor_jump(pkt, write);
 8016856:	f7ff bfc7 	b.w	80167e8 <pkt_cursor_jump>
	len = write ? cursor->buf->size : cursor->buf->len;
 801685a:	89af      	ldrh	r7, [r5, #12]
 801685c:	2200      	movs	r2, #0
 801685e:	e7ee      	b.n	801683e <pkt_cursor_update+0x12>
		cursor->pos += length;
 8016860:	440c      	add	r4, r1
 8016862:	6184      	str	r4, [r0, #24]
}
 8016864:	bcf0      	pop	{r4, r5, r6, r7}
 8016866:	4770      	bx	lr

08016868 <k_uptime_get_32>:
{
 8016868:	b508      	push	{r3, lr}
	return z_impl_k_uptime_get();
 801686a:	f002 f996 	bl	8018b9a <z_impl_k_uptime_get>
}
 801686e:	bd08      	pop	{r3, pc}

08016870 <net_pkt_cursor_operate>:
{
 8016870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016874:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8016878:	4606      	mov	r6, r0
 801687a:	460f      	mov	r7, r1
 801687c:	4615      	mov	r5, r2
 801687e:	4699      	mov	r9, r3
	while (c_op->buf && length) {
 8016880:	6973      	ldr	r3, [r6, #20]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d051      	beq.n	801692a <net_pkt_cursor_operate+0xba>
 8016886:	b90d      	cbnz	r5, 801688c <net_pkt_cursor_operate+0x1c>
	return 0;
 8016888:	4628      	mov	r0, r5
 801688a:	e00d      	b.n	80168a8 <net_pkt_cursor_operate+0x38>
 801688c:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
 8016890:	f013 0f01 	tst.w	r3, #1
 8016894:	bf0c      	ite	eq
 8016896:	4641      	moveq	r1, r8
 8016898:	2100      	movne	r1, #0
 801689a:	4630      	mov	r0, r6
 801689c:	f7ff ffb3 	bl	8016806 <pkt_cursor_advance>
		if (c_op->buf == NULL) {
 80168a0:	6973      	ldr	r3, [r6, #20]
 80168a2:	b91b      	cbnz	r3, 80168ac <net_pkt_cursor_operate+0x3c>
		return -ENOBUFS;
 80168a4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 80168a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (write && !net_pkt_is_being_overwritten(pkt)) {
 80168ac:	69b0      	ldr	r0, [r6, #24]
 80168ae:	689c      	ldr	r4, [r3, #8]
 80168b0:	1b04      	subs	r4, r0, r4
 80168b2:	f1b8 0f00 	cmp.w	r8, #0
 80168b6:	d02d      	beq.n	8016914 <net_pkt_cursor_operate+0xa4>
 80168b8:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
 80168bc:	07d2      	lsls	r2, r2, #31
 80168be:	d429      	bmi.n	8016914 <net_pkt_cursor_operate+0xa4>
			d_len = c_op->buf->size - (c_op->pos - c_op->buf->data);
 80168c0:	89db      	ldrh	r3, [r3, #14]
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
 80168c2:	1b1c      	subs	r4, r3, r4
		if (!d_len) {
 80168c4:	2c00      	cmp	r4, #0
 80168c6:	d0ed      	beq.n	80168a4 <net_pkt_cursor_operate+0x34>
		if (length < d_len) {
 80168c8:	42ac      	cmp	r4, r5
 80168ca:	bf28      	it	cs
 80168cc:	462c      	movcs	r4, r5
		if (copy) {
 80168ce:	f1b9 0f00 	cmp.w	r9, #0
 80168d2:	d023      	beq.n	801691c <net_pkt_cursor_operate+0xac>
			memcpy(write ? c_op->pos : data,
 80168d4:	f1b8 0f00 	cmp.w	r8, #0
 80168d8:	d11e      	bne.n	8016918 <net_pkt_cursor_operate+0xa8>
 80168da:	4601      	mov	r1, r0
 80168dc:	4638      	mov	r0, r7
 80168de:	4622      	mov	r2, r4
 80168e0:	f7ee f81d 	bl	800491e <memcpy>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
 80168e4:	f1b8 0f00 	cmp.w	r8, #0
 80168e8:	d008      	beq.n	80168fc <net_pkt_cursor_operate+0x8c>
 80168ea:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
 80168ee:	07db      	lsls	r3, r3, #31
 80168f0:	d404      	bmi.n	80168fc <net_pkt_cursor_operate+0x8c>
			net_buf_add(c_op->buf, len);
 80168f2:	6970      	ldr	r0, [r6, #20]
 80168f4:	4621      	mov	r1, r4
 80168f6:	3008      	adds	r0, #8
 80168f8:	f7ff f825 	bl	8015946 <net_buf_simple_add>
		pkt_cursor_update(pkt, len, write);
 80168fc:	4642      	mov	r2, r8
 80168fe:	4621      	mov	r1, r4
 8016900:	4630      	mov	r0, r6
 8016902:	f7ff ff93 	bl	801682c <pkt_cursor_update>
		if (copy && data) {
 8016906:	f1b9 0f00 	cmp.w	r9, #0
 801690a:	d001      	beq.n	8016910 <net_pkt_cursor_operate+0xa0>
 801690c:	b107      	cbz	r7, 8016910 <net_pkt_cursor_operate+0xa0>
			data = (u8_t *) data + len;
 801690e:	4427      	add	r7, r4
		length -= len;
 8016910:	1b2d      	subs	r5, r5, r4
 8016912:	e7b5      	b.n	8016880 <net_pkt_cursor_operate+0x10>
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
 8016914:	899b      	ldrh	r3, [r3, #12]
 8016916:	e7d4      	b.n	80168c2 <net_pkt_cursor_operate+0x52>
 8016918:	4639      	mov	r1, r7
 801691a:	e7e0      	b.n	80168de <net_pkt_cursor_operate+0x6e>
		} else if (data) {
 801691c:	2f00      	cmp	r7, #0
 801691e:	d0e1      	beq.n	80168e4 <net_pkt_cursor_operate+0x74>
__ssp_bos_icheck3(memset, void *, int)
 8016920:	4622      	mov	r2, r4
 8016922:	6839      	ldr	r1, [r7, #0]
 8016924:	f7ee f823 	bl	800496e <memset>
 8016928:	e7dc      	b.n	80168e4 <net_pkt_cursor_operate+0x74>
	if (length) {
 801692a:	2d00      	cmp	r5, #0
 801692c:	d0ac      	beq.n	8016888 <net_pkt_cursor_operate+0x18>
 801692e:	e7b9      	b.n	80168a4 <net_pkt_cursor_operate+0x34>

08016930 <net_pkt_get_reserve_data>:
{
 8016930:	b538      	push	{r3, r4, r5, lr}
 8016932:	4604      	mov	r4, r0
 8016934:	460d      	mov	r5, r1
	if (k_is_in_isr()) {
 8016936:	f002 f83a 	bl	80189ae <k_is_in_isr>
 801693a:	b128      	cbz	r0, 8016948 <net_pkt_get_reserve_data+0x18>
		frag = net_buf_alloc(pool, K_NO_WAIT);
 801693c:	2100      	movs	r1, #0
		frag = net_buf_alloc(pool, timeout);
 801693e:	4620      	mov	r0, r4
}
 8016940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		frag = net_buf_alloc(pool, timeout);
 8016944:	f7fe bfe9 	b.w	801591a <net_buf_alloc_fixed>
 8016948:	4629      	mov	r1, r5
 801694a:	e7f8      	b.n	801693e <net_pkt_get_reserve_data+0xe>

0801694c <net_pkt_ref>:
{
 801694c:	b510      	push	{r4, lr}
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
 801694e:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8016952:	b1a8      	cbz	r0, 8016980 <net_pkt_ref+0x34>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8016954:	f3bf 8f5b 	dmb	ish
 8016958:	681a      	ldr	r2, [r3, #0]
 801695a:	f3bf 8f5b 	dmb	ish
		if (!ref) {
 801695e:	b17a      	cbz	r2, 8016980 <net_pkt_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8016960:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref + 1));
 8016964:	1c51      	adds	r1, r2, #1
 8016966:	e853 4f00 	ldrex	r4, [r3]
 801696a:	4294      	cmp	r4, r2
 801696c:	d104      	bne.n	8016978 <net_pkt_ref+0x2c>
 801696e:	e843 1c00 	strex	ip, r1, [r3]
 8016972:	f1bc 0f00 	cmp.w	ip, #0
 8016976:	d1f6      	bne.n	8016966 <net_pkt_ref+0x1a>
 8016978:	f3bf 8f5b 	dmb	ish
 801697c:	d1e9      	bne.n	8016952 <net_pkt_ref+0x6>
}
 801697e:	bd10      	pop	{r4, pc}
			return NULL;
 8016980:	2000      	movs	r0, #0
 8016982:	e7fc      	b.n	801697e <net_pkt_ref+0x32>

08016984 <net_pkt_frag_unref>:
	if (!frag) {
 8016984:	b108      	cbz	r0, 801698a <net_pkt_frag_unref+0x6>
	net_buf_unref(frag);
 8016986:	f7f3 be25 	b.w	800a5d4 <net_buf_unref>
}
 801698a:	4770      	bx	lr

0801698c <net_pkt_unref>:
{
 801698c:	b507      	push	{r0, r1, r2, lr}
 801698e:	9001      	str	r0, [sp, #4]
	if (!pkt) {
 8016990:	b318      	cbz	r0, 80169da <net_pkt_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8016992:	9b01      	ldr	r3, [sp, #4]
 8016994:	f3bf 8f5b 	dmb	ish
 8016998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801699a:	f3bf 8f5b 	dmb	ish
		if (!ref) {
 801699e:	b1e3      	cbz	r3, 80169da <net_pkt_unref+0x4e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80169a0:	9a01      	ldr	r2, [sp, #4]
 80169a2:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref - 1));
 80169a6:	1e59      	subs	r1, r3, #1
 80169a8:	3224      	adds	r2, #36	; 0x24
 80169aa:	e852 0f00 	ldrex	r0, [r2]
 80169ae:	4298      	cmp	r0, r3
 80169b0:	d104      	bne.n	80169bc <net_pkt_unref+0x30>
 80169b2:	e842 1c00 	strex	ip, r1, [r2]
 80169b6:	f1bc 0f00 	cmp.w	ip, #0
 80169ba:	d1f6      	bne.n	80169aa <net_pkt_unref+0x1e>
 80169bc:	f3bf 8f5b 	dmb	ish
 80169c0:	d1e7      	bne.n	8016992 <net_pkt_unref+0x6>
	if (ref > 1) {
 80169c2:	2b01      	cmp	r3, #1
 80169c4:	dc09      	bgt.n	80169da <net_pkt_unref+0x4e>
	if (pkt->frags) {
 80169c6:	9b01      	ldr	r3, [sp, #4]
 80169c8:	6918      	ldr	r0, [r3, #16]
 80169ca:	b108      	cbz	r0, 80169d0 <net_pkt_unref+0x44>
		net_pkt_frag_unref(pkt->frags);
 80169cc:	f7ff ffda 	bl	8016984 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
 80169d0:	9b01      	ldr	r3, [sp, #4]
 80169d2:	a901      	add	r1, sp, #4
 80169d4:	68d8      	ldr	r0, [r3, #12]
 80169d6:	f7fb fa85 	bl	8011ee4 <k_mem_slab_free>
}
 80169da:	b003      	add	sp, #12
 80169dc:	f85d fb04 	ldr.w	pc, [sp], #4

080169e0 <net_pkt_frag_insert>:
{
 80169e0:	b538      	push	{r3, r4, r5, lr}
 80169e2:	4604      	mov	r4, r0
	net_buf_frag_last(frag)->frags = pkt->frags;
 80169e4:	4608      	mov	r0, r1
{
 80169e6:	460d      	mov	r5, r1
	net_buf_frag_last(frag)->frags = pkt->frags;
 80169e8:	f7fe ff9d 	bl	8015926 <net_buf_frag_last>
 80169ec:	6923      	ldr	r3, [r4, #16]
 80169ee:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
 80169f0:	6125      	str	r5, [r4, #16]
}
 80169f2:	bd38      	pop	{r3, r4, r5, pc}

080169f4 <net_pkt_available_buffer>:
{
 80169f4:	b508      	push	{r3, lr}
	if (!pkt) {
 80169f6:	b130      	cbz	r0, 8016a06 <net_pkt_available_buffer+0x12>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
 80169f8:	6900      	ldr	r0, [r0, #16]
	size_t size = 0;
 80169fa:	2100      	movs	r1, #0
	struct net_buf *buf = pkt->buffer;
 80169fc:	4603      	mov	r3, r0
	while (buf) {
 80169fe:	b91b      	cbnz	r3, 8016a08 <net_pkt_available_buffer+0x14>
	return net_buf_frags_len(pkt->frags);
 8016a00:	f7ff feea 	bl	80167d8 <net_buf_frags_len>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
 8016a04:	1a08      	subs	r0, r1, r0
}
 8016a06:	bd08      	pop	{r3, pc}
		size += buf->size;
 8016a08:	89da      	ldrh	r2, [r3, #14]
		buf = buf->frags;
 8016a0a:	681b      	ldr	r3, [r3, #0]
		size += buf->size;
 8016a0c:	4411      	add	r1, r2
		buf = buf->frags;
 8016a0e:	e7f6      	b.n	80169fe <net_pkt_available_buffer+0xa>

08016a10 <net_pkt_available_payload_buffer>:
{
 8016a10:	b538      	push	{r3, r4, r5, lr}
	if (!pkt) {
 8016a12:	4605      	mov	r5, r0
 8016a14:	b1b8      	cbz	r0, 8016a46 <net_pkt_available_payload_buffer+0x36>
	return pkt->family;
 8016a16:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	hdr_len = pkt_estimate_headers_length(pkt, net_pkt_family(pkt), proto);
 8016a1a:	f3c3 0442 	ubfx	r4, r3, #1, #3
	if (family == AF_UNSPEC) {
 8016a1e:	b134      	cbz	r4, 8016a2e <net_pkt_available_payload_buffer+0x1e>
		hdr_len += NET_IPV6H_LEN;
 8016a20:	2c02      	cmp	r4, #2
 8016a22:	bf14      	ite	ne
 8016a24:	2400      	movne	r4, #0
 8016a26:	2428      	moveq	r4, #40	; 0x28
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 8016a28:	2911      	cmp	r1, #17
 8016a2a:	d10d      	bne.n	8016a48 <net_pkt_available_payload_buffer+0x38>
		hdr_len += NET_UDPH_LEN;
 8016a2c:	3408      	adds	r4, #8
	return net_buf_frags_len(pkt->frags);
 8016a2e:	6928      	ldr	r0, [r5, #16]
 8016a30:	f7ff fed2 	bl	80167d8 <net_buf_frags_len>
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
 8016a34:	42a0      	cmp	r0, r4
 8016a36:	bf38      	it	cc
 8016a38:	1a24      	subcc	r4, r4, r0
	len = net_pkt_available_buffer(pkt) - hdr_len;
 8016a3a:	4628      	mov	r0, r5
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
 8016a3c:	bf28      	it	cs
 8016a3e:	2400      	movcs	r4, #0
	len = net_pkt_available_buffer(pkt) - hdr_len;
 8016a40:	f7ff ffd8 	bl	80169f4 <net_pkt_available_buffer>
 8016a44:	1b00      	subs	r0, r0, r4
}
 8016a46:	bd38      	pop	{r3, r4, r5, pc}
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
 8016a48:	2901      	cmp	r1, #1
 8016a4a:	d001      	beq.n	8016a50 <net_pkt_available_payload_buffer+0x40>
 8016a4c:	293a      	cmp	r1, #58	; 0x3a
 8016a4e:	d1ee      	bne.n	8016a2e <net_pkt_available_payload_buffer+0x1e>
		hdr_len += NET_ICMPH_LEN;
 8016a50:	3404      	adds	r4, #4
 8016a52:	e7ec      	b.n	8016a2e <net_pkt_available_payload_buffer+0x1e>

08016a54 <net_pkt_trim_buffer>:
{
 8016a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a56:	4605      	mov	r5, r0
	buf = pkt->buffer;
 8016a58:	6900      	ldr	r0, [r0, #16]
			buf->frags = NULL;
 8016a5a:	2700      	movs	r7, #0
	prev = buf;
 8016a5c:	4604      	mov	r4, r0
	while (buf) {
 8016a5e:	b900      	cbnz	r0, 8016a62 <net_pkt_trim_buffer+0xe>
}
 8016a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!buf->len) {
 8016a62:	8983      	ldrh	r3, [r0, #12]
		struct net_buf *next = buf->frags;
 8016a64:	6806      	ldr	r6, [r0, #0]
		if (!buf->len) {
 8016a66:	b93b      	cbnz	r3, 8016a78 <net_pkt_trim_buffer+0x24>
			if (buf == pkt->buffer) {
 8016a68:	692b      	ldr	r3, [r5, #16]
 8016a6a:	4283      	cmp	r3, r0
 8016a6c:	d107      	bne.n	8016a7e <net_pkt_trim_buffer+0x2a>
				pkt->buffer = next;
 8016a6e:	612e      	str	r6, [r5, #16]
			buf->frags = NULL;
 8016a70:	6007      	str	r7, [r0, #0]
			net_buf_unref(buf);
 8016a72:	f7f3 fdaf 	bl	800a5d4 <net_buf_unref>
 8016a76:	4620      	mov	r0, r4
 8016a78:	4604      	mov	r4, r0
 8016a7a:	4630      	mov	r0, r6
 8016a7c:	e7ef      	b.n	8016a5e <net_pkt_trim_buffer+0xa>
			} else if (buf == prev->frags) {
 8016a7e:	6823      	ldr	r3, [r4, #0]
 8016a80:	4283      	cmp	r3, r0
				prev->frags = next;
 8016a82:	bf08      	it	eq
 8016a84:	6026      	streq	r6, [r4, #0]
 8016a86:	e7f3      	b.n	8016a70 <net_pkt_trim_buffer+0x1c>

08016a88 <net_pkt_cursor_init>:
	pkt->cursor.buf = pkt->buffer;
 8016a88:	6903      	ldr	r3, [r0, #16]
 8016a8a:	6143      	str	r3, [r0, #20]
	if (pkt->cursor.buf) {
 8016a8c:	b103      	cbz	r3, 8016a90 <net_pkt_cursor_init+0x8>
		pkt->cursor.pos = pkt->cursor.buf->data;
 8016a8e:	689b      	ldr	r3, [r3, #8]
 8016a90:	6183      	str	r3, [r0, #24]
}
 8016a92:	4770      	bx	lr

08016a94 <pkt_alloc>:
{
 8016a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a96:	460d      	mov	r5, r1
 8016a98:	4604      	mov	r4, r0
	if (k_is_in_isr()) {
 8016a9a:	f001 ff88 	bl	80189ae <k_is_in_isr>
 8016a9e:	2800      	cmp	r0, #0
	ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
 8016aa0:	a901      	add	r1, sp, #4
 8016aa2:	bf0c      	ite	eq
 8016aa4:	462a      	moveq	r2, r5
 8016aa6:	2200      	movne	r2, #0
 8016aa8:	4620      	mov	r0, r4
 8016aaa:	f7fb f9ef 	bl	8011e8c <k_mem_slab_alloc>
	if (ret) {
 8016aae:	4601      	mov	r1, r0
 8016ab0:	b978      	cbnz	r0, 8016ad2 <pkt_alloc+0x3e>
 8016ab2:	2244      	movs	r2, #68	; 0x44
 8016ab4:	9801      	ldr	r0, [sp, #4]
 8016ab6:	f7ed ff5a 	bl	800496e <memset>
	pkt->atomic_ref = ATOMIC_INIT(1);
 8016aba:	9801      	ldr	r0, [sp, #4]
 8016abc:	2301      	movs	r3, #1
 8016abe:	6243      	str	r3, [r0, #36]	; 0x24
	pkt->ipv6_next_hdr = next_hdr;
 8016ac0:	23ff      	movs	r3, #255	; 0xff
	pkt->slab = slab;
 8016ac2:	60c4      	str	r4, [r0, #12]
 8016ac4:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
	net_pkt_cursor_init(pkt);
 8016ac8:	f7ff ffde 	bl	8016a88 <net_pkt_cursor_init>
	return pkt;
 8016acc:	9801      	ldr	r0, [sp, #4]
}
 8016ace:	b003      	add	sp, #12
 8016ad0:	bd30      	pop	{r4, r5, pc}
		return NULL;
 8016ad2:	2000      	movs	r0, #0
 8016ad4:	e7fb      	b.n	8016ace <pkt_alloc+0x3a>

08016ad6 <pkt_alloc_on_iface>:
{
 8016ad6:	b510      	push	{r4, lr}
 8016ad8:	460c      	mov	r4, r1
	pkt = pkt_alloc(slab, timeout);
 8016ada:	4611      	mov	r1, r2
 8016adc:	f7ff ffda 	bl	8016a94 <pkt_alloc>
	if (pkt) {
 8016ae0:	b148      	cbz	r0, 8016af6 <pkt_alloc_on_iface+0x20>
	pkt->iface = iface;
 8016ae2:	6204      	str	r4, [r0, #32]
	if (iface) {
 8016ae4:	b13c      	cbz	r4, 8016af6 <pkt_alloc_on_iface+0x20>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
 8016ae6:	6823      	ldr	r3, [r4, #0]
 8016ae8:	7d5b      	ldrb	r3, [r3, #21]
 8016aea:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
 8016aee:	6823      	ldr	r3, [r4, #0]
 8016af0:	7d5b      	ldrb	r3, [r3, #21]
 8016af2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
}
 8016af6:	bd10      	pop	{r4, pc}

08016af8 <net_pkt_append_buffer>:
	if (!pkt->buffer) {
 8016af8:	6903      	ldr	r3, [r0, #16]
{
 8016afa:	b510      	push	{r4, lr}
 8016afc:	4602      	mov	r2, r0
 8016afe:	460c      	mov	r4, r1
	if (!pkt->buffer) {
 8016b00:	b923      	cbnz	r3, 8016b0c <net_pkt_append_buffer+0x14>
		pkt->buffer = buffer;
 8016b02:	6111      	str	r1, [r2, #16]
}
 8016b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_pkt_cursor_init(pkt);
 8016b08:	f7ff bfbe 	b.w	8016a88 <net_pkt_cursor_init>
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f7fe ff0a 	bl	8015926 <net_buf_frag_last>
 8016b12:	4621      	mov	r1, r4
}
 8016b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
 8016b18:	f7fe bf0a 	b.w	8015930 <net_buf_frag_insert>

08016b1c <pkt_alloc_with_buffer>:
{
 8016b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b20:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016b22:	4604      	mov	r4, r0
 8016b24:	4689      	mov	r9, r1
 8016b26:	4617      	mov	r7, r2
 8016b28:	4698      	mov	r8, r3
	u32_t alloc_start = k_uptime_get_32();
 8016b2a:	f7ff fe9d 	bl	8016868 <k_uptime_get_32>
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
 8016b2e:	462a      	mov	r2, r5
	u32_t alloc_start = k_uptime_get_32();
 8016b30:	4606      	mov	r6, r0
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
 8016b32:	4649      	mov	r1, r9
 8016b34:	4620      	mov	r0, r4
 8016b36:	f7ff ffce 	bl	8016ad6 <pkt_alloc_on_iface>
	if (!pkt) {
 8016b3a:	4604      	mov	r4, r0
 8016b3c:	b1d8      	cbz	r0, 8016b76 <pkt_alloc_with_buffer+0x5a>
	pkt->family = family;
 8016b3e:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
	if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
 8016b42:	1c6b      	adds	r3, r5, #1
 8016b44:	f368 0243 	bfi	r2, r8, #1, #3
 8016b48:	2b01      	cmp	r3, #1
 8016b4a:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
 8016b4e:	d906      	bls.n	8016b5e <pkt_alloc_with_buffer+0x42>
		u32_t diff = k_uptime_get_32() - alloc_start;
 8016b50:	f7ff fe8a 	bl	8016868 <k_uptime_get_32>
 8016b54:	1b80      	subs	r0, r0, r6
		timeout -= MIN(timeout, diff);
 8016b56:	42a8      	cmp	r0, r5
 8016b58:	bf94      	ite	ls
 8016b5a:	1a2d      	subls	r5, r5, r0
 8016b5c:	1b6d      	subhi	r5, r5, r5
	ret = net_pkt_alloc_buffer(pkt, size, proto, timeout);
 8016b5e:	462b      	mov	r3, r5
 8016b60:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8016b64:	4639      	mov	r1, r7
 8016b66:	4620      	mov	r0, r4
 8016b68:	f7f5 ff26 	bl	800c9b8 <net_pkt_alloc_buffer>
	if (ret) {
 8016b6c:	b118      	cbz	r0, 8016b76 <pkt_alloc_with_buffer+0x5a>
		net_pkt_unref(pkt);
 8016b6e:	4620      	mov	r0, r4
 8016b70:	f7ff ff0c 	bl	801698c <net_pkt_unref>
		return NULL;
 8016b74:	2400      	movs	r4, #0
}
 8016b76:	4620      	mov	r0, r4
 8016b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016b7c <net_pkt_skip>:
{
 8016b7c:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
 8016b7e:	2301      	movs	r3, #1
 8016b80:	9300      	str	r3, [sp, #0]
 8016b82:	2300      	movs	r3, #0
 8016b84:	460a      	mov	r2, r1
 8016b86:	4619      	mov	r1, r3
 8016b88:	f7ff fe72 	bl	8016870 <net_pkt_cursor_operate>
}
 8016b8c:	b003      	add	sp, #12
 8016b8e:	f85d fb04 	ldr.w	pc, [sp], #4

08016b92 <net_pkt_memset>:
{
 8016b92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
 8016b94:	2301      	movs	r3, #1
{
 8016b96:	9103      	str	r1, [sp, #12]
	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
 8016b98:	9300      	str	r3, [sp, #0]
 8016b9a:	a903      	add	r1, sp, #12
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	f7ff fe67 	bl	8016870 <net_pkt_cursor_operate>
}
 8016ba2:	b005      	add	sp, #20
 8016ba4:	f85d fb04 	ldr.w	pc, [sp], #4

08016ba8 <net_pkt_read>:
{
 8016ba8:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, data, length, true, false);
 8016baa:	2300      	movs	r3, #0
 8016bac:	9300      	str	r3, [sp, #0]
 8016bae:	2301      	movs	r3, #1
 8016bb0:	f7ff fe5e 	bl	8016870 <net_pkt_cursor_operate>
}
 8016bb4:	b003      	add	sp, #12
 8016bb6:	f85d fb04 	ldr.w	pc, [sp], #4

08016bba <net_pkt_read_be32>:
{
 8016bba:	b513      	push	{r0, r1, r4, lr}
	ret = net_pkt_read(pkt, d32, sizeof(u32_t));
 8016bbc:	2204      	movs	r2, #4
{
 8016bbe:	460c      	mov	r4, r1
	ret = net_pkt_read(pkt, d32, sizeof(u32_t));
 8016bc0:	eb0d 0102 	add.w	r1, sp, r2
 8016bc4:	f7ff fff0 	bl	8016ba8 <net_pkt_read>
	*data = d32[0] << 24 | d32[1] << 16 | d32[2] << 8 | d32[3];
 8016bc8:	9b01      	ldr	r3, [sp, #4]
 8016bca:	ba1b      	rev	r3, r3
 8016bcc:	6023      	str	r3, [r4, #0]
}
 8016bce:	b002      	add	sp, #8
 8016bd0:	bd10      	pop	{r4, pc}

08016bd2 <net_pkt_copy>:
{
 8016bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bd4:	4606      	mov	r6, r0
 8016bd6:	460f      	mov	r7, r1
 8016bd8:	4614      	mov	r4, r2
	while (c_dst->buf && c_src->buf && length) {
 8016bda:	6973      	ldr	r3, [r6, #20]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d041      	beq.n	8016c64 <net_pkt_copy+0x92>
 8016be0:	697b      	ldr	r3, [r7, #20]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d03e      	beq.n	8016c64 <net_pkt_copy+0x92>
 8016be6:	b90c      	cbnz	r4, 8016bec <net_pkt_copy+0x1a>
	return 0;
 8016be8:	4620      	mov	r0, r4
 8016bea:	e021      	b.n	8016c30 <net_pkt_copy+0x5e>
		pkt_cursor_advance(pkt_dst, true);
 8016bec:	2101      	movs	r1, #1
 8016bee:	4630      	mov	r0, r6
 8016bf0:	f7ff fe09 	bl	8016806 <pkt_cursor_advance>
		pkt_cursor_advance(pkt_src, false);
 8016bf4:	2100      	movs	r1, #0
 8016bf6:	4638      	mov	r0, r7
 8016bf8:	f7ff fe05 	bl	8016806 <pkt_cursor_advance>
		if (!c_dst->buf || !c_src->buf) {
 8016bfc:	6972      	ldr	r2, [r6, #20]
 8016bfe:	b1aa      	cbz	r2, 8016c2c <net_pkt_copy+0x5a>
 8016c00:	697b      	ldr	r3, [r7, #20]
 8016c02:	b19b      	cbz	r3, 8016c2c <net_pkt_copy+0x5a>
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
 8016c04:	899d      	ldrh	r5, [r3, #12]
 8016c06:	69b9      	ldr	r1, [r7, #24]
 8016c08:	689b      	ldr	r3, [r3, #8]
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
 8016c0a:	69b0      	ldr	r0, [r6, #24]
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
 8016c0c:	1acb      	subs	r3, r1, r3
 8016c0e:	1aed      	subs	r5, r5, r3
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
 8016c10:	89d3      	ldrh	r3, [r2, #14]
 8016c12:	6892      	ldr	r2, [r2, #8]
		if (length < s_len && length < d_len) {
 8016c14:	42a5      	cmp	r5, r4
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
 8016c16:	eba0 0202 	sub.w	r2, r0, r2
 8016c1a:	eba3 0302 	sub.w	r3, r3, r2
		if (length < s_len && length < d_len) {
 8016c1e:	d901      	bls.n	8016c24 <net_pkt_copy+0x52>
 8016c20:	42a3      	cmp	r3, r4
 8016c22:	d806      	bhi.n	8016c32 <net_pkt_copy+0x60>
			if (d_len < s_len) {
 8016c24:	429d      	cmp	r5, r3
 8016c26:	bf28      	it	cs
 8016c28:	461d      	movcs	r5, r3
		if (!len) {
 8016c2a:	b91d      	cbnz	r5, 8016c34 <net_pkt_copy+0x62>
		return -ENOBUFS;
 8016c2c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 8016c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c32:	4625      	mov	r5, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8016c34:	462a      	mov	r2, r5
 8016c36:	f7ed fe72 	bl	800491e <memcpy>
	return pkt->overwrite;
 8016c3a:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
		if (!net_pkt_is_being_overwritten(pkt_dst)) {
 8016c3e:	07db      	lsls	r3, r3, #31
 8016c40:	d404      	bmi.n	8016c4c <net_pkt_copy+0x7a>
			net_buf_add(c_dst->buf, len);
 8016c42:	6970      	ldr	r0, [r6, #20]
 8016c44:	4629      	mov	r1, r5
 8016c46:	3008      	adds	r0, #8
 8016c48:	f7fe fe7d 	bl	8015946 <net_buf_simple_add>
		pkt_cursor_update(pkt_dst, len, true);
 8016c4c:	2201      	movs	r2, #1
 8016c4e:	4629      	mov	r1, r5
 8016c50:	4630      	mov	r0, r6
 8016c52:	f7ff fdeb 	bl	801682c <pkt_cursor_update>
		pkt_cursor_update(pkt_src, len, false);
 8016c56:	2200      	movs	r2, #0
 8016c58:	4629      	mov	r1, r5
 8016c5a:	4638      	mov	r0, r7
 8016c5c:	f7ff fde6 	bl	801682c <pkt_cursor_update>
		length -= len;
 8016c60:	1b64      	subs	r4, r4, r5
 8016c62:	e7ba      	b.n	8016bda <net_pkt_copy+0x8>
	if (length) {
 8016c64:	2c00      	cmp	r4, #0
 8016c66:	d0bf      	beq.n	8016be8 <net_pkt_copy+0x16>
 8016c68:	e7e0      	b.n	8016c2c <net_pkt_copy+0x5a>

08016c6a <net_pkt_remaining_data>:
	if (!pkt || !pkt->cursor.buf || !pkt->cursor.pos) {
 8016c6a:	b170      	cbz	r0, 8016c8a <net_pkt_remaining_data+0x20>
 8016c6c:	6943      	ldr	r3, [r0, #20]
 8016c6e:	b15b      	cbz	r3, 8016c88 <net_pkt_remaining_data+0x1e>
 8016c70:	6980      	ldr	r0, [r0, #24]
 8016c72:	b150      	cbz	r0, 8016c8a <net_pkt_remaining_data+0x20>
	data_length = buf->len - (pkt->cursor.pos - buf->data);
 8016c74:	6899      	ldr	r1, [r3, #8]
 8016c76:	899a      	ldrh	r2, [r3, #12]
 8016c78:	1a40      	subs	r0, r0, r1
 8016c7a:	1a10      	subs	r0, r2, r0
		buf = buf->frags;
 8016c7c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 8016c7e:	b903      	cbnz	r3, 8016c82 <net_pkt_remaining_data+0x18>
 8016c80:	4770      	bx	lr
		data_length += buf->len;
 8016c82:	899a      	ldrh	r2, [r3, #12]
 8016c84:	4410      	add	r0, r2
 8016c86:	e7f9      	b.n	8016c7c <net_pkt_remaining_data+0x12>
		return 0;
 8016c88:	4618      	mov	r0, r3
}
 8016c8a:	4770      	bx	lr

08016c8c <net_pkt_update_length>:
	for (buf = pkt->buffer; buf; buf = buf->frags) {
 8016c8c:	6903      	ldr	r3, [r0, #16]
 8016c8e:	b92b      	cbnz	r3, 8016c9c <net_pkt_update_length+0x10>
	return !length ? 0 : -EINVAL;
 8016c90:	2900      	cmp	r1, #0
}
 8016c92:	bf14      	ite	ne
 8016c94:	f06f 0015 	mvnne.w	r0, #21
 8016c98:	2000      	moveq	r0, #0
 8016c9a:	4770      	bx	lr
		if (buf->len < length) {
 8016c9c:	899a      	ldrh	r2, [r3, #12]
 8016c9e:	428a      	cmp	r2, r1
			buf->len = length;
 8016ca0:	bf2a      	itet	cs
 8016ca2:	8199      	strhcs	r1, [r3, #12]
			length -= buf->len;
 8016ca4:	1a89      	subcc	r1, r1, r2
			length = 0;
 8016ca6:	2100      	movcs	r1, #0
	for (buf = pkt->buffer; buf; buf = buf->frags) {
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	e7f0      	b.n	8016c8e <net_pkt_update_length+0x2>

08016cac <net_pkt_get_current_offset>:
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
 8016cac:	6941      	ldr	r1, [r0, #20]
{
 8016cae:	b510      	push	{r4, lr}
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
 8016cb0:	b179      	cbz	r1, 8016cd2 <net_pkt_get_current_offset+0x26>
 8016cb2:	6983      	ldr	r3, [r0, #24]
 8016cb4:	b17b      	cbz	r3, 8016cd6 <net_pkt_get_current_offset+0x2a>
	struct net_buf *buf = pkt->buffer;
 8016cb6:	6904      	ldr	r4, [r0, #16]
	offset = 0U;
 8016cb8:	2200      	movs	r2, #0
	while (buf != pkt->cursor.buf) {
 8016cba:	42a1      	cmp	r1, r4
 8016cbc:	d104      	bne.n	8016cc8 <net_pkt_get_current_offset+0x1c>
	offset += pkt->cursor.pos - buf->data;
 8016cbe:	6888      	ldr	r0, [r1, #8]
 8016cc0:	1a1b      	subs	r3, r3, r0
 8016cc2:	4413      	add	r3, r2
 8016cc4:	b298      	uxth	r0, r3
}
 8016cc6:	bd10      	pop	{r4, pc}
		offset += buf->len;
 8016cc8:	89a0      	ldrh	r0, [r4, #12]
		buf = buf->frags;
 8016cca:	6824      	ldr	r4, [r4, #0]
		offset += buf->len;
 8016ccc:	4402      	add	r2, r0
 8016cce:	b292      	uxth	r2, r2
		buf = buf->frags;
 8016cd0:	e7f3      	b.n	8016cba <net_pkt_get_current_offset+0xe>
		return 0;
 8016cd2:	4608      	mov	r0, r1
 8016cd4:	e7f7      	b.n	8016cc6 <net_pkt_get_current_offset+0x1a>
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	e7f5      	b.n	8016cc6 <net_pkt_get_current_offset+0x1a>

08016cda <net_pkt_clone>:
{
 8016cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016cdc:	460c      	mov	r4, r1
 8016cde:	4605      	mov	r5, r0
	size_t cursor_offset = net_pkt_get_current_offset(pkt);
 8016ce0:	f7ff ffe4 	bl	8016cac <net_pkt_get_current_offset>
 8016ce4:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
 8016ce6:	6928      	ldr	r0, [r5, #16]
 8016ce8:	f7ff fd76 	bl	80167d8 <net_buf_frags_len>
	clone_pkt = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
 8016cec:	2300      	movs	r3, #0
 8016cee:	9400      	str	r4, [sp, #0]
 8016cf0:	4601      	mov	r1, r0
 8016cf2:	461a      	mov	r2, r3
 8016cf4:	6a28      	ldr	r0, [r5, #32]
 8016cf6:	f7f5 ff29 	bl	800cb4c <net_pkt_alloc_with_buffer>
	if (!clone_pkt) {
 8016cfa:	4604      	mov	r4, r0
 8016cfc:	b178      	cbz	r0, 8016d1e <net_pkt_clone+0x44>
	net_pkt_cursor_init(pkt);
 8016cfe:	4628      	mov	r0, r5
 8016d00:	f7ff fec2 	bl	8016a88 <net_pkt_cursor_init>
 8016d04:	6928      	ldr	r0, [r5, #16]
 8016d06:	f7ff fd67 	bl	80167d8 <net_buf_frags_len>
	if (net_pkt_copy(clone_pkt, pkt, net_pkt_get_len(pkt))) {
 8016d0a:	4629      	mov	r1, r5
 8016d0c:	4602      	mov	r2, r0
 8016d0e:	4620      	mov	r0, r4
 8016d10:	f7ff ff5f 	bl	8016bd2 <net_pkt_copy>
 8016d14:	b130      	cbz	r0, 8016d24 <net_pkt_clone+0x4a>
		net_pkt_unref(clone_pkt);
 8016d16:	4620      	mov	r0, r4
 8016d18:	f7ff fe38 	bl	801698c <net_pkt_unref>
		return NULL;
 8016d1c:	2400      	movs	r4, #0
}
 8016d1e:	4620      	mov	r0, r4
 8016d20:	b002      	add	sp, #8
 8016d22:	bd70      	pop	{r4, r5, r6, pc}
	if (clone_pkt->buffer) {
 8016d24:	6923      	ldr	r3, [r4, #16]
 8016d26:	b15b      	cbz	r3, 8016d40 <net_pkt_clone+0x66>
 8016d28:	462a      	mov	r2, r5
 8016d2a:	f852 3f28 	ldr.w	r3, [r2, #40]!
 8016d2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8016d30:	6853      	ldr	r3, [r2, #4]
 8016d32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016d34:	462a      	mov	r2, r5
 8016d36:	f852 3f30 	ldr.w	r3, [r2, #48]!
 8016d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8016d3c:	6853      	ldr	r3, [r2, #4]
 8016d3e:	6363      	str	r3, [r4, #52]	; 0x34
	return pkt->family;
 8016d40:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	pkt->family = family;
 8016d44:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
	return pkt->family;
 8016d48:	f3c3 0342 	ubfx	r3, r3, #1, #3
	pkt->family = family;
 8016d4c:	f363 0243 	bfi	r2, r3, #1, #3
 8016d50:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
	net_pkt_set_context(clone_pkt, net_pkt_context(pkt));
 8016d54:	69eb      	ldr	r3, [r5, #28]
	pkt->context = ctx;
 8016d56:	61e3      	str	r3, [r4, #28]
	net_pkt_set_ip_hdr_len(clone_pkt, net_pkt_ip_hdr_len(pkt));
 8016d58:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
	pkt->ip_hdr_len = len;
 8016d5c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return pkt->family;
 8016d60:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8016d64:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8016d68:	2b02      	cmp	r3, #2
 8016d6a:	d111      	bne.n	8016d90 <net_pkt_clone+0xb6>
		net_pkt_set_ipv6_hop_limit(clone_pkt,
 8016d6c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
	pkt->ipv6_hop_limit = hop_limit;
 8016d70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		net_pkt_set_ipv6_ext_len(clone_pkt, net_pkt_ipv6_ext_len(pkt));
 8016d74:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
	pkt->ipv6_ext_len = len;
 8016d76:	87e3      	strh	r3, [r4, #62]	; 0x3e
		net_pkt_set_ipv6_ext_opt_len(clone_pkt,
 8016d78:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
	pkt->ipv6_ext_opt_len = len;
 8016d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		net_pkt_set_ipv6_hdr_prev(clone_pkt,
 8016d80:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
	pkt->ipv6_prev_hdr_start = offset;
 8016d84:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		net_pkt_set_ipv6_next_hdr(clone_pkt,
 8016d88:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
	pkt->ipv6_next_hdr = next_hdr;
 8016d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	net_pkt_cursor_init(clone_pkt);
 8016d90:	4620      	mov	r0, r4
 8016d92:	f7ff fe79 	bl	8016a88 <net_pkt_cursor_init>
	if (cursor_offset) {
 8016d96:	2e00      	cmp	r6, #0
 8016d98:	d0c1      	beq.n	8016d1e <net_pkt_clone+0x44>
	pkt->overwrite = overwrite;
 8016d9a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8016d9e:	f043 0301 	orr.w	r3, r3, #1
 8016da2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		net_pkt_skip(clone_pkt, cursor_offset);
 8016da6:	4631      	mov	r1, r6
 8016da8:	f7ff fee8 	bl	8016b7c <net_pkt_skip>
 8016dac:	e7b7      	b.n	8016d1e <net_pkt_clone+0x44>

08016dae <net_pkt_is_contiguous>:
{
 8016dae:	b538      	push	{r3, r4, r5, lr}
 8016db0:	460d      	mov	r5, r1
	return pkt->overwrite;
 8016db2:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
	pkt_cursor_advance(pkt, !net_pkt_is_being_overwritten(pkt));
 8016db6:	43c9      	mvns	r1, r1
 8016db8:	f001 0101 	and.w	r1, r1, #1
{
 8016dbc:	4604      	mov	r4, r0
	pkt_cursor_advance(pkt, !net_pkt_is_being_overwritten(pkt));
 8016dbe:	f7ff fd22 	bl	8016806 <pkt_cursor_advance>
	if (pkt->cursor.buf && pkt->cursor.pos) {
 8016dc2:	6943      	ldr	r3, [r0, #20]
 8016dc4:	b17b      	cbz	r3, 8016de6 <net_pkt_is_contiguous+0x38>
 8016dc6:	6980      	ldr	r0, [r0, #24]
 8016dc8:	b160      	cbz	r0, 8016de4 <net_pkt_is_contiguous+0x36>
 8016dca:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
			pkt->cursor.buf->len : pkt->cursor.buf->size;
 8016dce:	07d2      	lsls	r2, r2, #31
 8016dd0:	bf4c      	ite	mi
 8016dd2:	899a      	ldrhmi	r2, [r3, #12]
 8016dd4:	89da      	ldrhpl	r2, [r3, #14]
		len -= pkt->cursor.pos - pkt->cursor.buf->data;
 8016dd6:	689b      	ldr	r3, [r3, #8]
 8016dd8:	1ac0      	subs	r0, r0, r3
 8016dda:	1a10      	subs	r0, r2, r0
		if (len >= size) {
 8016ddc:	42a8      	cmp	r0, r5
 8016dde:	bf34      	ite	cc
 8016de0:	2000      	movcc	r0, #0
 8016de2:	2001      	movcs	r0, #1
}
 8016de4:	bd38      	pop	{r3, r4, r5, pc}
	return false;
 8016de6:	4618      	mov	r0, r3
 8016de8:	e7fc      	b.n	8016de4 <net_pkt_is_contiguous+0x36>

08016dea <net_pkt_write>:
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
 8016dea:	6983      	ldr	r3, [r0, #24]
 8016dec:	4299      	cmp	r1, r3
{
 8016dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016df0:	4604      	mov	r4, r0
 8016df2:	460e      	mov	r6, r1
 8016df4:	4615      	mov	r5, r2
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
 8016df6:	d10a      	bne.n	8016e0e <net_pkt_write+0x24>
 8016df8:	4611      	mov	r1, r2
 8016dfa:	f7ff ffd8 	bl	8016dae <net_pkt_is_contiguous>
 8016dfe:	b130      	cbz	r0, 8016e0e <net_pkt_write+0x24>
		return net_pkt_skip(pkt, length);
 8016e00:	4629      	mov	r1, r5
 8016e02:	4620      	mov	r0, r4
}
 8016e04:	b002      	add	sp, #8
 8016e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return net_pkt_skip(pkt, length);
 8016e0a:	f7ff beb7 	b.w	8016b7c <net_pkt_skip>
	return net_pkt_cursor_operate(pkt, (void *)data, length, true, true);
 8016e0e:	2301      	movs	r3, #1
 8016e10:	9300      	str	r3, [sp, #0]
 8016e12:	462a      	mov	r2, r5
 8016e14:	4631      	mov	r1, r6
 8016e16:	4620      	mov	r0, r4
 8016e18:	f7ff fd2a 	bl	8016870 <net_pkt_cursor_operate>
}
 8016e1c:	b002      	add	sp, #8
 8016e1e:	bd70      	pop	{r4, r5, r6, pc}

08016e20 <net_pkt_set_data>:
{
	if (IS_ENABLED(CONFIG_NET_HEADERS_ALWAYS_CONTIGUOUS)) {
		return net_pkt_skip(pkt, access->size);
	}

	return net_pkt_write(pkt, access->data, access->size);
 8016e20:	e9d1 1200 	ldrd	r1, r2, [r1]
 8016e24:	f7ff bfe1 	b.w	8016dea <net_pkt_write>

08016e28 <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
 8016e28:	4770      	bx	lr

08016e2a <k_work_submit_to_queue>:
{
 8016e2a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8016e2c:	f101 0308 	add.w	r3, r1, #8
 8016e30:	f3bf 8f5b 	dmb	ish
 8016e34:	e853 2f00 	ldrex	r2, [r3]
 8016e38:	f042 0c01 	orr.w	ip, r2, #1
 8016e3c:	e843 ce00 	strex	lr, ip, [r3]
 8016e40:	f1be 0f00 	cmp.w	lr, #0
 8016e44:	d1f6      	bne.n	8016e34 <k_work_submit_to_queue+0xa>
 8016e46:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8016e4a:	07d3      	lsls	r3, r2, #31
 8016e4c:	d403      	bmi.n	8016e56 <k_work_submit_to_queue+0x2c>
}
 8016e4e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
 8016e52:	f001 bc37 	b.w	80186c4 <k_queue_append>
}
 8016e56:	f85d fb04 	ldr.w	pc, [sp], #4

08016e5a <net_rx_priority2tc>:
 8016e5a:	f7f5 bee5 	b.w	800cc28 <net_tx_priority2tc>

08016e5e <net_icmpv6_finalize>:
{
 8016e5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8016e60:	2304      	movs	r3, #4
 8016e62:	2200      	movs	r2, #0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 8016e64:	4669      	mov	r1, sp
{
 8016e66:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8016e68:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 8016e6c:	f7f5 fe8a 	bl	800cb84 <net_pkt_get_data>
	if (!icmp_hdr) {
 8016e70:	4605      	mov	r5, r0
 8016e72:	b150      	cbz	r0, 8016e8a <net_icmpv6_finalize+0x2c>
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
 8016e74:	213a      	movs	r1, #58	; 0x3a
 8016e76:	4620      	mov	r0, r4
 8016e78:	f7ff f9ac 	bl	80161d4 <net_calc_chksum>
	return net_pkt_set_data(pkt, &icmp_access);
 8016e7c:	4669      	mov	r1, sp
	icmp_hdr->chksum = net_calc_chksum_icmpv6(pkt);
 8016e7e:	8068      	strh	r0, [r5, #2]
	return net_pkt_set_data(pkt, &icmp_access);
 8016e80:	4620      	mov	r0, r4
 8016e82:	f7ff ffcd 	bl	8016e20 <net_pkt_set_data>
}
 8016e86:	b003      	add	sp, #12
 8016e88:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
 8016e8a:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8016e8e:	e7fa      	b.n	8016e86 <net_icmpv6_finalize+0x28>

08016e90 <net_icmpv6_create>:
{
 8016e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8016e92:	2304      	movs	r3, #4
{
 8016e94:	460f      	mov	r7, r1
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8016e96:	2400      	movs	r4, #0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 8016e98:	4669      	mov	r1, sp
{
 8016e9a:	4605      	mov	r5, r0
 8016e9c:	4616      	mov	r6, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8016e9e:	e9cd 4300 	strd	r4, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 8016ea2:	f7f5 fe6f 	bl	800cb84 <net_pkt_get_data>
	if (!icmp_hdr) {
 8016ea6:	b148      	cbz	r0, 8016ebc <net_icmpv6_create+0x2c>
	icmp_hdr->type   = icmp_type;
 8016ea8:	7007      	strb	r7, [r0, #0]
	icmp_hdr->code   = icmp_code;
 8016eaa:	7046      	strb	r6, [r0, #1]
	icmp_hdr->chksum = 0U;
 8016eac:	7084      	strb	r4, [r0, #2]
 8016eae:	70c4      	strb	r4, [r0, #3]
	return net_pkt_set_data(pkt, &icmp_access);
 8016eb0:	4669      	mov	r1, sp
 8016eb2:	4628      	mov	r0, r5
 8016eb4:	f7ff ffb4 	bl	8016e20 <net_pkt_set_data>
}
 8016eb8:	b003      	add	sp, #12
 8016eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
 8016ebc:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8016ec0:	e7fa      	b.n	8016eb8 <net_icmpv6_create+0x28>

08016ec2 <icmpv6_handle_echo_request>:
{
 8016ec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	payload_len = ntohs(ip_hdr->len) -
 8016ec4:	888b      	ldrh	r3, [r1, #4]
 8016ec6:	021c      	lsls	r4, r3, #8
 8016ec8:	ea44 2413 	orr.w	r4, r4, r3, lsr #8
 8016ecc:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8016ece:	1ae4      	subs	r4, r4, r3
 8016ed0:	3c04      	subs	r4, #4
 8016ed2:	b224      	sxth	r4, r4
	if (payload_len < NET_ICMPV6_UNUSED_LEN) {
 8016ed4:	2c03      	cmp	r4, #3
{
 8016ed6:	4606      	mov	r6, r0
 8016ed8:	460f      	mov	r7, r1
	if (payload_len < NET_ICMPV6_UNUSED_LEN) {
 8016eda:	dc01      	bgt.n	8016ee0 <icmpv6_handle_echo_request+0x1e>
	return NET_DROP;
 8016edc:	2002      	movs	r0, #2
 8016ede:	e03a      	b.n	8016f56 <icmpv6_handle_echo_request+0x94>
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt), payload_len,
 8016ee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016ee4:	9300      	str	r3, [sp, #0]
 8016ee6:	2202      	movs	r2, #2
 8016ee8:	233a      	movs	r3, #58	; 0x3a
 8016eea:	4621      	mov	r1, r4
 8016eec:	6a00      	ldr	r0, [r0, #32]
 8016eee:	f7f5 fe2d 	bl	800cb4c <net_pkt_alloc_with_buffer>
	if (!reply) {
 8016ef2:	4605      	mov	r5, r0
 8016ef4:	2800      	cmp	r0, #0
 8016ef6:	d0f1      	beq.n	8016edc <icmpv6_handle_echo_request+0x1a>
	if (net_ipv6_is_addr_mcast(&ip_hdr->dst)) {
 8016ef8:	7e3b      	ldrb	r3, [r7, #24]
 8016efa:	2bff      	cmp	r3, #255	; 0xff
 8016efc:	f107 0118 	add.w	r1, r7, #24
 8016f00:	d103      	bne.n	8016f0a <icmpv6_handle_echo_request+0x48>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
 8016f02:	6a30      	ldr	r0, [r6, #32]
 8016f04:	f7f4 fd34 	bl	800b970 <net_if_ipv6_select_src_addr>
 8016f08:	4601      	mov	r1, r0
	net_pkt_lladdr_dst(reply)->addr = NULL;
 8016f0a:	2300      	movs	r3, #0
	if (net_ipv6_create(reply, src, &ip_hdr->src)) {
 8016f0c:	f107 0208 	add.w	r2, r7, #8
	net_pkt_lladdr_dst(reply)->addr = NULL;
 8016f10:	632b      	str	r3, [r5, #48]	; 0x30
	net_pkt_lladdr_src(reply)->addr = NULL;
 8016f12:	62ab      	str	r3, [r5, #40]	; 0x28
	if (net_ipv6_create(reply, src, &ip_hdr->src)) {
 8016f14:	4628      	mov	r0, r5
 8016f16:	f000 f952 	bl	80171be <net_ipv6_create>
 8016f1a:	4602      	mov	r2, r0
 8016f1c:	b9e8      	cbnz	r0, 8016f5a <icmpv6_handle_echo_request+0x98>
	if (net_icmpv6_create(reply, NET_ICMPV6_ECHO_REPLY, 0) ||
 8016f1e:	2181      	movs	r1, #129	; 0x81
 8016f20:	4628      	mov	r0, r5
 8016f22:	f7ff ffb5 	bl	8016e90 <net_icmpv6_create>
 8016f26:	b9c0      	cbnz	r0, 8016f5a <icmpv6_handle_echo_request+0x98>
	    net_pkt_copy(reply, pkt, payload_len)) {
 8016f28:	4622      	mov	r2, r4
 8016f2a:	4631      	mov	r1, r6
 8016f2c:	4628      	mov	r0, r5
 8016f2e:	f7ff fe50 	bl	8016bd2 <net_pkt_copy>
	if (net_icmpv6_create(reply, NET_ICMPV6_ECHO_REPLY, 0) ||
 8016f32:	4604      	mov	r4, r0
 8016f34:	b988      	cbnz	r0, 8016f5a <icmpv6_handle_echo_request+0x98>
	net_pkt_cursor_init(reply);
 8016f36:	4628      	mov	r0, r5
 8016f38:	f7ff fda6 	bl	8016a88 <net_pkt_cursor_init>
	net_ipv6_finalize(reply, IPPROTO_ICMPV6);
 8016f3c:	213a      	movs	r1, #58	; 0x3a
 8016f3e:	4628      	mov	r0, r5
 8016f40:	f000 f9a0 	bl	8017284 <net_ipv6_finalize>
	if (net_send_data(reply) < 0) {
 8016f44:	4628      	mov	r0, r5
 8016f46:	f7fe fe0e 	bl	8015b66 <net_send_data>
 8016f4a:	2800      	cmp	r0, #0
 8016f4c:	db05      	blt.n	8016f5a <icmpv6_handle_echo_request+0x98>
	net_pkt_unref(pkt);
 8016f4e:	4630      	mov	r0, r6
 8016f50:	f7ff fd1c 	bl	801698c <net_pkt_unref>
	return NET_OK;
 8016f54:	4620      	mov	r0, r4
}
 8016f56:	b003      	add	sp, #12
 8016f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_pkt_unref(reply);
 8016f5a:	4628      	mov	r0, r5
 8016f5c:	f7ff fd16 	bl	801698c <net_pkt_unref>
 8016f60:	e7bc      	b.n	8016edc <icmpv6_handle_echo_request+0x1a>

08016f62 <net_icmpv6_send_error>:
{
 8016f62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f66:	4605      	mov	r5, r0
 8016f68:	b087      	sub	sp, #28
 8016f6a:	4698      	mov	r8, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 8016f6c:	2400      	movs	r4, #0
 8016f6e:	2328      	movs	r3, #40	; 0x28
{
 8016f70:	460f      	mov	r7, r1
 8016f72:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 8016f74:	e9cd 4302 	strd	r4, r3, [sp, #8]
	net_pkt_cursor_init(orig);
 8016f78:	f7ff fd86 	bl	8016a88 <net_pkt_cursor_init>
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(orig, &ipv6_access);
 8016f7c:	a902      	add	r1, sp, #8
 8016f7e:	4628      	mov	r0, r5
 8016f80:	f7f5 fe00 	bl	800cb84 <net_pkt_get_data>
	if (!ip_hdr) {
 8016f84:	4606      	mov	r6, r0
 8016f86:	2800      	cmp	r0, #0
 8016f88:	f000 808c 	beq.w	80170a4 <net_icmpv6_send_error+0x142>
	if (ip_hdr->nexthdr == IPPROTO_ICMPV6) {
 8016f8c:	7983      	ldrb	r3, [r0, #6]
 8016f8e:	2b3a      	cmp	r3, #58	; 0x3a
 8016f90:	d118      	bne.n	8016fc4 <net_icmpv6_send_error+0x62>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv6_access,
 8016f92:	2304      	movs	r3, #4
	return net_pkt_skip(pkt, access->size);
 8016f94:	9903      	ldr	r1, [sp, #12]
 8016f96:	9404      	str	r4, [sp, #16]
 8016f98:	4628      	mov	r0, r5
 8016f9a:	9305      	str	r3, [sp, #20]
 8016f9c:	f7ff fdee 	bl	8016b7c <net_pkt_skip>
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
 8016fa0:	a904      	add	r1, sp, #16
 8016fa2:	4628      	mov	r0, r5
 8016fa4:	f7f5 fdee 	bl	800cb84 <net_pkt_get_data>
		if (!icmp_hdr || icmp_hdr->code < 128) {
 8016fa8:	b118      	cbz	r0, 8016fb2 <net_icmpv6_send_error+0x50>
 8016faa:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8016fae:	42a3      	cmp	r3, r4
 8016fb0:	db05      	blt.n	8016fbe <net_icmpv6_send_error+0x5c>
			err = -EINVAL;
 8016fb2:	f06f 0615 	mvn.w	r6, #21
}
 8016fb6:	4630      	mov	r0, r6
 8016fb8:	b007      	add	sp, #28
 8016fba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_pkt_cursor_init(orig);
 8016fbe:	4628      	mov	r0, r5
 8016fc0:	f7ff fd62 	bl	8016a88 <net_pkt_cursor_init>
	if (ip_hdr->nexthdr == IPPROTO_UDP) {
 8016fc4:	79b3      	ldrb	r3, [r6, #6]
 8016fc6:	2b11      	cmp	r3, #17
 8016fc8:	d02a      	beq.n	8017020 <net_icmpv6_send_error+0xbe>
	} else if (ip_hdr->nexthdr == IPPROTO_TCP) {
 8016fca:	2b06      	cmp	r3, #6
 8016fcc:	d02a      	beq.n	8017024 <net_icmpv6_send_error+0xc2>
		copy_len = net_pkt_get_len(orig);
 8016fce:	692b      	ldr	r3, [r5, #16]
	size_t bytes = 0;
 8016fd0:	2100      	movs	r1, #0
	while (buf) {
 8016fd2:	bb0b      	cbnz	r3, 8017018 <net_icmpv6_send_error+0xb6>
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
 8016fd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016fd8:	9300      	str	r3, [sp, #0]
 8016fda:	2202      	movs	r2, #2
 8016fdc:	233a      	movs	r3, #58	; 0x3a
 8016fde:	3104      	adds	r1, #4
 8016fe0:	6a28      	ldr	r0, [r5, #32]
 8016fe2:	f7f5 fdb3 	bl	800cb4c <net_pkt_alloc_with_buffer>
	if (!pkt) {
 8016fe6:	4604      	mov	r4, r0
 8016fe8:	2800      	cmp	r0, #0
 8016fea:	d05e      	beq.n	80170aa <net_icmpv6_send_error+0x148>
	if (net_ipv6_is_addr_mcast(&ip_hdr->dst)) {
 8016fec:	7e33      	ldrb	r3, [r6, #24]
 8016fee:	2bff      	cmp	r3, #255	; 0xff
 8016ff0:	f106 0118 	add.w	r1, r6, #24
 8016ff4:	d103      	bne.n	8016ffe <net_icmpv6_send_error+0x9c>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
 8016ff6:	6a00      	ldr	r0, [r0, #32]
 8016ff8:	f7f4 fcba 	bl	800b970 <net_if_ipv6_select_src_addr>
 8016ffc:	4601      	mov	r1, r0
	if (net_ipv6_create(pkt, src, &ip_hdr->src) ||
 8016ffe:	f106 0208 	add.w	r2, r6, #8
 8017002:	4620      	mov	r0, r4
 8017004:	f000 f8db 	bl	80171be <net_ipv6_create>
 8017008:	b170      	cbz	r0, 8017028 <net_icmpv6_send_error+0xc6>
	int err = -EIO;
 801700a:	f06f 0704 	mvn.w	r7, #4
	net_pkt_unref(pkt);
 801700e:	4620      	mov	r0, r4
 8017010:	f7ff fcbc 	bl	801698c <net_pkt_unref>
 8017014:	463e      	mov	r6, r7
 8017016:	e7ce      	b.n	8016fb6 <net_icmpv6_send_error+0x54>
		bytes += buf->len;
 8017018:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
 801701a:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
 801701c:	4411      	add	r1, r2
		buf = buf->frags;
 801701e:	e7d8      	b.n	8016fd2 <net_icmpv6_send_error+0x70>
		copy_len = sizeof(struct net_ipv6_hdr) +
 8017020:	2130      	movs	r1, #48	; 0x30
 8017022:	e7d7      	b.n	8016fd4 <net_icmpv6_send_error+0x72>
		copy_len = sizeof(struct net_ipv6_hdr) +
 8017024:	213c      	movs	r1, #60	; 0x3c
 8017026:	e7d5      	b.n	8016fd4 <net_icmpv6_send_error+0x72>
	    net_icmpv6_create(pkt, type, code)) {
 8017028:	4639      	mov	r1, r7
 801702a:	464a      	mov	r2, r9
 801702c:	4620      	mov	r0, r4
 801702e:	f7ff ff2f 	bl	8016e90 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, &ip_hdr->src) ||
 8017032:	4601      	mov	r1, r0
 8017034:	2800      	cmp	r0, #0
 8017036:	d1e8      	bne.n	801700a <net_icmpv6_send_error+0xa8>
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
 8017038:	2f04      	cmp	r7, #4
 801703a:	d12e      	bne.n	801709a <net_icmpv6_send_error+0x138>
	u32_t data_be32 = htonl(data);
 801703c:	fa98 f388 	rev.w	r3, r8
	return net_pkt_write(pkt, &data_be32, sizeof(u32_t));
 8017040:	463a      	mov	r2, r7
 8017042:	a904      	add	r1, sp, #16
 8017044:	4620      	mov	r0, r4
	u32_t data_be32 = htonl(data);
 8017046:	9304      	str	r3, [sp, #16]
	return net_pkt_write(pkt, &data_be32, sizeof(u32_t));
 8017048:	f7ff fecf 	bl	8016dea <net_pkt_write>
		err = net_pkt_memset(pkt, 0, NET_ICMPV6_UNUSED_LEN);
 801704c:	4607      	mov	r7, r0
	copy_len = net_pkt_available_buffer(pkt);
 801704e:	4620      	mov	r0, r4
 8017050:	f7ff fcd0 	bl	80169f4 <net_pkt_available_buffer>
 8017054:	4602      	mov	r2, r0
	if (err || net_pkt_copy(pkt, orig, copy_len)) {
 8017056:	2f00      	cmp	r7, #0
 8017058:	d1d9      	bne.n	801700e <net_icmpv6_send_error+0xac>
 801705a:	4629      	mov	r1, r5
 801705c:	4620      	mov	r0, r4
 801705e:	f7ff fdb8 	bl	8016bd2 <net_pkt_copy>
 8017062:	4606      	mov	r6, r0
 8017064:	2800      	cmp	r0, #0
 8017066:	d1d2      	bne.n	801700e <net_icmpv6_send_error+0xac>
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_dst(orig)->addr;
 8017068:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801706a:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_dst(orig)->len;
 801706c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8017070:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
 8017074:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8017076:	6323      	str	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
 8017078:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801707c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	net_pkt_cursor_init(pkt);
 8017080:	4620      	mov	r0, r4
 8017082:	f7ff fd01 	bl	8016a88 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 8017086:	213a      	movs	r1, #58	; 0x3a
 8017088:	4620      	mov	r0, r4
 801708a:	f000 f8fb 	bl	8017284 <net_ipv6_finalize>
	if (net_send_data(pkt) >= 0) {
 801708e:	4620      	mov	r0, r4
 8017090:	f7fe fd69 	bl	8015b66 <net_send_data>
 8017094:	2800      	cmp	r0, #0
 8017096:	dbba      	blt.n	801700e <net_icmpv6_send_error+0xac>
 8017098:	e78d      	b.n	8016fb6 <net_icmpv6_send_error+0x54>
		err = net_pkt_memset(pkt, 0, NET_ICMPV6_UNUSED_LEN);
 801709a:	2204      	movs	r2, #4
 801709c:	4620      	mov	r0, r4
 801709e:	f7ff fd78 	bl	8016b92 <net_pkt_memset>
 80170a2:	e7d3      	b.n	801704c <net_icmpv6_send_error+0xea>
	int err = -EIO;
 80170a4:	f06f 0604 	mvn.w	r6, #4
 80170a8:	e785      	b.n	8016fb6 <net_icmpv6_send_error+0x54>
		err = -ENOMEM;
 80170aa:	f06f 060b 	mvn.w	r6, #11
 80170ae:	e782      	b.n	8016fb6 <net_icmpv6_send_error+0x54>

080170b0 <net_icmpv6_send_echo_request>:
{
 80170b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80170b4:	b085      	sub	sp, #20
 80170b6:	4617      	mov	r7, r2
 80170b8:	461e      	mov	r6, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv6_access,
 80170ba:	2200      	movs	r2, #0
 80170bc:	2304      	movs	r3, #4
{
 80170be:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv6_access,
 80170c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
 80170c4:	4689      	mov	r9, r1
 80170c6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
	src = net_if_ipv6_select_src_addr(iface, dst);
 80170ca:	f7f4 fc51 	bl	800b970 <net_if_ipv6_select_src_addr>
	pkt = net_pkt_alloc_with_buffer(iface,
 80170ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80170d2:	9300      	str	r3, [sp, #0]
	src = net_if_ipv6_select_src_addr(iface, dst);
 80170d4:	4605      	mov	r5, r0
	pkt = net_pkt_alloc_with_buffer(iface,
 80170d6:	233a      	movs	r3, #58	; 0x3a
 80170d8:	4620      	mov	r0, r4
 80170da:	2202      	movs	r2, #2
 80170dc:	f108 0104 	add.w	r1, r8, #4
 80170e0:	f7f5 fd34 	bl	800cb4c <net_pkt_alloc_with_buffer>
	if (!pkt) {
 80170e4:	4604      	mov	r4, r0
 80170e6:	b3b8      	cbz	r0, 8017158 <net_icmpv6_send_echo_request+0xa8>
	if (net_ipv6_create(pkt, src, dst) ||
 80170e8:	464a      	mov	r2, r9
 80170ea:	4629      	mov	r1, r5
 80170ec:	f000 f867 	bl	80171be <net_ipv6_create>
 80170f0:	4602      	mov	r2, r0
 80170f2:	b140      	cbz	r0, 8017106 <net_icmpv6_send_echo_request+0x56>
	int ret = -ENOBUFS;
 80170f4:	f06f 0568 	mvn.w	r5, #104	; 0x68
	net_pkt_unref(pkt);
 80170f8:	4620      	mov	r0, r4
 80170fa:	f7ff fc47 	bl	801698c <net_pkt_unref>
}
 80170fe:	4628      	mov	r0, r5
 8017100:	b005      	add	sp, #20
 8017102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    net_icmpv6_create(pkt, NET_ICMPV6_ECHO_REQUEST, 0)) {
 8017106:	2180      	movs	r1, #128	; 0x80
 8017108:	4620      	mov	r0, r4
 801710a:	f7ff fec1 	bl	8016e90 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, dst) ||
 801710e:	4605      	mov	r5, r0
 8017110:	2800      	cmp	r0, #0
 8017112:	d1ef      	bne.n	80170f4 <net_icmpv6_send_echo_request+0x44>
	echo_req = (struct net_icmpv6_echo_req *)net_pkt_get_data(
 8017114:	a902      	add	r1, sp, #8
 8017116:	4620      	mov	r0, r4
 8017118:	f7f5 fd34 	bl	800cb84 <net_pkt_get_data>
	if (!echo_req) {
 801711c:	2800      	cmp	r0, #0
 801711e:	d0e9      	beq.n	80170f4 <net_icmpv6_send_echo_request+0x44>
	echo_req->identifier = htons(identifier);
 8017120:	ba7f      	rev16	r7, r7
	echo_req->sequence   = htons(sequence);
 8017122:	ba76      	rev16	r6, r6
	echo_req->identifier = htons(identifier);
 8017124:	8007      	strh	r7, [r0, #0]
	echo_req->sequence   = htons(sequence);
 8017126:	8046      	strh	r6, [r0, #2]
	net_pkt_set_data(pkt, &icmpv6_access);
 8017128:	a902      	add	r1, sp, #8
 801712a:	4620      	mov	r0, r4
 801712c:	f7ff fe78 	bl	8016e20 <net_pkt_set_data>
	net_pkt_write(pkt, data, data_size);
 8017130:	4642      	mov	r2, r8
 8017132:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017134:	4620      	mov	r0, r4
 8017136:	f7ff fe58 	bl	8016dea <net_pkt_write>
	net_pkt_cursor_init(pkt);
 801713a:	4620      	mov	r0, r4
 801713c:	f7ff fca4 	bl	8016a88 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 8017140:	213a      	movs	r1, #58	; 0x3a
 8017142:	4620      	mov	r0, r4
 8017144:	f000 f89e 	bl	8017284 <net_ipv6_finalize>
	if (net_send_data(pkt) >= 0) {
 8017148:	4620      	mov	r0, r4
 801714a:	f7fe fd0c 	bl	8015b66 <net_send_data>
 801714e:	2800      	cmp	r0, #0
 8017150:	dad5      	bge.n	80170fe <net_icmpv6_send_echo_request+0x4e>
	ret = -EIO;
 8017152:	f06f 0504 	mvn.w	r5, #4
 8017156:	e7cf      	b.n	80170f8 <net_icmpv6_send_echo_request+0x48>
		return -ENOMEM;
 8017158:	f06f 050b 	mvn.w	r5, #11
 801715c:	e7cf      	b.n	80170fe <net_icmpv6_send_echo_request+0x4e>

0801715e <net_nbr_unref>:
	if (--nbr->ref) {
 801715e:	7803      	ldrb	r3, [r0, #0]
 8017160:	3b01      	subs	r3, #1
 8017162:	b2db      	uxtb	r3, r3
 8017164:	7003      	strb	r3, [r0, #0]
 8017166:	b913      	cbnz	r3, 801716e <net_nbr_unref+0x10>
	if (nbr->remove) {
 8017168:	6903      	ldr	r3, [r0, #16]
 801716a:	b103      	cbz	r3, 801716e <net_nbr_unref+0x10>
		nbr->remove(nbr);
 801716c:	4718      	bx	r3
}
 801716e:	4770      	bx	lr

08017170 <net_nbr_get>:
{
 8017170:	b530      	push	{r4, r5, lr}
	for (i = 0; i < table->nbr_count; i++) {
 8017172:	8905      	ldrh	r5, [r0, #8]
 8017174:	2100      	movs	r1, #0
 8017176:	428d      	cmp	r5, r1
 8017178:	dc01      	bgt.n	801717e <net_nbr_get+0xe>
	return NULL;
 801717a:	2200      	movs	r2, #0
 801717c:	e00d      	b.n	801719a <net_nbr_get+0x2a>
		struct net_nbr *nbr = get_nbr(table->nbr, i);
 801717e:	6804      	ldr	r4, [r0, #0]
			  start->size + start->extra_data_size) * idx));
 8017180:	88a2      	ldrh	r2, [r4, #4]
 8017182:	8863      	ldrh	r3, [r4, #2]
 8017184:	4413      	add	r3, r2
 8017186:	3314      	adds	r3, #20
 8017188:	434b      	muls	r3, r1
	return (struct net_nbr *)((u8_t *)start +
 801718a:	18e2      	adds	r2, r4, r3
		if (!nbr->ref) {
 801718c:	5ce3      	ldrb	r3, [r4, r3]
 801718e:	b933      	cbnz	r3, 801719e <net_nbr_get+0x2e>
			nbr->data = nbr->__nbr;
 8017190:	f102 0314 	add.w	r3, r2, #20
 8017194:	60d3      	str	r3, [r2, #12]
	nbr->ref++;
 8017196:	2301      	movs	r3, #1
 8017198:	7013      	strb	r3, [r2, #0]
}
 801719a:	4610      	mov	r0, r2
 801719c:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < table->nbr_count; i++) {
 801719e:	3101      	adds	r1, #1
 80171a0:	e7e9      	b.n	8017176 <net_nbr_get+0x6>

080171a2 <net_ipv6_is_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 80171a2:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80171a4:	b94a      	cbnz	r2, 80171ba <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 80171a6:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 80171a8:	b93b      	cbnz	r3, 80171ba <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80171aa:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 80171ac:	b92a      	cbnz	r2, 80171ba <net_ipv6_is_addr_loopback+0x18>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
 80171ae:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80171b0:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
 80171b4:	4258      	negs	r0, r3
 80171b6:	4158      	adcs	r0, r3
 80171b8:	4770      	bx	lr
 80171ba:	2000      	movs	r0, #0
 80171bc:	4770      	bx	lr

080171be <net_ipv6_create>:
{
 80171be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171c0:	b08b      	sub	sp, #44	; 0x2c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 80171c2:	2328      	movs	r3, #40	; 0x28
{
 80171c4:	460c      	mov	r4, r1
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 80171c6:	2700      	movs	r7, #0
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 80171c8:	4669      	mov	r1, sp
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 80171ca:	e9cd 7300 	strd	r7, r3, [sp]
{
 80171ce:	4606      	mov	r6, r0
 80171d0:	4615      	mov	r5, r2
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 80171d2:	f7f5 fcd7 	bl	800cb84 <net_pkt_get_data>
	if (!ipv6_hdr) {
 80171d6:	4603      	mov	r3, r0
 80171d8:	2800      	cmp	r0, #0
 80171da:	d050      	beq.n	801727e <net_ipv6_create+0xc0>
	ipv6_hdr->vtc     = 0x60;
 80171dc:	2260      	movs	r2, #96	; 0x60
 80171de:	7002      	strb	r2, [r0, #0]
	ipv6_hdr->tcflow  = 0U;
 80171e0:	7047      	strb	r7, [r0, #1]
	ipv6_hdr->nexthdr = 0U;
 80171e2:	7187      	strb	r7, [r0, #6]
	ipv6_hdr->hop_limit = net_pkt_ipv6_hop_limit(pkt);
 80171e4:	f896 203d 	ldrb.w	r2, [r6, #61]	; 0x3d
	ipv6_hdr->flow    = 0U;
 80171e8:	7087      	strb	r7, [r0, #2]
 80171ea:	70c7      	strb	r7, [r0, #3]
	ipv6_hdr->len     = 0U;
 80171ec:	7107      	strb	r7, [r0, #4]
 80171ee:	7147      	strb	r7, [r0, #5]
	ipv6_hdr->hop_limit = net_pkt_ipv6_hop_limit(pkt);
 80171f0:	71c2      	strb	r2, [r0, #7]
	if (ipv6_hdr->hop_limit == 0U) {
 80171f2:	b92a      	cbnz	r2, 8017200 <net_ipv6_create+0x42>
			net_if_ipv6_get_hop_limit(net_pkt_iface(pkt));
 80171f4:	6a31      	ldr	r1, [r6, #32]
 80171f6:	6849      	ldr	r1, [r1, #4]
	if (!iface->config.ip.ipv6) {
 80171f8:	b109      	cbz	r1, 80171fe <net_ipv6_create+0x40>
	return iface->config.ip.ipv6->hop_limit;
 80171fa:	f891 210d 	ldrb.w	r2, [r1, #269]	; 0x10d
		ipv6_hdr->hop_limit =
 80171fe:	71da      	strb	r2, [r3, #7]
	net_ipaddr_copy(&ipv6_hdr->dst, dst);
 8017200:	462a      	mov	r2, r5
 8017202:	ad02      	add	r5, sp, #8
 8017204:	f102 0e10 	add.w	lr, r2, #16
 8017208:	462f      	mov	r7, r5
 801720a:	6810      	ldr	r0, [r2, #0]
 801720c:	6851      	ldr	r1, [r2, #4]
 801720e:	46ac      	mov	ip, r5
 8017210:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017214:	3208      	adds	r2, #8
 8017216:	4572      	cmp	r2, lr
 8017218:	4665      	mov	r5, ip
 801721a:	d1f6      	bne.n	801720a <net_ipv6_create+0x4c>
 801721c:	f103 0c18 	add.w	ip, r3, #24
 8017220:	ad06      	add	r5, sp, #24
 8017222:	463a      	mov	r2, r7
 8017224:	ca03      	ldmia	r2!, {r0, r1}
 8017226:	42aa      	cmp	r2, r5
 8017228:	f8cc 0000 	str.w	r0, [ip]
 801722c:	f8cc 1004 	str.w	r1, [ip, #4]
 8017230:	4617      	mov	r7, r2
 8017232:	f10c 0c08 	add.w	ip, ip, #8
 8017236:	d1f4      	bne.n	8017222 <net_ipv6_create+0x64>
	net_ipaddr_copy(&ipv6_hdr->src, src);
 8017238:	4622      	mov	r2, r4
 801723a:	462f      	mov	r7, r5
 801723c:	f104 0c10 	add.w	ip, r4, #16
 8017240:	6810      	ldr	r0, [r2, #0]
 8017242:	6851      	ldr	r1, [r2, #4]
 8017244:	463c      	mov	r4, r7
 8017246:	c403      	stmia	r4!, {r0, r1}
 8017248:	3208      	adds	r2, #8
 801724a:	4562      	cmp	r2, ip
 801724c:	4627      	mov	r7, r4
 801724e:	d1f7      	bne.n	8017240 <net_ipv6_create+0x82>
 8017250:	462a      	mov	r2, r5
 8017252:	3308      	adds	r3, #8
 8017254:	ad0a      	add	r5, sp, #40	; 0x28
 8017256:	4614      	mov	r4, r2
 8017258:	cc03      	ldmia	r4!, {r0, r1}
 801725a:	42ac      	cmp	r4, r5
 801725c:	6018      	str	r0, [r3, #0]
 801725e:	6059      	str	r1, [r3, #4]
 8017260:	4622      	mov	r2, r4
 8017262:	f103 0308 	add.w	r3, r3, #8
 8017266:	d1f6      	bne.n	8017256 <net_ipv6_create+0x98>
	pkt->ip_hdr_len = len;
 8017268:	2328      	movs	r3, #40	; 0x28
 801726a:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	pkt->ipv6_ext_len = len;
 801726e:	2300      	movs	r3, #0
 8017270:	87f3      	strh	r3, [r6, #62]	; 0x3e
	return net_pkt_set_data(pkt, &ipv6_access);
 8017272:	4669      	mov	r1, sp
 8017274:	4630      	mov	r0, r6
 8017276:	f7ff fdd3 	bl	8016e20 <net_pkt_set_data>
}
 801727a:	b00b      	add	sp, #44	; 0x2c
 801727c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
 801727e:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8017282:	e7fa      	b.n	801727a <net_ipv6_create+0xbc>

08017284 <net_ipv6_finalize>:
{
 8017284:	b573      	push	{r0, r1, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 8017286:	2328      	movs	r3, #40	; 0x28
 8017288:	2500      	movs	r5, #0
 801728a:	e9cd 5300 	strd	r5, r3, [sp]
	pkt->overwrite = overwrite;
 801728e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8017292:	f043 0301 	orr.w	r3, r3, #1
{
 8017296:	460e      	mov	r6, r1
 8017298:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 801729c:	4669      	mov	r1, sp
{
 801729e:	4604      	mov	r4, r0
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 80172a0:	f7f5 fc70 	bl	800cb84 <net_pkt_get_data>
	if (!ipv6_hdr) {
 80172a4:	b918      	cbnz	r0, 80172ae <net_ipv6_finalize+0x2a>
		return -ENOBUFS;
 80172a6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 80172aa:	b002      	add	sp, #8
 80172ac:	bd70      	pop	{r4, r5, r6, pc}
	ipv6_hdr->len = htons(net_pkt_get_len(pkt) -
 80172ae:	6922      	ldr	r2, [r4, #16]
	size_t bytes = 0;
 80172b0:	462b      	mov	r3, r5
	while (buf) {
 80172b2:	b9ca      	cbnz	r2, 80172e8 <net_ipv6_finalize+0x64>
 80172b4:	3b28      	subs	r3, #40	; 0x28
 80172b6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80172ba:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80172be:	8083      	strh	r3, [r0, #4]
	if (net_pkt_ipv6_next_hdr(pkt) != 255U) {
 80172c0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	return pkt->ipv6_next_hdr;
 80172c4:	2bff      	cmp	r3, #255	; 0xff
 80172c6:	bf08      	it	eq
 80172c8:	4633      	moveq	r3, r6
 80172ca:	7183      	strb	r3, [r0, #6]
	net_pkt_set_data(pkt, &ipv6_access);
 80172cc:	4669      	mov	r1, sp
 80172ce:	4620      	mov	r0, r4
 80172d0:	f7ff fda6 	bl	8016e20 <net_pkt_set_data>
	if (net_pkt_ipv6_next_hdr(pkt) != 255U &&
 80172d4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80172d8:	2bff      	cmp	r3, #255	; 0xff
 80172da:	d109      	bne.n	80172f0 <net_ipv6_finalize+0x6c>
	if (IS_ENABLED(CONFIG_NET_UDP) &&
 80172dc:	2e11      	cmp	r6, #17
 80172de:	d10e      	bne.n	80172fe <net_ipv6_finalize+0x7a>
		return net_udp_finalize(pkt);
 80172e0:	4620      	mov	r0, r4
 80172e2:	f000 fc16 	bl	8017b12 <net_udp_finalize>
 80172e6:	e7e0      	b.n	80172aa <net_ipv6_finalize+0x26>
		bytes += buf->len;
 80172e8:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
 80172ea:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
 80172ec:	440b      	add	r3, r1
		buf = buf->frags;
 80172ee:	e7e0      	b.n	80172b2 <net_ipv6_finalize+0x2e>
	    net_pkt_skip(pkt, net_pkt_ipv6_ext_len(pkt))) {
 80172f0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80172f2:	4620      	mov	r0, r4
 80172f4:	f7ff fc42 	bl	8016b7c <net_pkt_skip>
	if (net_pkt_ipv6_next_hdr(pkt) != 255U &&
 80172f8:	2800      	cmp	r0, #0
 80172fa:	d0ef      	beq.n	80172dc <net_ipv6_finalize+0x58>
 80172fc:	e7d3      	b.n	80172a6 <net_ipv6_finalize+0x22>
	} else if (next_header_proto == IPPROTO_ICMPV6) {
 80172fe:	2e3a      	cmp	r6, #58	; 0x3a
 8017300:	d103      	bne.n	801730a <net_ipv6_finalize+0x86>
		return net_icmpv6_finalize(pkt);
 8017302:	4620      	mov	r0, r4
 8017304:	f7ff fdab 	bl	8016e5e <net_icmpv6_finalize>
 8017308:	e7cf      	b.n	80172aa <net_ipv6_finalize+0x26>
	return 0;
 801730a:	2000      	movs	r0, #0
 801730c:	e7cd      	b.n	80172aa <net_ipv6_finalize+0x26>

0801730e <net_ipv6_init>:

void net_ipv6_init(void)
{
 801730e:	b508      	push	{r3, lr}
	net_ipv6_nbr_init();
 8017310:	f7f7 f860 	bl	800e3d4 <net_ipv6_nbr_init>

#if defined(CONFIG_NET_IPV6_MLD)
	net_ipv6_mld_init();
#endif
}
 8017314:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	net_ipv6_mld_init();
 8017318:	f7f7 b8e6 	b.w	800e4e8 <net_ipv6_mld_init>

0801731c <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 801731c:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 801731e:	b942      	cbnz	r2, 8017332 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8017320:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8017322:	b933      	cbnz	r3, 8017332 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8017324:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8017326:	b922      	cbnz	r2, 8017332 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
 8017328:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 801732a:	fab0 f080 	clz	r0, r0
 801732e:	0940      	lsrs	r0, r0, #5
 8017330:	4770      	bx	lr
 8017332:	2000      	movs	r0, #0
 8017334:	4770      	bx	lr

08017336 <net_neighbor_data_remove>:
}
 8017336:	4770      	bx	lr

08017338 <nbr_clear_ns_pending>:
	data->send_ns = 0;
 8017338:	2200      	movs	r2, #0
 801733a:	2300      	movs	r3, #0
{
 801733c:	b510      	push	{r4, lr}
 801733e:	4604      	mov	r4, r0
	data->send_ns = 0;
 8017340:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	if (data->pending) {
 8017344:	6800      	ldr	r0, [r0, #0]
 8017346:	b118      	cbz	r0, 8017350 <nbr_clear_ns_pending+0x18>
		net_pkt_unref(data->pending);
 8017348:	f7ff fb20 	bl	801698c <net_pkt_unref>
		data->pending = NULL;
 801734c:	2300      	movs	r3, #0
 801734e:	6023      	str	r3, [r4, #0]
}
 8017350:	bd10      	pop	{r4, pc}

08017352 <nbr_free>:
{
 8017352:	b538      	push	{r3, r4, r5, lr}
 8017354:	4604      	mov	r4, r0
	nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
 8017356:	68c0      	ldr	r0, [r0, #12]
 8017358:	f7ff ffee 	bl	8017338 <nbr_clear_ns_pending>
	net_ipv6_nbr_data(nbr)->reachable = 0;
 801735c:	68e3      	ldr	r3, [r4, #12]
 801735e:	2100      	movs	r1, #0
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
 8017360:	2500      	movs	r5, #0
	net_ipv6_nbr_data(nbr)->reachable = 0;
 8017362:	2000      	movs	r0, #0
 8017364:	e9c3 0106 	strd	r0, r1, [r3, #24]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
 8017368:	621d      	str	r5, [r3, #32]
	net_nbr_unref(nbr);
 801736a:	4620      	mov	r0, r4
 801736c:	f7ff fef7 	bl	801715e <net_nbr_unref>
	net_nbr_unlink(nbr, NULL);
 8017370:	4629      	mov	r1, r5
 8017372:	4620      	mov	r0, r4
}
 8017374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_nbr_unlink(nbr, NULL);
 8017378:	f7f5 bd56 	b.w	800ce28 <net_nbr_unlink>

0801737c <set_llao>:
{
 801737c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801737e:	460d      	mov	r5, r1
 8017380:	4614      	mov	r4, r2
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
 8017382:	f88d 3004 	strb.w	r3, [sp, #4]
	if (net_pkt_write(pkt, &opt_hdr,
 8017386:	a901      	add	r1, sp, #4
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
 8017388:	08d3      	lsrs	r3, r2, #3
	if (net_pkt_write(pkt, &opt_hdr,
 801738a:	2202      	movs	r2, #2
{
 801738c:	4606      	mov	r6, r0
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
 801738e:	f88d 3005 	strb.w	r3, [sp, #5]
	if (net_pkt_write(pkt, &opt_hdr,
 8017392:	f7ff fd2a 	bl	8016dea <net_pkt_write>
 8017396:	b110      	cbz	r0, 801739e <set_llao+0x22>
		return false;
 8017398:	2000      	movs	r0, #0
}
 801739a:	b002      	add	sp, #8
 801739c:	bd70      	pop	{r4, r5, r6, pc}
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
 801739e:	6829      	ldr	r1, [r5, #0]
 80173a0:	792a      	ldrb	r2, [r5, #4]
 80173a2:	4630      	mov	r0, r6
 80173a4:	f7ff fd21 	bl	8016dea <net_pkt_write>
			  sizeof(struct net_icmpv6_nd_opt_hdr)) ||
 80173a8:	4601      	mov	r1, r0
 80173aa:	2800      	cmp	r0, #0
 80173ac:	d1f4      	bne.n	8017398 <set_llao+0x1c>
	    net_pkt_memset(pkt, 0, llao_len - lladdr->len - 2)) {
 80173ae:	792a      	ldrb	r2, [r5, #4]
 80173b0:	1aa2      	subs	r2, r4, r2
 80173b2:	3a02      	subs	r2, #2
 80173b4:	4630      	mov	r0, r6
 80173b6:	f7ff fbec 	bl	8016b92 <net_pkt_memset>
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
 80173ba:	fab0 f080 	clz	r0, r0
 80173be:	0940      	lsrs	r0, r0, #5
 80173c0:	e7eb      	b.n	801739a <set_llao+0x1e>

080173c2 <net_linkaddr_set>:
{
 80173c2:	b510      	push	{r4, lr}
	if (!lladdr_store || !new_addr) {
 80173c4:	b140      	cbz	r0, 80173d8 <net_linkaddr_set+0x16>
 80173c6:	b139      	cbz	r1, 80173d8 <net_linkaddr_set+0x16>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
 80173c8:	2a06      	cmp	r2, #6
 80173ca:	d808      	bhi.n	80173de <net_linkaddr_set+0x1c>
	lladdr_store->len = new_len;
 80173cc:	7042      	strb	r2, [r0, #1]
 80173ce:	3002      	adds	r0, #2
 80173d0:	f7ed faa5 	bl	800491e <memcpy>

	return 0;
 80173d4:	2000      	movs	r0, #0
}
 80173d6:	bd10      	pop	{r4, pc}
		return -EINVAL;
 80173d8:	f06f 0015 	mvn.w	r0, #21
 80173dc:	e7fb      	b.n	80173d6 <net_linkaddr_set+0x14>
		return -EMSGSIZE;
 80173de:	f06f 0079 	mvn.w	r0, #121	; 0x79
 80173e2:	e7f8      	b.n	80173d6 <net_linkaddr_set+0x14>

080173e4 <net_ipv6_addr_create_ll_allnodes_mcast>:
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
 80173e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80173e8:	2202      	movs	r2, #2
 80173ea:	7003      	strb	r3, [r0, #0]
 80173ec:	7042      	strb	r2, [r0, #1]
 80173ee:	2300      	movs	r3, #0
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
 80173f0:	7083      	strb	r3, [r0, #2]
 80173f2:	70c3      	strb	r3, [r0, #3]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
 80173f4:	7103      	strb	r3, [r0, #4]
 80173f6:	7143      	strb	r3, [r0, #5]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
 80173f8:	7183      	strb	r3, [r0, #6]
 80173fa:	71c3      	strb	r3, [r0, #7]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
 80173fc:	7203      	strb	r3, [r0, #8]
 80173fe:	7243      	strb	r3, [r0, #9]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
 8017400:	7283      	strb	r3, [r0, #10]
 8017402:	72c3      	strb	r3, [r0, #11]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
 8017404:	7303      	strb	r3, [r0, #12]
 8017406:	7343      	strb	r3, [r0, #13]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
 8017408:	7383      	strb	r3, [r0, #14]
 801740a:	2301      	movs	r3, #1
 801740c:	73c3      	strb	r3, [r0, #15]
}
 801740e:	4770      	bx	lr

08017410 <net_neighbor_table_clear>:
 8017410:	4770      	bx	lr

08017412 <nbr_init>:
{
 8017412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017414:	461f      	mov	r7, r3
 8017416:	b085      	sub	sp, #20
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
 8017418:	23ff      	movs	r3, #255	; 0xff
 801741a:	7043      	strb	r3, [r0, #1]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
 801741c:	68c4      	ldr	r4, [r0, #12]
	nbr->iface = iface;
 801741e:	6081      	str	r1, [r0, #8]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
 8017420:	466b      	mov	r3, sp
{
 8017422:	4605      	mov	r5, r0
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
 8017424:	f102 0e10 	add.w	lr, r2, #16
 8017428:	461e      	mov	r6, r3
 801742a:	6810      	ldr	r0, [r2, #0]
 801742c:	6851      	ldr	r1, [r2, #4]
 801742e:	469c      	mov	ip, r3
 8017430:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017434:	3208      	adds	r2, #8
 8017436:	4572      	cmp	r2, lr
 8017438:	4663      	mov	r3, ip
 801743a:	d1f6      	bne.n	801742a <nbr_init+0x18>
 801743c:	1d22      	adds	r2, r4, #4
 801743e:	ab04      	add	r3, sp, #16
 8017440:	4634      	mov	r4, r6
 8017442:	cc03      	ldmia	r4!, {r0, r1}
 8017444:	429c      	cmp	r4, r3
 8017446:	6010      	str	r0, [r2, #0]
 8017448:	6051      	str	r1, [r2, #4]
 801744a:	4626      	mov	r6, r4
 801744c:	f102 0208 	add.w	r2, r2, #8
 8017450:	d1f6      	bne.n	8017440 <nbr_init+0x2e>
	ipv6_nbr_set_state(nbr, state);
 8017452:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 8017456:	4628      	mov	r0, r5
 8017458:	f7f5 ff0a 	bl	800d270 <ipv6_nbr_set_state>
	net_ipv6_nbr_data(nbr)->is_router = is_router;
 801745c:	68ea      	ldr	r2, [r5, #12]
	net_ipv6_nbr_data(nbr)->pending = NULL;
 801745e:	2300      	movs	r3, #0
	net_ipv6_nbr_data(nbr)->send_ns = 0;
 8017460:	2000      	movs	r0, #0
 8017462:	2100      	movs	r1, #0
	net_ipv6_nbr_data(nbr)->is_router = is_router;
 8017464:	f882 7035 	strb.w	r7, [r2, #53]	; 0x35
	net_ipv6_nbr_data(nbr)->pending = NULL;
 8017468:	6013      	str	r3, [r2, #0]
	net_ipv6_nbr_data(nbr)->send_ns = 0;
 801746a:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
	net_ipv6_nbr_data(nbr)->reachable = 0;
 801746e:	e9c2 0106 	strd	r0, r1, [r2, #24]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
 8017472:	6213      	str	r3, [r2, #32]
}
 8017474:	b005      	add	sp, #20
 8017476:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017478 <net_ipv6_nbr_lookup>:
	return nbr_lookup(&net_neighbor.table, iface, addr);
 8017478:	f7f5 be9c 	b.w	800d1b4 <nbr_lookup.isra.16>

0801747c <net_ipv6_send_na>:
{
 801747c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
 8017480:	f04f 0914 	mov.w	r9, #20
{
 8017484:	b088      	sub	sp, #32
 8017486:	461d      	mov	r5, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
 8017488:	2300      	movs	r3, #0
 801748a:	e9cd 3902 	strd	r3, r9, [sp, #8]
	u8_t total_len = net_if_get_link_addr(iface)->len +
 801748e:	6803      	ldr	r3, [r0, #0]
	return ROUND_UP(total_len, 8U);
 8017490:	7d1f      	ldrb	r7, [r3, #20]
 8017492:	3709      	adds	r7, #9
	pkt = net_pkt_alloc_with_buffer(iface,
 8017494:	2364      	movs	r3, #100	; 0x64
	return ROUND_UP(total_len, 8U);
 8017496:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
	pkt = net_pkt_alloc_with_buffer(iface,
 801749a:	9300      	str	r3, [sp, #0]
{
 801749c:	460e      	mov	r6, r1
 801749e:	4692      	mov	sl, r2
	pkt = net_pkt_alloc_with_buffer(iface,
 80174a0:	233a      	movs	r3, #58	; 0x3a
 80174a2:	2202      	movs	r2, #2
 80174a4:	eb07 0109 	add.w	r1, r7, r9
{
 80174a8:	4680      	mov	r8, r0
	pkt = net_pkt_alloc_with_buffer(iface,
 80174aa:	f7f5 fb4f 	bl	800cb4c <net_pkt_alloc_with_buffer>
	if (!pkt) {
 80174ae:	4604      	mov	r4, r0
 80174b0:	2800      	cmp	r0, #0
 80174b2:	d05f      	beq.n	8017574 <net_ipv6_send_na+0xf8>
	pkt->ipv6_hop_limit = hop_limit;
 80174b4:	23ff      	movs	r3, #255	; 0xff
	if (net_ipv6_create(pkt, src, dst) ||
 80174b6:	4652      	mov	r2, sl
 80174b8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80174bc:	4631      	mov	r1, r6
 80174be:	f7ff fe7e 	bl	80171be <net_ipv6_create>
 80174c2:	4602      	mov	r2, r0
 80174c4:	b140      	cbz	r0, 80174d8 <net_ipv6_send_na+0x5c>
	int ret = -ENOBUFS;
 80174c6:	f06f 0568 	mvn.w	r5, #104	; 0x68
	net_pkt_unref(pkt);
 80174ca:	4620      	mov	r0, r4
 80174cc:	f7ff fa5e 	bl	801698c <net_pkt_unref>
}
 80174d0:	4628      	mov	r0, r5
 80174d2:	b008      	add	sp, #32
 80174d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    net_icmpv6_create(pkt, NET_ICMPV6_NA, 0)) {
 80174d8:	2188      	movs	r1, #136	; 0x88
 80174da:	4620      	mov	r0, r4
 80174dc:	f7ff fcd8 	bl	8016e90 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, dst) ||
 80174e0:	4682      	mov	sl, r0
 80174e2:	2800      	cmp	r0, #0
 80174e4:	d1ef      	bne.n	80174c6 <net_ipv6_send_na+0x4a>
	na_hdr = (struct net_icmpv6_na_hdr *)net_pkt_get_data(pkt, &na_access);
 80174e6:	a902      	add	r1, sp, #8
 80174e8:	4620      	mov	r0, r4
 80174ea:	f7f5 fb4b 	bl	800cb84 <net_pkt_get_data>
	if (!na_hdr) {
 80174ee:	4606      	mov	r6, r0
 80174f0:	2800      	cmp	r0, #0
 80174f2:	d0e8      	beq.n	80174c6 <net_ipv6_send_na+0x4a>
__ssp_bos_icheck3(memset, void *, int)
 80174f4:	464a      	mov	r2, r9
 80174f6:	4651      	mov	r1, sl
 80174f8:	f7ed fa39 	bl	800496e <memset>
	na_hdr->flags = flags;
 80174fc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017500:	7033      	strb	r3, [r6, #0]
	net_ipaddr_copy(&na_hdr->tgt, tgt);
 8017502:	aa04      	add	r2, sp, #16
 8017504:	462b      	mov	r3, r5
 8017506:	f105 0e10 	add.w	lr, r5, #16
 801750a:	4615      	mov	r5, r2
 801750c:	6818      	ldr	r0, [r3, #0]
 801750e:	6859      	ldr	r1, [r3, #4]
 8017510:	4694      	mov	ip, r2
 8017512:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017516:	3308      	adds	r3, #8
 8017518:	4573      	cmp	r3, lr
 801751a:	4662      	mov	r2, ip
 801751c:	d1f6      	bne.n	801750c <net_ipv6_send_na+0x90>
 801751e:	1d33      	adds	r3, r6, #4
 8017520:	ae08      	add	r6, sp, #32
 8017522:	462a      	mov	r2, r5
 8017524:	ca03      	ldmia	r2!, {r0, r1}
 8017526:	42b2      	cmp	r2, r6
 8017528:	6018      	str	r0, [r3, #0]
 801752a:	6059      	str	r1, [r3, #4]
 801752c:	4615      	mov	r5, r2
 801752e:	f103 0308 	add.w	r3, r3, #8
 8017532:	d1f6      	bne.n	8017522 <net_ipv6_send_na+0xa6>
	if (net_pkt_set_data(pkt, &na_access)) {
 8017534:	a902      	add	r1, sp, #8
 8017536:	4620      	mov	r0, r4
 8017538:	f7ff fc72 	bl	8016e20 <net_pkt_set_data>
 801753c:	4605      	mov	r5, r0
 801753e:	2800      	cmp	r0, #0
 8017540:	d1c1      	bne.n	80174c6 <net_ipv6_send_na+0x4a>
	return &iface->if_dev->link_addr;
 8017542:	f8d8 1000 	ldr.w	r1, [r8]
	if (!set_llao(pkt, net_if_get_link_addr(iface),
 8017546:	2302      	movs	r3, #2
 8017548:	463a      	mov	r2, r7
 801754a:	3110      	adds	r1, #16
 801754c:	4620      	mov	r0, r4
 801754e:	f7ff ff15 	bl	801737c <set_llao>
 8017552:	2800      	cmp	r0, #0
 8017554:	d0b7      	beq.n	80174c6 <net_ipv6_send_na+0x4a>
	net_pkt_cursor_init(pkt);
 8017556:	4620      	mov	r0, r4
 8017558:	f7ff fa96 	bl	8016a88 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 801755c:	213a      	movs	r1, #58	; 0x3a
 801755e:	4620      	mov	r0, r4
 8017560:	f7ff fe90 	bl	8017284 <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
 8017564:	4620      	mov	r0, r4
 8017566:	f7fe fafe 	bl	8015b66 <net_send_data>
 801756a:	2800      	cmp	r0, #0
 801756c:	dab0      	bge.n	80174d0 <net_ipv6_send_na+0x54>
		ret = -EINVAL;
 801756e:	f06f 0515 	mvn.w	r5, #21
 8017572:	e7aa      	b.n	80174ca <net_ipv6_send_na+0x4e>
		return -ENOMEM;
 8017574:	f06f 050b 	mvn.w	r5, #11
 8017578:	e7aa      	b.n	80174d0 <net_ipv6_send_na+0x54>

0801757a <net_ipv6_nbr_set_reachable_timer>:
	time = net_if_ipv6_get_reachable_time(iface);
 801757a:	6842      	ldr	r2, [r0, #4]
	if (!iface->config.ip.ipv6) {
 801757c:	b10a      	cbz	r2, 8017582 <net_ipv6_nbr_set_reachable_timer+0x8>
	return iface->config.ip.ipv6->reachable_time;
 801757e:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
	ipv6_nd_restart_reachable_timer(nbr, time);
 8017582:	2300      	movs	r3, #0
 8017584:	4608      	mov	r0, r1
 8017586:	f7f5 beb3 	b.w	800d2f0 <ipv6_nd_restart_reachable_timer>

0801758a <net_ipv6_start_dad>:
{
 801758a:	b507      	push	{r0, r1, r2, lr}
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
 801758c:	2301      	movs	r3, #1
 801758e:	9301      	str	r3, [sp, #4]
				&ifaddr->address.in6_addr, true);
 8017590:	3104      	adds	r1, #4
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
 8017592:	2300      	movs	r3, #0
 8017594:	9100      	str	r1, [sp, #0]
 8017596:	461a      	mov	r2, r3
 8017598:	4619      	mov	r1, r3
 801759a:	f7f6 f91f 	bl	800d7dc <net_ipv6_send_ns>
}
 801759e:	b003      	add	sp, #12
 80175a0:	f85d fb04 	ldr.w	pc, [sp], #4

080175a4 <net_ipv6_prepare_for_send>:
{
 80175a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175a6:	b087      	sub	sp, #28
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 80175a8:	2300      	movs	r3, #0
 80175aa:	2228      	movs	r2, #40	; 0x28
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 80175ac:	a904      	add	r1, sp, #16
{
 80175ae:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 80175b0:	e9cd 3204 	strd	r3, r2, [sp, #16]
	struct net_if *iface = NULL;
 80175b4:	9303      	str	r3, [sp, #12]
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 80175b6:	f7f5 fae5 	bl	800cb84 <net_pkt_get_data>
	if (!ip_hdr) {
 80175ba:	4607      	mov	r7, r0
 80175bc:	2800      	cmp	r0, #0
 80175be:	d063      	beq.n	8017688 <net_ipv6_prepare_for_send+0xe4>
	if ((net_pkt_lladdr_dst(pkt)->addr &&
 80175c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80175c2:	b113      	cbz	r3, 80175ca <net_ipv6_prepare_for_send+0x26>
		return NET_OK;
 80175c4:	2000      	movs	r0, #0
}
 80175c6:	b007      	add	sp, #28
 80175c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	      !IS_ENABLED(CONFIG_NET_ROUTING))) ||
 80175ca:	7e03      	ldrb	r3, [r0, #24]
 80175cc:	2bff      	cmp	r3, #255	; 0xff
 80175ce:	d0f9      	beq.n	80175c4 <net_ipv6_prepare_for_send+0x20>
	    net_if_flag_is_set(net_pkt_iface(pkt),
 80175d0:	6a23      	ldr	r3, [r4, #32]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	f3bf 8f5b 	dmb	ish
 80175d8:	68db      	ldr	r3, [r3, #12]
 80175da:	f3bf 8f5b 	dmb	ish
	    net_ipv6_is_addr_mcast(&ip_hdr->dst) ||
 80175de:	079b      	lsls	r3, r3, #30
 80175e0:	d4f0      	bmi.n	80175c4 <net_ipv6_prepare_for_send+0x20>
	if (net_if_ipv6_addr_onlink(&iface, &ip_hdr->dst)) {
 80175e2:	f100 0518 	add.w	r5, r0, #24
 80175e6:	4629      	mov	r1, r5
 80175e8:	a803      	add	r0, sp, #12
 80175ea:	f7f4 f849 	bl	800b680 <net_if_ipv6_addr_onlink>
 80175ee:	2800      	cmp	r0, #0
 80175f0:	d03d      	beq.n	801766e <net_ipv6_prepare_for_send+0xca>
		net_pkt_set_iface(pkt, iface);
 80175f2:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
 80175f4:	6223      	str	r3, [r4, #32]
	if (iface) {
 80175f6:	b13b      	cbz	r3, 8017608 <net_ipv6_prepare_for_send+0x64>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
 80175f8:	681a      	ldr	r2, [r3, #0]
 80175fa:	7d52      	ldrb	r2, [r2, #21]
 80175fc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	7d5b      	ldrb	r3, [r3, #21]
 8017604:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	if (!iface) {
 8017608:	9b03      	ldr	r3, [sp, #12]
 801760a:	b983      	cbnz	r3, 801762e <net_ipv6_prepare_for_send+0x8a>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
 801760c:	4629      	mov	r1, r5
 801760e:	a803      	add	r0, sp, #12
 8017610:	f7f4 f836 	bl	800b680 <net_if_ipv6_addr_onlink>
 8017614:	2800      	cmp	r0, #0
 8017616:	d041      	beq.n	801769c <net_ipv6_prepare_for_send+0xf8>
			net_pkt_set_iface(pkt, iface);
 8017618:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
 801761a:	6223      	str	r3, [r4, #32]
	if (iface) {
 801761c:	b13b      	cbz	r3, 801762e <net_ipv6_prepare_for_send+0x8a>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
 801761e:	681a      	ldr	r2, [r3, #0]
 8017620:	7d52      	ldrb	r2, [r2, #21]
 8017622:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	7d5b      	ldrb	r3, [r3, #21]
 801762a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	nbr = nbr_lookup(&net_neighbor.table, iface, nexthop);
 801762e:	4629      	mov	r1, r5
 8017630:	9803      	ldr	r0, [sp, #12]
 8017632:	f7f5 fdbf 	bl	800d1b4 <nbr_lookup.isra.16>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
 8017636:	4606      	mov	r6, r0
 8017638:	b398      	cbz	r0, 80176a2 <net_ipv6_prepare_for_send+0xfe>
 801763a:	7840      	ldrb	r0, [r0, #1]
 801763c:	28ff      	cmp	r0, #255	; 0xff
 801763e:	d030      	beq.n	80176a2 <net_ipv6_prepare_for_send+0xfe>
		lladdr = net_nbr_get_lladdr(nbr->idx);
 8017640:	f7f5 fc12 	bl	800ce68 <net_nbr_get_lladdr>
		net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
 8017644:	1c83      	adds	r3, r0, #2
 8017646:	6323      	str	r3, [r4, #48]	; 0x30
		net_pkt_lladdr_dst(pkt)->len = lladdr->len;
 8017648:	7843      	ldrb	r3, [r0, #1]
 801764a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
 801764e:	68f3      	ldr	r3, [r6, #12]
 8017650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017654:	2b02      	cmp	r3, #2
 8017656:	d1b5      	bne.n	80175c4 <net_ipv6_prepare_for_send+0x20>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
 8017658:	4630      	mov	r0, r6
 801765a:	2103      	movs	r1, #3
 801765c:	f7f5 fe08 	bl	800d270 <ipv6_nbr_set_state>
			ipv6_nd_restart_reachable_timer(nbr,
 8017660:	f241 3288 	movw	r2, #5000	; 0x1388
 8017664:	2300      	movs	r3, #0
 8017666:	4630      	mov	r0, r6
 8017668:	f7f5 fe42 	bl	800d2f0 <ipv6_nd_restart_reachable_timer>
 801766c:	e7aa      	b.n	80175c4 <net_ipv6_prepare_for_send+0x20>
	route = net_route_lookup(iface, dst);
 801766e:	4629      	mov	r1, r5
 8017670:	f7f6 ff74 	bl	800e55c <net_route_lookup>
	if (route) {
 8017674:	4606      	mov	r6, r0
 8017676:	b148      	cbz	r0, 801768c <net_ipv6_prepare_for_send+0xe8>
		nexthop = net_route_get_nexthop(route);
 8017678:	f7f7 f810 	bl	800e69c <net_route_get_nexthop>
		if (!nexthop) {
 801767c:	4605      	mov	r5, r0
 801767e:	2800      	cmp	r0, #0
 8017680:	d1c2      	bne.n	8017608 <net_ipv6_prepare_for_send+0x64>
			net_route_del(route);
 8017682:	4630      	mov	r0, r6
 8017684:	f7f6 ffc0 	bl	800e608 <net_route_del>
		return NET_DROP;
 8017688:	2002      	movs	r0, #2
 801768a:	e79c      	b.n	80175c6 <net_ipv6_prepare_for_send+0x22>
		router = net_if_ipv6_router_find_default(NULL, dst);
 801768c:	4629      	mov	r1, r5
 801768e:	f7f4 f8eb 	bl	800b868 <net_if_ipv6_router_find_default>
		if (!router) {
 8017692:	2800      	cmp	r0, #0
 8017694:	d0cb      	beq.n	801762e <net_ipv6_prepare_for_send+0x8a>
		nexthop = &router->address.in6_addr;
 8017696:	f100 0508 	add.w	r5, r0, #8
		if (try_route) {
 801769a:	e7b5      	b.n	8017608 <net_ipv6_prepare_for_send+0x64>
			iface = net_pkt_iface(pkt);
 801769c:	6a23      	ldr	r3, [r4, #32]
 801769e:	9303      	str	r3, [sp, #12]
 80176a0:	e7c5      	b.n	801762e <net_ipv6_prepare_for_send+0x8a>
	ret = net_ipv6_send_ns(net_pkt_iface(pkt), pkt,
 80176a2:	2300      	movs	r3, #0
 80176a4:	e9cd 5300 	strd	r5, r3, [sp]
 80176a8:	f107 0208 	add.w	r2, r7, #8
 80176ac:	4621      	mov	r1, r4
 80176ae:	6a20      	ldr	r0, [r4, #32]
 80176b0:	f7f6 f894 	bl	800d7dc <net_ipv6_send_ns>
	return NET_CONTINUE;
 80176b4:	2001      	movs	r0, #1
 80176b6:	e786      	b.n	80175c6 <net_ipv6_prepare_for_send+0x22>

080176b8 <net_ipv6_send_rs>:
{
 80176b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176ba:	b087      	sub	sp, #28
 80176bc:	4607      	mov	r7, r0
	net_ipv6_addr_create_ll_allnodes_mcast(&dst);
 80176be:	a802      	add	r0, sp, #8
 80176c0:	f7ff fe90 	bl	80173e4 <net_ipv6_addr_create_ll_allnodes_mcast>
	src = net_if_ipv6_select_src_addr(iface, &dst);
 80176c4:	a902      	add	r1, sp, #8
 80176c6:	4638      	mov	r0, r7
 80176c8:	f7f4 f952 	bl	800b970 <net_if_ipv6_select_src_addr>
 80176cc:	4606      	mov	r6, r0
	if (!net_ipv6_is_addr_unspecified(src)) {
 80176ce:	f7ff fe25 	bl	801731c <net_ipv6_is_addr_unspecified>
 80176d2:	bb00      	cbnz	r0, 8017716 <net_ipv6_send_rs+0x5e>
	u8_t total_len = net_if_get_link_addr(iface)->len +
 80176d4:	683b      	ldr	r3, [r7, #0]
	return ROUND_UP(total_len, 8U);
 80176d6:	7d1d      	ldrb	r5, [r3, #20]
 80176d8:	3509      	adds	r5, #9
 80176da:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
	pkt = net_pkt_alloc_with_buffer(iface,
 80176de:	2364      	movs	r3, #100	; 0x64
 80176e0:	9300      	str	r3, [sp, #0]
 80176e2:	2202      	movs	r2, #2
 80176e4:	233a      	movs	r3, #58	; 0x3a
 80176e6:	1d29      	adds	r1, r5, #4
 80176e8:	4638      	mov	r0, r7
 80176ea:	f7f5 fa2f 	bl	800cb4c <net_pkt_alloc_with_buffer>
	if (!pkt) {
 80176ee:	4604      	mov	r4, r0
 80176f0:	2800      	cmp	r0, #0
 80176f2:	d03a      	beq.n	801776a <net_ipv6_send_rs+0xb2>
	pkt->ipv6_hop_limit = hop_limit;
 80176f4:	23ff      	movs	r3, #255	; 0xff
	if (net_ipv6_create(pkt, src, &dst) ||
 80176f6:	aa02      	add	r2, sp, #8
 80176f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80176fc:	4631      	mov	r1, r6
 80176fe:	f7ff fd5e 	bl	80171be <net_ipv6_create>
 8017702:	4602      	mov	r2, r0
 8017704:	b148      	cbz	r0, 801771a <net_ipv6_send_rs+0x62>
	int ret = -ENOBUFS;
 8017706:	f06f 0668 	mvn.w	r6, #104	; 0x68
	net_pkt_unref(pkt);
 801770a:	4620      	mov	r0, r4
 801770c:	f7ff f93e 	bl	801698c <net_pkt_unref>
}
 8017710:	4630      	mov	r0, r6
 8017712:	b007      	add	sp, #28
 8017714:	bdf0      	pop	{r4, r5, r6, r7, pc}
	u8_t llao_len = 0U;
 8017716:	2500      	movs	r5, #0
 8017718:	e7e1      	b.n	80176de <net_ipv6_send_rs+0x26>
	    net_icmpv6_create(pkt, NET_ICMPV6_RS, 0) ||
 801771a:	2185      	movs	r1, #133	; 0x85
 801771c:	4620      	mov	r0, r4
 801771e:	f7ff fbb7 	bl	8016e90 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, &dst) ||
 8017722:	4601      	mov	r1, r0
 8017724:	2800      	cmp	r0, #0
 8017726:	d1ee      	bne.n	8017706 <net_ipv6_send_rs+0x4e>
	    net_pkt_memset(pkt, 0, sizeof(struct net_icmpv6_rs_hdr))) {
 8017728:	2204      	movs	r2, #4
 801772a:	4620      	mov	r0, r4
 801772c:	f7ff fa31 	bl	8016b92 <net_pkt_memset>
	    net_icmpv6_create(pkt, NET_ICMPV6_RS, 0) ||
 8017730:	4606      	mov	r6, r0
 8017732:	2800      	cmp	r0, #0
 8017734:	d1e7      	bne.n	8017706 <net_ipv6_send_rs+0x4e>
	if (llao_len > 0) {
 8017736:	b975      	cbnz	r5, 8017756 <net_ipv6_send_rs+0x9e>
	net_pkt_cursor_init(pkt);
 8017738:	4620      	mov	r0, r4
 801773a:	f7ff f9a5 	bl	8016a88 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 801773e:	213a      	movs	r1, #58	; 0x3a
 8017740:	4620      	mov	r0, r4
 8017742:	f7ff fd9f 	bl	8017284 <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
 8017746:	4620      	mov	r0, r4
 8017748:	f7fe fa0d 	bl	8015b66 <net_send_data>
 801774c:	2800      	cmp	r0, #0
 801774e:	dadf      	bge.n	8017710 <net_ipv6_send_rs+0x58>
		ret = -EINVAL;
 8017750:	f06f 0615 	mvn.w	r6, #21
 8017754:	e7d9      	b.n	801770a <net_ipv6_send_rs+0x52>
	return &iface->if_dev->link_addr;
 8017756:	6839      	ldr	r1, [r7, #0]
		if (!set_llao(pkt, net_if_get_link_addr(iface),
 8017758:	2301      	movs	r3, #1
 801775a:	462a      	mov	r2, r5
 801775c:	3110      	adds	r1, #16
 801775e:	4620      	mov	r0, r4
 8017760:	f7ff fe0c 	bl	801737c <set_llao>
 8017764:	2800      	cmp	r0, #0
 8017766:	d1e7      	bne.n	8017738 <net_ipv6_send_rs+0x80>
 8017768:	e7cd      	b.n	8017706 <net_ipv6_send_rs+0x4e>
		return -ENOMEM;
 801776a:	f06f 060b 	mvn.w	r6, #11
 801776e:	e7cf      	b.n	8017710 <net_ipv6_send_rs+0x58>

08017770 <net_ipv6_start_rs>:
	return net_ipv6_send_rs(iface);
 8017770:	f7ff bfa2 	b.w	80176b8 <net_ipv6_send_rs>

08017774 <net_pkt_write_be16>:
{
 8017774:	b507      	push	{r0, r1, r2, lr}
	u16_t data_be16 = htons(data);
 8017776:	ba49      	rev16	r1, r1
 8017778:	f8ad 1006 	strh.w	r1, [sp, #6]
	return net_pkt_write(pkt, &data_be16, sizeof(u16_t));
 801777c:	2202      	movs	r2, #2
 801777e:	f10d 0106 	add.w	r1, sp, #6
 8017782:	f7ff fb32 	bl	8016dea <net_pkt_write>
}
 8017786:	b003      	add	sp, #12
 8017788:	f85d fb04 	ldr.w	pc, [sp], #4

0801778c <mld_create>:
{
 801778c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017790:	b08c      	sub	sp, #48	; 0x30
 8017792:	460c      	mov	r4, r1
 8017794:	461e      	mov	r6, r3
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
 8017796:	af07      	add	r7, sp, #28
 8017798:	2314      	movs	r3, #20
				net_pkt_get_data(pkt, &mld_access);
 801779a:	a901      	add	r1, sp, #4
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
 801779c:	9302      	str	r3, [sp, #8]
{
 801779e:	4605      	mov	r5, r0
 80177a0:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
 80177a2:	9701      	str	r7, [sp, #4]
				net_pkt_get_data(pkt, &mld_access);
 80177a4:	f7f5 f9ee 	bl	800cb84 <net_pkt_get_data>
	if (!mld) {
 80177a8:	4603      	mov	r3, r0
 80177aa:	b368      	cbz	r0, 8017808 <mld_create+0x7c>
	mld->aux_data_len = 0U;
 80177ac:	2200      	movs	r2, #0
 80177ae:	7042      	strb	r2, [r0, #1]
	net_ipaddr_copy(&mld->mcast_address, addr);
 80177b0:	f10d 0c0c 	add.w	ip, sp, #12
	mld->num_sources = htons(num_sources);
 80177b4:	0232      	lsls	r2, r6, #8
	mld->record_type = record_type;
 80177b6:	f880 8000 	strb.w	r8, [r0]
	mld->num_sources = htons(num_sources);
 80177ba:	8042      	strh	r2, [r0, #2]
	net_ipaddr_copy(&mld->mcast_address, addr);
 80177bc:	f104 0810 	add.w	r8, r4, #16
 80177c0:	4622      	mov	r2, r4
 80177c2:	4664      	mov	r4, ip
 80177c4:	6810      	ldr	r0, [r2, #0]
 80177c6:	6851      	ldr	r1, [r2, #4]
 80177c8:	46e6      	mov	lr, ip
 80177ca:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80177ce:	3208      	adds	r2, #8
 80177d0:	4542      	cmp	r2, r8
 80177d2:	46f4      	mov	ip, lr
 80177d4:	d1f6      	bne.n	80177c4 <mld_create+0x38>
 80177d6:	3304      	adds	r3, #4
 80177d8:	4622      	mov	r2, r4
 80177da:	ca03      	ldmia	r2!, {r0, r1}
 80177dc:	42ba      	cmp	r2, r7
 80177de:	6018      	str	r0, [r3, #0]
 80177e0:	6059      	str	r1, [r3, #4]
 80177e2:	4614      	mov	r4, r2
 80177e4:	f103 0308 	add.w	r3, r3, #8
 80177e8:	d1f6      	bne.n	80177d8 <mld_create+0x4c>
	if (net_pkt_set_data(pkt, &mld_access)) {
 80177ea:	a901      	add	r1, sp, #4
 80177ec:	4628      	mov	r0, r5
 80177ee:	f7ff fb17 	bl	8016e20 <net_pkt_set_data>
 80177f2:	4604      	mov	r4, r0
 80177f4:	b940      	cbnz	r0, 8017808 <mld_create+0x7c>
	if (num_sources > 0) {
 80177f6:	b14e      	cbz	r6, 801780c <mld_create+0x80>
				  net_ipv6_unspecified_address()->s6_addr,
 80177f8:	f7f4 fc84 	bl	800c104 <net_ipv6_unspecified_address>
		if (net_pkt_write(pkt,
 80177fc:	2210      	movs	r2, #16
 80177fe:	4601      	mov	r1, r0
 8017800:	4628      	mov	r0, r5
 8017802:	f7ff faf2 	bl	8016dea <net_pkt_write>
 8017806:	b108      	cbz	r0, 801780c <mld_create+0x80>
			return -ENOBUFS;
 8017808:	f06f 0468 	mvn.w	r4, #104	; 0x68
}
 801780c:	4620      	mov	r0, r4
 801780e:	b00c      	add	sp, #48	; 0x30
 8017810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017814 <mld_send>:
{
 8017814:	b510      	push	{r4, lr}
 8017816:	4604      	mov	r4, r0
	net_pkt_cursor_init(pkt);
 8017818:	f7ff f936 	bl	8016a88 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 801781c:	213a      	movs	r1, #58	; 0x3a
 801781e:	4620      	mov	r0, r4
 8017820:	f7ff fd30 	bl	8017284 <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
 8017824:	4620      	mov	r0, r4
 8017826:	f7fe f99e 	bl	8015b66 <net_send_data>
 801782a:	2800      	cmp	r0, #0
 801782c:	da05      	bge.n	801783a <mld_send+0x26>
		net_pkt_unref(pkt);
 801782e:	4620      	mov	r0, r4
 8017830:	f7ff f8ac 	bl	801698c <net_pkt_unref>
		return -1;
 8017834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8017838:	bd10      	pop	{r4, pc}
	return 0;
 801783a:	2000      	movs	r0, #0
 801783c:	e7fc      	b.n	8017838 <mld_send+0x24>

0801783e <mld_create_packet>:
{
 801783e:	b570      	push	{r4, r5, r6, lr}
 8017840:	b086      	sub	sp, #24
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
 8017842:	f240 23ff 	movw	r3, #767	; 0x2ff
 8017846:	4604      	mov	r4, r0
 8017848:	460e      	mov	r6, r1
 801784a:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
 801784e:	2300      	movs	r3, #0
 8017850:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
 8017854:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
 8017858:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
 801785c:	f8ad 3010 	strh.w	r3, [sp, #16]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
 8017860:	f8ad 3012 	strh.w	r3, [sp, #18]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
 8017864:	f8ad 3014 	strh.w	r3, [sp, #20]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
 8017868:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 801786c:	f8ad 3016 	strh.w	r3, [sp, #22]
	pkt->ipv6_hop_limit = hop_limit;
 8017870:	2501      	movs	r5, #1
 8017872:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
	if (net_ipv6_create(pkt, net_if_ipv6_select_src_addr(
 8017876:	a902      	add	r1, sp, #8
 8017878:	6a00      	ldr	r0, [r0, #32]
 801787a:	f7f4 f879 	bl	800b970 <net_if_ipv6_select_src_addr>
 801787e:	aa02      	add	r2, sp, #8
 8017880:	4601      	mov	r1, r0
 8017882:	4620      	mov	r0, r4
 8017884:	f7ff fc9b 	bl	80171be <net_ipv6_create>
 8017888:	b118      	cbz	r0, 8017892 <mld_create_packet+0x54>
		return -ENOBUFS;
 801788a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 801788e:	b006      	add	sp, #24
 8017890:	bd70      	pop	{r4, r5, r6, pc}
	if (net_pkt_write_u8(pkt, IPPROTO_ICMPV6) ||
 8017892:	233a      	movs	r3, #58	; 0x3a
	return net_pkt_write(pkt, &data, sizeof(u8_t));
 8017894:	462a      	mov	r2, r5
 8017896:	f10d 0107 	add.w	r1, sp, #7
 801789a:	4620      	mov	r0, r4
 801789c:	f88d 3007 	strb.w	r3, [sp, #7]
 80178a0:	f7ff faa3 	bl	8016dea <net_pkt_write>
 80178a4:	2800      	cmp	r0, #0
 80178a6:	d1f0      	bne.n	801788a <mld_create_packet+0x4c>
 80178a8:	f88d 0007 	strb.w	r0, [sp, #7]
 80178ac:	462a      	mov	r2, r5
 80178ae:	f10d 0107 	add.w	r1, sp, #7
 80178b2:	4620      	mov	r0, r4
 80178b4:	f7ff fa99 	bl	8016dea <net_pkt_write>
 80178b8:	2800      	cmp	r0, #0
 80178ba:	d1e6      	bne.n	801788a <mld_create_packet+0x4c>
	if (net_pkt_write_be16(pkt, 0x0502) ||
 80178bc:	f240 5102 	movw	r1, #1282	; 0x502
 80178c0:	4620      	mov	r0, r4
 80178c2:	f7ff ff57 	bl	8017774 <net_pkt_write_be16>
 80178c6:	4601      	mov	r1, r0
 80178c8:	2800      	cmp	r0, #0
 80178ca:	d1de      	bne.n	801788a <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0) ||
 80178cc:	4620      	mov	r0, r4
 80178ce:	f7ff ff51 	bl	8017774 <net_pkt_write_be16>
	if (net_pkt_write_be16(pkt, 0x0502) ||
 80178d2:	4601      	mov	r1, r0
 80178d4:	2800      	cmp	r0, #0
 80178d6:	d1d8      	bne.n	801788a <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0)) {
 80178d8:	4620      	mov	r0, r4
 80178da:	f7ff ff4b 	bl	8017774 <net_pkt_write_be16>
	    net_pkt_write_be16(pkt, 0) ||
 80178de:	4602      	mov	r2, r0
 80178e0:	2800      	cmp	r0, #0
 80178e2:	d1d2      	bne.n	801788a <mld_create_packet+0x4c>
	pkt->ipv6_ext_len = len;
 80178e4:	2308      	movs	r3, #8
	if (net_icmpv6_create(pkt, NET_ICMPV6_MLDv2, 0) ||
 80178e6:	218f      	movs	r1, #143	; 0x8f
 80178e8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80178ea:	4620      	mov	r0, r4
 80178ec:	f7ff fad0 	bl	8016e90 <net_icmpv6_create>
 80178f0:	4601      	mov	r1, r0
 80178f2:	2800      	cmp	r0, #0
 80178f4:	d1c9      	bne.n	801788a <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0) ||
 80178f6:	4620      	mov	r0, r4
 80178f8:	f7ff ff3c 	bl	8017774 <net_pkt_write_be16>
	if (net_icmpv6_create(pkt, NET_ICMPV6_MLDv2, 0) ||
 80178fc:	2800      	cmp	r0, #0
 80178fe:	d1c4      	bne.n	801788a <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, count)) {
 8017900:	4631      	mov	r1, r6
 8017902:	4620      	mov	r0, r4
 8017904:	f7ff ff36 	bl	8017774 <net_pkt_write_be16>
	    net_pkt_write_be16(pkt, 0) ||
 8017908:	2800      	cmp	r0, #0
 801790a:	d1be      	bne.n	801788a <mld_create_packet+0x4c>
	pkt->ipv6_next_hdr = next_hdr;
 801790c:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
	return 0;
 8017910:	e7bd      	b.n	801788e <mld_create_packet+0x50>

08017912 <mld_send_generic>:
{
 8017912:	b573      	push	{r0, r1, r4, r5, r6, lr}
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
 8017914:	2332      	movs	r3, #50	; 0x32
 8017916:	9300      	str	r3, [sp, #0]
{
 8017918:	460c      	mov	r4, r1
 801791a:	4616      	mov	r6, r2
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
 801791c:	233a      	movs	r3, #58	; 0x3a
 801791e:	2202      	movs	r2, #2
 8017920:	2130      	movs	r1, #48	; 0x30
 8017922:	f7f5 f913 	bl	800cb4c <net_pkt_alloc_with_buffer>
	if (!pkt) {
 8017926:	4605      	mov	r5, r0
 8017928:	b1d0      	cbz	r0, 8017960 <mld_send_generic+0x4e>
	if (mld_create_packet(pkt, 1) ||
 801792a:	2101      	movs	r1, #1
 801792c:	f7ff ff87 	bl	801783e <mld_create_packet>
 8017930:	b128      	cbz	r0, 801793e <mld_send_generic+0x2c>
		ret = -ENOBUFS;
 8017932:	f06f 0468 	mvn.w	r4, #104	; 0x68
	net_pkt_unref(pkt);
 8017936:	4628      	mov	r0, r5
 8017938:	f7ff f828 	bl	801698c <net_pkt_unref>
	return ret;
 801793c:	e00d      	b.n	801795a <mld_send_generic+0x48>
	    mld_create(pkt, addr, mode, 1)) {
 801793e:	2301      	movs	r3, #1
 8017940:	4632      	mov	r2, r6
 8017942:	4621      	mov	r1, r4
 8017944:	4628      	mov	r0, r5
 8017946:	f7ff ff21 	bl	801778c <mld_create>
	if (mld_create_packet(pkt, 1) ||
 801794a:	2800      	cmp	r0, #0
 801794c:	d1f1      	bne.n	8017932 <mld_send_generic+0x20>
	ret = mld_send(pkt);
 801794e:	4628      	mov	r0, r5
 8017950:	f7ff ff60 	bl	8017814 <mld_send>
	if (ret) {
 8017954:	4604      	mov	r4, r0
 8017956:	2800      	cmp	r0, #0
 8017958:	d1ed      	bne.n	8017936 <mld_send_generic+0x24>
}
 801795a:	4620      	mov	r0, r4
 801795c:	b002      	add	sp, #8
 801795e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
 8017960:	f06f 040b 	mvn.w	r4, #11
 8017964:	e7f9      	b.n	801795a <mld_send_generic+0x48>

08017966 <handle_mld_query>:
{
 8017966:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(mld_access,
 801796a:	2500      	movs	r5, #0
 801796c:	2318      	movs	r3, #24
 801796e:	e9cd 5302 	strd	r5, r3, [sp, #8]
	u16_t length = net_pkt_get_len(pkt);
 8017972:	6904      	ldr	r4, [r0, #16]
{
 8017974:	4606      	mov	r6, r0
 8017976:	4688      	mov	r8, r1
 8017978:	4617      	mov	r7, r2
	while (buf) {
 801797a:	b95c      	cbnz	r4, 8017994 <handle_mld_query+0x2e>
				net_pkt_get_data(pkt, &mld_access);
 801797c:	a902      	add	r1, sp, #8
 801797e:	4630      	mov	r0, r6
 8017980:	f7f5 f900 	bl	800cb84 <net_pkt_get_data>
	u16_t length = net_pkt_get_len(pkt);
 8017984:	b2ad      	uxth	r5, r5
	if (!mld_query) {
 8017986:	4681      	mov	r9, r0
 8017988:	b940      	cbnz	r0, 801799c <handle_mld_query+0x36>
	return NET_DROP;
 801798a:	2702      	movs	r7, #2
}
 801798c:	4638      	mov	r0, r7
 801798e:	b004      	add	sp, #16
 8017990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
 8017994:	89a3      	ldrh	r3, [r4, #12]
		buf = buf->frags;
 8017996:	6824      	ldr	r4, [r4, #0]
		bytes += buf->len;
 8017998:	441d      	add	r5, r3
		buf = buf->frags;
 801799a:	e7ee      	b.n	801797a <handle_mld_query+0x14>
	return net_pkt_skip(pkt, access->size);
 801799c:	9903      	ldr	r1, [sp, #12]
 801799e:	4630      	mov	r0, r6
 80179a0:	f7ff f8ec 	bl	8016b7c <net_pkt_skip>
	mld_query->num_sources = ntohs(mld_query->num_sources);
 80179a4:	f8b9 2016 	ldrh.w	r2, [r9, #22]
 80179a8:	0213      	lsls	r3, r2, #8
 80179aa:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 80179ae:	b29a      	uxth	r2, r3
 80179b0:	f8a9 2016 	strh.w	r2, [r9, #22]
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
 80179b4:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 80179b6:	3344      	adds	r3, #68	; 0x44
 80179b8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80179bc:	b29b      	uxth	r3, r3
	if (length < pkt_len || pkt_len > NET_IPV6_MTU ||
 80179be:	429d      	cmp	r5, r3
 80179c0:	d3e3      	bcc.n	801798a <handle_mld_query+0x24>
 80179c2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80179c6:	d8e0      	bhi.n	801798a <handle_mld_query+0x24>
 80179c8:	f898 3007 	ldrb.w	r3, [r8, #7]
 80179cc:	2b01      	cmp	r3, #1
 80179ce:	d1dc      	bne.n	801798a <handle_mld_query+0x24>
	    ip_hdr->hop_limit != 1U || icmp_hdr->code != 0U) {
 80179d0:	787f      	ldrb	r7, [r7, #1]
 80179d2:	2f00      	cmp	r7, #0
 80179d4:	d1d9      	bne.n	801798a <handle_mld_query+0x24>
	if (!net_ipv6_addr_cmp(&mld_query->mcast_address,
 80179d6:	f7f4 fb95 	bl	800c104 <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 80179da:	2210      	movs	r2, #16
 80179dc:	4601      	mov	r1, r0
 80179de:	f109 0004 	add.w	r0, r9, #4
 80179e2:	f7ec ff8e 	bl	8004902 <memcmp>
 80179e6:	4605      	mov	r5, r0
 80179e8:	2800      	cmp	r0, #0
 80179ea:	d1ce      	bne.n	801798a <handle_mld_query+0x24>
	send_mld_report(net_pkt_iface(pkt));
 80179ec:	6a30      	ldr	r0, [r6, #32]
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 80179ee:	f8d0 9004 	ldr.w	r9, [r0, #4]
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
 80179f2:	2218      	movs	r2, #24
 80179f4:	fb02 9304 	mla	r3, r2, r4, r9
 80179f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80179fc:	07d9      	lsls	r1, r3, #31
 80179fe:	d502      	bpl.n	8017a06 <handle_mld_query+0xa0>
 8017a00:	0799      	lsls	r1, r3, #30
		count++;
 8017a02:	bf48      	it	mi
 8017a04:	3501      	addmi	r5, #1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 8017a06:	3401      	adds	r4, #1
 8017a08:	2c03      	cmp	r4, #3
 8017a0a:	d1f3      	bne.n	80179f4 <handle_mld_query+0x8e>
					count * MLDv2_MCAST_RECORD_LEN,
 8017a0c:	2114      	movs	r1, #20
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
 8017a0e:	2332      	movs	r3, #50	; 0x32
					count * MLDv2_MCAST_RECORD_LEN,
 8017a10:	4369      	muls	r1, r5
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
 8017a12:	9300      	str	r3, [sp, #0]
 8017a14:	2202      	movs	r2, #2
 8017a16:	233a      	movs	r3, #58	; 0x3a
 8017a18:	310c      	adds	r1, #12
 8017a1a:	f7f5 f897 	bl	800cb4c <net_pkt_alloc_with_buffer>
	if (!pkt) {
 8017a1e:	4680      	mov	r8, r0
 8017a20:	b328      	cbz	r0, 8017a6e <handle_mld_query+0x108>
	if (mld_create_packet(pkt, count)) {
 8017a22:	b2a9      	uxth	r1, r5
 8017a24:	f7ff ff0b 	bl	801783e <mld_create_packet>
 8017a28:	4604      	mov	r4, r0
 8017a2a:	b9e8      	cbnz	r0, 8017a68 <handle_mld_query+0x102>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
 8017a2c:	f04f 0a18 	mov.w	sl, #24
		if (!mld_create(pkt, &ipv6->mcast[i].address.in6_addr,
 8017a30:	f109 0564 	add.w	r5, r9, #100	; 0x64
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
 8017a34:	fb0a f104 	mul.w	r1, sl, r4
 8017a38:	eb09 0301 	add.w	r3, r9, r1
 8017a3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8017a40:	07da      	lsls	r2, r3, #31
 8017a42:	d407      	bmi.n	8017a54 <handle_mld_query+0xee>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 8017a44:	3401      	adds	r4, #1
 8017a46:	2c03      	cmp	r4, #3
 8017a48:	d1f4      	bne.n	8017a34 <handle_mld_query+0xce>
	if (!mld_send(pkt)) {
 8017a4a:	4640      	mov	r0, r8
 8017a4c:	f7ff fee2 	bl	8017814 <mld_send>
 8017a50:	b950      	cbnz	r0, 8017a68 <handle_mld_query+0x102>
 8017a52:	e00c      	b.n	8017a6e <handle_mld_query+0x108>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
 8017a54:	079b      	lsls	r3, r3, #30
 8017a56:	d5f5      	bpl.n	8017a44 <handle_mld_query+0xde>
		if (!mld_create(pkt, &ipv6->mcast[i].address.in6_addr,
 8017a58:	2300      	movs	r3, #0
 8017a5a:	2202      	movs	r2, #2
 8017a5c:	4429      	add	r1, r5
 8017a5e:	4640      	mov	r0, r8
 8017a60:	f7ff fe94 	bl	801778c <mld_create>
 8017a64:	2800      	cmp	r0, #0
 8017a66:	d1ed      	bne.n	8017a44 <handle_mld_query+0xde>
	net_pkt_unref(pkt);
 8017a68:	4640      	mov	r0, r8
 8017a6a:	f7fe ff8f 	bl	801698c <net_pkt_unref>
	net_pkt_unref(pkt);
 8017a6e:	4630      	mov	r0, r6
 8017a70:	f7fe ff8c 	bl	801698c <net_pkt_unref>
	return NET_OK;
 8017a74:	e78a      	b.n	801798c <handle_mld_query+0x26>

08017a76 <net_route_entry_remove>:
 8017a76:	4770      	bx	lr

08017a78 <net_route_get_info>:
{
 8017a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a7a:	4607      	mov	r7, r0
 8017a7c:	460d      	mov	r5, r1
 8017a7e:	4616      	mov	r6, r2
 8017a80:	461c      	mov	r4, r3
	if (net_ipv6_nbr_lookup(iface, dst)) {
 8017a82:	f7ff fcf9 	bl	8017478 <net_ipv6_nbr_lookup>
 8017a86:	b120      	cbz	r0, 8017a92 <net_route_get_info+0x1a>
		*route = NULL;
 8017a88:	2300      	movs	r3, #0
 8017a8a:	6033      	str	r3, [r6, #0]
		*nexthop = dst;
 8017a8c:	6025      	str	r5, [r4, #0]
		return true;
 8017a8e:	2001      	movs	r0, #1
 8017a90:	e00b      	b.n	8017aaa <net_route_get_info+0x32>
	*route = net_route_lookup(iface, dst);
 8017a92:	4629      	mov	r1, r5
 8017a94:	4638      	mov	r0, r7
 8017a96:	f7f6 fd61 	bl	800e55c <net_route_lookup>
 8017a9a:	6030      	str	r0, [r6, #0]
	if (*route) {
 8017a9c:	b130      	cbz	r0, 8017aac <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
 8017a9e:	f7f6 fdfd 	bl	800e69c <net_route_get_nexthop>
 8017aa2:	6020      	str	r0, [r4, #0]
		if (!*nexthop) {
 8017aa4:	3000      	adds	r0, #0
 8017aa6:	bf18      	it	ne
 8017aa8:	2001      	movne	r0, #1
}
 8017aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
 8017aac:	4629      	mov	r1, r5
 8017aae:	f7f3 fedb 	bl	800b868 <net_if_ipv6_router_find_default>
		if (!router) {
 8017ab2:	2800      	cmp	r0, #0
 8017ab4:	d0f9      	beq.n	8017aaa <net_route_get_info+0x32>
		*nexthop = &router->address.in6_addr;
 8017ab6:	3008      	adds	r0, #8
 8017ab8:	6020      	str	r0, [r4, #0]
 8017aba:	e7e8      	b.n	8017a8e <net_route_get_info+0x16>

08017abc <net_route_init>:
	NET_DBG("Allocated %d routing entries (%zu bytes)",
		CONFIG_NET_MAX_ROUTES, sizeof(net_route_entries_pool));

	NET_DBG("Allocated %d nexthop entries (%zu bytes)",
		CONFIG_NET_MAX_NEXTHOPS, sizeof(net_route_nexthop_pool));
}
 8017abc:	4770      	bx	lr

08017abe <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8017abe:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8017ac0:	b942      	cbnz	r2, 8017ad4 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8017ac2:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8017ac4:	b933      	cbnz	r3, 8017ad4 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8017ac6:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8017ac8:	b922      	cbnz	r2, 8017ad4 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
 8017aca:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8017acc:	fab0 f080 	clz	r0, r0
 8017ad0:	0940      	lsrs	r0, r0, #5
 8017ad2:	4770      	bx	lr
 8017ad4:	2000      	movs	r0, #0
 8017ad6:	4770      	bx	lr

08017ad8 <net_udp_create>:
#include "net_stats.h"

#define PKT_WAIT_TIME K_SECONDS(1)

int net_udp_create(struct net_pkt *pkt, u16_t src_port, u16_t dst_port)
{
 8017ad8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 8017ada:	2308      	movs	r3, #8
{
 8017adc:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
 8017ade:	eb0d 0103 	add.w	r1, sp, r3
{
 8017ae2:	4604      	mov	r4, r0
 8017ae4:	4615      	mov	r5, r2
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 8017ae6:	f8cd d008 	str.w	sp, [sp, #8]
 8017aea:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
 8017aec:	f7f5 f84a 	bl	800cb84 <net_pkt_get_data>
	if (!udp_hdr) {
 8017af0:	b160      	cbz	r0, 8017b0c <net_udp_create+0x34>
		return -ENOBUFS;
	}

	udp_hdr->src_port = src_port;
	udp_hdr->dst_port = dst_port;
	udp_hdr->len      = 0U;
 8017af2:	2300      	movs	r3, #0
	udp_hdr->src_port = src_port;
 8017af4:	8006      	strh	r6, [r0, #0]
	udp_hdr->dst_port = dst_port;
 8017af6:	8045      	strh	r5, [r0, #2]
	udp_hdr->len      = 0U;
 8017af8:	7103      	strb	r3, [r0, #4]
 8017afa:	7143      	strb	r3, [r0, #5]
	udp_hdr->chksum   = 0U;
 8017afc:	7183      	strb	r3, [r0, #6]
 8017afe:	71c3      	strb	r3, [r0, #7]

	return net_pkt_set_data(pkt, &udp_access);
 8017b00:	a902      	add	r1, sp, #8
 8017b02:	4620      	mov	r0, r4
 8017b04:	f7ff f98c 	bl	8016e20 <net_pkt_set_data>
}
 8017b08:	b004      	add	sp, #16
 8017b0a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
 8017b0c:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8017b10:	e7fa      	b.n	8017b08 <net_udp_create+0x30>

08017b12 <net_udp_finalize>:

int net_udp_finalize(struct net_pkt *pkt)
{
 8017b12:	b530      	push	{r4, r5, lr}
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 8017b14:	2308      	movs	r3, #8
{
 8017b16:	b085      	sub	sp, #20
	struct net_udp_hdr *udp_hdr;
	u16_t length;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
 8017b18:	eb0d 0103 	add.w	r1, sp, r3
{
 8017b1c:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 8017b1e:	f8cd d008 	str.w	sp, [sp, #8]
 8017b22:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
 8017b24:	f7f5 f82e 	bl	800cb84 <net_pkt_get_data>
	if (!udp_hdr) {
 8017b28:	4605      	mov	r5, r0
 8017b2a:	b308      	cbz	r0, 8017b70 <net_udp_finalize+0x5e>
		return -ENOBUFS;
	}

	length = net_pkt_get_len(pkt) -
 8017b2c:	6922      	ldr	r2, [r4, #16]
	size_t bytes = 0;
 8017b2e:	2300      	movs	r3, #0
	while (buf) {
 8017b30:	b9d2      	cbnz	r2, 8017b68 <net_udp_finalize+0x56>
		net_pkt_ip_hdr_len(pkt) -
 8017b32:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	length = net_pkt_get_len(pkt) -
 8017b36:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
		net_pkt_ipv6_ext_len(pkt);
	udp_hdr->len = htons(length);

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
 8017b38:	6a20      	ldr	r0, [r4, #32]
	length = net_pkt_get_len(pkt) -
 8017b3a:	440a      	add	r2, r1
 8017b3c:	1a9b      	subs	r3, r3, r2
	udp_hdr->len = htons(length);
 8017b3e:	ba5b      	rev16	r3, r3
 8017b40:	80ab      	strh	r3, [r5, #4]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
 8017b42:	f7f4 f80f 	bl	800bb64 <net_if_need_calc_tx_checksum>
 8017b46:	b148      	cbz	r0, 8017b5c <net_udp_finalize+0x4a>
	u16_t chksum = net_calc_chksum(pkt, IPPROTO_UDP);
 8017b48:	2111      	movs	r1, #17
 8017b4a:	4620      	mov	r0, r4
 8017b4c:	f7fe fb42 	bl	80161d4 <net_calc_chksum>
		udp_hdr->chksum = net_calc_chksum_udp(pkt);
 8017b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b54:	2800      	cmp	r0, #0
 8017b56:	bf08      	it	eq
 8017b58:	4618      	moveq	r0, r3
 8017b5a:	80e8      	strh	r0, [r5, #6]
	}

	return net_pkt_set_data(pkt, &udp_access);
 8017b5c:	a902      	add	r1, sp, #8
 8017b5e:	4620      	mov	r0, r4
 8017b60:	f7ff f95e 	bl	8016e20 <net_pkt_set_data>
}
 8017b64:	b005      	add	sp, #20
 8017b66:	bd30      	pop	{r4, r5, pc}
		bytes += buf->len;
 8017b68:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
 8017b6a:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
 8017b6c:	440b      	add	r3, r1
		buf = buf->frags;
 8017b6e:	e7df      	b.n	8017b30 <net_udp_finalize+0x1e>
		return -ENOBUFS;
 8017b70:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8017b74:	e7f6      	b.n	8017b64 <net_udp_finalize+0x52>

08017b76 <net_udp_input>:
	return net_conn_unregister(handle);
}

struct net_udp_hdr *net_udp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *udp_access)
{
 8017b76:	b570      	push	{r4, r5, r6, lr}
 8017b78:	4604      	mov	r4, r0
 8017b7a:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, udp_access);
 8017b7c:	f7f5 f802 	bl	800cb84 <net_pkt_get_data>
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
 8017b80:	4605      	mov	r5, r0
 8017b82:	b1e8      	cbz	r0, 8017bc0 <net_udp_input+0x4a>
 8017b84:	4631      	mov	r1, r6
 8017b86:	4620      	mov	r0, r4
 8017b88:	f7ff f94a 	bl	8016e20 <net_pkt_set_data>
 8017b8c:	b9c0      	cbnz	r0, 8017bc0 <net_udp_input+0x4a>
		NET_DBG("DROP: corrupted header");
		goto drop;
	}

	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
 8017b8e:	88aa      	ldrh	r2, [r5, #4]
 8017b90:	0213      	lsls	r3, r2, #8
 8017b92:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 8017b96:	6922      	ldr	r2, [r4, #16]
 8017b98:	b29b      	uxth	r3, r3
	while (buf) {
 8017b9a:	b9a2      	cbnz	r2, 8017bc6 <net_udp_input+0x50>
				    net_pkt_ip_hdr_len(pkt) -
 8017b9c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
				    net_pkt_ipv6_ext_len(pkt))) {
 8017ba0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
				    net_pkt_ip_hdr_len(pkt) -
 8017ba2:	440a      	add	r2, r1
 8017ba4:	1a80      	subs	r0, r0, r2
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
 8017ba6:	4283      	cmp	r3, r0
 8017ba8:	d10a      	bne.n	8017bc0 <net_udp_input+0x4a>
		NET_DBG("DROP: Invalid hdr length");
		goto drop;
	}

	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
 8017baa:	6a20      	ldr	r0, [r4, #32]
 8017bac:	f7f3 ffec 	bl	800bb88 <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
 8017bb0:	b138      	cbz	r0, 8017bc2 <net_udp_input+0x4c>
		if (!udp_hdr->chksum) {
 8017bb2:	88eb      	ldrh	r3, [r5, #6]
 8017bb4:	b123      	cbz	r3, 8017bc0 <net_udp_input+0x4a>
	return net_calc_chksum(pkt, IPPROTO_UDP);
 8017bb6:	2111      	movs	r1, #17
 8017bb8:	4620      	mov	r0, r4
 8017bba:	f7fe fb0b 	bl	80161d4 <net_calc_chksum>
			}

			goto drop;
		}

		if (net_calc_verify_chksum_udp(pkt) != 0U) {
 8017bbe:	b100      	cbz	r0, 8017bc2 <net_udp_input+0x4c>
	}
out:
	return udp_hdr;
drop:
	net_stats_update_udp_chkerr(net_pkt_iface(pkt));
	return NULL;
 8017bc0:	2500      	movs	r5, #0
}
 8017bc2:	4628      	mov	r0, r5
 8017bc4:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
 8017bc6:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
 8017bc8:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
 8017bca:	4408      	add	r0, r1
		buf = buf->frags;
 8017bcc:	e7e5      	b.n	8017b9a <net_udp_input+0x24>

08017bce <cmd_net_tcp>:
}
 8017bce:	2000      	movs	r0, #0
 8017bd0:	4770      	bx	lr

08017bd2 <cmd_net_vlan_add>:
 8017bd2:	f7f7 b89f 	b.w	800ed14 <cmd_net_vlan>

08017bd6 <cmd_net_vlan_del>:
 8017bd6:	f7f7 b89d 	b.w	800ed14 <cmd_net_vlan>

08017bda <cmd_net_tcp_send>:
 8017bda:	f7f7 b8ad 	b.w	800ed38 <cmd_net_tcp_connect>

08017bde <cmd_net_tcp_close>:
 8017bde:	f7f7 b8ab 	b.w	800ed38 <cmd_net_tcp_connect>

08017be2 <cmd_net_stats_iface>:
 8017be2:	f7f7 b8bb 	b.w	800ed5c <cmd_net_stats_all>

08017be6 <cmd_net_stats>:
 8017be6:	f7f7 b8b9 	b.w	800ed5c <cmd_net_stats_all>

08017bea <cmd_net_gptp>:
 8017bea:	f7f7 b917 	b.w	800ee1c <cmd_net_gptp_port>

08017bee <parse_arg>:
{
 8017bee:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const char *str = argv[*i] + 2;
 8017bf0:	6803      	ldr	r3, [r0, #0]
 8017bf2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
	if (*str == 0) {
 8017bf6:	78a6      	ldrb	r6, [r4, #2]
	const char *str = argv[*i] + 2;
 8017bf8:	009d      	lsls	r5, r3, #2
	if (*str == 0) {
 8017bfa:	b196      	cbz	r6, 8017c22 <parse_arg+0x34>
	const char *str = argv[*i] + 2;
 8017bfc:	3402      	adds	r4, #2
	res = strtol(str, &endptr, 10);
 8017bfe:	220a      	movs	r2, #10
 8017c00:	a901      	add	r1, sp, #4
 8017c02:	4620      	mov	r0, r4
 8017c04:	f7eb f87a 	bl	8002cfc <strtol>
 8017c08:	4605      	mov	r5, r0
	if (errno || (endptr == str)) {
 8017c0a:	f7fd fe7f 	bl	801590c <__errno>
 8017c0e:	6803      	ldr	r3, [r0, #0]
 8017c10:	b913      	cbnz	r3, 8017c18 <parse_arg+0x2a>
 8017c12:	9b01      	ldr	r3, [sp, #4]
 8017c14:	42a3      	cmp	r3, r4
 8017c16:	d101      	bne.n	8017c1c <parse_arg+0x2e>
		return -1;
 8017c18:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
 8017c1c:	4628      	mov	r0, r5
 8017c1e:	b002      	add	sp, #8
 8017c20:	bd70      	pop	{r4, r5, r6, pc}
		if (*i + 1 >= argc) {
 8017c22:	3301      	adds	r3, #1
 8017c24:	428b      	cmp	r3, r1
 8017c26:	d2f7      	bcs.n	8017c18 <parse_arg+0x2a>
		str = argv[*i];
 8017c28:	442a      	add	r2, r5
		*i += 1;
 8017c2a:	6003      	str	r3, [r0, #0]
		str = argv[*i];
 8017c2c:	6854      	ldr	r4, [r2, #4]
 8017c2e:	e7e6      	b.n	8017bfe <parse_arg+0x10>

08017c30 <net_shell_init>:
SHELL_CMD_REGISTER(net, &net_commands, "Networking commands", NULL);

int net_shell_init(void)
{
	return 0;
}
 8017c30:	2000      	movs	r0, #0
 8017c32:	4770      	bx	lr

08017c34 <gpio_stm32_isr>:
	struct gpio_stm32_data *data = dev->driver_data;
 8017c34:	688a      	ldr	r2, [r1, #8]
	if ((BIT(line) & data->cb_pins) != 0) {
 8017c36:	6813      	ldr	r3, [r2, #0]
 8017c38:	40c3      	lsrs	r3, r0
 8017c3a:	07db      	lsls	r3, r3, #31
{
 8017c3c:	b570      	push	{r4, r5, r6, lr}
 8017c3e:	460e      	mov	r6, r1
	if ((BIT(line) & data->cb_pins) != 0) {
 8017c40:	d50f      	bpl.n	8017c62 <gpio_stm32_isr+0x2e>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8017c42:	6851      	ldr	r1, [r2, #4]
 8017c44:	b169      	cbz	r1, 8017c62 <gpio_stm32_isr+0x2e>
		gpio_fire_callbacks(&data->cb, dev, BIT(line));
 8017c46:	2501      	movs	r5, #1
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8017c48:	680c      	ldr	r4, [r1, #0]
 8017c4a:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8017c4c:	688b      	ldr	r3, [r1, #8]
 8017c4e:	421d      	tst	r5, r3
 8017c50:	d003      	beq.n	8017c5a <gpio_stm32_isr+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
 8017c52:	684b      	ldr	r3, [r1, #4]
 8017c54:	462a      	mov	r2, r5
 8017c56:	4630      	mov	r0, r6
 8017c58:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8017c5a:	b114      	cbz	r4, 8017c62 <gpio_stm32_isr+0x2e>
 8017c5c:	4621      	mov	r1, r4
 8017c5e:	6824      	ldr	r4, [r4, #0]
 8017c60:	e7f4      	b.n	8017c4c <gpio_stm32_isr+0x18>
}
 8017c62:	bd70      	pop	{r4, r5, r6, pc}

08017c64 <gpio_stm32_write>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8017c64:	6800      	ldr	r0, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8017c66:	6880      	ldr	r0, [r0, #8]
{
 8017c68:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8017c6a:	6800      	ldr	r0, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8017c6c:	b941      	cbnz	r1, 8017c80 <gpio_stm32_write+0x1c>
	pinval = 1 << pin;
 8017c6e:	2401      	movs	r4, #1
 8017c70:	fa04 f202 	lsl.w	r2, r4, r2
	if (value != 0U) {
 8017c74:	b113      	cbz	r3, 8017c7c <gpio_stm32_write+0x18>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8017c76:	6182      	str	r2, [r0, #24]
}
 8017c78:	4608      	mov	r0, r1
 8017c7a:	bd10      	pop	{r4, pc}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8017c7c:	6282      	str	r2, [r0, #40]	; 0x28
 8017c7e:	e7fb      	b.n	8017c78 <gpio_stm32_write+0x14>
		return -ENOTSUP;
 8017c80:	f06f 0185 	mvn.w	r1, #133	; 0x85
 8017c84:	e7f8      	b.n	8017c78 <gpio_stm32_write+0x14>

08017c86 <gpio_stm32_read>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8017c86:	6800      	ldr	r0, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8017c88:	6880      	ldr	r0, [r0, #8]
{
 8017c8a:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8017c8c:	6800      	ldr	r0, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8017c8e:	b931      	cbnz	r1, 8017c9e <gpio_stm32_read+0x18>
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8017c90:	6904      	ldr	r4, [r0, #16]
	*value = (LL_GPIO_ReadInputPort(gpio) >> pin) & 0x1;
 8017c92:	40d4      	lsrs	r4, r2
 8017c94:	f004 0401 	and.w	r4, r4, #1
 8017c98:	601c      	str	r4, [r3, #0]
}
 8017c9a:	4608      	mov	r0, r1
 8017c9c:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 8017c9e:	f06f 0185 	mvn.w	r1, #133	; 0x85
 8017ca2:	e7fa      	b.n	8017c9a <gpio_stm32_read+0x14>

08017ca4 <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8017ca4:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
 8017ca6:	6858      	ldr	r0, [r3, #4]
{
 8017ca8:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
 8017caa:	b158      	cbz	r0, 8017cc4 <gpio_stm32_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8017cac:	2400      	movs	r4, #0
 8017cae:	4281      	cmp	r1, r0
 8017cb0:	d113      	bne.n	8017cda <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 8017cb2:	6808      	ldr	r0, [r1, #0]
 8017cb4:	b95c      	cbnz	r4, 8017cce <gpio_stm32_manage_callback+0x2a>
 8017cb6:	689c      	ldr	r4, [r3, #8]
	list->head = node;
 8017cb8:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8017cba:	42a1      	cmp	r1, r4
 8017cbc:	d100      	bne.n	8017cc0 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8017cbe:	6098      	str	r0, [r3, #8]
	parent->next = child;
 8017cc0:	2000      	movs	r0, #0
 8017cc2:	6008      	str	r0, [r1, #0]
	if (set) {
 8017cc4:	b972      	cbnz	r2, 8017ce4 <gpio_stm32_manage_callback+0x40>
	return 0;
 8017cc6:	2000      	movs	r0, #0
}
 8017cc8:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8017cca:	4628      	mov	r0, r5
 8017ccc:	e7ef      	b.n	8017cae <gpio_stm32_manage_callback+0xa>
	parent->next = child;
 8017cce:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8017cd0:	6898      	ldr	r0, [r3, #8]
 8017cd2:	4281      	cmp	r1, r0
	list->tail = node;
 8017cd4:	bf08      	it	eq
 8017cd6:	609c      	streq	r4, [r3, #8]
 8017cd8:	e7f2      	b.n	8017cc0 <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8017cda:	6805      	ldr	r5, [r0, #0]
	return node->next;
 8017cdc:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8017cde:	2d00      	cmp	r5, #0
 8017ce0:	d1f3      	bne.n	8017cca <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8017ce2:	b13a      	cbz	r2, 8017cf4 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 8017ce4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
 8017ce6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8017ce8:	6898      	ldr	r0, [r3, #8]
	list->head = node;
 8017cea:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8017cec:	2800      	cmp	r0, #0
 8017cee:	d1ea      	bne.n	8017cc6 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8017cf0:	6099      	str	r1, [r3, #8]
 8017cf2:	e7e9      	b.n	8017cc8 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8017cf4:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8017cf8:	e7e6      	b.n	8017cc8 <gpio_stm32_manage_callback+0x24>

08017cfa <gpio_stm32_enable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8017cfa:	6880      	ldr	r0, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8017cfc:	b939      	cbnz	r1, 8017d0e <gpio_stm32_enable_callback+0x14>
	data->cb_pins |= BIT(pin);
 8017cfe:	2301      	movs	r3, #1
 8017d00:	fa03 f202 	lsl.w	r2, r3, r2
 8017d04:	6803      	ldr	r3, [r0, #0]
 8017d06:	4313      	orrs	r3, r2
 8017d08:	6003      	str	r3, [r0, #0]
}
 8017d0a:	4608      	mov	r0, r1
 8017d0c:	4770      	bx	lr
		return -ENOTSUP;
 8017d0e:	f06f 0185 	mvn.w	r1, #133	; 0x85
 8017d12:	e7fa      	b.n	8017d0a <gpio_stm32_enable_callback+0x10>

08017d14 <gpio_stm32_disable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8017d14:	6880      	ldr	r0, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8017d16:	b941      	cbnz	r1, 8017d2a <gpio_stm32_disable_callback+0x16>
	data->cb_pins &= ~BIT(pin);
 8017d18:	2301      	movs	r3, #1
 8017d1a:	fa03 f202 	lsl.w	r2, r3, r2
 8017d1e:	6803      	ldr	r3, [r0, #0]
 8017d20:	ea23 0302 	bic.w	r3, r3, r2
 8017d24:	6003      	str	r3, [r0, #0]
}
 8017d26:	4608      	mov	r0, r1
 8017d28:	4770      	bx	lr
		return -ENOTSUP;
 8017d2a:	f06f 0185 	mvn.w	r1, #133	; 0x85
 8017d2e:	e7fa      	b.n	8017d26 <gpio_stm32_disable_callback+0x12>

08017d30 <gpio_stm32_flags_to_conf>:
	int direction = flags & GPIO_DIR_MASK;
 8017d30:	f000 0301 	and.w	r3, r0, #1
	if (pincfg == NULL) {
 8017d34:	b1b1      	cbz	r1, 8017d64 <gpio_stm32_flags_to_conf+0x34>
	if (direction == GPIO_DIR_OUT) {
 8017d36:	b123      	cbz	r3, 8017d42 <gpio_stm32_flags_to_conf+0x12>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8017d38:	2310      	movs	r3, #16
 8017d3a:	600b      	str	r3, [r1, #0]
	return 0;
 8017d3c:	2300      	movs	r3, #0
}
 8017d3e:	4618      	mov	r0, r3
 8017d40:	4770      	bx	lr
	int pud = flags & GPIO_PUD_MASK;
 8017d42:	f400 7040 	and.w	r0, r0, #768	; 0x300
		if (pud == GPIO_PUD_PULL_UP) {
 8017d46:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8017d4a:	d103      	bne.n	8017d54 <gpio_stm32_flags_to_conf+0x24>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8017d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8017d50:	600a      	str	r2, [r1, #0]
 8017d52:	e7f4      	b.n	8017d3e <gpio_stm32_flags_to_conf+0xe>
		} else if (pud == GPIO_PUD_PULL_DOWN) {
 8017d54:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8017d58:	d001      	beq.n	8017d5e <gpio_stm32_flags_to_conf+0x2e>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 8017d5a:	600b      	str	r3, [r1, #0]
 8017d5c:	e7ef      	b.n	8017d3e <gpio_stm32_flags_to_conf+0xe>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8017d5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017d62:	e7f5      	b.n	8017d50 <gpio_stm32_flags_to_conf+0x20>
		return -EINVAL;
 8017d64:	f06f 0315 	mvn.w	r3, #21
 8017d68:	e7e9      	b.n	8017d3e <gpio_stm32_flags_to_conf+0xe>

08017d6a <gpio_stm32_configure>:
{
 8017d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8017d6c:	f002 0530 	and.w	r5, r2, #48	; 0x30
	pinval = 1 << pin;
 8017d70:	2401      	movs	r4, #1
 8017d72:	408c      	lsls	r4, r1
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8017d74:	092e      	lsrs	r6, r5, #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8017d76:	f8d0 c000 	ldr.w	ip, [r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017d7a:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8017d7e:	fab7 f787 	clz	r7, r7
 8017d82:	f04f 0e03 	mov.w	lr, #3
 8017d86:	007f      	lsls	r7, r7, #1
 8017d88:	fa0e f707 	lsl.w	r7, lr, r7
 8017d8c:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017d90:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8017d94:	fab7 f787 	clz	r7, r7
 8017d98:	007f      	lsls	r7, r7, #1
 8017d9a:	40be      	lsls	r6, r7
 8017d9c:	ea46 060c 	orr.w	r6, r6, ip
	if (STM32_MODER_ALT_MODE == mode) {
 8017da0:	2d20      	cmp	r5, #32
 8017da2:	6006      	str	r6, [r0, #0]
 8017da4:	d116      	bne.n	8017dd4 <gpio_stm32_configure+0x6a>
		if (pin < 8) {
 8017da6:	2907      	cmp	r1, #7
 8017da8:	dc49      	bgt.n	8017e3e <gpio_stm32_configure+0xd4>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8017daa:	6a07      	ldr	r7, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017dac:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8017db0:	b10e      	cbz	r6, 8017db6 <gpio_stm32_configure+0x4c>
  return __builtin_clz(value);
 8017db2:	fab6 f586 	clz	r5, r6
 8017db6:	260f      	movs	r6, #15
 8017db8:	00ad      	lsls	r5, r5, #2
 8017dba:	fa06 f505 	lsl.w	r5, r6, r5
 8017dbe:	ea27 0605 	bic.w	r6, r7, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017dc2:	fa94 f5a4 	rbit	r5, r4
  return __builtin_clz(value);
 8017dc6:	fab5 f585 	clz	r5, r5
 8017dca:	00ad      	lsls	r5, r5, #2
 8017dcc:	fa03 f505 	lsl.w	r5, r3, r5
 8017dd0:	4335      	orrs	r5, r6
 8017dd2:	6205      	str	r5, [r0, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8017dd4:	6845      	ldr	r5, [r0, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8017dd6:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8017dda:	ea25 0504 	bic.w	r5, r5, r4
 8017dde:	fa03 f101 	lsl.w	r1, r3, r1
 8017de2:	4329      	orrs	r1, r5
 8017de4:	6041      	str	r1, [r0, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8017de6:	f3c2 13c1 	ubfx	r3, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8017dea:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017dec:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 8017df0:	fab1 f181 	clz	r1, r1
 8017df4:	2603      	movs	r6, #3
 8017df6:	0049      	lsls	r1, r1, #1
 8017df8:	fa06 f101 	lsl.w	r1, r6, r1
 8017dfc:	ea25 0501 	bic.w	r5, r5, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017e00:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 8017e04:	fab1 f181 	clz	r1, r1
 8017e08:	0049      	lsls	r1, r1, #1
 8017e0a:	408b      	lsls	r3, r1
 8017e0c:	432b      	orrs	r3, r5
 8017e0e:	6083      	str	r3, [r0, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8017e10:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8017e14:	68c1      	ldr	r1, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017e16:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 8017e1a:	fab3 f383 	clz	r3, r3
 8017e1e:	005b      	lsls	r3, r3, #1
 8017e20:	fa06 f303 	lsl.w	r3, r6, r3
 8017e24:	ea21 0303 	bic.w	r3, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017e28:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 8017e2c:	fab4 f484 	clz	r4, r4
 8017e30:	0064      	lsls	r4, r4, #1
 8017e32:	fa02 f404 	lsl.w	r4, r2, r4
 8017e36:	431c      	orrs	r4, r3
 8017e38:	60c4      	str	r4, [r0, #12]
}
 8017e3a:	2000      	movs	r0, #0
 8017e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8017e3e:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8017e40:	0a26      	lsrs	r6, r4, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017e42:	fa96 fca6 	rbit	ip, r6
  if (value == 0U)
 8017e46:	f1bc 0f00 	cmp.w	ip, #0
 8017e4a:	d001      	beq.n	8017e50 <gpio_stm32_configure+0xe6>
  return __builtin_clz(value);
 8017e4c:	fabc f58c 	clz	r5, ip
 8017e50:	f04f 0c0f 	mov.w	ip, #15
 8017e54:	00ad      	lsls	r5, r5, #2
 8017e56:	fa0c f505 	lsl.w	r5, ip, r5
 8017e5a:	ea27 0505 	bic.w	r5, r7, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017e5e:	fa96 f6a6 	rbit	r6, r6
  return __builtin_clz(value);
 8017e62:	fab6 f686 	clz	r6, r6
 8017e66:	00b6      	lsls	r6, r6, #2
 8017e68:	40b3      	lsls	r3, r6
 8017e6a:	432b      	orrs	r3, r5
 8017e6c:	6243      	str	r3, [r0, #36]	; 0x24
 8017e6e:	e7b1      	b.n	8017dd4 <gpio_stm32_configure+0x6a>

08017e70 <check_errors.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 8017e70:	6883      	ldr	r3, [r0, #8]
 8017e72:	689b      	ldr	r3, [r3, #8]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF));
 8017e74:	699a      	ldr	r2, [r3, #24]
	if (LL_I2C_IsActiveFlag_NACK(i2c)) {
 8017e76:	06d2      	lsls	r2, r2, #27
 8017e78:	d50d      	bpl.n	8017e96 <check_errors.isra.0+0x26>
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8017e7a:	69da      	ldr	r2, [r3, #28]
 8017e7c:	f042 0210 	orr.w	r2, r2, #16
  SET_BIT(I2Cx->ICR, I2C_ICR_BERRCF);
 8017e80:	61da      	str	r2, [r3, #28]
  return (READ_BIT(I2Cx->CR2, I2C_CR2_RELOAD) == (I2C_CR2_RELOAD));
 8017e82:	685a      	ldr	r2, [r3, #4]
	if (LL_I2C_IsEnabledReloadMode(i2c)) {
 8017e84:	01d2      	lsls	r2, r2, #7
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 8017e86:	bf42      	ittt	mi
 8017e88:	685a      	ldrmi	r2, [r3, #4]
 8017e8a:	f022 7280 	bicmi.w	r2, r2, #16777216	; 0x1000000
 8017e8e:	605a      	strmi	r2, [r3, #4]
	return -EIO;
 8017e90:	f06f 0004 	mvn.w	r0, #4
}
 8017e94:	4770      	bx	lr
  return (READ_BIT(I2Cx->ISR, I2C_ISR_ARLO) == (I2C_ISR_ARLO));
 8017e96:	699a      	ldr	r2, [r3, #24]
	if (LL_I2C_IsActiveFlag_ARLO(i2c)) {
 8017e98:	0590      	lsls	r0, r2, #22
 8017e9a:	d503      	bpl.n	8017ea4 <check_errors.isra.0+0x34>
  SET_BIT(I2Cx->ICR, I2C_ICR_ARLOCF);
 8017e9c:	69da      	ldr	r2, [r3, #28]
 8017e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017ea2:	e7ed      	b.n	8017e80 <check_errors.isra.0+0x10>
  return (READ_BIT(I2Cx->ISR, I2C_ISR_OVR) == (I2C_ISR_OVR));
 8017ea4:	699a      	ldr	r2, [r3, #24]
	if (LL_I2C_IsActiveFlag_OVR(i2c)) {
 8017ea6:	0551      	lsls	r1, r2, #21
 8017ea8:	d503      	bpl.n	8017eb2 <check_errors.isra.0+0x42>
  SET_BIT(I2Cx->ICR, I2C_ICR_OVRCF);
 8017eaa:	69da      	ldr	r2, [r3, #28]
 8017eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017eb0:	e7e6      	b.n	8017e80 <check_errors.isra.0+0x10>
  return (READ_BIT(I2Cx->ISR, I2C_ISR_BERR) == (I2C_ISR_BERR));
 8017eb2:	6998      	ldr	r0, [r3, #24]
	if (LL_I2C_IsActiveFlag_BERR(i2c)) {
 8017eb4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8017eb8:	d0ec      	beq.n	8017e94 <check_errors.isra.0+0x24>
  SET_BIT(I2Cx->ICR, I2C_ICR_BERRCF);
 8017eba:	69da      	ldr	r2, [r3, #28]
 8017ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017ec0:	e7de      	b.n	8017e80 <check_errors.isra.0+0x10>

08017ec2 <msg_done>:
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8017ec2:	6803      	ldr	r3, [r0, #0]
	I2C_TypeDef *i2c = cfg->i2c;
 8017ec4:	689b      	ldr	r3, [r3, #8]
{
 8017ec6:	b570      	push	{r4, r5, r6, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 8017ec8:	689c      	ldr	r4, [r3, #8]
{
 8017eca:	4606      	mov	r6, r0
 8017ecc:	460d      	mov	r5, r1
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC));
 8017ece:	69a3      	ldr	r3, [r4, #24]
	while (!LL_I2C_IsActiveFlag_TC(i2c) && !LL_I2C_IsActiveFlag_TCR(i2c)) {
 8017ed0:	0659      	lsls	r1, r3, #25
 8017ed2:	d402      	bmi.n	8017eda <msg_done+0x18>
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TCR) == (I2C_ISR_TCR));
 8017ed4:	69a3      	ldr	r3, [r4, #24]
 8017ed6:	061a      	lsls	r2, r3, #24
 8017ed8:	d513      	bpl.n	8017f02 <msg_done+0x40>
	if (current_msg_flags & I2C_MSG_STOP) {
 8017eda:	f015 0002 	ands.w	r0, r5, #2
 8017ede:	d00f      	beq.n	8017f00 <msg_done+0x3e>
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8017ee0:	6863      	ldr	r3, [r4, #4]
 8017ee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017ee6:	6063      	str	r3, [r4, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 8017ee8:	69a3      	ldr	r3, [r4, #24]
		while (!LL_I2C_IsActiveFlag_STOP(i2c)) {
 8017eea:	069b      	lsls	r3, r3, #26
 8017eec:	d5fc      	bpl.n	8017ee8 <msg_done+0x26>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8017eee:	69e3      	ldr	r3, [r4, #28]
 8017ef0:	f043 0320 	orr.w	r3, r3, #32
 8017ef4:	61e3      	str	r3, [r4, #28]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 8017ef6:	6863      	ldr	r3, [r4, #4]
 8017ef8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8017efc:	6063      	str	r3, [r4, #4]
	return 0;
 8017efe:	2000      	movs	r0, #0
}
 8017f00:	bd70      	pop	{r4, r5, r6, pc}
		if (check_errors(dev, __func__)) {
 8017f02:	6830      	ldr	r0, [r6, #0]
 8017f04:	f7ff ffb4 	bl	8017e70 <check_errors.isra.0>
 8017f08:	2800      	cmp	r0, #0
 8017f0a:	d0e0      	beq.n	8017ece <msg_done+0xc>
			return -EIO;
 8017f0c:	f06f 0004 	mvn.w	r0, #4
 8017f10:	e7f6      	b.n	8017f00 <msg_done+0x3e>

08017f12 <stm32_i2c_msg_write>:
{
 8017f12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8017f16:	6804      	ldr	r4, [r0, #0]
	I2C_TypeDef *i2c = cfg->i2c;
 8017f18:	68a4      	ldr	r4, [r4, #8]
{
 8017f1a:	460e      	mov	r6, r1
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_WRITE);
 8017f1c:	2700      	movs	r7, #0
	I2C_TypeDef *i2c = cfg->i2c;
 8017f1e:	f8d4 8008 	ldr.w	r8, [r4, #8]
	u8_t *buf = msg->buf;
 8017f22:	680c      	ldr	r4, [r1, #0]
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_WRITE);
 8017f24:	9700      	str	r7, [sp, #0]
{
 8017f26:	4605      	mov	r5, r0
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_WRITE);
 8017f28:	f7f8 fb34 	bl	8010594 <msg_init>
	while (len) {
 8017f2c:	6873      	ldr	r3, [r6, #4]
 8017f2e:	18e7      	adds	r7, r4, r3
 8017f30:	42bc      	cmp	r4, r7
 8017f32:	d106      	bne.n	8017f42 <stm32_i2c_msg_write+0x30>
	return msg_done(dev, msg->flags);
 8017f34:	7a31      	ldrb	r1, [r6, #8]
 8017f36:	4628      	mov	r0, r5
}
 8017f38:	b002      	add	sp, #8
 8017f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return msg_done(dev, msg->flags);
 8017f3e:	f7ff bfc0 	b.w	8017ec2 <msg_done>
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 8017f42:	f8d8 3018 	ldr.w	r3, [r8, #24]
			if (LL_I2C_IsActiveFlag_TXIS(i2c)) {
 8017f46:	079b      	lsls	r3, r3, #30
 8017f48:	d409      	bmi.n	8017f5e <stm32_i2c_msg_write+0x4c>
			if (check_errors(dev, __func__)) {
 8017f4a:	6828      	ldr	r0, [r5, #0]
 8017f4c:	f7ff ff90 	bl	8017e70 <check_errors.isra.0>
 8017f50:	2800      	cmp	r0, #0
 8017f52:	d0f6      	beq.n	8017f42 <stm32_i2c_msg_write+0x30>
}
 8017f54:	f06f 0004 	mvn.w	r0, #4
 8017f58:	b002      	add	sp, #8
 8017f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 8017f5e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017f62:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
		len--;
 8017f66:	e7e3      	b.n	8017f30 <stm32_i2c_msg_write+0x1e>

08017f68 <stm32_i2c_msg_read>:
{
 8017f68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8017f6c:	6804      	ldr	r4, [r0, #0]
	I2C_TypeDef *i2c = cfg->i2c;
 8017f6e:	68a4      	ldr	r4, [r4, #8]
{
 8017f70:	460e      	mov	r6, r1
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 8017f72:	f44f 6780 	mov.w	r7, #1024	; 0x400
	I2C_TypeDef *i2c = cfg->i2c;
 8017f76:	f8d4 8008 	ldr.w	r8, [r4, #8]
	u8_t *buf = msg->buf;
 8017f7a:	680c      	ldr	r4, [r1, #0]
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 8017f7c:	9700      	str	r7, [sp, #0]
{
 8017f7e:	4605      	mov	r5, r0
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 8017f80:	f7f8 fb08 	bl	8010594 <msg_init>
	while (len) {
 8017f84:	6873      	ldr	r3, [r6, #4]
 8017f86:	18e7      	adds	r7, r4, r3
 8017f88:	42bc      	cmp	r4, r7
 8017f8a:	d10a      	bne.n	8017fa2 <stm32_i2c_msg_read+0x3a>
	return msg_done(dev, msg->flags);
 8017f8c:	7a31      	ldrb	r1, [r6, #8]
 8017f8e:	4628      	mov	r0, r5
}
 8017f90:	b002      	add	sp, #8
 8017f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return msg_done(dev, msg->flags);
 8017f96:	f7ff bf94 	b.w	8017ec2 <msg_done>
			if (check_errors(dev, __func__)) {
 8017f9a:	6828      	ldr	r0, [r5, #0]
 8017f9c:	f7ff ff68 	bl	8017e70 <check_errors.isra.0>
 8017fa0:	b940      	cbnz	r0, 8017fb4 <stm32_i2c_msg_read+0x4c>
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8017fa2:	f8d8 3018 	ldr.w	r3, [r8, #24]
		while (!LL_I2C_IsActiveFlag_RXNE(i2c)) {
 8017fa6:	075b      	lsls	r3, r3, #29
 8017fa8:	d5f7      	bpl.n	8017f9a <stm32_i2c_msg_read+0x32>
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8017faa:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8017fae:	f804 3b01 	strb.w	r3, [r4], #1
		len--;
 8017fb2:	e7e9      	b.n	8017f88 <stm32_i2c_msg_read+0x20>
}
 8017fb4:	f06f 0004 	mvn.w	r0, #4
 8017fb8:	b002      	add	sp, #8
 8017fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017fbe <i2c_stm32_transfer>:
{
 8017fbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fc2:	469a      	mov	sl, r3
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8017fc4:	6883      	ldr	r3, [r0, #8]
 8017fc6:	9300      	str	r3, [sp, #0]
	current->flags |= I2C_MSG_RESTART;
 8017fc8:	7a0b      	ldrb	r3, [r1, #8]
 8017fca:	f043 0304 	orr.w	r3, r3, #4
{
 8017fce:	4616      	mov	r6, r2
	current->flags |= I2C_MSG_RESTART;
 8017fd0:	720b      	strb	r3, [r1, #8]
{
 8017fd2:	4680      	mov	r8, r0
 8017fd4:	460c      	mov	r4, r1
	for (u8_t i = 1; i <= num_msgs; i++) {
 8017fd6:	460a      	mov	r2, r1
 8017fd8:	2301      	movs	r3, #1
 8017fda:	42b3      	cmp	r3, r6
 8017fdc:	d907      	bls.n	8017fee <i2c_stm32_transfer+0x30>
	return z_impl_k_sem_take(sem, timeout);
 8017fde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017fe2:	9800      	ldr	r0, [sp, #0]
 8017fe4:	f7fa fca2 	bl	801292c <z_impl_k_sem_take>
 8017fe8:	3414      	adds	r4, #20
 8017fea:	2300      	movs	r3, #0
 8017fec:	e051      	b.n	8018092 <i2c_stm32_transfer+0xd4>
		if (i < num_msgs) {
 8017fee:	7a11      	ldrb	r1, [r2, #8]
 8017ff0:	d20b      	bcs.n	801800a <i2c_stm32_transfer+0x4c>
			if (OPERATION(current) != OPERATION(next)) {
 8017ff2:	7d10      	ldrb	r0, [r2, #20]
 8017ff4:	ea80 0501 	eor.w	r5, r0, r1
 8017ff8:	07ef      	lsls	r7, r5, #31
 8017ffa:	d501      	bpl.n	8018000 <i2c_stm32_transfer+0x42>
				if (!(next->flags & I2C_MSG_RESTART)) {
 8017ffc:	0740      	lsls	r0, r0, #29
 8017ffe:	d501      	bpl.n	8018004 <i2c_stm32_transfer+0x46>
			if (current->flags & I2C_MSG_STOP) {
 8018000:	0789      	lsls	r1, r1, #30
 8018002:	d505      	bpl.n	8018010 <i2c_stm32_transfer+0x52>
 8018004:	f06f 0315 	mvn.w	r3, #21
 8018008:	e04c      	b.n	80180a4 <i2c_stm32_transfer+0xe6>
			current->flags |= I2C_MSG_STOP;
 801800a:	f041 0102 	orr.w	r1, r1, #2
 801800e:	7211      	strb	r1, [r2, #8]
	for (u8_t i = 1; i <= num_msgs; i++) {
 8018010:	3301      	adds	r3, #1
		current++;
 8018012:	320c      	adds	r2, #12
	for (u8_t i = 1; i <= num_msgs; i++) {
 8018014:	b2db      	uxtb	r3, r3
 8018016:	e7e0      	b.n	8017fda <i2c_stm32_transfer+0x1c>
		if (num_msgs > 1) {
 8018018:	2e01      	cmp	r6, #1
 801801a:	bf8c      	ite	hi
 801801c:	4625      	movhi	r5, r4
 801801e:	2500      	movls	r5, #0
			u8_t tmp_msg_flags = current->flags & ~I2C_MSG_RESTART;
 8018020:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
			u32_t temp_len = current->len;
 8018024:	f854 7c10 	ldr.w	r7, [r4, #-16]
			u8_t tmp_msg_flags = current->flags & ~I2C_MSG_RESTART;
 8018028:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 801802c:	9201      	str	r2, [sp, #4]
			u8_t tmp_next_msg_flags = next_msg_flags ?
 801802e:	2d00      	cmp	r5, #0
 8018030:	d03c      	beq.n	80180ac <i2c_stm32_transfer+0xee>
 8018032:	f895 b000 	ldrb.w	fp, [r5]
			if (current->len > 255) {
 8018036:	2fff      	cmp	r7, #255	; 0xff
 8018038:	d90a      	bls.n	8018050 <i2c_stm32_transfer+0x92>
				current->len = 255U;
 801803a:	22ff      	movs	r2, #255	; 0xff
 801803c:	f844 2c10 	str.w	r2, [r4, #-16]
				current->flags &= ~I2C_MSG_STOP;
 8018040:	f023 0202 	bic.w	r2, r3, #2
 8018044:	f804 2c0c 	strb.w	r2, [r4, #-12]
				if (next_msg_flags) {
 8018048:	b115      	cbz	r5, 8018050 <i2c_stm32_transfer+0x92>
					*next_msg_flags = current->flags &
 801804a:	f023 0306 	bic.w	r3, r3, #6
 801804e:	702b      	strb	r3, [r5, #0]
			if ((current->flags & I2C_MSG_RW_MASK) ==
 8018050:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
 8018054:	f013 0f01 	tst.w	r3, #1
				ret = stm32_i2c_msg_write(dev, current,
 8018058:	462a      	mov	r2, r5
 801805a:	4653      	mov	r3, sl
 801805c:	4649      	mov	r1, r9
 801805e:	4640      	mov	r0, r8
			if ((current->flags & I2C_MSG_RW_MASK) ==
 8018060:	d126      	bne.n	80180b0 <i2c_stm32_transfer+0xf2>
				ret = stm32_i2c_msg_write(dev, current,
 8018062:	f7ff ff56 	bl	8017f12 <stm32_i2c_msg_write>
			if (ret < 0) {
 8018066:	2800      	cmp	r0, #0
				ret = stm32_i2c_msg_read(dev, current,
 8018068:	4603      	mov	r3, r0
			if (ret < 0) {
 801806a:	db16      	blt.n	801809a <i2c_stm32_transfer+0xdc>
			if (next_msg_flags) {
 801806c:	b10d      	cbz	r5, 8018072 <i2c_stm32_transfer+0xb4>
				*next_msg_flags = tmp_next_msg_flags;
 801806e:	f885 b000 	strb.w	fp, [r5]
			current->buf += current->len;
 8018072:	e954 2105 	ldrd	r2, r1, [r4, #-20]
 8018076:	440a      	add	r2, r1
 8018078:	f844 2c14 	str.w	r2, [r4, #-20]
			current->len = temp_len - current->len;
 801807c:	1a7f      	subs	r7, r7, r1
			current->flags = tmp_msg_flags;
 801807e:	9a01      	ldr	r2, [sp, #4]
 8018080:	f804 2c0c 	strb.w	r2, [r4, #-12]
			current->len = temp_len - current->len;
 8018084:	f844 7c10 	str.w	r7, [r4, #-16]
		} while (current->len > 0);
 8018088:	2f00      	cmp	r7, #0
 801808a:	d1c9      	bne.n	8018020 <i2c_stm32_transfer+0x62>
		num_msgs--;
 801808c:	3e01      	subs	r6, #1
 801808e:	b2f6      	uxtb	r6, r6
 8018090:	340c      	adds	r4, #12
 8018092:	f1a4 0914 	sub.w	r9, r4, #20
	while (num_msgs > 0) {
 8018096:	2e00      	cmp	r6, #0
 8018098:	d1be      	bne.n	8018018 <i2c_stm32_transfer+0x5a>
 801809a:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
 801809c:	9800      	ldr	r0, [sp, #0]
 801809e:	f7fa fc19 	bl	80128d4 <z_impl_k_sem_give>
 80180a2:	9b01      	ldr	r3, [sp, #4]
}
 80180a4:	4618      	mov	r0, r3
 80180a6:	b003      	add	sp, #12
 80180a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			u8_t tmp_next_msg_flags = next_msg_flags ?
 80180ac:	46ab      	mov	fp, r5
 80180ae:	e7c2      	b.n	8018036 <i2c_stm32_transfer+0x78>
				ret = stm32_i2c_msg_read(dev, current,
 80180b0:	f7ff ff5a 	bl	8017f68 <stm32_i2c_msg_read>
 80180b4:	e7d7      	b.n	8018066 <i2c_stm32_transfer+0xa8>

080180b6 <i2c_stm32_runtime_configure>:
{
 80180b6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 80180ba:	6803      	ldr	r3, [r0, #0]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 80180bc:	6885      	ldr	r5, [r0, #8]
	I2C_TypeDef *i2c = cfg->i2c;
 80180be:	689b      	ldr	r3, [r3, #8]
{
 80180c0:	4688      	mov	r8, r1
 80180c2:	4606      	mov	r6, r0
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80180c4:	4668      	mov	r0, sp
	I2C_TypeDef *i2c = cfg->i2c;
 80180c6:	689c      	ldr	r4, [r3, #8]
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80180c8:	f000 fa1f 	bl	801850a <LL_RCC_GetSystemClocksFreq>
	clock = rcc_clocks.SYSCLK_Frequency;
 80180cc:	9f00      	ldr	r7, [sp, #0]
	data->dev_config = config;
 80180ce:	f8c5 8018 	str.w	r8, [r5, #24]
	return z_impl_k_sem_take(sem, timeout);
 80180d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80180d6:	4628      	mov	r0, r5
 80180d8:	f7fa fc28 	bl	801292c <z_impl_k_sem_take>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80180dc:	6823      	ldr	r3, [r4, #0]
 80180de:	f023 0301 	bic.w	r3, r3, #1
 80180e2:	6023      	str	r3, [r4, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80180e4:	6823      	ldr	r3, [r4, #0]
 80180e6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80180ea:	6023      	str	r3, [r4, #0]
	ret = stm32_i2c_configure_timing(dev, clock);
 80180ec:	4639      	mov	r1, r7
 80180ee:	4630      	mov	r0, r6
 80180f0:	f7f8 faa2 	bl	8010638 <stm32_i2c_configure_timing>
 80180f4:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
 80180f6:	4628      	mov	r0, r5
 80180f8:	f7fa fbec 	bl	80128d4 <z_impl_k_sem_give>
}
 80180fc:	4620      	mov	r0, r4
 80180fe:	b004      	add	sp, #16
 8018100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018104 <bme680_channel_get>:
	switch (chan) {
 8018104:	290e      	cmp	r1, #14
	struct bme680_data *data = dev->driver_data;
 8018106:	6883      	ldr	r3, [r0, #8]
	switch (chan) {
 8018108:	d01b      	beq.n	8018142 <bme680_channel_get+0x3e>
 801810a:	d804      	bhi.n	8018116 <bme680_channel_get+0x12>
 801810c:	290d      	cmp	r1, #13
 801810e:	d00b      	beq.n	8018128 <bme680_channel_get+0x24>
		return -EINVAL;
 8018110:	f06f 0015 	mvn.w	r0, #21
 8018114:	4770      	bx	lr
	switch (chan) {
 8018116:	2910      	cmp	r1, #16
 8018118:	d01c      	beq.n	8018154 <bme680_channel_get+0x50>
 801811a:	291d      	cmp	r1, #29
 801811c:	d1f8      	bne.n	8018110 <bme680_channel_get+0xc>
		val->val1 = data->calc_gas_resistance;
 801811e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018120:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
 8018122:	2000      	movs	r0, #0
 8018124:	6050      	str	r0, [r2, #4]
}
 8018126:	4770      	bx	lr
		val->val1 = data->calc_temp / 100;
 8018128:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801812a:	2164      	movs	r1, #100	; 0x64
 801812c:	fb90 f3f1 	sdiv	r3, r0, r1
 8018130:	6013      	str	r3, [r2, #0]
		val->val2 = data->calc_temp % 100 * 10000;
 8018132:	fb01 0313 	mls	r3, r1, r3, r0
 8018136:	f242 7110 	movw	r1, #10000	; 0x2710
		val->val2 = (data->calc_humidity % 1000) * 1000;
 801813a:	434b      	muls	r3, r1
 801813c:	6053      	str	r3, [r2, #4]
	return 0;
 801813e:	2000      	movs	r0, #0
		break;
 8018140:	4770      	bx	lr
		val->val1 = data->calc_press / 1000;
 8018142:	6b58      	ldr	r0, [r3, #52]	; 0x34
		val->val1 = data->calc_humidity / 1000;
 8018144:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018148:	fbb0 f1f3 	udiv	r1, r0, r3
 801814c:	6011      	str	r1, [r2, #0]
		val->val2 = (data->calc_humidity % 1000) * 1000;
 801814e:	fb03 0111 	mls	r1, r3, r1, r0
 8018152:	e7f2      	b.n	801813a <bme680_channel_get+0x36>
		val->val1 = data->calc_humidity / 1000;
 8018154:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8018156:	e7f5      	b.n	8018144 <bme680_channel_get+0x40>

08018158 <bme680_reg_read>:
{
 8018158:	b530      	push	{r4, r5, lr}
 801815a:	b089      	sub	sp, #36	; 0x24
 801815c:	4604      	mov	r4, r0
 801815e:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (u8_t *)write_buf;
 8018162:	f10d 0107 	add.w	r1, sp, #7
 8018166:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
 8018168:	2101      	movs	r1, #1
 801816a:	9103      	str	r1, [sp, #12]
	msg[1].len = num_read;
 801816c:	e9cd 2305 	strd	r2, r3, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
 8018170:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8018172:	2307      	movs	r3, #7
	return i2c_burst_read(data->i2c_master, data->i2c_slave_addr, start,
 8018174:	6800      	ldr	r0, [r0, #0]
 8018176:	88a5      	ldrh	r5, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
 8018178:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 801817c:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
 8018180:	6843      	ldr	r3, [r0, #4]
 8018182:	2202      	movs	r2, #2
 8018184:	685c      	ldr	r4, [r3, #4]
 8018186:	a902      	add	r1, sp, #8
 8018188:	462b      	mov	r3, r5
 801818a:	47a0      	blx	r4
}
 801818c:	b009      	add	sp, #36	; 0x24
 801818e:	bd30      	pop	{r4, r5, pc}

08018190 <bme680_reg_write>:
{
 8018190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018192:	4603      	mov	r3, r0
 * @retval -EIO General input / output error.
 */
static inline int i2c_reg_write_byte(struct device *dev, u16_t dev_addr,
				     u8_t reg_addr, u8_t value)
{
	u8_t tx_buf[2] = {reg_addr, value};
 8018194:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
 8018198:	2202      	movs	r2, #2
	return i2c_reg_write_byte(data->i2c_master, data->i2c_slave_addr,
 801819a:	6800      	ldr	r0, [r0, #0]
 801819c:	889b      	ldrh	r3, [r3, #4]
	u8_t tx_buf[2] = {reg_addr, value};
 801819e:	f88d 1000 	strb.w	r1, [sp]
	msg.buf = (u8_t *)buf;
 80181a2:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
 80181a6:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 80181a8:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
 80181ac:	6842      	ldr	r2, [r0, #4]
 80181ae:	a901      	add	r1, sp, #4
 80181b0:	6854      	ldr	r4, [r2, #4]
 80181b2:	2201      	movs	r2, #1
 80181b4:	47a0      	blx	r4
}
 80181b6:	b004      	add	sp, #16
 80181b8:	bd10      	pop	{r4, pc}

080181ba <lis2dh_reg_write_byte.isra.3>:
#else
	return -ENODEV;
#endif
}

static inline int lis2dh_reg_write_byte(struct device *dev, u8_t reg_addr,
 80181ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
 80181bc:	2302      	movs	r3, #2
#if defined(DT_ST_LIS2DH_BUS_SPI)
	reg_addr &= LIS2DH_SPI_ADDR_MASK;

	return lis2dh_spi_access(lis2dh, reg_addr, &value, 1);
#elif defined(DT_ST_LIS2DH_BUS_I2C)
	u8_t tx_buf[2] = {reg_addr, value};
 80181be:	f88d 1000 	strb.w	r1, [sp]
 80181c2:	f88d 2001 	strb.w	r2, [sp, #1]

	return i2c_write(lis2dh->bus, tx_buf, sizeof(tx_buf),
 80181c6:	6800      	ldr	r0, [r0, #0]
	msg.buf = (u8_t *)buf;
 80181c8:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
 80181cc:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 80181ce:	f88d 300c 	strb.w	r3, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
 80181d2:	6843      	ldr	r3, [r0, #4]
 80181d4:	2201      	movs	r2, #1
 80181d6:	685c      	ldr	r4, [r3, #4]
 80181d8:	a901      	add	r1, sp, #4
 80181da:	2319      	movs	r3, #25
 80181dc:	47a0      	blx	r4
			 LIS2DH_BUS_ADDRESS);
#else
	return -ENODEV;
#endif
}
 80181de:	b004      	add	sp, #16
 80181e0:	bd10      	pop	{r4, pc}

080181e2 <lis2dh_reg_read_byte.isra.1>:
static inline int lis2dh_reg_read_byte(struct device *dev, u8_t reg_addr,
 80181e2:	b510      	push	{r4, lr}
 80181e4:	b088      	sub	sp, #32
	msg[0].buf = (u8_t *)write_buf;
 80181e6:	f10d 0307 	add.w	r3, sp, #7
 80181ea:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
 80181ec:	2301      	movs	r3, #1
 80181ee:	f88d 1007 	strb.w	r1, [sp, #7]
 80181f2:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
 80181f4:	2100      	movs	r1, #0
	msg[1].len = num_read;
 80181f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 80181fa:	2307      	movs	r3, #7
	return i2c_reg_read_byte(lis2dh->bus, LIS2DH_BUS_ADDRESS,
 80181fc:	6800      	ldr	r0, [r0, #0]
	msg[0].flags = I2C_MSG_WRITE;
 80181fe:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8018202:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
 8018206:	6843      	ldr	r3, [r0, #4]
 8018208:	2202      	movs	r2, #2
 801820a:	685c      	ldr	r4, [r3, #4]
 801820c:	a902      	add	r1, sp, #8
 801820e:	2319      	movs	r3, #25
 8018210:	47a0      	blx	r4
}
 8018212:	b008      	add	sp, #32
 8018214:	bd10      	pop	{r4, pc}

08018216 <lis2dh_reg_field_update>:
{
 8018216:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018218:	4604      	mov	r4, r0
 801821a:	4617      	mov	r7, r2
 801821c:	461e      	mov	r6, r3
	status = lis2dh_reg_read_byte(dev, reg_addr, &old_val);
 801821e:	f10d 0207 	add.w	r2, sp, #7
	old_val = 0U;
 8018222:	2300      	movs	r3, #0
	status = lis2dh_reg_read_byte(dev, reg_addr, &old_val);
 8018224:	6880      	ldr	r0, [r0, #8]
	old_val = 0U;
 8018226:	f88d 3007 	strb.w	r3, [sp, #7]
{
 801822a:	460d      	mov	r5, r1
	status = lis2dh_reg_read_byte(dev, reg_addr, &old_val);
 801822c:	f7ff ffd9 	bl	80181e2 <lis2dh_reg_read_byte.isra.1>
	if (status < 0) {
 8018230:	2800      	cmp	r0, #0
 8018232:	db0c      	blt.n	801824e <lis2dh_reg_field_update+0x38>
				     (old_val & ~mask) | ((val << pos) & mask));
 8018234:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8018238:	f99d 2007 	ldrsb.w	r2, [sp, #7]
	return lis2dh_reg_write_byte(dev, reg_addr,
 801823c:	68a0      	ldr	r0, [r4, #8]
				     (old_val & ~mask) | ((val << pos) & mask));
 801823e:	40b9      	lsls	r1, r7
 8018240:	4051      	eors	r1, r2
 8018242:	4031      	ands	r1, r6
 8018244:	404a      	eors	r2, r1
	return lis2dh_reg_write_byte(dev, reg_addr,
 8018246:	b2d2      	uxtb	r2, r2
 8018248:	4629      	mov	r1, r5
 801824a:	f7ff ffb6 	bl	80181ba <lis2dh_reg_write_byte.isra.3>
}
 801824e:	b003      	add	sp, #12
 8018250:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018252 <spi_stm32_next_tx>:
	return !!(ctx->tx_buf && ctx->tx_len);
 8018252:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8018254:	b152      	cbz	r2, 801826c <spi_stm32_next_tx+0x1a>
 8018256:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8018258:	b153      	cbz	r3, 8018270 <spi_stm32_next_tx+0x1e>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 801825a:	6803      	ldr	r3, [r0, #0]
 801825c:	889b      	ldrh	r3, [r3, #4]
 801825e:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8018262:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((u8_t *)(data->ctx.tx_buf));
 8018264:	bf0c      	ite	eq
 8018266:	7810      	ldrbeq	r0, [r2, #0]
			tx_frame = UNALIGNED_GET((u16_t *)(data->ctx.tx_buf));
 8018268:	8810      	ldrhne	r0, [r2, #0]
 801826a:	4770      	bx	lr
	u16_t tx_frame = SPI_STM32_TX_NOP;
 801826c:	4610      	mov	r0, r2
 801826e:	4770      	bx	lr
 8018270:	4618      	mov	r0, r3
}
 8018272:	4770      	bx	lr

08018274 <gpio_pin_write>:
{
 8018274:	b410      	push	{r4}
 8018276:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
 8018278:	6842      	ldr	r2, [r0, #4]
 801827a:	6854      	ldr	r4, [r2, #4]
 801827c:	460a      	mov	r2, r1
 801827e:	46a4      	mov	ip, r4
 8018280:	2100      	movs	r1, #0
}
 8018282:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->write(port, access_op, pin, value);
 8018286:	4760      	bx	ip

08018288 <_spi_context_cs_control.isra.5>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
 8018288:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 801828a:	6804      	ldr	r4, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
 801828c:	4605      	mov	r5, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 801828e:	b324      	cbz	r4, 80182da <_spi_context_cs_control.isra.5+0x52>
 8018290:	68a3      	ldr	r3, [r4, #8]
 8018292:	b313      	cbz	r3, 80182da <_spi_context_cs_control.isra.5+0x52>
 8018294:	6818      	ldr	r0, [r3, #0]
 8018296:	b300      	cbz	r0, 80182da <_spi_context_cs_control.isra.5+0x52>
		if (on) {
 8018298:	b161      	cbz	r1, 80182b4 <_spi_context_cs_control.isra.5+0x2c>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
 801829a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
 801829e:	6859      	ldr	r1, [r3, #4]
 80182a0:	0fd2      	lsrs	r2, r2, #31
 80182a2:	f7ff ffe7 	bl	8018274 <gpio_pin_write>
			k_busy_wait(ctx->config->cs->delay);
 80182a6:	682b      	ldr	r3, [r5, #0]
 80182a8:	689b      	ldr	r3, [r3, #8]
 80182aa:	6898      	ldr	r0, [r3, #8]
}
 80182ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 80182b0:	f7fa bb7a 	b.w	80129a8 <z_impl_k_busy_wait>
			if (!force_off &&
 80182b4:	b912      	cbnz	r2, 80182bc <_spi_context_cs_control.isra.5+0x34>
 80182b6:	88a2      	ldrh	r2, [r4, #4]
 80182b8:	0492      	lsls	r2, r2, #18
 80182ba:	d40e      	bmi.n	80182da <_spi_context_cs_control.isra.5+0x52>
			k_busy_wait(ctx->config->cs->delay);
 80182bc:	6898      	ldr	r0, [r3, #8]
 80182be:	f7fa fb73 	bl	80129a8 <z_impl_k_busy_wait>
			gpio_pin_write(ctx->config->cs->gpio_dev,
 80182c2:	682a      	ldr	r2, [r5, #0]
 80182c4:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
 80182c6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
 80182ca:	43d2      	mvns	r2, r2
 80182cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80182d0:	0fd2      	lsrs	r2, r2, #31
}
 80182d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_write(ctx->config->cs->gpio_dev,
 80182d6:	f7ff bfcd 	b.w	8018274 <gpio_pin_write>
}
 80182da:	bd38      	pop	{r3, r4, r5, pc}

080182dc <spi_context_unlock_unconditionally>:
{
 80182dc:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
 80182de:	2201      	movs	r2, #1
 80182e0:	2100      	movs	r1, #0
{
 80182e2:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 80182e4:	f7ff ffd0 	bl	8018288 <_spi_context_cs_control.isra.5>
	if (!k_sem_count_get(&ctx->lock)) {
 80182e8:	68e3      	ldr	r3, [r4, #12]
 80182ea:	b923      	cbnz	r3, 80182f6 <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
 80182ec:	1d20      	adds	r0, r4, #4
}
 80182ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182f2:	f7fa baef 	b.w	80128d4 <z_impl_k_sem_give>
 80182f6:	bd10      	pop	{r4, pc}

080182f8 <spi_stm32_release>:
{
 80182f8:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 80182fa:	6880      	ldr	r0, [r0, #8]
 80182fc:	f7ff ffee 	bl	80182dc <spi_context_unlock_unconditionally>
}
 8018300:	2000      	movs	r0, #0
 8018302:	bd08      	pop	{r3, pc}

08018304 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8018304:	6803      	ldr	r3, [r0, #0]
 8018306:	689b      	ldr	r3, [r3, #8]
 8018308:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE));
 801830a:	69da      	ldr	r2, [r3, #28]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 801830c:	0710      	lsls	r0, r2, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 801830e:	bf44      	itt	mi
 8018310:	2208      	movmi	r2, #8
 8018312:	621a      	strmi	r2, [r3, #32]
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 8018314:	69da      	ldr	r2, [r3, #28]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 8018316:	0692      	lsls	r2, r2, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8018318:	bf43      	ittte	mi
 801831a:	8c9b      	ldrhmi	r3, [r3, #36]	; 0x24
 801831c:	700b      	strbmi	r3, [r1, #0]
	return 0;
 801831e:	2000      	movmi	r0, #0
		return -1;
 8018320:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8018324:	4770      	bx	lr

08018326 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8018326:	6803      	ldr	r3, [r0, #0]
 8018328:	689b      	ldr	r3, [r3, #8]
 801832a:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE));
 801832c:	69da      	ldr	r2, [r3, #28]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 801832e:	0612      	lsls	r2, r2, #24
 8018330:	d5fc      	bpl.n	801832c <uart_stm32_poll_out+0x6>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8018332:	2240      	movs	r2, #64	; 0x40
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8018334:	b289      	uxth	r1, r1
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8018336:	621a      	str	r2, [r3, #32]
  USARTx->TDR = Value;
 8018338:	8519      	strh	r1, [r3, #40]	; 0x28
}
 801833a:	4770      	bx	lr

0801833c <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 801833c:	6803      	ldr	r3, [r0, #0]
 801833e:	689b      	ldr	r3, [r3, #8]
 8018340:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE));
 8018342:	69d8      	ldr	r0, [r3, #28]
  return (READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE));
 8018344:	69da      	ldr	r2, [r3, #28]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8018346:	07d2      	lsls	r2, r2, #31
  return (READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE));
 8018348:	69da      	ldr	r2, [r3, #28]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 801834a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 801834e:	bf48      	it	mi
 8018350:	f040 0002 	orrmi.w	r0, r0, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 8018354:	0791      	lsls	r1, r2, #30
		err |= UART_ERROR_FRAMING;
 8018356:	bf48      	it	mi
 8018358:	f040 0004 	orrmi.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 801835c:	07c2      	lsls	r2, r0, #31
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 801835e:	bf44      	itt	mi
 8018360:	2208      	movmi	r2, #8
 8018362:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 8018364:	0781      	lsls	r1, r0, #30
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8018366:	bf44      	itt	mi
 8018368:	2201      	movmi	r2, #1
 801836a:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 801836c:	0742      	lsls	r2, r0, #29
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 801836e:	bf44      	itt	mi
 8018370:	2202      	movmi	r2, #2
 8018372:	621a      	strmi	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 8018374:	2204      	movs	r2, #4
 8018376:	621a      	str	r2, [r3, #32]
}
 8018378:	4770      	bx	lr

0801837a <uart_stm32_fifo_fill>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 801837a:	6803      	ldr	r3, [r0, #0]
 801837c:	689b      	ldr	r3, [r3, #8]
{
 801837e:	b530      	push	{r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8018380:	681c      	ldr	r4, [r3, #0]
	while ((size - num_tx > 0) &&
 8018382:	2300      	movs	r3, #0
 8018384:	b2d8      	uxtb	r0, r3
 8018386:	1a15      	subs	r5, r2, r0
 8018388:	2d00      	cmp	r5, #0
 801838a:	dd04      	ble.n	8018396 <uart_stm32_fifo_fill+0x1c>
  return (READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE));
 801838c:	69e5      	ldr	r5, [r4, #28]
 801838e:	062d      	lsls	r5, r5, #24
 8018390:	f103 0301 	add.w	r3, r3, #1
 8018394:	d400      	bmi.n	8018398 <uart_stm32_fifo_fill+0x1e>
}
 8018396:	bd30      	pop	{r4, r5, pc}
  USARTx->TDR = Value;
 8018398:	5c08      	ldrb	r0, [r1, r0]
 801839a:	8520      	strh	r0, [r4, #40]	; 0x28
 801839c:	e7f2      	b.n	8018384 <uart_stm32_fifo_fill+0xa>

0801839e <uart_stm32_fifo_read>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 801839e:	6803      	ldr	r3, [r0, #0]
 80183a0:	689b      	ldr	r3, [r3, #8]
 80183a2:	681b      	ldr	r3, [r3, #0]
{
 80183a4:	b570      	push	{r4, r5, r6, lr}
	while ((size - num_rx > 0) &&
 80183a6:	2400      	movs	r4, #0
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80183a8:	2608      	movs	r6, #8
 80183aa:	b2e0      	uxtb	r0, r4
 80183ac:	1a15      	subs	r5, r2, r0
 80183ae:	2d00      	cmp	r5, #0
 80183b0:	dd02      	ble.n	80183b8 <uart_stm32_fifo_read+0x1a>
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 80183b2:	69dd      	ldr	r5, [r3, #28]
 80183b4:	06ad      	lsls	r5, r5, #26
 80183b6:	d400      	bmi.n	80183ba <uart_stm32_fifo_read+0x1c>
}
 80183b8:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 80183ba:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 80183bc:	540d      	strb	r5, [r1, r0]
  return (READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE));
 80183be:	69d8      	ldr	r0, [r3, #28]
		if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 80183c0:	0700      	lsls	r0, r0, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80183c2:	bf48      	it	mi
 80183c4:	621e      	strmi	r6, [r3, #32]
 80183c6:	3401      	adds	r4, #1
 80183c8:	e7ef      	b.n	80183aa <uart_stm32_fifo_read+0xc>

080183ca <uart_stm32_irq_tx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80183ca:	6803      	ldr	r3, [r0, #0]
 80183cc:	689b      	ldr	r3, [r3, #8]
 80183ce:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80183d0:	6813      	ldr	r3, [r2, #0]
 80183d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80183d6:	6013      	str	r3, [r2, #0]
}
 80183d8:	4770      	bx	lr

080183da <uart_stm32_irq_tx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80183da:	6803      	ldr	r3, [r0, #0]
 80183dc:	689b      	ldr	r3, [r3, #8]
 80183de:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80183e0:	6813      	ldr	r3, [r2, #0]
 80183e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80183e6:	6013      	str	r3, [r2, #0]
}
 80183e8:	4770      	bx	lr

080183ea <uart_stm32_irq_tx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80183ea:	6803      	ldr	r3, [r0, #0]
 80183ec:	689b      	ldr	r3, [r3, #8]
 80183ee:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE));
 80183f0:	69d8      	ldr	r0, [r3, #28]
}
 80183f2:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80183f6:	4770      	bx	lr

080183f8 <uart_stm32_irq_tx_complete>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80183f8:	6803      	ldr	r3, [r0, #0]
 80183fa:	689b      	ldr	r3, [r3, #8]
 80183fc:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 80183fe:	69d8      	ldr	r0, [r3, #28]
}
 8018400:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8018404:	4770      	bx	lr

08018406 <uart_stm32_irq_rx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8018406:	6803      	ldr	r3, [r0, #0]
 8018408:	689b      	ldr	r3, [r3, #8]
 801840a:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 801840c:	6813      	ldr	r3, [r2, #0]
 801840e:	f043 0320 	orr.w	r3, r3, #32
 8018412:	6013      	str	r3, [r2, #0]
}
 8018414:	4770      	bx	lr

08018416 <uart_stm32_irq_rx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8018416:	6803      	ldr	r3, [r0, #0]
 8018418:	689b      	ldr	r3, [r3, #8]
 801841a:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 801841c:	6813      	ldr	r3, [r2, #0]
 801841e:	f023 0320 	bic.w	r3, r3, #32
 8018422:	6013      	str	r3, [r2, #0]
}
 8018424:	4770      	bx	lr

08018426 <uart_stm32_irq_rx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8018426:	6803      	ldr	r3, [r0, #0]
 8018428:	689b      	ldr	r3, [r3, #8]
 801842a:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 801842c:	69d8      	ldr	r0, [r3, #28]
}
 801842e:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8018432:	4770      	bx	lr

08018434 <uart_stm32_irq_is_pending>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8018434:	6803      	ldr	r3, [r0, #0]
 8018436:	689b      	ldr	r3, [r3, #8]
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	69da      	ldr	r2, [r3, #28]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 801843c:	0691      	lsls	r1, r2, #26
 801843e:	d502      	bpl.n	8018446 <uart_stm32_irq_is_pending+0x12>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8018440:	681a      	ldr	r2, [r3, #0]
	return ((LL_USART_IsActiveFlag_RXNE(UartInstance) &&
 8018442:	0692      	lsls	r2, r2, #26
 8018444:	d407      	bmi.n	8018456 <uart_stm32_irq_is_pending+0x22>
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 8018446:	69d8      	ldr	r0, [r3, #28]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8018448:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 801844c:	d004      	beq.n	8018458 <uart_stm32_irq_is_pending+0x24>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 801844e:	6818      	ldr	r0, [r3, #0]
		(LL_USART_IsActiveFlag_TC(UartInstance) &&
 8018450:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8018454:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8018456:	2001      	movs	r0, #1
}
 8018458:	4770      	bx	lr

0801845a <uart_stm32_irq_update>:
}
 801845a:	2001      	movs	r0, #1
 801845c:	4770      	bx	lr

0801845e <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 801845e:	6883      	ldr	r3, [r0, #8]
	data->user_data = cb_data;
 8018460:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 8018464:	4770      	bx	lr

08018466 <uart_stm32_isr>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 8018466:	6882      	ldr	r2, [r0, #8]
	if (data->user_cb) {
 8018468:	6893      	ldr	r3, [r2, #8]
 801846a:	b10b      	cbz	r3, 8018470 <uart_stm32_isr+0xa>
		data->user_cb(data->user_data);
 801846c:	68d0      	ldr	r0, [r2, #12]
 801846e:	4718      	bx	r3
}
 8018470:	4770      	bx	lr

08018472 <uart_stm32_irq_config_func_USART_1>:
									\
STM32_UART_IRQ_HANDLER(name)


#ifdef CONFIG_UART_1
STM32_UART_INIT(USART_1)
 8018472:	b508      	push	{r3, lr}
 8018474:	2200      	movs	r2, #0
 8018476:	2025      	movs	r0, #37	; 0x25
 8018478:	4611      	mov	r1, r2
 801847a:	f7f1 fb09 	bl	8009a90 <z_arm_irq_priority_set>
 801847e:	2025      	movs	r0, #37	; 0x25
 8018480:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018484:	f7f1 baf4 	b.w	8009a70 <arch_irq_enable>

08018488 <uart_stm32_irq_config_func_USART_2>:
#endif	/* CONFIG_UART_1 */

#ifdef CONFIG_UART_2
STM32_UART_INIT(USART_2)
 8018488:	b508      	push	{r3, lr}
 801848a:	2200      	movs	r2, #0
 801848c:	2026      	movs	r0, #38	; 0x26
 801848e:	4611      	mov	r1, r2
 8018490:	f7f1 fafe 	bl	8009a90 <z_arm_irq_priority_set>
 8018494:	2026      	movs	r0, #38	; 0x26
 8018496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801849a:	f7f1 bae9 	b.w	8009a70 <arch_irq_enable>

0801849e <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 801849e:	6883      	ldr	r3, [r0, #8]
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80184a4:	6803      	ldr	r3, [r0, #0]
 80184a6:	689b      	ldr	r3, [r3, #8]
 80184a8:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80184aa:	6813      	ldr	r3, [r2, #0]
 80184ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 80184b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80184b4:	d023      	beq.n	80184fe <uart_stm32_config_get+0x60>
		return UART_CFG_PARITY_NONE;
 80184b6:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 80184ba:	4243      	negs	r3, r0
 80184bc:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 80184be:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80184c0:	6853      	ldr	r3, [r2, #4]
 80184c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 80184c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80184ca:	d01a      	beq.n	8018502 <uart_stm32_config_get+0x64>
 80184cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80184d0:	d019      	beq.n	8018506 <uart_stm32_config_get+0x68>
 80184d2:	2b00      	cmp	r3, #0
		return UART_CFG_STOP_BITS_2;
 80184d4:	bf0c      	ite	eq
 80184d6:	2301      	moveq	r3, #1
 80184d8:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 80184da:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80184dc:	6813      	ldr	r3, [r2, #0]
	switch (db) {
 80184de:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		return UART_CFG_DATA_BITS_8;
 80184e2:	bf14      	ite	ne
 80184e4:	2304      	movne	r3, #4
 80184e6:	2303      	moveq	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 80184e8:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80184ea:	6893      	ldr	r3, [r2, #8]
 80184ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 80184f0:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80184f4:	4253      	negs	r3, r2
 80184f6:	4153      	adcs	r3, r2
 80184f8:	71cb      	strb	r3, [r1, #7]
}
 80184fa:	2000      	movs	r0, #0
 80184fc:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 80184fe:	2302      	movs	r3, #2
 8018500:	e7dd      	b.n	80184be <uart_stm32_config_get+0x20>
		return UART_CFG_STOP_BITS_0_5;
 8018502:	2300      	movs	r3, #0
 8018504:	e7e9      	b.n	80184da <uart_stm32_config_get+0x3c>
		return UART_CFG_STOP_BITS_1_5;
 8018506:	2302      	movs	r3, #2
 8018508:	e7e7      	b.n	80184da <uart_stm32_config_get+0x3c>

0801850a <LL_RCC_GetSystemClocksFreq>:
{
 801850a:	b508      	push	{r3, lr}
 801850c:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 801850e:	f7f9 fa33 	bl	8011978 <RCC_GetSystemClockFreq>
 8018512:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8018514:	f7f9 f9ea 	bl	80118ec <RCC_GetHCLKClockFreq>
 8018518:	6048      	str	r0, [r1, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 801851a:	f7f9 f9f3 	bl	8011904 <RCC_GetPCLK1ClockFreq>
 801851e:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8018520:	6848      	ldr	r0, [r1, #4]
 8018522:	f7f9 f9fb 	bl	801191c <RCC_GetPCLK2ClockFreq>
 8018526:	60c8      	str	r0, [r1, #12]
}
 8018528:	bd08      	pop	{r3, pc}

0801852a <arch_system_halt>:
	__asm__ volatile(
 801852a:	f04f 0210 	mov.w	r2, #16
 801852e:	f3ef 8311 	mrs	r3, BASEPRI
 8018532:	f382 8811 	msr	BASEPRI, r2
 8018536:	f3bf 8f6f 	isb	sy
	}
 801853a:	e7fe      	b.n	801853a <arch_system_halt+0x10>

0801853c <k_mem_slab_init>:
{
 801853c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
 801853e:	2400      	movs	r4, #0
	slab->block_size = block_size;
 8018540:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
 8018544:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
 8018548:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
 801854a:	42a3      	cmp	r3, r4
 801854c:	d102      	bne.n	8018554 <k_mem_slab_init+0x18>
 801854e:	e9c0 0000 	strd	r0, r0, [r0]
}
 8018552:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
 8018554:	6945      	ldr	r5, [r0, #20]
 8018556:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 8018558:	3401      	adds	r4, #1
		slab->free_list = p;
 801855a:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
 801855c:	4411      	add	r1, r2
 801855e:	e7f4      	b.n	801854a <k_mem_slab_init+0xe>

08018560 <k_mem_pool_malloc>:
{
 8018560:	b507      	push	{r0, r1, r2, lr}
 8018562:	2204      	movs	r2, #4
 8018564:	188a      	adds	r2, r1, r2
 8018566:	d204      	bcs.n	8018572 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
 8018568:	2300      	movs	r3, #0
 801856a:	4669      	mov	r1, sp
 801856c:	f7f9 fcfc 	bl	8011f68 <k_mem_pool_alloc>
 8018570:	b118      	cbz	r0, 801857a <k_mem_pool_malloc+0x1a>
		return NULL;
 8018572:	2000      	movs	r0, #0
}
 8018574:	b003      	add	sp, #12
 8018576:	f85d fb04 	ldr.w	pc, [sp], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 801857a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801857e:	601a      	str	r2, [r3, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
 8018580:	9800      	ldr	r0, [sp, #0]
 8018582:	3004      	adds	r0, #4
 8018584:	e7f6      	b.n	8018574 <k_mem_pool_malloc+0x14>

08018586 <k_free>:
	if (ptr != NULL) {
 8018586:	b110      	cbz	r0, 801858e <k_free+0x8>
		k_mem_pool_free_id(ptr);
 8018588:	3804      	subs	r0, #4
 801858a:	f7f9 bd39 	b.w	8012000 <k_mem_pool_free_id>
}
 801858e:	4770      	bx	lr

08018590 <z_impl_k_msgq_peek>:
}
#include <syscalls/k_msgq_get_mrsh.c>
#endif

int z_impl_k_msgq_peek(struct k_msgq *msgq, void *data)
{
 8018590:	4603      	mov	r3, r0
 8018592:	b510      	push	{r4, lr}
 8018594:	4608      	mov	r0, r1
 8018596:	f04f 0210 	mov.w	r2, #16
 801859a:	f3ef 8411 	mrs	r4, BASEPRI
 801859e:	f382 8811 	msr	BASEPRI, r2
 80185a2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);

	if (msgq->used_msgs > 0) {
 80185a6:	6a1a      	ldr	r2, [r3, #32]
 80185a8:	b14a      	cbz	r2, 80185be <z_impl_k_msgq_peek+0x2e>
 80185aa:	689a      	ldr	r2, [r3, #8]
 80185ac:	6999      	ldr	r1, [r3, #24]
 80185ae:	f7ec f9b6 	bl	800491e <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		result = 0;
 80185b2:	2000      	movs	r0, #0
	__asm__ volatile(
 80185b4:	f384 8811 	msr	BASEPRI, r4
 80185b8:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 80185bc:	bd10      	pop	{r4, pc}
		result = -ENOMSG;
 80185be:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80185c2:	e7f7      	b.n	80185b4 <z_impl_k_msgq_peek+0x24>

080185c4 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
 80185c4:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
 80185c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80185ca:	e9c0 0000 	strd	r0, r0, [r0]
}
 80185ce:	4770      	bx	lr

080185d0 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
 80185d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185d4:	4604      	mov	r4, r0
 80185d6:	460f      	mov	r7, r1
 80185d8:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 80185da:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
 80185de:	f04f 0210 	mov.w	r2, #16
 80185e2:	f3ef 8611 	mrs	r6, BASEPRI
 80185e6:	f382 8811 	msr	BASEPRI, r2
 80185ea:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
 80185ee:	b1db      	cbz	r3, 8018628 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
 80185f0:	2008      	movs	r0, #8
 80185f2:	f7f9 fd37 	bl	8012064 <z_thread_malloc>
		if (anode == NULL) {
 80185f6:	b938      	cbnz	r0, 8018608 <queue_insert+0x38>
	__asm__ volatile(
 80185f8:	f386 8811 	msr	BASEPRI, r6
 80185fc:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
 8018600:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
 8018604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
 8018608:	2301      	movs	r3, #1
		anode->data = data;
 801860a:	f8c0 8004 	str.w	r8, [r0, #4]
 801860e:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
 8018610:	6803      	ldr	r3, [r0, #0]
 8018612:	f003 0203 	and.w	r2, r3, #3
 8018616:	b95f      	cbnz	r7, 8018630 <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
 8018618:	6823      	ldr	r3, [r4, #0]
 801861a:	4313      	orrs	r3, r2
 801861c:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 801861e:	6863      	ldr	r3, [r4, #4]
	list->head = node;
 8018620:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 8018622:	b973      	cbnz	r3, 8018642 <queue_insert+0x72>
	list->tail = node;
 8018624:	6060      	str	r0, [r4, #4]
 8018626:	e00c      	b.n	8018642 <queue_insert+0x72>
	node->next_and_flags = flags;
 8018628:	f8c8 3000 	str.w	r3, [r8]
 801862c:	4640      	mov	r0, r8
 801862e:	e7ef      	b.n	8018610 <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8018630:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 8018632:	f033 0303 	bics.w	r3, r3, #3
 8018636:	d114      	bne.n	8018662 <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
 8018638:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
 801863a:	6862      	ldr	r2, [r4, #4]
 801863c:	b95a      	cbnz	r2, 8018656 <queue_insert+0x86>
	list->head = node;
 801863e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
 8018642:	2104      	movs	r1, #4
 8018644:	4628      	mov	r0, r5
 8018646:	f000 fbd5 	bl	8018df4 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
 801864a:	4628      	mov	r0, r5
 801864c:	4631      	mov	r1, r6
 801864e:	f000 f8e3 	bl	8018818 <z_reschedule>
	return 0;
 8018652:	2000      	movs	r0, #0
 8018654:	e7d6      	b.n	8018604 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8018656:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 8018658:	f003 0303 	and.w	r3, r3, #3
 801865c:	4303      	orrs	r3, r0
 801865e:	6013      	str	r3, [r2, #0]
 8018660:	e7e0      	b.n	8018624 <queue_insert+0x54>
 8018662:	4313      	orrs	r3, r2
 8018664:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8018666:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 8018668:	f003 0303 	and.w	r3, r3, #3
 801866c:	4318      	orrs	r0, r3
 801866e:	6038      	str	r0, [r7, #0]
 8018670:	e7e7      	b.n	8018642 <queue_insert+0x72>

08018672 <z_queue_node_peek>:
{
 8018672:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
 8018674:	4604      	mov	r4, r0
 8018676:	b130      	cbz	r0, 8018686 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8018678:	6802      	ldr	r2, [r0, #0]
 801867a:	0793      	lsls	r3, r2, #30
 801867c:	d003      	beq.n	8018686 <z_queue_node_peek+0x14>
		ret = anode->data;
 801867e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
 8018680:	b109      	cbz	r1, 8018686 <z_queue_node_peek+0x14>
			k_free(anode);
 8018682:	f7ff ff80 	bl	8018586 <k_free>
}
 8018686:	4620      	mov	r0, r4
 8018688:	bd10      	pop	{r4, pc}

0801868a <z_impl_k_queue_init>:
	list->head = NULL;
 801868a:	2300      	movs	r3, #0
	list->tail = NULL;
 801868c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
 8018690:	f100 0308 	add.w	r3, r0, #8
 8018694:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 8018698:	4770      	bx	lr

0801869a <z_impl_k_queue_cancel_wait>:
{
 801869a:	b538      	push	{r3, r4, r5, lr}
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 801869c:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
 80186a0:	f04f 0310 	mov.w	r3, #16
 80186a4:	f3ef 8511 	mrs	r5, BASEPRI
 80186a8:	f383 8811 	msr	BASEPRI, r3
 80186ac:	f3bf 8f6f 	isb	sy
	z_handle_obj_poll_events(&queue->poll_events, state);
 80186b0:	2108      	movs	r1, #8
 80186b2:	4620      	mov	r0, r4
 80186b4:	f000 fb9e 	bl	8018df4 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
 80186b8:	4629      	mov	r1, r5
 80186ba:	4620      	mov	r0, r4
}
 80186bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&queue->lock, key);
 80186c0:	f000 b8aa 	b.w	8018818 <z_reschedule>

080186c4 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
 80186c4:	460a      	mov	r2, r1
 80186c6:	2300      	movs	r3, #0
 80186c8:	6841      	ldr	r1, [r0, #4]
 80186ca:	f7ff bf81 	b.w	80185d0 <queue_insert>

080186ce <k_queue_prepend>:
			   data, false);
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, NULL, data, false);
 80186ce:	2300      	movs	r3, #0
 80186d0:	460a      	mov	r2, r1
 80186d2:	4619      	mov	r1, r3
 80186d4:	f7ff bf7c 	b.w	80185d0 <queue_insert>

080186d8 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
 80186d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186dc:	4604      	mov	r4, r0
 80186de:	b086      	sub	sp, #24
 80186e0:	460d      	mov	r5, r1
 80186e2:	f04f 0310 	mov.w	r3, #16
 80186e6:	f3ef 8711 	mrs	r7, BASEPRI
 80186ea:	f383 8811 	msr	BASEPRI, r3
 80186ee:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
 80186f2:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
 80186f4:	b188      	cbz	r0, 801871a <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 80186f6:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 80186f8:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 80186fa:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 80186fe:	4290      	cmp	r0, r2
	list->head = node;
 8018700:	6023      	str	r3, [r4, #0]
	list->tail = node;
 8018702:	bf08      	it	eq
 8018704:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
 8018706:	2101      	movs	r1, #1
 8018708:	f7ff ffb3 	bl	8018672 <z_queue_node_peek>
	__asm__ volatile(
 801870c:	f387 8811 	msr	BASEPRI, r7
 8018710:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
 8018714:	b006      	add	sp, #24
 8018716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
 801871a:	2900      	cmp	r1, #0
 801871c:	d0f6      	beq.n	801870c <z_impl_k_queue_get+0x34>
 801871e:	f387 8811 	msr	BASEPRI, r7
 8018722:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
 8018726:	2104      	movs	r1, #4
 8018728:	4602      	mov	r2, r0
 801872a:	4623      	mov	r3, r4
 801872c:	eb0d 0001 	add.w	r0, sp, r1
 8018730:	f7fa fbf2 	bl	8012f18 <k_poll_event_init>
	if (timeout != K_FOREVER) {
 8018734:	1c6a      	adds	r2, r5, #1
 8018736:	d002      	beq.n	801873e <z_impl_k_queue_get+0x66>
	return z_impl_k_uptime_get();
 8018738:	f000 fa2f 	bl	8018b9a <z_impl_k_uptime_get>
 801873c:	4606      	mov	r6, r0
{
 801873e:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
 8018740:	9b04      	ldr	r3, [sp, #16]
 8018742:	f36f 3310 	bfc	r3, #12, #5
 8018746:	9304      	str	r3, [sp, #16]
	return z_impl_k_poll(events, num_events, timeout);
 8018748:	2101      	movs	r1, #1
 801874a:	1bea      	subs	r2, r5, r7
 801874c:	a801      	add	r0, sp, #4
 801874e:	f7fa fbf7 	bl	8012f40 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
 8018752:	b118      	cbz	r0, 801875c <z_impl_k_queue_get+0x84>
 8018754:	300b      	adds	r0, #11
 8018756:	d001      	beq.n	801875c <z_impl_k_queue_get+0x84>
			return NULL;
 8018758:	2000      	movs	r0, #0
 801875a:	e7db      	b.n	8018714 <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
 801875c:	f04f 0310 	mov.w	r3, #16
 8018760:	f3ef 8811 	mrs	r8, BASEPRI
 8018764:	f383 8811 	msr	BASEPRI, r3
 8018768:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
 801876c:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
 801876e:	b138      	cbz	r0, 8018780 <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8018770:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8018772:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8018774:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8018778:	4290      	cmp	r0, r2
	list->head = node;
 801877a:	6023      	str	r3, [r4, #0]
	list->tail = node;
 801877c:	bf08      	it	eq
 801877e:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
 8018780:	2101      	movs	r1, #1
 8018782:	f7ff ff76 	bl	8018672 <z_queue_node_peek>
	__asm__ volatile(
 8018786:	f388 8811 	msr	BASEPRI, r8
 801878a:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
 801878e:	2800      	cmp	r0, #0
 8018790:	d1c0      	bne.n	8018714 <z_impl_k_queue_get+0x3c>
 8018792:	1c6b      	adds	r3, r5, #1
 8018794:	d0d4      	beq.n	8018740 <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
 8018796:	f000 fa00 	bl	8018b9a <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
 801879a:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
 801879c:	42bd      	cmp	r5, r7
 801879e:	dacf      	bge.n	8018740 <z_impl_k_queue_get+0x68>
 80187a0:	e7da      	b.n	8018758 <z_impl_k_queue_get+0x80>

080187a2 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80187a2:	7b43      	ldrb	r3, [r0, #13]
 80187a4:	06db      	lsls	r3, r3, #27
 80187a6:	bf03      	ittte	eq
 80187a8:	6980      	ldreq	r0, [r0, #24]
 80187aa:	fab0 f080 	clzeq	r0, r0
 80187ae:	0940      	lsreq	r0, r0, #5
 80187b0:	2000      	movne	r0, #0
}
 80187b2:	4770      	bx	lr

080187b4 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
 80187b4:	f990 000e 	ldrsb.w	r0, [r0, #14]
 80187b8:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
 80187bc:	4298      	cmp	r0, r3
 80187be:	bfac      	ite	ge
 80187c0:	2000      	movge	r0, #0
 80187c2:	2001      	movlt	r0, #1
 80187c4:	4770      	bx	lr

080187c6 <z_find_first_thread_to_unpend>:
{
 80187c6:	b510      	push	{r4, lr}
	__asm__ volatile(
 80187c8:	f04f 0310 	mov.w	r3, #16
 80187cc:	f3ef 8411 	mrs	r4, BASEPRI
 80187d0:	f383 8811 	msr	BASEPRI, r3
 80187d4:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
 80187d8:	f000 f85d 	bl	8018896 <z_priq_dumb_best>
	__asm__ volatile(
 80187dc:	f384 8811 	msr	BASEPRI, r4
 80187e0:	f3bf 8f6f 	isb	sy
}
 80187e4:	bd10      	pop	{r4, pc}

080187e6 <z_unpend_thread_no_timeout>:
{
 80187e6:	b538      	push	{r3, r4, r5, lr}
 80187e8:	4604      	mov	r4, r0
	__asm__ volatile(
 80187ea:	f04f 0310 	mov.w	r3, #16
 80187ee:	f3ef 8511 	mrs	r5, BASEPRI
 80187f2:	f383 8811 	msr	BASEPRI, r3
 80187f6:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 80187fa:	4601      	mov	r1, r0
 80187fc:	6880      	ldr	r0, [r0, #8]
 80187fe:	f7f9 fde7 	bl	80123d0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8018802:	7b63      	ldrb	r3, [r4, #13]
 8018804:	f023 0302 	bic.w	r3, r3, #2
 8018808:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 801880a:	f385 8811 	msr	BASEPRI, r5
 801880e:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8018812:	2300      	movs	r3, #0
 8018814:	60a3      	str	r3, [r4, #8]
}
 8018816:	bd38      	pop	{r3, r4, r5, pc}

08018818 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8018818:	b921      	cbnz	r1, 8018824 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801881a:	f3ef 8005 	mrs	r0, IPSR
 801881e:	b908      	cbnz	r0, 8018824 <z_reschedule+0xc>
 8018820:	f7f1 b8d8 	b.w	80099d4 <arch_swap>
 8018824:	f381 8811 	msr	BASEPRI, r1
 8018828:	f3bf 8f6f 	isb	sy
}
 801882c:	4770      	bx	lr

0801882e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 801882e:	4603      	mov	r3, r0
 8018830:	b920      	cbnz	r0, 801883c <z_reschedule_irqlock+0xe>
 8018832:	f3ef 8205 	mrs	r2, IPSR
 8018836:	b90a      	cbnz	r2, 801883c <z_reschedule_irqlock+0xe>
 8018838:	f7f1 b8cc 	b.w	80099d4 <arch_swap>
 801883c:	f383 8811 	msr	BASEPRI, r3
 8018840:	f3bf 8f6f 	isb	sy
}
 8018844:	4770      	bx	lr

08018846 <z_reschedule_unlocked>:
	__asm__ volatile(
 8018846:	f04f 0310 	mov.w	r3, #16
 801884a:	f3ef 8011 	mrs	r0, BASEPRI
 801884e:	f383 8811 	msr	BASEPRI, r3
 8018852:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8018856:	f7ff bfea 	b.w	801882e <z_reschedule_irqlock>

0801885a <z_unpend_thread>:
{
 801885a:	b538      	push	{r3, r4, r5, lr}
 801885c:	4604      	mov	r4, r0
 801885e:	f04f 0310 	mov.w	r3, #16
 8018862:	f3ef 8511 	mrs	r5, BASEPRI
 8018866:	f383 8811 	msr	BASEPRI, r3
 801886a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 801886e:	4601      	mov	r1, r0
 8018870:	6880      	ldr	r0, [r0, #8]
 8018872:	f7f9 fdad 	bl	80123d0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8018876:	7b63      	ldrb	r3, [r4, #13]
 8018878:	f023 0302 	bic.w	r3, r3, #2
 801887c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 801887e:	f385 8811 	msr	BASEPRI, r5
 8018882:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8018886:	2300      	movs	r3, #0
 8018888:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
 801888a:	f104 0018 	add.w	r0, r4, #24
}
 801888e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018892:	f000 b93e 	b.w	8018b12 <z_abort_timeout>

08018896 <z_priq_dumb_best>:
	return list->head == list;
 8018896:	6803      	ldr	r3, [r0, #0]
}
 8018898:	4298      	cmp	r0, r3
 801889a:	bf14      	ite	ne
 801889c:	4618      	movne	r0, r3
 801889e:	2000      	moveq	r0, #0
 80188a0:	4770      	bx	lr

080188a2 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
 80188a2:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
 80188a6:	b570      	push	{r4, r5, r6, lr}
 80188a8:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
 80188aa:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
 80188ae:	b1cb      	cbz	r3, 80188e4 <z_thread_timeout+0x42>
	__asm__ volatile(
 80188b0:	f04f 0310 	mov.w	r3, #16
 80188b4:	f3ef 8611 	mrs	r6, BASEPRI
 80188b8:	f383 8811 	msr	BASEPRI, r3
 80188bc:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 80188c0:	4629      	mov	r1, r5
 80188c2:	f850 0c10 	ldr.w	r0, [r0, #-16]
 80188c6:	f7f9 fd83 	bl	80123d0 <z_priq_dumb_remove>
 80188ca:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 80188ce:	f023 0302 	bic.w	r3, r3, #2
 80188d2:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
 80188d6:	f386 8811 	msr	BASEPRI, r6
 80188da:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 80188de:	2300      	movs	r3, #0
 80188e0:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 80188e4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 80188e8:	f023 0314 	bic.w	r3, r3, #20
 80188ec:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
 80188f0:	4628      	mov	r0, r5
 80188f2:	f7ff ff56 	bl	80187a2 <z_is_thread_ready>
 80188f6:	b120      	cbz	r0, 8018902 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
 80188f8:	4628      	mov	r0, r5
}
 80188fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80188fe:	f7f9 bdb7 	b.w	8012470 <z_add_thread_to_ready_q>
 8018902:	bd70      	pop	{r4, r5, r6, pc}

08018904 <z_unpend_first_thread>:
{
 8018904:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8018906:	f04f 0310 	mov.w	r3, #16
 801890a:	f3ef 8211 	mrs	r2, BASEPRI
 801890e:	f383 8811 	msr	BASEPRI, r3
 8018912:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
 8018916:	f7ff ffbe 	bl	8018896 <z_priq_dumb_best>
 801891a:	4604      	mov	r4, r0
	__asm__ volatile(
 801891c:	f382 8811 	msr	BASEPRI, r2
 8018920:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
 8018924:	b1c8      	cbz	r0, 801895a <z_unpend_first_thread+0x56>
	__asm__ volatile(
 8018926:	f04f 0310 	mov.w	r3, #16
 801892a:	f3ef 8511 	mrs	r5, BASEPRI
 801892e:	f383 8811 	msr	BASEPRI, r3
 8018932:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8018936:	4601      	mov	r1, r0
 8018938:	6880      	ldr	r0, [r0, #8]
 801893a:	f7f9 fd49 	bl	80123d0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 801893e:	7b63      	ldrb	r3, [r4, #13]
 8018940:	f023 0302 	bic.w	r3, r3, #2
 8018944:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 8018946:	f385 8811 	msr	BASEPRI, r5
 801894a:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 801894e:	2300      	movs	r3, #0
 8018950:	60a3      	str	r3, [r4, #8]
 8018952:	f104 0018 	add.w	r0, r4, #24
 8018956:	f000 f8dc 	bl	8018b12 <z_abort_timeout>
}
 801895a:	4620      	mov	r0, r4
 801895c:	bd38      	pop	{r3, r4, r5, pc}

0801895e <z_unpend_all>:
{
 801895e:	b570      	push	{r4, r5, r6, lr}
 8018960:	4606      	mov	r6, r0
	int need_sched = 0;
 8018962:	2500      	movs	r5, #0
 8018964:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8018966:	42a6      	cmp	r6, r4
 8018968:	d000      	beq.n	801896c <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
 801896a:	b90c      	cbnz	r4, 8018970 <z_unpend_all+0x12>
}
 801896c:	4628      	mov	r0, r5
 801896e:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
 8018970:	4620      	mov	r0, r4
 8018972:	f7ff ff72 	bl	801885a <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
 8018976:	4620      	mov	r0, r4
 8018978:	f7ff ff13 	bl	80187a2 <z_is_thread_ready>
		need_sched = 1;
 801897c:	2501      	movs	r5, #1
 801897e:	2800      	cmp	r0, #0
 8018980:	d0f0      	beq.n	8018964 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
 8018982:	4620      	mov	r0, r4
 8018984:	f7f9 fd74 	bl	8012470 <z_add_thread_to_ready_q>
 8018988:	e7ec      	b.n	8018964 <z_unpend_all+0x6>

0801898a <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
 801898a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
 801898e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 8018992:	e9c0 0000 	strd	r0, r0, [r0]
 8018996:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
 801899a:	4770      	bx	lr

0801899c <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 801899c:	7b43      	ldrb	r3, [r0, #13]
 801899e:	06db      	lsls	r3, r3, #27
 80189a0:	bf03      	ittte	eq
 80189a2:	6980      	ldreq	r0, [r0, #24]
 80189a4:	fab0 f080 	clzeq	r0, r0
 80189a8:	0940      	lsreq	r0, r0, #5
 80189aa:	2000      	movne	r0, #0
}
 80189ac:	4770      	bx	lr

080189ae <k_is_in_isr>:
 80189ae:	f3ef 8005 	mrs	r0, IPSR
}
 80189b2:	3000      	adds	r0, #0
 80189b4:	bf18      	it	ne
 80189b6:	2001      	movne	r0, #1
 80189b8:	4770      	bx	lr

080189ba <z_impl_k_thread_name_set>:
}
 80189ba:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80189be:	4770      	bx	lr

080189c0 <k_thread_name_get>:
}
 80189c0:	2000      	movs	r0, #0
 80189c2:	4770      	bx	lr

080189c4 <z_new_thread_init>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
 80189c4:	9a00      	ldr	r2, [sp, #0]
 80189c6:	7302      	strb	r2, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
 80189c8:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
 80189ca:	2204      	movs	r2, #4

	thread_base->sched_locked = 0U;
 80189cc:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
 80189ce:	7342      	strb	r2, [r0, #13]
	thread_base->sched_locked = 0U;
 80189d0:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
 80189d2:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
 80189d6:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
}
 80189da:	4770      	bx	lr

080189dc <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
 80189dc:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 80189de:	b510      	push	{r4, lr}
 80189e0:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
 80189e2:	b103      	cbz	r3, 80189e6 <z_thread_single_abort+0xa>
		thread->fn_abort();
 80189e4:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
 80189e6:	4620      	mov	r0, r4
 80189e8:	f7ff ffd8 	bl	801899c <z_is_thread_ready>
 80189ec:	b138      	cbz	r0, 80189fe <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
 80189ee:	4620      	mov	r0, r4
 80189f0:	f7f9 fdec 	bl	80125cc <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
 80189f4:	7b63      	ldrb	r3, [r4, #13]
 80189f6:	f043 0308 	orr.w	r3, r3, #8
 80189fa:	7363      	strb	r3, [r4, #13]
}
 80189fc:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
 80189fe:	7b63      	ldrb	r3, [r4, #13]
 8018a00:	079b      	lsls	r3, r3, #30
 8018a02:	d502      	bpl.n	8018a0a <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
 8018a04:	4620      	mov	r0, r4
 8018a06:	f7ff feee 	bl	80187e6 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
 8018a0a:	69a3      	ldr	r3, [r4, #24]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d0f1      	beq.n	80189f4 <z_thread_single_abort+0x18>
 8018a10:	f104 0018 	add.w	r0, r4, #24
 8018a14:	f000 f87d 	bl	8018b12 <z_abort_timeout>
 8018a18:	e7ec      	b.n	80189f4 <z_thread_single_abort+0x18>

08018a1a <k_work_submit_to_queue>:
{
 8018a1a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8018a1c:	f101 0308 	add.w	r3, r1, #8
 8018a20:	f3bf 8f5b 	dmb	ish
 8018a24:	e853 2f00 	ldrex	r2, [r3]
 8018a28:	f042 0c01 	orr.w	ip, r2, #1
 8018a2c:	e843 ce00 	strex	lr, ip, [r3]
 8018a30:	f1be 0f00 	cmp.w	lr, #0
 8018a34:	d1f6      	bne.n	8018a24 <k_work_submit_to_queue+0xa>
 8018a36:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8018a3a:	07d3      	lsls	r3, r2, #31
 8018a3c:	d403      	bmi.n	8018a46 <k_work_submit_to_queue+0x2c>
}
 8018a3e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
 8018a42:	f7ff be3f 	b.w	80186c4 <k_queue_append>
}
 8018a46:	f85d fb04 	ldr.w	pc, [sp], #4

08018a4a <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
 8018a4a:	f1a0 010c 	sub.w	r1, r0, #12
 8018a4e:	6900      	ldr	r0, [r0, #16]
 8018a50:	f7ff bfe3 	b.w	8018a1a <k_work_submit_to_queue>

08018a54 <work_cancel>:
{
 8018a54:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8018a56:	f3bf 8f5b 	dmb	ish
 8018a5a:	6883      	ldr	r3, [r0, #8]
 8018a5c:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
 8018a60:	07db      	lsls	r3, r3, #31
{
 8018a62:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
 8018a64:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
 8018a68:	d532      	bpl.n	8018ad0 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
 8018a6a:	69c2      	ldr	r2, [r0, #28]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
 8018a6c:	6813      	ldr	r3, [r2, #0]
 8018a6e:	2100      	movs	r1, #0
 8018a70:	b913      	cbnz	r3, 8018a78 <work_cancel+0x24>
			return -EINVAL;
 8018a72:	f06f 0015 	mvn.w	r0, #21
}
 8018a76:	bd70      	pop	{r4, r5, r6, pc}
 8018a78:	429c      	cmp	r4, r3
 8018a7a:	d124      	bne.n	8018ac6 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
 8018a7c:	6823      	ldr	r3, [r4, #0]
 8018a7e:	6856      	ldr	r6, [r2, #4]
 8018a80:	f023 0003 	bic.w	r0, r3, #3
 8018a84:	b9b1      	cbnz	r1, 8018ab4 <work_cancel+0x60>
 8018a86:	42b4      	cmp	r4, r6
	list->head = node;
 8018a88:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
 8018a8a:	d100      	bne.n	8018a8e <work_cancel+0x3a>
	list->tail = node;
 8018a8c:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8018a8e:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 8018a90:	f003 0303 	and.w	r3, r3, #3
 8018a94:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
 8018a96:	2000      	movs	r0, #0
 8018a98:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8018a9a:	f3bf 8f5b 	dmb	ish
 8018a9e:	e855 3f00 	ldrex	r3, [r5]
 8018aa2:	f023 0301 	bic.w	r3, r3, #1
 8018aa6:	e845 3200 	strex	r2, r3, [r5]
 8018aaa:	2a00      	cmp	r2, #0
 8018aac:	d1f7      	bne.n	8018a9e <work_cancel+0x4a>
 8018aae:	f3bf 8f5b 	dmb	ish
 8018ab2:	e7e0      	b.n	8018a76 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8018ab4:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 8018ab6:	f003 0303 	and.w	r3, r3, #3
 8018aba:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
 8018abc:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
 8018abe:	600b      	str	r3, [r1, #0]
	list->tail = node;
 8018ac0:	bf08      	it	eq
 8018ac2:	6051      	streq	r1, [r2, #4]
 8018ac4:	e7e3      	b.n	8018a8e <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8018ac6:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
 8018ac8:	4619      	mov	r1, r3
 8018aca:	f020 0303 	bic.w	r3, r0, #3
 8018ace:	e7cf      	b.n	8018a70 <work_cancel+0x1c>
		(void)z_abort_timeout(&work->timeout);
 8018ad0:	300c      	adds	r0, #12
 8018ad2:	f000 f81e 	bl	8018b12 <z_abort_timeout>
 8018ad6:	e7de      	b.n	8018a96 <work_cancel+0x42>

08018ad8 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 8018ad8:	2300      	movs	r3, #0
 8018ada:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
 8018ade:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
 8018ae2:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
 8018ae4:	61c3      	str	r3, [r0, #28]
}
 8018ae6:	4770      	bx	lr

08018ae8 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
 8018ae8:	69c3      	ldr	r3, [r0, #28]
{
 8018aea:	b510      	push	{r4, lr}
	if (!work->work_q) {
 8018aec:	b173      	cbz	r3, 8018b0c <k_delayed_work_cancel+0x24>
	__asm__ volatile(
 8018aee:	f04f 0310 	mov.w	r3, #16
 8018af2:	f3ef 8411 	mrs	r4, BASEPRI
 8018af6:	f383 8811 	msr	BASEPRI, r3
 8018afa:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
 8018afe:	f7ff ffa9 	bl	8018a54 <work_cancel>
	__asm__ volatile(
 8018b02:	f384 8811 	msr	BASEPRI, r4
 8018b06:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 8018b0a:	bd10      	pop	{r4, pc}
		return -EINVAL;
 8018b0c:	f06f 0015 	mvn.w	r0, #21
 8018b10:	e7fb      	b.n	8018b0a <k_delayed_work_cancel+0x22>

08018b12 <z_abort_timeout>:
{
 8018b12:	b510      	push	{r4, lr}
	__asm__ volatile(
 8018b14:	f04f 0210 	mov.w	r2, #16
 8018b18:	f3ef 8411 	mrs	r4, BASEPRI
 8018b1c:	f382 8811 	msr	BASEPRI, r2
 8018b20:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8018b24:	6803      	ldr	r3, [r0, #0]
 8018b26:	b13b      	cbz	r3, 8018b38 <z_abort_timeout+0x26>
			remove_timeout(to);
 8018b28:	f7fa f8aa 	bl	8012c80 <remove_timeout>
			ret = 0;
 8018b2c:	2000      	movs	r0, #0
	__asm__ volatile(
 8018b2e:	f384 8811 	msr	BASEPRI, r4
 8018b32:	f3bf 8f6f 	isb	sy
}
 8018b36:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8018b38:	f06f 0015 	mvn.w	r0, #21
 8018b3c:	e7f7      	b.n	8018b2e <z_abort_timeout+0x1c>

08018b3e <z_get_next_timeout_expiry>:
{
 8018b3e:	b510      	push	{r4, lr}
	__asm__ volatile(
 8018b40:	f04f 0310 	mov.w	r3, #16
 8018b44:	f3ef 8411 	mrs	r4, BASEPRI
 8018b48:	f383 8811 	msr	BASEPRI, r3
 8018b4c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 8018b50:	f7fa f8aa 	bl	8012ca8 <next_timeout>
	__asm__ volatile(
 8018b54:	f384 8811 	msr	BASEPRI, r4
 8018b58:	f3bf 8f6f 	isb	sy
}
 8018b5c:	bd10      	pop	{r4, pc}

08018b5e <z_set_timeout_expiry>:
{
 8018b5e:	b570      	push	{r4, r5, r6, lr}
 8018b60:	4604      	mov	r4, r0
 8018b62:	460e      	mov	r6, r1
	__asm__ volatile(
 8018b64:	f04f 0310 	mov.w	r3, #16
 8018b68:	f3ef 8511 	mrs	r5, BASEPRI
 8018b6c:	f383 8811 	msr	BASEPRI, r3
 8018b70:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
 8018b74:	f7fa f898 	bl	8012ca8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8018b78:	2801      	cmp	r0, #1
 8018b7a:	dd05      	ble.n	8018b88 <z_set_timeout_expiry+0x2a>
 8018b7c:	42a0      	cmp	r0, r4
 8018b7e:	dd03      	ble.n	8018b88 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
 8018b80:	4631      	mov	r1, r6
 8018b82:	4620      	mov	r0, r4
 8018b84:	f7f0 fe80 	bl	8009888 <z_clock_set_timeout>
	__asm__ volatile(
 8018b88:	f385 8811 	msr	BASEPRI, r5
 8018b8c:	f3bf 8f6f 	isb	sy
}
 8018b90:	bd70      	pop	{r4, r5, r6, pc}

08018b92 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
 8018b92:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
 8018b94:	f7fa f966 	bl	8012e64 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
 8018b98:	bd08      	pop	{r3, pc}

08018b9a <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
 8018b9a:	b508      	push	{r3, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
 8018b9c:	f7fa f962 	bl	8012e64 <z_tick_get>
			return t / (from_hz / to_hz);
 8018ba0:	220a      	movs	r2, #10
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	f7e9 f86e 	bl	8001c84 <__aeabi_uldivmod>
}
 8018ba8:	bd08      	pop	{r3, pc}

08018baa <k_timer_init>:
	timer->status = 0U;
 8018baa:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 8018bac:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8018bb0:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
 8018bb4:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
 8018bb6:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
 8018bba:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
 8018bbe:	6283      	str	r3, [r0, #40]	; 0x28
}
 8018bc0:	4770      	bx	lr

08018bc2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 8018bc2:	b510      	push	{r4, lr}
 8018bc4:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
 8018bc6:	f7ff ffa4 	bl	8018b12 <z_abort_timeout>

	if (inactive) {
 8018bca:	bb00      	cbnz	r0, 8018c0e <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
 8018bcc:	69e3      	ldr	r3, [r4, #28]
 8018bce:	b10b      	cbz	r3, 8018bd4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 8018bd0:	4620      	mov	r0, r4
 8018bd2:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
 8018bd4:	f104 0010 	add.w	r0, r4, #16
 8018bd8:	2100      	movs	r1, #0
 8018bda:	f7ff fdf4 	bl	80187c6 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
 8018bde:	4604      	mov	r4, r0
 8018be0:	b1a8      	cbz	r0, 8018c0e <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
 8018be2:	f7ff fe00 	bl	80187e6 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8018be6:	7b63      	ldrb	r3, [r4, #13]
 8018be8:	06db      	lsls	r3, r3, #27
 8018bea:	d104      	bne.n	8018bf6 <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
 8018bec:	69a3      	ldr	r3, [r4, #24]
 8018bee:	b913      	cbnz	r3, 8018bf6 <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
 8018bf0:	4620      	mov	r0, r4
 8018bf2:	f7f9 fc3d 	bl	8012470 <z_add_thread_to_ready_q>
	__asm__ volatile(
 8018bf6:	f04f 0310 	mov.w	r3, #16
 8018bfa:	f3ef 8011 	mrs	r0, BASEPRI
 8018bfe:	f383 8811 	msr	BASEPRI, r3
 8018c02:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
 8018c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 8018c0a:	f7ff be10 	b.w	801882e <z_reschedule_irqlock>
 8018c0e:	bd10      	pop	{r4, pc}

08018c10 <clear_event_registrations>:
	while (num_events--) {
 8018c10:	2314      	movs	r3, #20
{
 8018c12:	b570      	push	{r4, r5, r6, lr}
 8018c14:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
 8018c18:	2400      	movs	r4, #0
 8018c1a:	2601      	movs	r6, #1
	while (num_events--) {
 8018c1c:	4281      	cmp	r1, r0
 8018c1e:	d100      	bne.n	8018c22 <clear_event_registrations+0x12>
}
 8018c20:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
 8018c22:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
 8018c26:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
 8018c2a:	f003 030f 	and.w	r3, r3, #15
 8018c2e:	2b04      	cmp	r3, #4
 8018c30:	d80d      	bhi.n	8018c4e <clear_event_registrations+0x3e>
 8018c32:	fa06 f303 	lsl.w	r3, r6, r3
 8018c36:	f013 0f16 	tst.w	r3, #22
 8018c3a:	d008      	beq.n	8018c4e <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
 8018c3c:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8018c40:	b12b      	cbz	r3, 8018c4e <clear_event_registrations+0x3e>
	node->prev->next = node->next;
 8018c42:	f851 5c10 	ldr.w	r5, [r1, #-16]
 8018c46:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
 8018c48:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
 8018c4a:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
 8018c4e:	f382 8811 	msr	BASEPRI, r2
 8018c52:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8018c56:	f04f 0310 	mov.w	r3, #16
 8018c5a:	f3ef 8211 	mrs	r2, BASEPRI
 8018c5e:	f383 8811 	msr	BASEPRI, r3
 8018c62:	f3bf 8f6f 	isb	sy
 8018c66:	3914      	subs	r1, #20
 8018c68:	e7d8      	b.n	8018c1c <clear_event_registrations+0xc>

08018c6a <signal_poll_event>:
{
 8018c6a:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
 8018c6c:	6884      	ldr	r4, [r0, #8]
{
 8018c6e:	4605      	mov	r5, r0
 8018c70:	460e      	mov	r6, r1
	if (poller) {
 8018c72:	b19c      	cbz	r4, 8018c9c <signal_poll_event+0x32>
		if (poller->cb != NULL) {
 8018c74:	68a3      	ldr	r3, [r4, #8]
 8018c76:	b95b      	cbnz	r3, 8018c90 <signal_poll_event+0x26>
		poller->is_polling = false;
 8018c78:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
 8018c7a:	4618      	mov	r0, r3
	event->poller = NULL;
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	60ab      	str	r3, [r5, #8]
	event->state |= state;
 8018c80:	68eb      	ldr	r3, [r5, #12]
 8018c82:	f3c3 3204 	ubfx	r2, r3, #12, #5
 8018c86:	4316      	orrs	r6, r2
 8018c88:	f366 3310 	bfi	r3, r6, #12, #5
 8018c8c:	60eb      	str	r3, [r5, #12]
	return retcode;
 8018c8e:	e004      	b.n	8018c9a <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
 8018c90:	4798      	blx	r3
		poller->is_polling = false;
 8018c92:	2300      	movs	r3, #0
		if (retcode < 0) {
 8018c94:	2800      	cmp	r0, #0
		poller->is_polling = false;
 8018c96:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
 8018c98:	daf0      	bge.n	8018c7c <signal_poll_event+0x12>
}
 8018c9a:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
 8018c9c:	4620      	mov	r0, r4
 8018c9e:	e7ed      	b.n	8018c7c <signal_poll_event+0x12>

08018ca0 <k_poll_poller_cb>:
{
 8018ca0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
 8018ca2:	6883      	ldr	r3, [r0, #8]
 8018ca4:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
 8018ca6:	7b63      	ldrb	r3, [r4, #13]
 8018ca8:	079a      	lsls	r2, r3, #30
{
 8018caa:	460d      	mov	r5, r1
	if (!z_is_thread_pending(thread)) {
 8018cac:	d401      	bmi.n	8018cb2 <k_poll_poller_cb+0x12>
		return 0;
 8018cae:	2000      	movs	r0, #0
}
 8018cb0:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
 8018cb2:	6a23      	ldr	r3, [r4, #32]
 8018cb4:	3302      	adds	r3, #2
 8018cb6:	d012      	beq.n	8018cde <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
 8018cb8:	4620      	mov	r0, r4
 8018cba:	f7ff fdce 	bl	801885a <z_unpend_thread>
	arch_thread_return_value_set(thread,
 8018cbe:	2d08      	cmp	r5, #8
 8018cc0:	bf0c      	ite	eq
 8018cc2:	f06f 0303 	mvneq.w	r3, #3
 8018cc6:	2300      	movne	r3, #0
 8018cc8:	6623      	str	r3, [r4, #96]	; 0x60
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8018cca:	7b63      	ldrb	r3, [r4, #13]
 8018ccc:	06db      	lsls	r3, r3, #27
 8018cce:	d1ee      	bne.n	8018cae <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
 8018cd0:	69a5      	ldr	r5, [r4, #24]
 8018cd2:	2d00      	cmp	r5, #0
 8018cd4:	d1eb      	bne.n	8018cae <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
 8018cd6:	4620      	mov	r0, r4
 8018cd8:	f7f9 fbca 	bl	8012470 <z_add_thread_to_ready_q>
	return 0;
 8018cdc:	e7e7      	b.n	8018cae <k_poll_poller_cb+0xe>
		return -EAGAIN;
 8018cde:	f06f 000a 	mvn.w	r0, #10
 8018ce2:	e7e5      	b.n	8018cb0 <k_poll_poller_cb+0x10>

08018ce4 <add_event>:
{
 8018ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ce6:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8018ce8:	e9d0 2300 	ldrd	r2, r3, [r0]
 8018cec:	4290      	cmp	r0, r2
 8018cee:	4604      	mov	r4, r0
 8018cf0:	460d      	mov	r5, r1
 8018cf2:	d106      	bne.n	8018d02 <add_event+0x1e>
	node->prev = list->tail;
 8018cf4:	6863      	ldr	r3, [r4, #4]
 8018cf6:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
 8018cf8:	6863      	ldr	r3, [r4, #4]
	node->next = list;
 8018cfa:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
 8018cfc:	601d      	str	r5, [r3, #0]
	list->tail = node;
 8018cfe:	6065      	str	r5, [r4, #4]
}
 8018d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d0f6      	beq.n	8018cf4 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
 8018d06:	689b      	ldr	r3, [r3, #8]
 8018d08:	6879      	ldr	r1, [r7, #4]
 8018d0a:	6858      	ldr	r0, [r3, #4]
 8018d0c:	f7ff fd52 	bl	80187b4 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
 8018d10:	2800      	cmp	r0, #0
 8018d12:	d1ef      	bne.n	8018cf4 <add_event+0x10>
	return list->head == list;
 8018d14:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8018d16:	42b4      	cmp	r4, r6
 8018d18:	d0ec      	beq.n	8018cf4 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8018d1a:	2e00      	cmp	r6, #0
 8018d1c:	d0ea      	beq.n	8018cf4 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
 8018d1e:	68b3      	ldr	r3, [r6, #8]
 8018d20:	6878      	ldr	r0, [r7, #4]
 8018d22:	6859      	ldr	r1, [r3, #4]
 8018d24:	f7ff fd46 	bl	80187b4 <z_is_t1_higher_prio_than_t2>
 8018d28:	b128      	cbz	r0, 8018d36 <add_event+0x52>
	node->prev = successor->prev;
 8018d2a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
 8018d2c:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
 8018d30:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8018d32:	6075      	str	r5, [r6, #4]
			return;
 8018d34:	e7e4      	b.n	8018d00 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
 8018d36:	6863      	ldr	r3, [r4, #4]
 8018d38:	429e      	cmp	r6, r3
 8018d3a:	d0db      	beq.n	8018cf4 <add_event+0x10>
 8018d3c:	6836      	ldr	r6, [r6, #0]
 8018d3e:	e7ec      	b.n	8018d1a <add_event+0x36>

08018d40 <register_events>:
{
 8018d40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
 8018d44:	f04f 0b00 	mov.w	fp, #0
{
 8018d48:	4688      	mov	r8, r1
 8018d4a:	4615      	mov	r5, r2
 8018d4c:	4699      	mov	r9, r3
 8018d4e:	4604      	mov	r4, r0
	int events_registered = 0;
 8018d50:	465e      	mov	r6, fp
	event->poller = NULL;
 8018d52:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
 8018d54:	45c3      	cmp	fp, r8
 8018d56:	db02      	blt.n	8018d5e <register_events+0x1e>
}
 8018d58:	4630      	mov	r0, r6
 8018d5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d5e:	f04f 0310 	mov.w	r3, #16
 8018d62:	f3ef 8a11 	mrs	sl, BASEPRI
 8018d66:	f383 8811 	msr	BASEPRI, r3
 8018d6a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
 8018d6e:	7b63      	ldrb	r3, [r4, #13]
 8018d70:	f003 030f 	and.w	r3, r3, #15
 8018d74:	2b02      	cmp	r3, #2
 8018d76:	d005      	beq.n	8018d84 <register_events+0x44>
 8018d78:	2b04      	cmp	r3, #4
 8018d7a:	d006      	beq.n	8018d8a <register_events+0x4a>
 8018d7c:	2b01      	cmp	r3, #1
 8018d7e:	d118      	bne.n	8018db2 <register_events+0x72>
		if (event->signal->signaled != 0U) {
 8018d80:	6922      	ldr	r2, [r4, #16]
 8018d82:	e000      	b.n	8018d86 <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
 8018d84:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
 8018d86:	6892      	ldr	r2, [r2, #8]
 8018d88:	e001      	b.n	8018d8e <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
 8018d8a:	6922      	ldr	r2, [r4, #16]
 8018d8c:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
 8018d8e:	b182      	cbz	r2, 8018db2 <register_events+0x72>
	event->state |= state;
 8018d90:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
 8018d92:	60a7      	str	r7, [r4, #8]
	event->state |= state;
 8018d94:	f3c2 3104 	ubfx	r1, r2, #12, #5
 8018d98:	430b      	orrs	r3, r1
 8018d9a:	f363 3210 	bfi	r2, r3, #12, #5
 8018d9e:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
 8018da0:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
 8018da2:	f38a 8811 	msr	BASEPRI, sl
 8018da6:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 8018daa:	f10b 0b01 	add.w	fp, fp, #1
 8018dae:	3414      	adds	r4, #20
 8018db0:	e7d0      	b.n	8018d54 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
 8018db2:	f1b9 0f00 	cmp.w	r9, #0
 8018db6:	d1f4      	bne.n	8018da2 <register_events+0x62>
 8018db8:	782b      	ldrb	r3, [r5, #0]
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d0f1      	beq.n	8018da2 <register_events+0x62>
	switch (event->type) {
 8018dbe:	7b63      	ldrb	r3, [r4, #13]
 8018dc0:	f003 030f 	and.w	r3, r3, #15
 8018dc4:	2b02      	cmp	r3, #2
 8018dc6:	d007      	beq.n	8018dd8 <register_events+0x98>
 8018dc8:	2b04      	cmp	r3, #4
 8018dca:	d00e      	beq.n	8018dea <register_events+0xaa>
 8018dcc:	2b01      	cmp	r3, #1
 8018dce:	d109      	bne.n	8018de4 <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
 8018dd0:	462a      	mov	r2, r5
 8018dd2:	4621      	mov	r1, r4
 8018dd4:	6920      	ldr	r0, [r4, #16]
 8018dd6:	e003      	b.n	8018de0 <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
 8018dd8:	6920      	ldr	r0, [r4, #16]
 8018dda:	462a      	mov	r2, r5
 8018ddc:	4621      	mov	r1, r4
 8018dde:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
 8018de0:	f7ff ff80 	bl	8018ce4 <add_event>
	event->poller = poller;
 8018de4:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
 8018de6:	3601      	adds	r6, #1
 8018de8:	e7db      	b.n	8018da2 <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
 8018dea:	6920      	ldr	r0, [r4, #16]
 8018dec:	462a      	mov	r2, r5
 8018dee:	4621      	mov	r1, r4
 8018df0:	3008      	adds	r0, #8
 8018df2:	e7f5      	b.n	8018de0 <register_events+0xa0>

08018df4 <z_handle_obj_poll_events>:
	return list->head == list;
 8018df4:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 8018df6:	4298      	cmp	r0, r3
 8018df8:	d009      	beq.n	8018e0e <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
 8018dfa:	e9d3 2000 	ldrd	r2, r0, [r3]
 8018dfe:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
 8018e00:	6050      	str	r0, [r2, #4]
	node->next = NULL;
 8018e02:	2200      	movs	r2, #0
	node->prev = NULL;
 8018e04:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
 8018e08:	4618      	mov	r0, r3
 8018e0a:	f7ff bf2e 	b.w	8018c6a <signal_poll_event>
}
 8018e0e:	4770      	bx	lr

08018e10 <z_impl_k_poll_signal_init>:
	signal->signaled = 0U;
 8018e10:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
 8018e12:	e9c0 0000 	strd	r0, r0, [r0]
 8018e16:	6083      	str	r3, [r0, #8]
}
 8018e18:	4770      	bx	lr

08018e1a <z_impl_k_poll_signal_check>:
	*signaled = signal->signaled;
 8018e1a:	6883      	ldr	r3, [r0, #8]
 8018e1c:	600b      	str	r3, [r1, #0]
	*result = signal->result;
 8018e1e:	68c3      	ldr	r3, [r0, #12]
 8018e20:	6013      	str	r3, [r2, #0]
}
 8018e22:	4770      	bx	lr

08018e24 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 8018e24:	b508      	push	{r3, lr}
	__asm__ volatile(
 8018e26:	f04f 0210 	mov.w	r2, #16
 8018e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8018e2e:	f382 8811 	msr	BASEPRI, r2
 8018e32:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
 8018e36:	f7ff fe82 	bl	8018b3e <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 8018e3a:	2101      	movs	r1, #1
 8018e3c:	2802      	cmp	r0, #2
 8018e3e:	bfd8      	it	le
 8018e40:	4608      	movle	r0, r1
 8018e42:	f7ff fe8c 	bl	8018b5e <z_set_timeout_expiry>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8018e46:	f7f0 fe7b 	bl	8009b40 <arch_cpu_idle>
 8018e4a:	e7ec      	b.n	8018e26 <idle+0x2>

08018e4c <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
 8018e4c:	4770      	bx	lr
